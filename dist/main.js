(function () {
	'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
	}

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var localforage = createCommonjsModule(function (module, exports) {
	/*!
	    localForage -- Offline Storage, Improved
	    Version 1.6.0
	    https://localforage.github.io/localForage
	    (c) 2013-2017 Mozilla, Apache License 2.0
	*/
	(function(f){{module.exports=f();}})(function(){return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof commonjsRequire=="function"&&commonjsRequire;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw (f.code="MODULE_NOT_FOUND", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r);}return n[o].exports}var i=typeof commonjsRequire=="function"&&commonjsRequire;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	(function (global){
	var Mutation = global.MutationObserver || global.WebKitMutationObserver;

	var scheduleDrain;

	{
	  if (Mutation) {
	    var called = 0;
	    var observer = new Mutation(nextTick);
	    var element = global.document.createTextNode('');
	    observer.observe(element, {
	      characterData: true
	    });
	    scheduleDrain = function () {
	      element.data = (called = ++called % 2);
	    };
	  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
	    var channel = new global.MessageChannel();
	    channel.port1.onmessage = nextTick;
	    scheduleDrain = function () {
	      channel.port2.postMessage(0);
	    };
	  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
	    scheduleDrain = function () {

	      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	      var scriptEl = global.document.createElement('script');
	      scriptEl.onreadystatechange = function () {
	        nextTick();

	        scriptEl.onreadystatechange = null;
	        scriptEl.parentNode.removeChild(scriptEl);
	        scriptEl = null;
	      };
	      global.document.documentElement.appendChild(scriptEl);
	    };
	  } else {
	    scheduleDrain = function () {
	      setTimeout(nextTick, 0);
	    };
	  }
	}

	var draining;
	var queue = [];
	//named nextTick for less confusing stack traces
	function nextTick() {
	  draining = true;
	  var i, oldQueue;
	  var len = queue.length;
	  while (len) {
	    oldQueue = queue;
	    queue = [];
	    i = -1;
	    while (++i < len) {
	      oldQueue[i]();
	    }
	    len = queue.length;
	  }
	  draining = false;
	}

	module.exports = immediate;
	function immediate(task) {
	  if (queue.push(task) === 1 && !draining) {
	    scheduleDrain();
	  }
	}

	}).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	},{}],2:[function(_dereq_,module,exports){
	var immediate = _dereq_(1);

	/* istanbul ignore next */
	function INTERNAL() {}

	var handlers = {};

	var REJECTED = ['REJECTED'];
	var FULFILLED = ['FULFILLED'];
	var PENDING = ['PENDING'];

	module.exports = Promise;

	function Promise(resolver) {
	  if (typeof resolver !== 'function') {
	    throw new TypeError('resolver must be a function');
	  }
	  this.state = PENDING;
	  this.queue = [];
	  this.outcome = void 0;
	  if (resolver !== INTERNAL) {
	    safelyResolveThenable(this, resolver);
	  }
	}

	Promise.prototype["catch"] = function (onRejected) {
	  return this.then(null, onRejected);
	};
	Promise.prototype.then = function (onFulfilled, onRejected) {
	  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
	    typeof onRejected !== 'function' && this.state === REJECTED) {
	    return this;
	  }
	  var promise = new this.constructor(INTERNAL);
	  if (this.state !== PENDING) {
	    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
	    unwrap(promise, resolver, this.outcome);
	  } else {
	    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
	  }

	  return promise;
	};
	function QueueItem(promise, onFulfilled, onRejected) {
	  this.promise = promise;
	  if (typeof onFulfilled === 'function') {
	    this.onFulfilled = onFulfilled;
	    this.callFulfilled = this.otherCallFulfilled;
	  }
	  if (typeof onRejected === 'function') {
	    this.onRejected = onRejected;
	    this.callRejected = this.otherCallRejected;
	  }
	}
	QueueItem.prototype.callFulfilled = function (value) {
	  handlers.resolve(this.promise, value);
	};
	QueueItem.prototype.otherCallFulfilled = function (value) {
	  unwrap(this.promise, this.onFulfilled, value);
	};
	QueueItem.prototype.callRejected = function (value) {
	  handlers.reject(this.promise, value);
	};
	QueueItem.prototype.otherCallRejected = function (value) {
	  unwrap(this.promise, this.onRejected, value);
	};

	function unwrap(promise, func, value) {
	  immediate(function () {
	    var returnValue;
	    try {
	      returnValue = func(value);
	    } catch (e) {
	      return handlers.reject(promise, e);
	    }
	    if (returnValue === promise) {
	      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
	    } else {
	      handlers.resolve(promise, returnValue);
	    }
	  });
	}

	handlers.resolve = function (self, value) {
	  var result = tryCatch(getThen, value);
	  if (result.status === 'error') {
	    return handlers.reject(self, result.value);
	  }
	  var thenable = result.value;

	  if (thenable) {
	    safelyResolveThenable(self, thenable);
	  } else {
	    self.state = FULFILLED;
	    self.outcome = value;
	    var i = -1;
	    var len = self.queue.length;
	    while (++i < len) {
	      self.queue[i].callFulfilled(value);
	    }
	  }
	  return self;
	};
	handlers.reject = function (self, error) {
	  self.state = REJECTED;
	  self.outcome = error;
	  var i = -1;
	  var len = self.queue.length;
	  while (++i < len) {
	    self.queue[i].callRejected(error);
	  }
	  return self;
	};

	function getThen(obj) {
	  // Make sure we only access the accessor once as required by the spec
	  var then = obj && obj.then;
	  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
	    return function appyThen() {
	      then.apply(obj, arguments);
	    };
	  }
	}

	function safelyResolveThenable(self, thenable) {
	  // Either fulfill, reject or reject with error
	  var called = false;
	  function onError(value) {
	    if (called) {
	      return;
	    }
	    called = true;
	    handlers.reject(self, value);
	  }

	  function onSuccess(value) {
	    if (called) {
	      return;
	    }
	    called = true;
	    handlers.resolve(self, value);
	  }

	  function tryToUnwrap() {
	    thenable(onSuccess, onError);
	  }

	  var result = tryCatch(tryToUnwrap);
	  if (result.status === 'error') {
	    onError(result.value);
	  }
	}

	function tryCatch(func, value) {
	  var out = {};
	  try {
	    out.value = func(value);
	    out.status = 'success';
	  } catch (e) {
	    out.status = 'error';
	    out.value = e;
	  }
	  return out;
	}

	Promise.resolve = resolve;
	function resolve(value) {
	  if (value instanceof this) {
	    return value;
	  }
	  return handlers.resolve(new this(INTERNAL), value);
	}

	Promise.reject = reject;
	function reject(reason) {
	  var promise = new this(INTERNAL);
	  return handlers.reject(promise, reason);
	}

	Promise.all = all;
	function all(iterable) {
	  var self = this;
	  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
	    return this.reject(new TypeError('must be an array'));
	  }

	  var len = iterable.length;
	  var called = false;
	  if (!len) {
	    return this.resolve([]);
	  }

	  var values = new Array(len);
	  var resolved = 0;
	  var i = -1;
	  var promise = new this(INTERNAL);

	  while (++i < len) {
	    allResolver(iterable[i], i);
	  }
	  return promise;
	  function allResolver(value, i) {
	    self.resolve(value).then(resolveFromAll, function (error) {
	      if (!called) {
	        called = true;
	        handlers.reject(promise, error);
	      }
	    });
	    function resolveFromAll(outValue) {
	      values[i] = outValue;
	      if (++resolved === len && !called) {
	        called = true;
	        handlers.resolve(promise, values);
	      }
	    }
	  }
	}

	Promise.race = race;
	function race(iterable) {
	  var self = this;
	  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
	    return this.reject(new TypeError('must be an array'));
	  }

	  var len = iterable.length;
	  var called = false;
	  if (!len) {
	    return this.resolve([]);
	  }

	  var i = -1;
	  var promise = new this(INTERNAL);

	  while (++i < len) {
	    resolver(iterable[i]);
	  }
	  return promise;
	  function resolver(value) {
	    self.resolve(value).then(function (response) {
	      if (!called) {
	        called = true;
	        handlers.resolve(promise, response);
	      }
	    }, function (error) {
	      if (!called) {
	        called = true;
	        handlers.reject(promise, error);
	      }
	    });
	  }
	}

	},{"1":1}],3:[function(_dereq_,module,exports){
	(function (global){
	if (typeof global.Promise !== 'function') {
	  global.Promise = _dereq_(2);
	}

	}).call(this,typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	},{"2":2}],4:[function(_dereq_,module,exports){

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function getIDB() {
	    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
	    try {
	        if (typeof indexedDB !== 'undefined') {
	            return indexedDB;
	        }
	        if (typeof webkitIndexedDB !== 'undefined') {
	            return webkitIndexedDB;
	        }
	        if (typeof mozIndexedDB !== 'undefined') {
	            return mozIndexedDB;
	        }
	        if (typeof OIndexedDB !== 'undefined') {
	            return OIndexedDB;
	        }
	        if (typeof msIndexedDB !== 'undefined') {
	            return msIndexedDB;
	        }
	    } catch (e) {
	        return;
	    }
	}

	var idb = getIDB();

	function isIndexedDBValid() {
	    try {
	        // Initialize IndexedDB; fall back to vendor-prefixed versions
	        // if needed.
	        if (!idb) {
	            return false;
	        }
	        // We mimic PouchDB here;
	        //
	        // We test for openDatabase because IE Mobile identifies itself
	        // as Safari. Oh the lulz...
	        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);

	        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;

	        // Safari <10.1 does not meet our requirements for IDB support (#5572)
	        // since Safari 10.1 shipped with fetch, we can use that to detect it
	        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&
	        // some outdated implementations of IDB that appear on Samsung
	        // and HTC Android devices <4.4 are missing IDBKeyRange
	        // See: https://github.com/mozilla/localForage/issues/128
	        // See: https://github.com/mozilla/localForage/issues/272
	        typeof IDBKeyRange !== 'undefined';
	    } catch (e) {
	        return false;
	    }
	}

	// Abstracts constructing a Blob object, so it also works in older
	// browsers that don't support the native Blob constructor. (i.e.
	// old QtWebKit versions, at least).
	// Abstracts constructing a Blob object, so it also works in older
	// browsers that don't support the native Blob constructor. (i.e.
	// old QtWebKit versions, at least).
	function createBlob(parts, properties) {
	    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
	    parts = parts || [];
	    properties = properties || {};
	    try {
	        return new Blob(parts, properties);
	    } catch (e) {
	        if (e.name !== 'TypeError') {
	            throw e;
	        }
	        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
	        var builder = new Builder();
	        for (var i = 0; i < parts.length; i += 1) {
	            builder.append(parts[i]);
	        }
	        return builder.getBlob(properties.type);
	    }
	}

	// This is CommonJS because lie is an external dependency, so Rollup
	// can just ignore it.
	if (typeof Promise === 'undefined') {
	    // In the "nopromises" build this will just throw if you don't have
	    // a global promise object, but it would throw anyway later.
	    _dereq_(3);
	}
	var Promise$1 = Promise;

	function executeCallback(promise, callback) {
	    if (callback) {
	        promise.then(function (result) {
	            callback(null, result);
	        }, function (error) {
	            callback(error);
	        });
	    }
	}

	function executeTwoCallbacks(promise, callback, errorCallback) {
	    if (typeof callback === 'function') {
	        promise.then(callback);
	    }

	    if (typeof errorCallback === 'function') {
	        promise["catch"](errorCallback);
	    }
	}

	function normalizeKey(key) {
	    // Cast the key to a string, as that's all we can set as a key.
	    if (typeof key !== 'string') {
	        console.warn(key + ' used as a key, but it is not a string.');
	        key = String(key);
	    }

	    return key;
	}

	function getCallback() {
	    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
	        return arguments[arguments.length - 1];
	    }
	}

	// Some code originally from async_storage.js in
	// [Gaia](https://github.com/mozilla-b2g/gaia).

	var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
	var supportsBlobs = void 0;
	var dbContexts = {};
	var toString = Object.prototype.toString;

	// Transaction Modes
	var READ_ONLY = 'readonly';
	var READ_WRITE = 'readwrite';

	// Transform a binary string to an array buffer, because otherwise
	// weird stuff happens when you try to work with the binary string directly.
	// It is known.
	// From http://stackoverflow.com/questions/14967647/ (continues on next line)
	// encode-decode-image-with-base64-breaks-image (2013-04-21)
	function _binStringToArrayBuffer(bin) {
	    var length = bin.length;
	    var buf = new ArrayBuffer(length);
	    var arr = new Uint8Array(buf);
	    for (var i = 0; i < length; i++) {
	        arr[i] = bin.charCodeAt(i);
	    }
	    return buf;
	}

	//
	// Blobs are not supported in all versions of IndexedDB, notably
	// Chrome <37 and Android <5. In those versions, storing a blob will throw.
	//
	// Various other blob bugs exist in Chrome v37-42 (inclusive).
	// Detecting them is expensive and confusing to users, and Chrome 37-42
	// is at very low usage worldwide, so we do a hacky userAgent check instead.
	//
	// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
	// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
	// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
	//
	// Code borrowed from PouchDB. See:
	// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
	//
	function _checkBlobSupportWithoutCaching(idb) {
	    return new Promise$1(function (resolve) {
	        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
	        var blob = createBlob(['']);
	        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

	        txn.onabort = function (e) {
	            // If the transaction aborts now its due to not being able to
	            // write to the database, likely due to the disk being full
	            e.preventDefault();
	            e.stopPropagation();
	            resolve(false);
	        };

	        txn.oncomplete = function () {
	            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
	            var matchedEdge = navigator.userAgent.match(/Edge\//);
	            // MS Edge pretends to be Chrome 42:
	            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
	            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
	        };
	    })["catch"](function () {
	        return false; // error, so assume unsupported
	    });
	}

	function _checkBlobSupport(idb) {
	    if (typeof supportsBlobs === 'boolean') {
	        return Promise$1.resolve(supportsBlobs);
	    }
	    return _checkBlobSupportWithoutCaching(idb).then(function (value) {
	        supportsBlobs = value;
	        return supportsBlobs;
	    });
	}

	function _deferReadiness(dbInfo) {
	    var dbContext = dbContexts[dbInfo.name];

	    // Create a deferred object representing the current database operation.
	    var deferredOperation = {};

	    deferredOperation.promise = new Promise$1(function (resolve, reject) {
	        deferredOperation.resolve = resolve;
	        deferredOperation.reject = reject;
	    });

	    // Enqueue the deferred operation.
	    dbContext.deferredOperations.push(deferredOperation);

	    // Chain its promise to the database readiness.
	    if (!dbContext.dbReady) {
	        dbContext.dbReady = deferredOperation.promise;
	    } else {
	        dbContext.dbReady = dbContext.dbReady.then(function () {
	            return deferredOperation.promise;
	        });
	    }
	}

	function _advanceReadiness(dbInfo) {
	    var dbContext = dbContexts[dbInfo.name];

	    // Dequeue a deferred operation.
	    var deferredOperation = dbContext.deferredOperations.pop();

	    // Resolve its promise (which is part of the database readiness
	    // chain of promises).
	    if (deferredOperation) {
	        deferredOperation.resolve();
	        return deferredOperation.promise;
	    }
	}

	function _rejectReadiness(dbInfo, err) {
	    var dbContext = dbContexts[dbInfo.name];

	    // Dequeue a deferred operation.
	    var deferredOperation = dbContext.deferredOperations.pop();

	    // Reject its promise (which is part of the database readiness
	    // chain of promises).
	    if (deferredOperation) {
	        deferredOperation.reject(err);
	        return deferredOperation.promise;
	    }
	}

	function _getConnection(dbInfo, upgradeNeeded) {
	    return new Promise$1(function (resolve, reject) {
	        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();

	        if (dbInfo.db) {
	            if (upgradeNeeded) {
	                _deferReadiness(dbInfo);
	                dbInfo.db.close();
	            } else {
	                return resolve(dbInfo.db);
	            }
	        }

	        var dbArgs = [dbInfo.name];

	        if (upgradeNeeded) {
	            dbArgs.push(dbInfo.version);
	        }

	        var openreq = idb.open.apply(idb, dbArgs);

	        if (upgradeNeeded) {
	            openreq.onupgradeneeded = function (e) {
	                var db = openreq.result;
	                try {
	                    db.createObjectStore(dbInfo.storeName);
	                    if (e.oldVersion <= 1) {
	                        // Added when support for blob shims was added
	                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
	                    }
	                } catch (ex) {
	                    if (ex.name === 'ConstraintError') {
	                        console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
	                    } else {
	                        throw ex;
	                    }
	                }
	            };
	        }

	        openreq.onerror = function (e) {
	            e.preventDefault();
	            reject(openreq.error);
	        };

	        openreq.onsuccess = function () {
	            resolve(openreq.result);
	            _advanceReadiness(dbInfo);
	        };
	    });
	}

	function _getOriginalConnection(dbInfo) {
	    return _getConnection(dbInfo, false);
	}

	function _getUpgradedConnection(dbInfo) {
	    return _getConnection(dbInfo, true);
	}

	function _isUpgradeNeeded(dbInfo, defaultVersion) {
	    if (!dbInfo.db) {
	        return true;
	    }

	    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
	    var isDowngrade = dbInfo.version < dbInfo.db.version;
	    var isUpgrade = dbInfo.version > dbInfo.db.version;

	    if (isDowngrade) {
	        // If the version is not the default one
	        // then warn for impossible downgrade.
	        if (dbInfo.version !== defaultVersion) {
	            console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
	        }
	        // Align the versions to prevent errors.
	        dbInfo.version = dbInfo.db.version;
	    }

	    if (isUpgrade || isNewStore) {
	        // If the store is new then increment the version (if needed).
	        // This will trigger an "upgradeneeded" event which is required
	        // for creating a store.
	        if (isNewStore) {
	            var incVersion = dbInfo.db.version + 1;
	            if (incVersion > dbInfo.version) {
	                dbInfo.version = incVersion;
	            }
	        }

	        return true;
	    }

	    return false;
	}

	// encode a blob for indexeddb engines that don't support blobs
	function _encodeBlob(blob) {
	    return new Promise$1(function (resolve, reject) {
	        var reader = new FileReader();
	        reader.onerror = reject;
	        reader.onloadend = function (e) {
	            var base64 = btoa(e.target.result || '');
	            resolve({
	                __local_forage_encoded_blob: true,
	                data: base64,
	                type: blob.type
	            });
	        };
	        reader.readAsBinaryString(blob);
	    });
	}

	// decode an encoded blob
	function _decodeBlob(encodedBlob) {
	    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
	    return createBlob([arrayBuff], { type: encodedBlob.type });
	}

	// is this one of our fancy encoded blobs?
	function _isEncodedBlob(value) {
	    return value && value.__local_forage_encoded_blob;
	}

	// Specialize the default `ready()` function by making it dependent
	// on the current database operations. Thus, the driver will be actually
	// ready when it's been initialized (default) *and* there are no pending
	// operations on the database (initiated by some other instances).
	function _fullyReady(callback) {
	    var self = this;

	    var promise = self._initReady().then(function () {
	        var dbContext = dbContexts[self._dbInfo.name];

	        if (dbContext && dbContext.dbReady) {
	            return dbContext.dbReady;
	        }
	    });

	    executeTwoCallbacks(promise, callback, callback);
	    return promise;
	}

	// Try to establish a new db connection to replace the
	// current one which is broken (i.e. experiencing
	// InvalidStateError while creating a transaction).
	function _tryReconnect(dbInfo) {
	    _deferReadiness(dbInfo);

	    var dbContext = dbContexts[dbInfo.name];
	    var forages = dbContext.forages;

	    for (var i = 0; i < forages.length; i++) {
	        var forage = forages[i];
	        if (forage._dbInfo.db) {
	            forage._dbInfo.db.close();
	            forage._dbInfo.db = null;
	        }
	    }
	    dbInfo.db = null;

	    return _getOriginalConnection(dbInfo).then(function (db) {
	        dbInfo.db = db;
	        if (_isUpgradeNeeded(dbInfo)) {
	            // Reopen the database for upgrading.
	            return _getUpgradedConnection(dbInfo);
	        }
	        return db;
	    }).then(function (db) {
	        // store the latest db reference
	        // in case the db was upgraded
	        dbInfo.db = dbContext.db = db;
	        for (var i = 0; i < forages.length; i++) {
	            forages[i]._dbInfo.db = db;
	        }
	    })["catch"](function (err) {
	        _rejectReadiness(dbInfo, err);
	        throw err;
	    });
	}

	// FF doesn't like Promises (micro-tasks) and IDDB store operations,
	// so we have to do it with callbacks
	function createTransaction(dbInfo, mode, callback, retries) {
	    if (retries === undefined) {
	        retries = 1;
	    }

	    try {
	        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
	        callback(null, tx);
	    } catch (err) {
	        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {
	            return Promise$1.resolve().then(function () {
	                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
	                    // increase the db version, to create the new ObjectStore
	                    if (dbInfo.db) {
	                        dbInfo.version = dbInfo.db.version + 1;
	                    }
	                    // Reopen the database for upgrading.
	                    return _getUpgradedConnection(dbInfo);
	                }
	            }).then(function () {
	                return _tryReconnect(dbInfo).then(function () {
	                    createTransaction(dbInfo, mode, callback, retries - 1);
	                });
	            })["catch"](callback);
	        }

	        callback(err);
	    }
	}

	function createDbContext() {
	    return {
	        // Running localForages sharing a database.
	        forages: [],
	        // Shared database.
	        db: null,
	        // Database readiness (promise).
	        dbReady: null,
	        // Deferred operations on the database.
	        deferredOperations: []
	    };
	}

	// Open the IndexedDB database (automatically creates one if one didn't
	// previously exist), using any options set in the config.
	function _initStorage(options) {
	    var self = this;
	    var dbInfo = {
	        db: null
	    };

	    if (options) {
	        for (var i in options) {
	            dbInfo[i] = options[i];
	        }
	    }

	    // Get the current context of the database;
	    var dbContext = dbContexts[dbInfo.name];

	    // ...or create a new context.
	    if (!dbContext) {
	        dbContext = createDbContext();
	        // Register the new context in the global container.
	        dbContexts[dbInfo.name] = dbContext;
	    }

	    // Register itself as a running localForage in the current context.
	    dbContext.forages.push(self);

	    // Replace the default `ready()` function with the specialized one.
	    if (!self._initReady) {
	        self._initReady = self.ready;
	        self.ready = _fullyReady;
	    }

	    // Create an array of initialization states of the related localForages.
	    var initPromises = [];

	    function ignoreErrors() {
	        // Don't handle errors here,
	        // just makes sure related localForages aren't pending.
	        return Promise$1.resolve();
	    }

	    for (var j = 0; j < dbContext.forages.length; j++) {
	        var forage = dbContext.forages[j];
	        if (forage !== self) {
	            // Don't wait for itself...
	            initPromises.push(forage._initReady()["catch"](ignoreErrors));
	        }
	    }

	    // Take a snapshot of the related localForages.
	    var forages = dbContext.forages.slice(0);

	    // Initialize the connection process only when
	    // all the related localForages aren't pending.
	    return Promise$1.all(initPromises).then(function () {
	        dbInfo.db = dbContext.db;
	        // Get the connection or open a new one without upgrade.
	        return _getOriginalConnection(dbInfo);
	    }).then(function (db) {
	        dbInfo.db = db;
	        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
	            // Reopen the database for upgrading.
	            return _getUpgradedConnection(dbInfo);
	        }
	        return db;
	    }).then(function (db) {
	        dbInfo.db = dbContext.db = db;
	        self._dbInfo = dbInfo;
	        // Share the final connection amongst related localForages.
	        for (var k = 0; k < forages.length; k++) {
	            var forage = forages[k];
	            if (forage !== self) {
	                // Self is already up-to-date.
	                forage._dbInfo.db = dbInfo.db;
	                forage._dbInfo.version = dbInfo.version;
	            }
	        }
	    });
	}

	function getItem(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var req = store.get(key);

	                    req.onsuccess = function () {
	                        var value = req.result;
	                        if (value === undefined) {
	                            value = null;
	                        }
	                        if (_isEncodedBlob(value)) {
	                            value = _decodeBlob(value);
	                        }
	                        resolve(value);
	                    };

	                    req.onerror = function () {
	                        reject(req.error);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Iterate over all items stored in database.
	function iterate(iterator, callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var req = store.openCursor();
	                    var iterationNumber = 1;

	                    req.onsuccess = function () {
	                        var cursor = req.result;

	                        if (cursor) {
	                            var value = cursor.value;
	                            if (_isEncodedBlob(value)) {
	                                value = _decodeBlob(value);
	                            }
	                            var result = iterator(value, cursor.key, iterationNumber++);

	                            // when the iterator callback retuns any
	                            // (non-`undefined`) value, then we stop
	                            // the iteration immediately
	                            if (result !== void 0) {
	                                resolve(result);
	                            } else {
	                                cursor["continue"]();
	                            }
	                        } else {
	                            resolve();
	                        }
	                    };

	                    req.onerror = function () {
	                        reject(req.error);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);

	    return promise;
	}

	function setItem(key, value, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        var dbInfo;
	        self.ready().then(function () {
	            dbInfo = self._dbInfo;
	            if (toString.call(value) === '[object Blob]') {
	                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
	                    if (blobSupport) {
	                        return value;
	                    }
	                    return _encodeBlob(value);
	                });
	            }
	            return value;
	        }).then(function (value) {
	            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);

	                    // The reason we don't _save_ null is because IE 10 does
	                    // not support saving the `null` type in IndexedDB. How
	                    // ironic, given the bug below!
	                    // See: https://github.com/mozilla/localForage/issues/161
	                    if (value === null) {
	                        value = undefined;
	                    }

	                    var req = store.put(value, key);

	                    transaction.oncomplete = function () {
	                        // Cast to undefined so the value passed to
	                        // callback/promise is the same as what one would get out
	                        // of `getItem()` later. This leads to some weirdness
	                        // (setItem('foo', undefined) will return `null`), but
	                        // it's not my fault localStorage is our baseline and that
	                        // it's weird.
	                        if (value === undefined) {
	                            value = null;
	                        }

	                        resolve(value);
	                    };
	                    transaction.onabort = transaction.onerror = function () {
	                        var err = req.error ? req.error : req.transaction.error;
	                        reject(err);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function removeItem(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    // We use a Grunt task to make this safe for IE and some
	                    // versions of Android (including those used by Cordova).
	                    // Normally IE won't like `.delete()` and will insist on
	                    // using `['delete']()`, but we have a build step that
	                    // fixes this for us now.
	                    var req = store["delete"](key);
	                    transaction.oncomplete = function () {
	                        resolve();
	                    };

	                    transaction.onerror = function () {
	                        reject(req.error);
	                    };

	                    // The request will be also be aborted if we've exceeded our storage
	                    // space.
	                    transaction.onabort = function () {
	                        var err = req.error ? req.error : req.transaction.error;
	                        reject(err);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function clear(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var req = store.clear();

	                    transaction.oncomplete = function () {
	                        resolve();
	                    };

	                    transaction.onabort = transaction.onerror = function () {
	                        var err = req.error ? req.error : req.transaction.error;
	                        reject(err);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function length(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var req = store.count();

	                    req.onsuccess = function () {
	                        resolve(req.result);
	                    };

	                    req.onerror = function () {
	                        reject(req.error);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function key(n, callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        if (n < 0) {
	            resolve(null);

	            return;
	        }

	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var advanced = false;
	                    var req = store.openCursor();

	                    req.onsuccess = function () {
	                        var cursor = req.result;
	                        if (!cursor) {
	                            // this means there weren't enough keys
	                            resolve(null);

	                            return;
	                        }

	                        if (n === 0) {
	                            // We have the first key, return it if that's what they
	                            // wanted.
	                            resolve(cursor.key);
	                        } else {
	                            if (!advanced) {
	                                // Otherwise, ask the cursor to skip ahead n
	                                // records.
	                                advanced = true;
	                                cursor.advance(n);
	                            } else {
	                                // When we get here, we've got the nth key.
	                                resolve(cursor.key);
	                            }
	                        }
	                    };

	                    req.onerror = function () {
	                        reject(req.error);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function keys(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
	                if (err) {
	                    return reject(err);
	                }

	                try {
	                    var store = transaction.objectStore(self._dbInfo.storeName);
	                    var req = store.openCursor();
	                    var keys = [];

	                    req.onsuccess = function () {
	                        var cursor = req.result;

	                        if (!cursor) {
	                            resolve(keys);
	                            return;
	                        }

	                        keys.push(cursor.key);
	                        cursor["continue"]();
	                    };

	                    req.onerror = function () {
	                        reject(req.error);
	                    };
	                } catch (e) {
	                    reject(e);
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function dropInstance(options, callback) {
	    callback = getCallback.apply(this, arguments);

	    var currentConfig = this.config();
	    options = typeof options !== 'function' && options || {};
	    if (!options.name) {
	        options.name = options.name || currentConfig.name;
	        options.storeName = options.storeName || currentConfig.storeName;
	    }

	    var self = this;
	    var promise;
	    if (!options.name) {
	        promise = Promise$1.reject('Invalid arguments');
	    } else {
	        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;

	        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {
	            var dbContext = dbContexts[options.name];
	            var forages = dbContext.forages;
	            dbContext.db = db;
	            for (var i = 0; i < forages.length; i++) {
	                forages[i]._dbInfo.db = db;
	            }
	            return db;
	        });

	        if (!options.storeName) {
	            promise = dbPromise.then(function (db) {
	                _deferReadiness(options);

	                var dbContext = dbContexts[options.name];
	                var forages = dbContext.forages;

	                db.close();
	                for (var i = 0; i < forages.length; i++) {
	                    var forage = forages[i];
	                    forage._dbInfo.db = null;
	                }

	                var dropDBPromise = new Promise$1(function (resolve, reject) {
	                    var req = idb.deleteDatabase(options.name);

	                    req.onerror = req.onblocked = function (err) {
	                        var db = req.result;
	                        if (db) {
	                            db.close();
	                        }
	                        reject(err);
	                    };

	                    req.onsuccess = function () {
	                        var db = req.result;
	                        if (db) {
	                            db.close();
	                        }
	                        resolve(db);
	                    };
	                });

	                return dropDBPromise.then(function (db) {
	                    dbContext.db = db;
	                    for (var i = 0; i < forages.length; i++) {
	                        var _forage = forages[i];
	                        _advanceReadiness(_forage._dbInfo);
	                    }
	                })["catch"](function (err) {
	                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
	                    throw err;
	                });
	            });
	        } else {
	            promise = dbPromise.then(function (db) {
	                if (!db.objectStoreNames.contains(options.storeName)) {
	                    return;
	                }

	                var newVersion = db.version + 1;

	                _deferReadiness(options);

	                var dbContext = dbContexts[options.name];
	                var forages = dbContext.forages;

	                db.close();
	                for (var i = 0; i < forages.length; i++) {
	                    var forage = forages[i];
	                    forage._dbInfo.db = null;
	                    forage._dbInfo.version = newVersion;
	                }

	                var dropObjectPromise = new Promise$1(function (resolve, reject) {
	                    var req = idb.open(options.name, newVersion);

	                    req.onerror = function (err) {
	                        var db = req.result;
	                        db.close();
	                        reject(err);
	                    };

	                    req.onupgradeneeded = function () {
	                        var db = req.result;
	                        db.deleteObjectStore(options.storeName);
	                    };

	                    req.onsuccess = function () {
	                        var db = req.result;
	                        db.close();
	                        resolve(db);
	                    };
	                });

	                return dropObjectPromise.then(function (db) {
	                    dbContext.db = db;
	                    for (var j = 0; j < forages.length; j++) {
	                        var _forage2 = forages[j];
	                        _forage2._dbInfo.db = db;
	                        _advanceReadiness(_forage2._dbInfo);
	                    }
	                })["catch"](function (err) {
	                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
	                    throw err;
	                });
	            });
	        }
	    }

	    executeCallback(promise, callback);
	    return promise;
	}

	var asyncStorage = {
	    _driver: 'asyncStorage',
	    _initStorage: _initStorage,
	    _support: isIndexedDBValid(),
	    iterate: iterate,
	    getItem: getItem,
	    setItem: setItem,
	    removeItem: removeItem,
	    clear: clear,
	    length: length,
	    key: key,
	    keys: keys,
	    dropInstance: dropInstance
	};

	function isWebSQLValid() {
	    return typeof openDatabase === 'function';
	}

	// Sadly, the best way to save binary data in WebSQL/localStorage is serializing
	// it to Base64, so this is how we store it to prevent very strange errors with less
	// verbose ways of binary <-> string data storage.
	var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	var BLOB_TYPE_PREFIX = '~~local_forage_type~';
	var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;

	var SERIALIZED_MARKER = '__lfsc__:';
	var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

	// OMG the serializations!
	var TYPE_ARRAYBUFFER = 'arbf';
	var TYPE_BLOB = 'blob';
	var TYPE_INT8ARRAY = 'si08';
	var TYPE_UINT8ARRAY = 'ui08';
	var TYPE_UINT8CLAMPEDARRAY = 'uic8';
	var TYPE_INT16ARRAY = 'si16';
	var TYPE_INT32ARRAY = 'si32';
	var TYPE_UINT16ARRAY = 'ur16';
	var TYPE_UINT32ARRAY = 'ui32';
	var TYPE_FLOAT32ARRAY = 'fl32';
	var TYPE_FLOAT64ARRAY = 'fl64';
	var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;

	var toString$1 = Object.prototype.toString;

	function stringToBuffer(serializedString) {
	    // Fill the string into a ArrayBuffer.
	    var bufferLength = serializedString.length * 0.75;
	    var len = serializedString.length;
	    var i;
	    var p = 0;
	    var encoded1, encoded2, encoded3, encoded4;

	    if (serializedString[serializedString.length - 1] === '=') {
	        bufferLength--;
	        if (serializedString[serializedString.length - 2] === '=') {
	            bufferLength--;
	        }
	    }

	    var buffer = new ArrayBuffer(bufferLength);
	    var bytes = new Uint8Array(buffer);

	    for (i = 0; i < len; i += 4) {
	        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
	        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
	        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
	        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);

	        /*jslint bitwise: true */
	        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
	        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
	        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
	    }
	    return buffer;
	}

	// Converts a buffer to a string to store, serialized, in the backend
	// storage library.
	function bufferToString(buffer) {
	    // base64-arraybuffer
	    var bytes = new Uint8Array(buffer);
	    var base64String = '';
	    var i;

	    for (i = 0; i < bytes.length; i += 3) {
	        /*jslint bitwise: true */
	        base64String += BASE_CHARS[bytes[i] >> 2];
	        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
	        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
	        base64String += BASE_CHARS[bytes[i + 2] & 63];
	    }

	    if (bytes.length % 3 === 2) {
	        base64String = base64String.substring(0, base64String.length - 1) + '=';
	    } else if (bytes.length % 3 === 1) {
	        base64String = base64String.substring(0, base64String.length - 2) + '==';
	    }

	    return base64String;
	}

	// Serialize a value, afterwards executing a callback (which usually
	// instructs the `setItem()` callback/promise to be executed). This is how
	// we store binary data with localStorage.
	function serialize(value, callback) {
	    var valueType = '';
	    if (value) {
	        valueType = toString$1.call(value);
	    }

	    // Cannot use `value instanceof ArrayBuffer` or such here, as these
	    // checks fail when running the tests using casper.js...
	    //
	    // TODO: See why those tests fail and use a better solution.
	    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {
	        // Convert binary arrays to a string and prefix the string with
	        // a special marker.
	        var buffer;
	        var marker = SERIALIZED_MARKER;

	        if (value instanceof ArrayBuffer) {
	            buffer = value;
	            marker += TYPE_ARRAYBUFFER;
	        } else {
	            buffer = value.buffer;

	            if (valueType === '[object Int8Array]') {
	                marker += TYPE_INT8ARRAY;
	            } else if (valueType === '[object Uint8Array]') {
	                marker += TYPE_UINT8ARRAY;
	            } else if (valueType === '[object Uint8ClampedArray]') {
	                marker += TYPE_UINT8CLAMPEDARRAY;
	            } else if (valueType === '[object Int16Array]') {
	                marker += TYPE_INT16ARRAY;
	            } else if (valueType === '[object Uint16Array]') {
	                marker += TYPE_UINT16ARRAY;
	            } else if (valueType === '[object Int32Array]') {
	                marker += TYPE_INT32ARRAY;
	            } else if (valueType === '[object Uint32Array]') {
	                marker += TYPE_UINT32ARRAY;
	            } else if (valueType === '[object Float32Array]') {
	                marker += TYPE_FLOAT32ARRAY;
	            } else if (valueType === '[object Float64Array]') {
	                marker += TYPE_FLOAT64ARRAY;
	            } else {
	                callback(new Error('Failed to get type for BinaryArray'));
	            }
	        }

	        callback(marker + bufferToString(buffer));
	    } else if (valueType === '[object Blob]') {
	        // Conver the blob to a binaryArray and then to a string.
	        var fileReader = new FileReader();

	        fileReader.onload = function () {
	            // Backwards-compatible prefix for the blob type.
	            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);

	            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
	        };

	        fileReader.readAsArrayBuffer(value);
	    } else {
	        try {
	            callback(JSON.stringify(value));
	        } catch (e) {
	            console.error("Couldn't convert value into a JSON string: ", value);

	            callback(null, e);
	        }
	    }
	}

	// Deserialize data we've inserted into a value column/field. We place
	// special markers into our strings to mark them as encoded; this isn't
	// as nice as a meta field, but it's the only sane thing we can do whilst
	// keeping localStorage support intact.
	//
	// Oftentimes this will just deserialize JSON content, but if we have a
	// special marker (SERIALIZED_MARKER, defined above), we will extract
	// some kind of arraybuffer/binary data/typed array out of the string.
	function deserialize(value) {
	    // If we haven't marked this string as being specially serialized (i.e.
	    // something other than serialized JSON), we can just return it and be
	    // done with it.
	    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
	        return JSON.parse(value);
	    }

	    // The following code deals with deserializing some kind of Blob or
	    // TypedArray. First we separate out the type of data we're dealing
	    // with from the data itself.
	    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
	    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);

	    var blobType;
	    // Backwards-compatible blob type serialization strategy.
	    // DBs created with older versions of localForage will simply not have the blob type.
	    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
	        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
	        blobType = matcher[1];
	        serializedString = serializedString.substring(matcher[0].length);
	    }
	    var buffer = stringToBuffer(serializedString);

	    // Return the right type based on the code/type set during
	    // serialization.
	    switch (type) {
	        case TYPE_ARRAYBUFFER:
	            return buffer;
	        case TYPE_BLOB:
	            return createBlob([buffer], { type: blobType });
	        case TYPE_INT8ARRAY:
	            return new Int8Array(buffer);
	        case TYPE_UINT8ARRAY:
	            return new Uint8Array(buffer);
	        case TYPE_UINT8CLAMPEDARRAY:
	            return new Uint8ClampedArray(buffer);
	        case TYPE_INT16ARRAY:
	            return new Int16Array(buffer);
	        case TYPE_UINT16ARRAY:
	            return new Uint16Array(buffer);
	        case TYPE_INT32ARRAY:
	            return new Int32Array(buffer);
	        case TYPE_UINT32ARRAY:
	            return new Uint32Array(buffer);
	        case TYPE_FLOAT32ARRAY:
	            return new Float32Array(buffer);
	        case TYPE_FLOAT64ARRAY:
	            return new Float64Array(buffer);
	        default:
	            throw new Error('Unkown type: ' + type);
	    }
	}

	var localforageSerializer = {
	    serialize: serialize,
	    deserialize: deserialize,
	    stringToBuffer: stringToBuffer,
	    bufferToString: bufferToString
	};

	/*
	 * Includes code from:
	 *
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */

	function createDbTable(t, dbInfo, callback, errorCallback) {
	    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);
	}

	// Open the WebSQL database (automatically creates one if one didn't
	// previously exist), using any options set in the config.
	function _initStorage$1(options) {
	    var self = this;
	    var dbInfo = {
	        db: null
	    };

	    if (options) {
	        for (var i in options) {
	            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
	        }
	    }

	    var dbInfoPromise = new Promise$1(function (resolve, reject) {
	        // Open the database; the openDatabase API will automatically
	        // create it for us if it doesn't exist.
	        try {
	            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
	        } catch (e) {
	            return reject(e);
	        }

	        // Create our key/value table if it doesn't exist.
	        dbInfo.db.transaction(function (t) {
	            createDbTable(t, dbInfo, function () {
	                self._dbInfo = dbInfo;
	                resolve();
	            }, function (t, error) {
	                reject(error);
	            });
	        }, reject);
	    });

	    dbInfo.serializer = localforageSerializer;
	    return dbInfoPromise;
	}

	function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
	    t.executeSql(sqlStatement, args, callback, function (t, error) {
	        if (error.code === error.SYNTAX_ERR) {
	            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name = ?", [name], function (t, results) {
	                if (!results.rows.length) {
	                    // if the table is missing (was deleted)
	                    // re-create it table and retry
	                    createDbTable(t, dbInfo, function () {
	                        t.executeSql(sqlStatement, args, callback, errorCallback);
	                    }, errorCallback);
	                } else {
	                    errorCallback(t, error);
	                }
	            }, errorCallback);
	        } else {
	            errorCallback(t, error);
	        }
	    }, errorCallback);
	}

	function getItem$1(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
	                    var result = results.rows.length ? results.rows.item(0).value : null;

	                    // Check to see if this is serialized content we need to
	                    // unpack.
	                    if (result) {
	                        result = dbInfo.serializer.deserialize(result);
	                    }

	                    resolve(result);
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function iterate$1(iterator, callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;

	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
	                    var rows = results.rows;
	                    var length = rows.length;

	                    for (var i = 0; i < length; i++) {
	                        var item = rows.item(i);
	                        var result = item.value;

	                        // Check to see if this is serialized content
	                        // we need to unpack.
	                        if (result) {
	                            result = dbInfo.serializer.deserialize(result);
	                        }

	                        result = iterator(result, item.key, i + 1);

	                        // void(0) prevents problems with redefinition
	                        // of `undefined`.
	                        if (result !== void 0) {
	                            resolve(result);
	                            return;
	                        }
	                    }

	                    resolve();
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function _setItem(key, value, callback, retriesLeft) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            // The localStorage API doesn't return undefined values in an
	            // "expected" way, so undefined is always cast to null in all
	            // drivers. See: https://github.com/mozilla/localForage/pull/42
	            if (value === undefined) {
	                value = null;
	            }

	            // Save the original value to pass to the callback.
	            var originalValue = value;

	            var dbInfo = self._dbInfo;
	            dbInfo.serializer.serialize(value, function (value, error) {
	                if (error) {
	                    reject(error);
	                } else {
	                    dbInfo.db.transaction(function (t) {
	                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {
	                            resolve(originalValue);
	                        }, function (t, error) {
	                            reject(error);
	                        });
	                    }, function (sqlError) {
	                        // The transaction failed; check
	                        // to see if it's a quota error.
	                        if (sqlError.code === sqlError.QUOTA_ERR) {
	                            // We reject the callback outright for now, but
	                            // it's worth trying to re-run the transaction.
	                            // Even if the user accepts the prompt to use
	                            // more storage on Safari, this error will
	                            // be called.
	                            //
	                            // Try to re-run the transaction.
	                            if (retriesLeft > 0) {
	                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
	                                return;
	                            }
	                            reject(sqlError);
	                        }
	                    });
	                }
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function setItem$1(key, value, callback) {
	    return _setItem.apply(this, [key, value, callback, 1]);
	}

	function removeItem$1(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
	                    resolve();
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Deletes every item in the table.
	// TODO: Find out if this resets the AUTO_INCREMENT number.
	function clear$1(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {
	                    resolve();
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Does a simple `COUNT(key)` to get the number of items stored in
	// localForage.
	function length$1(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                // Ahhh, SQL makes this one soooooo easy.
	                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
	                    var result = results.rows.item(0).c;
	                    resolve(result);
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Return the key located at key index X; essentially gets the key from a
	// `WHERE id = ?`. This is the most efficient way I can think to implement
	// this rarely-used (in my experience) part of the API, but it can seem
	// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
	// the ID of each key will change every time it's updated. Perhaps a stored
	// procedure for the `setItem()` SQL would solve this problem?
	// TODO: Don't change ID on `setItem()`.
	function key$1(n, callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
	                    var result = results.rows.length ? results.rows.item(0).key : null;
	                    resolve(result);
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function keys$1(callback) {
	    var self = this;

	    var promise = new Promise$1(function (resolve, reject) {
	        self.ready().then(function () {
	            var dbInfo = self._dbInfo;
	            dbInfo.db.transaction(function (t) {
	                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
	                    var keys = [];

	                    for (var i = 0; i < results.rows.length; i++) {
	                        keys.push(results.rows.item(i).key);
	                    }

	                    resolve(keys);
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        })["catch"](reject);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// https://www.w3.org/TR/webdatabase/#databases
	// > There is no way to enumerate or delete the databases available for an origin from this API.
	function getAllStoreNames(db) {
	    return new Promise$1(function (resolve, reject) {
	        db.transaction(function (t) {
	            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (t, results) {
	                var storeNames = [];

	                for (var i = 0; i < results.rows.length; i++) {
	                    storeNames.push(results.rows.item(i).name);
	                }

	                resolve({
	                    db: db,
	                    storeNames: storeNames
	                });
	            }, function (t, error) {
	                reject(error);
	            });
	        }, function (sqlError) {
	            reject(sqlError);
	        });
	    });
	}

	function dropInstance$1(options, callback) {
	    callback = getCallback.apply(this, arguments);

	    var currentConfig = this.config();
	    options = typeof options !== 'function' && options || {};
	    if (!options.name) {
	        options.name = options.name || currentConfig.name;
	        options.storeName = options.storeName || currentConfig.storeName;
	    }

	    var self = this;
	    var promise;
	    if (!options.name) {
	        promise = Promise$1.reject('Invalid arguments');
	    } else {
	        promise = new Promise$1(function (resolve) {
	            var db;
	            if (options.name === currentConfig.name) {
	                // use the db reference of the current instance
	                db = self._dbInfo.db;
	            } else {
	                db = openDatabase(options.name, '', '', 0);
	            }

	            if (!options.storeName) {
	                // drop all database tables
	                resolve(getAllStoreNames(db));
	            } else {
	                resolve({
	                    db: db,
	                    storeNames: [options.storeName]
	                });
	            }
	        }).then(function (operationInfo) {
	            return new Promise$1(function (resolve, reject) {
	                operationInfo.db.transaction(function (t) {
	                    function dropTable(storeName) {
	                        return new Promise$1(function (resolve, reject) {
	                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {
	                                resolve();
	                            }, function (t, error) {
	                                reject(error);
	                            });
	                        });
	                    }

	                    var operations = [];
	                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
	                        operations.push(dropTable(operationInfo.storeNames[i]));
	                    }

	                    Promise$1.all(operations).then(function () {
	                        resolve();
	                    })["catch"](function (e) {
	                        reject(e);
	                    });
	                }, function (sqlError) {
	                    reject(sqlError);
	                });
	            });
	        });
	    }

	    executeCallback(promise, callback);
	    return promise;
	}

	var webSQLStorage = {
	    _driver: 'webSQLStorage',
	    _initStorage: _initStorage$1,
	    _support: isWebSQLValid(),
	    iterate: iterate$1,
	    getItem: getItem$1,
	    setItem: setItem$1,
	    removeItem: removeItem$1,
	    clear: clear$1,
	    length: length$1,
	    key: key$1,
	    keys: keys$1,
	    dropInstance: dropInstance$1
	};

	function isLocalStorageValid() {
	    try {
	        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&
	        // in IE8 typeof localStorage.setItem === 'object'
	        !!localStorage.setItem;
	    } catch (e) {
	        return false;
	    }
	}

	function _getKeyPrefix(options, defaultConfig) {
	    var keyPrefix = options.name + '/';

	    if (options.storeName !== defaultConfig.storeName) {
	        keyPrefix += options.storeName + '/';
	    }
	    return keyPrefix;
	}

	// Check if localStorage throws when saving an item
	function checkIfLocalStorageThrows() {
	    var localStorageTestKey = '_localforage_support_test';

	    try {
	        localStorage.setItem(localStorageTestKey, true);
	        localStorage.removeItem(localStorageTestKey);

	        return false;
	    } catch (e) {
	        return true;
	    }
	}

	// Check if localStorage is usable and allows to save an item
	// This method checks if localStorage is usable in Safari Private Browsing
	// mode, or in any other case where the available quota for localStorage
	// is 0 and there wasn't any saved items yet.
	function _isLocalStorageUsable() {
	    return !checkIfLocalStorageThrows() || localStorage.length > 0;
	}

	// Config the localStorage backend, using options set in the config.
	function _initStorage$2(options) {
	    var self = this;
	    var dbInfo = {};
	    if (options) {
	        for (var i in options) {
	            dbInfo[i] = options[i];
	        }
	    }

	    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);

	    if (!_isLocalStorageUsable()) {
	        return Promise$1.reject();
	    }

	    self._dbInfo = dbInfo;
	    dbInfo.serializer = localforageSerializer;

	    return Promise$1.resolve();
	}

	// Remove all keys from the datastore, effectively destroying all data in
	// the app's key/value store!
	function clear$2(callback) {
	    var self = this;
	    var promise = self.ready().then(function () {
	        var keyPrefix = self._dbInfo.keyPrefix;

	        for (var i = localStorage.length - 1; i >= 0; i--) {
	            var key = localStorage.key(i);

	            if (key.indexOf(keyPrefix) === 0) {
	                localStorage.removeItem(key);
	            }
	        }
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Retrieve an item from the store. Unlike the original async_storage
	// library in Gaia, we don't modify return values at all. If a key's value
	// is `undefined`, we pass that value to the callback function.
	function getItem$2(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = self.ready().then(function () {
	        var dbInfo = self._dbInfo;
	        var result = localStorage.getItem(dbInfo.keyPrefix + key);

	        // If a result was found, parse it from the serialized
	        // string into a JS object. If result isn't truthy, the key
	        // is likely undefined and we'll pass it straight to the
	        // callback.
	        if (result) {
	            result = dbInfo.serializer.deserialize(result);
	        }

	        return result;
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Iterate over all items in the store.
	function iterate$2(iterator, callback) {
	    var self = this;

	    var promise = self.ready().then(function () {
	        var dbInfo = self._dbInfo;
	        var keyPrefix = dbInfo.keyPrefix;
	        var keyPrefixLength = keyPrefix.length;
	        var length = localStorage.length;

	        // We use a dedicated iterator instead of the `i` variable below
	        // so other keys we fetch in localStorage aren't counted in
	        // the `iterationNumber` argument passed to the `iterate()`
	        // callback.
	        //
	        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
	        var iterationNumber = 1;

	        for (var i = 0; i < length; i++) {
	            var key = localStorage.key(i);
	            if (key.indexOf(keyPrefix) !== 0) {
	                continue;
	            }
	            var value = localStorage.getItem(key);

	            // If a result was found, parse it from the serialized
	            // string into a JS object. If result isn't truthy, the
	            // key is likely undefined and we'll pass it straight
	            // to the iterator.
	            if (value) {
	                value = dbInfo.serializer.deserialize(value);
	            }

	            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

	            if (value !== void 0) {
	                return value;
	            }
	        }
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Same as localStorage's key() method, except takes a callback.
	function key$2(n, callback) {
	    var self = this;
	    var promise = self.ready().then(function () {
	        var dbInfo = self._dbInfo;
	        var result;
	        try {
	            result = localStorage.key(n);
	        } catch (error) {
	            result = null;
	        }

	        // Remove the prefix from the key, if a key is found.
	        if (result) {
	            result = result.substring(dbInfo.keyPrefix.length);
	        }

	        return result;
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function keys$2(callback) {
	    var self = this;
	    var promise = self.ready().then(function () {
	        var dbInfo = self._dbInfo;
	        var length = localStorage.length;
	        var keys = [];

	        for (var i = 0; i < length; i++) {
	            var itemKey = localStorage.key(i);
	            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
	                keys.push(itemKey.substring(dbInfo.keyPrefix.length));
	            }
	        }

	        return keys;
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Supply the number of keys in the datastore to the callback function.
	function length$2(callback) {
	    var self = this;
	    var promise = self.keys().then(function (keys) {
	        return keys.length;
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Remove an item from the store, nice and simple.
	function removeItem$2(key, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = self.ready().then(function () {
	        var dbInfo = self._dbInfo;
	        localStorage.removeItem(dbInfo.keyPrefix + key);
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	// Set a key's value and run an optional callback once the value is set.
	// Unlike Gaia's implementation, the callback function is passed the value,
	// in case you want to operate on that value only after you're sure it
	// saved, or something like that.
	function setItem$2(key, value, callback) {
	    var self = this;

	    key = normalizeKey(key);

	    var promise = self.ready().then(function () {
	        // Convert undefined values to null.
	        // https://github.com/mozilla/localForage/pull/42
	        if (value === undefined) {
	            value = null;
	        }

	        // Save the original value to pass to the callback.
	        var originalValue = value;

	        return new Promise$1(function (resolve, reject) {
	            var dbInfo = self._dbInfo;
	            dbInfo.serializer.serialize(value, function (value, error) {
	                if (error) {
	                    reject(error);
	                } else {
	                    try {
	                        localStorage.setItem(dbInfo.keyPrefix + key, value);
	                        resolve(originalValue);
	                    } catch (e) {
	                        // localStorage capacity exceeded.
	                        // TODO: Make this a specific error/event.
	                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
	                            reject(e);
	                        }
	                        reject(e);
	                    }
	                }
	            });
	        });
	    });

	    executeCallback(promise, callback);
	    return promise;
	}

	function dropInstance$2(options, callback) {
	    callback = getCallback.apply(this, arguments);

	    options = typeof options !== 'function' && options || {};
	    if (!options.name) {
	        var currentConfig = this.config();
	        options.name = options.name || currentConfig.name;
	        options.storeName = options.storeName || currentConfig.storeName;
	    }

	    var self = this;
	    var promise;
	    if (!options.name) {
	        promise = Promise$1.reject('Invalid arguments');
	    } else {
	        promise = new Promise$1(function (resolve) {
	            if (!options.storeName) {
	                resolve(options.name + '/');
	            } else {
	                resolve(_getKeyPrefix(options, self._defaultConfig));
	            }
	        }).then(function (keyPrefix) {
	            for (var i = localStorage.length - 1; i >= 0; i--) {
	                var key = localStorage.key(i);

	                if (key.indexOf(keyPrefix) === 0) {
	                    localStorage.removeItem(key);
	                }
	            }
	        });
	    }

	    executeCallback(promise, callback);
	    return promise;
	}

	var localStorageWrapper = {
	    _driver: 'localStorageWrapper',
	    _initStorage: _initStorage$2,
	    _support: isLocalStorageValid(),
	    iterate: iterate$2,
	    getItem: getItem$2,
	    setItem: setItem$2,
	    removeItem: removeItem$2,
	    clear: clear$2,
	    length: length$2,
	    key: key$2,
	    keys: keys$2,
	    dropInstance: dropInstance$2
	};

	var sameValue = function sameValue(x, y) {
	    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
	};

	var includes = function includes(array, searchElement) {
	    var len = array.length;
	    var i = 0;
	    while (i < len) {
	        if (sameValue(array[i], searchElement)) {
	            return true;
	        }
	        i++;
	    }

	    return false;
	};

	var isArray = Array.isArray || function (arg) {
	    return Object.prototype.toString.call(arg) === '[object Array]';
	};

	// Drivers are stored here when `defineDriver()` is called.
	// They are shared across all instances of localForage.
	var DefinedDrivers = {};

	var DriverSupport = {};

	var DefaultDrivers = {
	    INDEXEDDB: asyncStorage,
	    WEBSQL: webSQLStorage,
	    LOCALSTORAGE: localStorageWrapper
	};

	var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];

	var OptionalDriverMethods = ['dropInstance'];

	var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);

	var DefaultConfig = {
	    description: '',
	    driver: DefaultDriverOrder.slice(),
	    name: 'localforage',
	    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
	    // we can use without a prompt.
	    size: 4980736,
	    storeName: 'keyvaluepairs',
	    version: 1.0
	};

	function callWhenReady(localForageInstance, libraryMethod) {
	    localForageInstance[libraryMethod] = function () {
	        var _args = arguments;
	        return localForageInstance.ready().then(function () {
	            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
	        });
	    };
	}

	function extend() {
	    for (var i = 1; i < arguments.length; i++) {
	        var arg = arguments[i];

	        if (arg) {
	            for (var _key in arg) {
	                if (arg.hasOwnProperty(_key)) {
	                    if (isArray(arg[_key])) {
	                        arguments[0][_key] = arg[_key].slice();
	                    } else {
	                        arguments[0][_key] = arg[_key];
	                    }
	                }
	            }
	        }
	    }

	    return arguments[0];
	}

	var LocalForage = function () {
	    function LocalForage(options) {
	        _classCallCheck(this, LocalForage);

	        for (var driverTypeKey in DefaultDrivers) {
	            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
	                var driver = DefaultDrivers[driverTypeKey];
	                var driverName = driver._driver;
	                this[driverTypeKey] = driverName;

	                if (!DefinedDrivers[driverName]) {
	                    // we don't need to wait for the promise,
	                    // since the default drivers can be defined
	                    // in a blocking manner
	                    this.defineDriver(driver);
	                }
	            }
	        }

	        this._defaultConfig = extend({}, DefaultConfig);
	        this._config = extend({}, this._defaultConfig, options);
	        this._driverSet = null;
	        this._initDriver = null;
	        this._ready = false;
	        this._dbInfo = null;

	        this._wrapLibraryMethodsWithReady();
	        this.setDriver(this._config.driver)["catch"](function () {});
	    }

	    // Set any config values for localForage; can be called anytime before
	    // the first API call (e.g. `getItem`, `setItem`).
	    // We loop through options so we don't overwrite existing config
	    // values.


	    LocalForage.prototype.config = function config(options) {
	        // If the options argument is an object, we use it to set values.
	        // Otherwise, we return either a specified config value or all
	        // config values.
	        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	            // If localforage is ready and fully initialized, we can't set
	            // any new configuration values. Instead, we return an error.
	            if (this._ready) {
	                return new Error("Can't call config() after localforage " + 'has been used.');
	            }

	            for (var i in options) {
	                if (i === 'storeName') {
	                    options[i] = options[i].replace(/\W/g, '_');
	                }

	                if (i === 'version' && typeof options[i] !== 'number') {
	                    return new Error('Database version must be a number.');
	                }

	                this._config[i] = options[i];
	            }

	            // after all config options are set and
	            // the driver option is used, try setting it
	            if ('driver' in options && options.driver) {
	                return this.setDriver(this._config.driver);
	            }

	            return true;
	        } else if (typeof options === 'string') {
	            return this._config[options];
	        } else {
	            return this._config;
	        }
	    };

	    // Used to define a custom driver, shared across all instances of
	    // localForage.


	    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
	        var promise = new Promise$1(function (resolve, reject) {
	            try {
	                var driverName = driverObject._driver;
	                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');

	                // A driver name should be defined and not overlap with the
	                // library-defined, default drivers.
	                if (!driverObject._driver) {
	                    reject(complianceError);
	                    return;
	                }

	                var driverMethods = LibraryMethods.concat('_initStorage');
	                for (var i = 0, len = driverMethods.length; i < len; i++) {
	                    var driverMethodName = driverMethods[i];

	                    // when the property is there,
	                    // it should be a method even when optional
	                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
	                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {
	                        reject(complianceError);
	                        return;
	                    }
	                }

	                var configureMissingMethods = function configureMissingMethods() {
	                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
	                        return function () {
	                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');
	                            var promise = Promise$1.reject(error);
	                            executeCallback(promise, arguments[arguments.length - 1]);
	                            return promise;
	                        };
	                    };

	                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
	                        var optionalDriverMethod = OptionalDriverMethods[_i];
	                        if (!driverObject[optionalDriverMethod]) {
	                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
	                        }
	                    }
	                };

	                configureMissingMethods();

	                var setDriverSupport = function setDriverSupport(support) {
	                    if (DefinedDrivers[driverName]) {
	                        console.info('Redefining LocalForage driver: ' + driverName);
	                    }
	                    DefinedDrivers[driverName] = driverObject;
	                    DriverSupport[driverName] = support;
	                    // don't use a then, so that we can define
	                    // drivers that have simple _support methods
	                    // in a blocking manner
	                    resolve();
	                };

	                if ('_support' in driverObject) {
	                    if (driverObject._support && typeof driverObject._support === 'function') {
	                        driverObject._support().then(setDriverSupport, reject);
	                    } else {
	                        setDriverSupport(!!driverObject._support);
	                    }
	                } else {
	                    setDriverSupport(true);
	                }
	            } catch (e) {
	                reject(e);
	            }
	        });

	        executeTwoCallbacks(promise, callback, errorCallback);
	        return promise;
	    };

	    LocalForage.prototype.driver = function driver() {
	        return this._driver || null;
	    };

	    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
	        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));

	        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
	        return getDriverPromise;
	    };

	    LocalForage.prototype.getSerializer = function getSerializer(callback) {
	        var serializerPromise = Promise$1.resolve(localforageSerializer);
	        executeTwoCallbacks(serializerPromise, callback);
	        return serializerPromise;
	    };

	    LocalForage.prototype.ready = function ready(callback) {
	        var self = this;

	        var promise = self._driverSet.then(function () {
	            if (self._ready === null) {
	                self._ready = self._initDriver();
	            }

	            return self._ready;
	        });

	        executeTwoCallbacks(promise, callback, callback);
	        return promise;
	    };

	    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
	        var self = this;

	        if (!isArray(drivers)) {
	            drivers = [drivers];
	        }

	        var supportedDrivers = this._getSupportedDrivers(drivers);

	        function setDriverToConfig() {
	            self._config.driver = self.driver();
	        }

	        function extendSelfWithDriver(driver) {
	            self._extend(driver);
	            setDriverToConfig();

	            self._ready = self._initStorage(self._config);
	            return self._ready;
	        }

	        function initDriver(supportedDrivers) {
	            return function () {
	                var currentDriverIndex = 0;

	                function driverPromiseLoop() {
	                    while (currentDriverIndex < supportedDrivers.length) {
	                        var driverName = supportedDrivers[currentDriverIndex];
	                        currentDriverIndex++;

	                        self._dbInfo = null;
	                        self._ready = null;

	                        return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
	                    }

	                    setDriverToConfig();
	                    var error = new Error('No available storage method found.');
	                    self._driverSet = Promise$1.reject(error);
	                    return self._driverSet;
	                }

	                return driverPromiseLoop();
	            };
	        }

	        // There might be a driver initialization in progress
	        // so wait for it to finish in order to avoid a possible
	        // race condition to set _dbInfo
	        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function () {
	            return Promise$1.resolve();
	        }) : Promise$1.resolve();

	        this._driverSet = oldDriverSetDone.then(function () {
	            var driverName = supportedDrivers[0];
	            self._dbInfo = null;
	            self._ready = null;

	            return self.getDriver(driverName).then(function (driver) {
	                self._driver = driver._driver;
	                setDriverToConfig();
	                self._wrapLibraryMethodsWithReady();
	                self._initDriver = initDriver(supportedDrivers);
	            });
	        })["catch"](function () {
	            setDriverToConfig();
	            var error = new Error('No available storage method found.');
	            self._driverSet = Promise$1.reject(error);
	            return self._driverSet;
	        });

	        executeTwoCallbacks(this._driverSet, callback, errorCallback);
	        return this._driverSet;
	    };

	    LocalForage.prototype.supports = function supports(driverName) {
	        return !!DriverSupport[driverName];
	    };

	    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
	        extend(this, libraryMethodsAndProperties);
	    };

	    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
	        var supportedDrivers = [];
	        for (var i = 0, len = drivers.length; i < len; i++) {
	            var driverName = drivers[i];
	            if (this.supports(driverName)) {
	                supportedDrivers.push(driverName);
	            }
	        }
	        return supportedDrivers;
	    };

	    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
	        // Add a stub for each driver API method that delays the call to the
	        // corresponding driver method until localForage is ready. These stubs
	        // will be replaced by the driver methods as soon as the driver is
	        // loaded, so there is no performance impact.
	        for (var i = 0, len = LibraryMethods.length; i < len; i++) {
	            callWhenReady(this, LibraryMethods[i]);
	        }
	    };

	    LocalForage.prototype.createInstance = function createInstance(options) {
	        return new LocalForage(options);
	    };

	    return LocalForage;
	}();

	// The actual localForage object that we expose as a module or via a
	// global. It's extended by pulling in one of our other libraries.


	var localforage_js = new LocalForage();

	module.exports = localforage_js;

	},{"3":3}]},{},[4])(4)
	});
	});

	function getSerializerPromise(localForageInstance) {
	    if (getSerializerPromise.result) {
	        return getSerializerPromise.result;
	    }
	    if (!localForageInstance || typeof localForageInstance.getSerializer !== 'function') {
	        return Promise.reject(new Error('localforage.getSerializer() was not available! ' + 'localforage v1.4+ is required!'));
	    }
	    getSerializerPromise.result = localForageInstance.getSerializer();
	    return getSerializerPromise.result;
	}



	function executeCallback(promise, callback) {
	    if (callback) {
	        promise.then(function (result) {
	            callback(null, result);
	        }, function (error) {
	            callback(error);
	        });
	    }
	    return promise;
	}

	function getItemKeyValue(key, callback) {
	    var localforageInstance = this;
	    var promise = localforageInstance.getItem(key).then(function (value) {
	        return {
	            key: key,
	            value: value
	        };
	    });
	    executeCallback(promise, callback);
	    return promise;
	}

	function getItemsGeneric(keys /*, callback*/) {
	    var localforageInstance = this;
	    var promise = new Promise(function (resolve, reject) {
	        var itemPromises = [];

	        for (var i = 0, len = keys.length; i < len; i++) {
	            itemPromises.push(getItemKeyValue.call(localforageInstance, keys[i]));
	        }

	        Promise.all(itemPromises).then(function (keyValuePairs) {
	            var result = {};
	            for (var i = 0, len = keyValuePairs.length; i < len; i++) {
	                var keyValuePair = keyValuePairs[i];

	                result[keyValuePair.key] = keyValuePair.value;
	            }
	            resolve(result);
	        }).catch(reject);
	    });
	    return promise;
	}





	function getAllItemsUsingIterate() {
	    var localforageInstance = this;
	    var accumulator = {};
	    return localforageInstance.iterate(function (value, key /*, iterationNumber*/) {
	        accumulator[key] = value;
	    }).then(function () {
	        return accumulator;
	    });
	}

	function getIDBKeyRange() {
	    /* global IDBKeyRange, webkitIDBKeyRange, mozIDBKeyRange */
	    if (typeof IDBKeyRange !== 'undefined') {
	        return IDBKeyRange;
	    }
	    if (typeof webkitIDBKeyRange !== 'undefined') {
	        return webkitIDBKeyRange;
	    }
	    if (typeof mozIDBKeyRange !== 'undefined') {
	        return mozIDBKeyRange;
	    }
	}

	var idbKeyRange = getIDBKeyRange();

	function getItemsIndexedDB(keys /*, callback*/) {
	    var localforageInstance = this;
	    function comparer(a, b) {
	        return a < b ? -1 : a > b ? 1 : 0;
	    }

	    var promise = new Promise(function (resolve, reject) {
	        localforageInstance.ready().then(function () {
	            // Thanks https://hacks.mozilla.org/2014/06/breaking-the-borders-of-indexeddb/
	            var dbInfo = localforageInstance._dbInfo;
	            var store = dbInfo.db.transaction(dbInfo.storeName, 'readonly').objectStore(dbInfo.storeName);

	            var set = keys.sort(comparer);

	            var keyRangeValue = idbKeyRange.bound(keys[0], keys[keys.length - 1], false, false);
	            var req = store.openCursor(keyRangeValue);
	            var result = {};
	            var i = 0;

	            req.onsuccess = function () /*event*/{
	                var cursor = req.result; // event.target.result;

	                if (!cursor) {
	                    resolve(result);
	                    return;
	                }

	                var key = cursor.key;

	                while (key > set[i]) {

	                    // The cursor has passed beyond this key. Check next.
	                    i++;

	                    if (i === set.length) {
	                        // There is no next. Stop searching.
	                        resolve(result);
	                        return;
	                    }
	                }

	                if (key === set[i]) {
	                    // The current cursor value should be included and we should continue
	                    // a single step in case next item has the same key or possibly our
	                    // next key in set.
	                    var value = cursor.value;
	                    if (value === undefined) {
	                        value = null;
	                    }

	                    result[key] = value;
	                    // onfound(cursor.value);
	                    cursor.continue();
	                } else {
	                    // cursor.key not yet at set[i]. Forward cursor to the next key to hunt for.
	                    cursor.continue(set[i]);
	                }
	            };

	            req.onerror = function () /*event*/{
	                reject(req.error);
	            };
	        }).catch(reject);
	    });
	    return promise;
	}

	function getItemsWebsql(keys /*, callback*/) {
	    var localforageInstance = this;
	    var promise = new Promise(function (resolve, reject) {
	        localforageInstance.ready().then(function () {
	            return getSerializerPromise(localforageInstance);
	        }).then(function (serializer) {
	            var dbInfo = localforageInstance._dbInfo;
	            dbInfo.db.transaction(function (t) {

	                var queryParts = new Array(keys.length);
	                for (var i = 0, len = keys.length; i < len; i++) {
	                    queryParts[i] = '?';
	                }

	                t.executeSql('SELECT * FROM ' + dbInfo.storeName + ' WHERE (key IN (' + queryParts.join(',') + '))', keys, function (t, results) {

	                    var result = {};

	                    var rows = results.rows;
	                    for (var i = 0, len = rows.length; i < len; i++) {
	                        var item = rows.item(i);
	                        var value = item.value;

	                        // Check to see if this is serialized content we need to
	                        // unpack.
	                        if (value) {
	                            value = serializer.deserialize(value);
	                        }

	                        result[item.key] = value;
	                    }

	                    resolve(result);
	                }, function (t, error) {
	                    reject(error);
	                });
	            });
	        }).catch(reject);
	    });
	    return promise;
	}

	function localforageGetItems(keys, callback) {
	    var localforageInstance = this;

	    var promise;
	    if (!arguments.length || keys === null) {
	        promise = getAllItemsUsingIterate.apply(localforageInstance);
	    } else {
	        var currentDriver = localforageInstance.driver();
	        if (currentDriver === localforageInstance.INDEXEDDB) {
	            promise = getItemsIndexedDB.apply(localforageInstance, arguments);
	        } else if (currentDriver === localforageInstance.WEBSQL) {
	            promise = getItemsWebsql.apply(localforageInstance, arguments);
	        } else {
	            promise = getItemsGeneric.apply(localforageInstance, arguments);
	        }
	    }

	    executeCallback(promise, callback);
	    return promise;
	}

	function extendPrototype(localforage$$1) {
	    var localforagePrototype = Object.getPrototypeOf(localforage$$1);
	    if (localforagePrototype) {
	        localforagePrototype.getItems = localforageGetItems;
	        localforagePrototype.getItems.indexedDB = function () {
	            return getItemsIndexedDB.apply(this, arguments);
	        };
	        localforagePrototype.getItems.websql = function () {
	            return getItemsWebsql.apply(this, arguments);
	        };
	        localforagePrototype.getItems.generic = function () {
	            return getItemsGeneric.apply(this, arguments);
	        };
	    }
	}

	var extendPrototypeResult = extendPrototype(localforage);

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Built-in value references. */
	var Symbol$1 = root.Symbol;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$1.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString$1.call(value);
	}

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag$1 && symToStringTag$1 in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto$2 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty$1.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}

	function symbolObservablePonyfill(root) {
		var result;
		var Symbol = root.Symbol;

		if (typeof Symbol === 'function') {
			if (Symbol.observable) {
				result = Symbol.observable;
			} else {
				result = Symbol('observable');
				Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	}

	/* global window */

	var root$1;

	if (typeof self !== 'undefined') {
	  root$1 = self;
	} else if (typeof window !== 'undefined') {
	  root$1 = window;
	} else if (typeof global !== 'undefined') {
	  root$1 = global;
	} else if (typeof module !== 'undefined') {
	  root$1 = module;
	} else {
	  root$1 = Function('return this')();
	}

	var result = symbolObservablePonyfill(root$1);

	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = {
	  INIT: '@@redux/INIT'

	  /**
	   * Creates a Redux store that holds the state tree.
	   * The only way to change the data in the store is to call `dispatch()` on it.
	   *
	   * There should only be a single store in your app. To specify how different
	   * parts of the state tree respond to actions, you may combine several reducers
	   * into a single reducer function by using `combineReducers`.
	   *
	   * @param {Function} reducer A function that returns the next state tree, given
	   * the current state tree and the action to handle.
	   *
	   * @param {any} [preloadedState] The initial state. You may optionally specify it
	   * to hydrate the state from the server in universal apps, or to restore a
	   * previously serialized user session.
	   * If you use `combineReducers` to produce the root reducer function, this must be
	   * an object with the same shape as `combineReducers` keys.
	   *
	   * @param {Function} [enhancer] The store enhancer. You may optionally specify it
	   * to enhance the store with third-party capabilities such as middleware,
	   * time travel, persistence, etc. The only store enhancer that ships with Redux
	   * is `applyMiddleware()`.
	   *
	   * @returns {Store} A Redux store that lets you read the state, dispatch actions
	   * and subscribe to changes.
	   */
	};function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;

	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }

	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }

	    return enhancer(createStore)(reducer, preloadedState);
	  }

	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }

	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;

	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }

	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }

	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }

	    var isSubscribed = true;

	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);

	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }

	      isSubscribed = false;

	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }

	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!isPlainObject(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }

	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }

	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }

	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }

	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      var listener = listeners[i];
	      listener();
	    }

	    return action;
	  }

	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }

	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }

	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/tc39/proposal-observable
	   */
	  function observable() {
	    var _ref;

	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if (typeof observer !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }

	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }

	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[result] = function () {
	      return this;
	    }, _ref;
	  }

	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });

	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[result] = observable, _ref2;
	}

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';

	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state. ' + 'If you want this reducer to hold no value, you can return null instead of undefined.';
	}

	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }

	  if (!isPlainObject(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }

	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });

	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });

	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}

	function assertReducerShape(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: ActionTypes.INIT });

	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined. If you don\'t want to set a value for this reducer, ' + 'you can use null instead of undefined.');
	    }

	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined, but can be null.');
	    }
	  });
	}

	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];

	    {
	      if (typeof reducers[key] === 'undefined') {
	        warning('No reducer provided for key "' + key + '"');
	      }
	    }

	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);

	  var unexpectedKeyCache = void 0;
	  {
	    unexpectedKeyCache = {};
	  }

	  var shapeAssertionError = void 0;
	  try {
	    assertReducerShape(finalReducers);
	  } catch (e) {
	    shapeAssertionError = e;
	  }

	  return function combination() {
	    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var action = arguments[1];

	    if (shapeAssertionError) {
	      throw shapeAssertionError;
	    }

	    {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
	      if (warningMessage) {
	        warning(warningMessage);
	      }
	    }

	    var hasChanged = false;
	    var nextState = {};
	    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
	      var _key = finalReducerKeys[_i];
	      var reducer = finalReducers[_key];
	      var previousStateForKey = state[_key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(_key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[_key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}

	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}

	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }

	  if (typeof actionCreators !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }

	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */

	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }

	  return function (createStore) {
	    return function (reducer, preloadedState, enhancer) {
	      var store = createStore(reducer, preloadedState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];

	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = compose.apply(undefined, chain)(store.dispatch);

	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}

	if ("development" !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  warning('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}

	var KEY_PREFIX = 'persist:';
	var FLUSH = 'persist/FLUSH';
	var REHYDRATE = 'persist/REHYDRATE';
	var PAUSE = 'persist/PAUSE';
	var PERSIST = 'persist/PERSIST';
	var PURGE = 'persist/PURGE';
	var REGISTER = 'persist/REGISTER';
	var DEFAULT_VERSION = -1;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function autoMergeLevel1(inboundState, originalState, reducedState, _ref) {
	  var debug = _ref.debug;

	  var newState = _extends$1({}, reducedState);
	  // only rehydrate if inboundState exists and is an object
	  if (inboundState && (typeof inboundState === 'undefined' ? 'undefined' : _typeof(inboundState)) === 'object') {
	    Object.keys(inboundState).forEach(function (key) {
	      // ignore _persist data
	      if (key === '_persist') return;
	      // if reducer modifies substate, skip auto rehydration
	      if (originalState[key] !== reducedState[key]) {
	        if ("development" !== 'production' && debug) console.log('redux-persist/stateReconciler: sub state for key `%s` modified, skipping.', key);
	        return;
	      }
	      // otherwise hard set the new value
	      newState[key] = inboundState[key];
	    });
	  }

	  if ("development" !== 'production' && debug && inboundState && (typeof inboundState === 'undefined' ? 'undefined' : _typeof(inboundState)) === 'object') console.log('redux-persist/stateReconciler: rehydrated keys \'' + Object.keys(inboundState).join(', ') + '\'');

	  return newState;
	}

	/*
	  autoMergeLevel1: 
	    - merges 1 level of substate
	    - skips substate if already modified
	*/

	// @TODO remove once flow < 0.63 support is no longer required.

	function createPersistoid(config) {
	  // defaults
	  var blacklist = config.blacklist || null;
	  var whitelist = config.whitelist || null;
	  var transforms = config.transforms || [];
	  var throttle = config.throttle || 0;
	  var storageKey = '' + (config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX) + config.key;
	  var storage = config.storage;
	  var serialize = config.serialize === false ? function (x) {
	    return x;
	  } : defaultSerialize;

	  // initialize stateful values
	  var lastState = {};
	  var stagedState = {};
	  var keysToProcess = [];
	  var timeIterator = null;
	  var writePromise = null;

	  var update = function update(state) {
	    // add any changed keys to the queue
	    Object.keys(state).forEach(function (key) {
	      var subState = state[key];
	      if (!passWhitelistBlacklist(key)) return; // is keyspace ignored? noop
	      if (lastState[key] === state[key]) return; // value unchanged? noop
	      if (keysToProcess.indexOf(key) !== -1) return; // is key already queued? noop
	      keysToProcess.push(key); // add key to queue
	    });

	    // start the time iterator if not running (read: throttle)
	    if (timeIterator === null) {
	      timeIterator = setInterval(processNextKey, throttle);
	    }

	    lastState = state;
	  };

	  function processNextKey() {
	    if (keysToProcess.length === 0) {
	      if (timeIterator) clearInterval(timeIterator);
	      timeIterator = null;
	      return;
	    }

	    var key = keysToProcess.shift();
	    var endState = transforms.reduce(function (subState, transformer) {
	      return transformer.in(subState, key, lastState);
	    }, lastState[key]);
	    if (typeof endState !== 'undefined') stagedWrite(key, endState);
	  }

	  function stagedWrite(key, endState) {
	    try {
	      stagedState[key] = serialize(endState);
	    } catch (err) {
	      console.error('redux-persist/createPersistoid: error serializing state', err);
	    }
	    if (keysToProcess.length === 0) {
	      // cleanup any removed keys just before write.
	      Object.keys(stagedState).forEach(function (key) {
	        if (lastState[key] === undefined) {
	          delete stagedState[key];
	        }
	      });

	      writePromise = storage.setItem(storageKey, serialize(stagedState)).catch(onWriteFail);
	    }
	  }

	  function passWhitelistBlacklist(key) {
	    if (whitelist && whitelist.indexOf(key) === -1 && key !== '_persist') return false;
	    if (blacklist && blacklist.indexOf(key) !== -1) return false;
	    return true;
	  }

	  function onWriteFail(err) {
	    // @TODO add fail handlers (typically storage full)
	    if (err && "development" !== 'production') {
	      console.error('Error storing data', err);
	    }
	  }

	  var flush = function flush() {
	    while (keysToProcess.length !== 0) {
	      processNextKey();
	    }
	    return writePromise || Promise.resolve();
	  };

	  // return `persistoid`
	  return {
	    update: update,
	    flush: flush
	  };
	}

	// @NOTE in the future this may be exposed via config
	function defaultSerialize(data) {
	  return JSON.stringify(data);
	}

	function getStoredState(config) {
	  var transforms = config.transforms || [];
	  var storageKey = '' + (config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX) + config.key;
	  var storage = config.storage;
	  var debug = config.debug;
	  var deserialize = config.serialize === false ? function (x) {
	    return x;
	  } : defaultDeserialize;
	  return storage.getItem(storageKey).then(function (serialized) {
	    if (!serialized) return undefined;else {
	      try {
	        var state = {};
	        var rawState = deserialize(serialized);
	        Object.keys(rawState).forEach(function (key) {
	          state[key] = transforms.reduceRight(function (subState, transformer) {
	            return transformer.out(subState, key, rawState);
	          }, deserialize(rawState[key]));
	        });
	        return state;
	      } catch (err) {
	        if ("development" !== 'production' && debug) console.log('redux-persist/getStoredState: Error restoring data ' + serialized, err);
	        throw err;
	      }
	    }
	  });
	}

	function defaultDeserialize(serial) {
	  return JSON.parse(serial);
	}

	function purgeStoredState(config) {
	  var storage = config.storage;
	  var storageKey = '' + (config.keyPrefix !== undefined ? config.keyPrefix : KEY_PREFIX) + config.key;
	  return storage.removeItem(storageKey, warnIfRemoveError);
	}

	function warnIfRemoveError(err) {
	  if (err && "development" !== 'production') {
	    console.error('redux-persist/purgeStoredState: Error purging data stored state', err);
	  }
	}

	var _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var DEFAULT_TIMEOUT = 5000;
	/*
	  @TODO add validation / handling for:
	  - persisting a reducer which has nested _persist
	  - handling actions that fire before reydrate is called
	*/
	function persistReducer(config, baseReducer) {
	  {
	    if (!config) throw new Error('config is required for persistReducer');
	    if (!config.key) throw new Error('key is required in persistor config');
	    if (!config.storage) throw new Error("redux-persist: config.storage is required. Try using one of the provided storage engines `import storageLocal from 'redux-persist/es/storage/local'");
	  }

	  var version = config.version !== undefined ? config.version : DEFAULT_VERSION;
	  var debug = config.debug || false;
	  var stateReconciler = config.stateReconciler === undefined ? autoMergeLevel1 : config.stateReconciler;
	  var getStoredState$$1 = config.getStoredState || getStoredState;
	  var timeout = config.timeout !== undefined ? config.timeout : DEFAULT_TIMEOUT;
	  var _persistoid = null;
	  var _purge = false;
	  var _paused = true;
	  var conditionalUpdate = function conditionalUpdate(state) {
	    // update the persistoid only if we are rehydrated and not paused
	    state._persist.rehydrated && _persistoid && !_paused && _persistoid.update(state);
	    return state;
	  };

	  return function (state, action) {
	    var _ref = state || {},
	        _persist = _ref._persist,
	        rest = _objectWithoutProperties(_ref, ['_persist']);

	    var restState = rest;

	    if (action.type === PERSIST) {
	      var _sealed = false;
	      var _rehydrate = function _rehydrate(payload, err) {
	        // dev warning if we are already sealed
	        if ("development" !== 'production' && _sealed) console.error('redux-persist: rehydrate for "' + config.key + '" called after timeout.', payload, err);

	        // only rehydrate if we are not already sealed
	        if (!_sealed) {
	          action.rehydrate(config.key, payload, err);
	          _sealed = true;
	        }
	      };
	      timeout && setTimeout(function () {
	        !_sealed && _rehydrate(undefined, new Error('redux-persist: persist timed out for persist key "' + config.key + '"'));
	      }, timeout);

	      // @NOTE PERSIST resumes if paused.
	      _paused = false;

	      // @NOTE only ever create persistoid once, ensure we call it at least once, even if _persist has already been set
	      if (!_persistoid) _persistoid = createPersistoid(config);

	      // @NOTE PERSIST can be called multiple times, noop after the first
	      if (_persist) return state;
	      if (typeof action.rehydrate !== 'function' || typeof action.register !== 'function') throw new Error('redux-persist: either rehydrate or register is not a function on the PERSIST action. This can happen if the action is being replayed. This is an unexplored use case, please open an issue and we will figure out a resolution.');

	      action.register(config.key);

	      getStoredState$$1(config).then(function (restoredState) {
	        var migrate = config.migrate || function (s, v) {
	          return Promise.resolve(s);
	        };
	        migrate(restoredState, version).then(function (migratedState) {
	          _rehydrate(migratedState);
	        }, function (migrateErr) {
	          if ("development" !== 'production' && migrateErr) console.error('redux-persist: migration error', migrateErr);
	          _rehydrate(undefined, migrateErr);
	        });
	      }, function (err) {
	        _rehydrate(undefined, err);
	      });

	      return _extends$2({}, baseReducer(restState, action), {
	        _persist: { version: version, rehydrated: false }
	      });
	    } else if (action.type === PURGE) {
	      _purge = true;
	      action.result(purgeStoredState(config));
	      return _extends$2({}, baseReducer(restState, action), {
	        _persist: _persist
	      });
	    } else if (action.type === FLUSH) {
	      action.result(_persistoid && _persistoid.flush());
	      return _extends$2({}, baseReducer(restState, action), {
	        _persist: _persist
	      });
	    } else if (action.type === PAUSE) {
	      _paused = true;
	    } else if (action.type === REHYDRATE) {
	      // noop on restState if purging
	      if (_purge) return _extends$2({}, restState, {
	        _persist: _extends$2({}, _persist, { rehydrated: true })

	        // @NOTE if key does not match, will continue to default else below
	      });if (action.key === config.key) {
	        var reducedState = baseReducer(restState, action);
	        var inboundState = action.payload;
	        // only reconcile state if stateReconciler and inboundState are both defined
	        var reconciledRest = stateReconciler !== false && inboundState !== undefined ? stateReconciler(inboundState, state, reducedState, config) : reducedState;

	        var _newState = _extends$2({}, reconciledRest, {
	          _persist: _extends$2({}, _persist, { rehydrated: true })
	        });
	        return conditionalUpdate(_newState);
	      }
	    }

	    // if we have not already handled PERSIST, straight passthrough
	    if (!_persist) return baseReducer(state, action);

	    // run base reducer:
	    // is state modified ? return original : return updated
	    var newState = baseReducer(restState, action);
	    if (newState === restState) return state;else {
	      newState._persist = _persist;
	      return conditionalUpdate(newState);
	    }
	  };
	}

	var _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var initialState = {
	  registry: [],
	  bootstrapped: false
	};

	var persistorReducer = function persistorReducer() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
	  var action = arguments[1];

	  switch (action.type) {
	    case REGISTER:
	      return _extends$4({}, state, { registry: [].concat(_toConsumableArray(state.registry), [action.key]) });
	    case REHYDRATE:
	      var firstIndex = state.registry.indexOf(action.key);
	      var registry = [].concat(_toConsumableArray(state.registry));
	      registry.splice(firstIndex, 1);
	      return _extends$4({}, state, { registry: registry, bootstrapped: registry.length === 0 });
	    default:
	      return state;
	  }
	};

	function persistStore(store, options, cb) {
	  // help catch incorrect usage of passing PersistConfig in as PersistorOptions
	  {
	    var optionsToTest = options || {};
	    var bannedKeys = ['blacklist', 'whitelist', 'transforms', 'storage', 'keyPrefix', 'migrate'];
	    bannedKeys.forEach(function (k) {
	      if (!!optionsToTest[k]) console.error('redux-persist: invalid option passed to persistStore: "' + k + '". You may be incorrectly passing persistConfig into persistStore, whereas it should be passed into persistReducer.');
	    });
	  }
	  var boostrappedCb = cb || false;

	  var _pStore = createStore(persistorReducer, initialState, options ? options.enhancer : undefined);
	  var register = function register(key) {
	    _pStore.dispatch({
	      type: REGISTER,
	      key: key
	    });
	  };

	  var rehydrate = function rehydrate(key, payload, err) {
	    var rehydrateAction = {
	      type: REHYDRATE,
	      payload: payload,
	      err: err,
	      key: key
	      // dispatch to `store` to rehydrate and `persistor` to track result
	    };store.dispatch(rehydrateAction);
	    _pStore.dispatch(rehydrateAction);
	    if (boostrappedCb && persistor.getState().bootstrapped) {
	      boostrappedCb();
	      boostrappedCb = false;
	    }
	  };

	  var persistor = _extends$4({}, _pStore, {
	    purge: function purge() {
	      var results = [];
	      store.dispatch({
	        type: PURGE,
	        result: function result(purgeResult) {
	          results.push(purgeResult);
	        }
	      });
	      return Promise.all(results);
	    },
	    flush: function flush() {
	      var results = [];
	      store.dispatch({
	        type: FLUSH,
	        result: function result(flushResult) {
	          results.push(flushResult);
	        }
	      });
	      return Promise.all(results);
	    },
	    pause: function pause() {
	      store.dispatch({
	        type: PAUSE
	      });
	    },
	    persist: function persist() {
	      store.dispatch({ type: PERSIST, register: register, rehydrate: rehydrate });
	    }
	  });

	  persistor.persist();

	  return persistor;
	}

	var reduxLogger = createCommonjsModule(function (module, exports) {
	!function(e,t){t(exports);}(commonjsGlobal,function(e){function t(e,t){e.super_=t, e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}});}function r(e,t){Object.defineProperty(this,"kind",{value:e,enumerable:!0}), t&&t.length&&Object.defineProperty(this,"path",{value:t,enumerable:!0});}function n(e,t,r){n.super_.call(this,"E",e), Object.defineProperty(this,"lhs",{value:t,enumerable:!0}), Object.defineProperty(this,"rhs",{value:r,enumerable:!0});}function o(e,t){o.super_.call(this,"N",e), Object.defineProperty(this,"rhs",{value:t,enumerable:!0});}function i(e,t){i.super_.call(this,"D",e), Object.defineProperty(this,"lhs",{value:t,enumerable:!0});}function a(e,t,r){a.super_.call(this,"A",e), Object.defineProperty(this,"index",{value:t,enumerable:!0}), Object.defineProperty(this,"item",{value:r,enumerable:!0});}function f(e,t,r){var n=e.slice((r||t)+1||e.length);return e.length=t<0?e.length+t:t, e.push.apply(e,n), e}function u(e){var t="undefined"==typeof e?"undefined":N(e);return"object"!==t?t:e===Math?"math":null===e?"null":Array.isArray(e)?"array":"[object Date]"===Object.prototype.toString.call(e)?"date":"function"==typeof e.toString&&/^\/.*\//.test(e.toString())?"regexp":"object"}function l(e,t,r,c,s,d,p){s=s||[], p=p||[];var g=s.slice(0);if("undefined"!=typeof d){if(c){if("function"==typeof c&&c(g,d))return;if("object"===("undefined"==typeof c?"undefined":N(c))){if(c.prefilter&&c.prefilter(g,d))return;if(c.normalize){var h=c.normalize(g,d,e,t);h&&(e=h[0], t=h[1]);}}}g.push(d);}"regexp"===u(e)&&"regexp"===u(t)&&(e=e.toString(), t=t.toString());var y="undefined"==typeof e?"undefined":N(e),v="undefined"==typeof t?"undefined":N(t),b="undefined"!==y||p&&p[p.length-1].lhs&&p[p.length-1].lhs.hasOwnProperty(d),m="undefined"!==v||p&&p[p.length-1].rhs&&p[p.length-1].rhs.hasOwnProperty(d);if(!b&&m)r(new o(g,t));else if(!m&&b)r(new i(g,e));else if(u(e)!==u(t))r(new n(g,e,t));else if("date"===u(e)&&e-t!==0)r(new n(g,e,t));else if("object"===y&&null!==e&&null!==t)if(p.filter(function(t){return t.lhs===e}).length)e!==t&&r(new n(g,e,t));else{if(p.push({lhs:e,rhs:t}), Array.isArray(e)){var w;e.length;for(w=0;w<e.length;w++)w>=t.length?r(new a(g,w,new i(void 0,e[w]))):l(e[w],t[w],r,c,g,w,p);for(;w<t.length;)r(new a(g,w,new o(void 0,t[w++])));}else{var x=Object.keys(e),S=Object.keys(t);x.forEach(function(n,o){var i=S.indexOf(n);i>=0?(l(e[n],t[n],r,c,g,n,p), S=f(S,i)):l(e[n],void 0,r,c,g,n,p);}), S.forEach(function(e){l(void 0,t[e],r,c,g,e,p);});}p.length=p.length-1;}else e!==t&&("number"===y&&isNaN(e)&&isNaN(t)||r(new n(g,e,t)));}function c(e,t,r,n){return n=n||[], l(e,t,function(e){e&&n.push(e);},r), n.length?n:void 0}function s(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":s(o[r.path[n]],r.index,r.item);break;case"D":delete o[r.path[n]];break;case"E":case"N":o[r.path[n]]=r.rhs;}}else switch(r.kind){case"A":s(e[t],r.index,r.item);break;case"D":e=f(e,t);break;case"E":case"N":e[t]=r.rhs;}return e}function d(e,t,r){if(e&&t&&r&&r.kind){for(var n=e,o=-1,i=r.path?r.path.length-1:0;++o<i;)"undefined"==typeof n[r.path[o]]&&(n[r.path[o]]="number"==typeof r.path[o]?[]:{}), n=n[r.path[o]];switch(r.kind){case"A":s(r.path?n[r.path[o]]:n,r.index,r.item);break;case"D":delete n[r.path[o]];break;case"E":case"N":n[r.path[o]]=r.rhs;}}}function p(e,t,r){if(r.path&&r.path.length){var n,o=e[t],i=r.path.length-1;for(n=0;n<i;n++)o=o[r.path[n]];switch(r.kind){case"A":p(o[r.path[n]],r.index,r.item);break;case"D":o[r.path[n]]=r.lhs;break;case"E":o[r.path[n]]=r.lhs;break;case"N":delete o[r.path[n]];}}else switch(r.kind){case"A":p(e[t],r.index,r.item);break;case"D":e[t]=r.lhs;break;case"E":e[t]=r.lhs;break;case"N":e=f(e,t);}return e}function g(e,t,r){if(e&&t&&r&&r.kind){var n,o,i=e;for(o=r.path.length-1, n=0;n<o;n++)"undefined"==typeof i[r.path[n]]&&(i[r.path[n]]={}), i=i[r.path[n]];switch(r.kind){case"A":p(i[r.path[n]],r.index,r.item);break;case"D":i[r.path[n]]=r.lhs;break;case"E":i[r.path[n]]=r.lhs;break;case"N":delete i[r.path[n]];}}}function h(e,t,r){if(e&&t){var n=function(n){r&&!r(e,t,n)||d(e,t,n);};l(e,t,n);}}function y(e){return"color: "+F[e].color+"; font-weight: bold"}function v(e){var t=e.kind,r=e.path,n=e.lhs,o=e.rhs,i=e.index,a=e.item;switch(t){case"E":return[r.join("."),n,"→",o];case"N":return[r.join("."),o];case"D":return[r.join(".")];case"A":return[r.join(".")+"["+i+"]",a];default:return[]}}function b(e,t,r,n){var o=c(e,t);try{n?r.groupCollapsed("diff"):r.group("diff");}catch(e){r.log("diff");}o?o.forEach(function(e){var t=e.kind,n=v(e);r.log.apply(r,["%c "+F[t].text,y(t)].concat(P(n)));}):r.log("—— no diff ——");try{r.groupEnd();}catch(e){r.log("—— diff end —— ");}}function m(e,t,r,n){switch("undefined"==typeof e?"undefined":N(e)){case"object":return"function"==typeof e[n]?e[n].apply(e,P(r)):e[n];case"function":return e(t);default:return e}}function w(e){var t=e.timestamp,r=e.duration;return function(e,n,o){var i=["action"];return i.push("%c"+String(e.type)), t&&i.push("%c@ "+n), r&&i.push("%c(in "+o.toFixed(2)+" ms)"), i.join(" ")}}function x(e,t){var r=t.logger,n=t.actionTransformer,o=t.titleFormatter,i=void 0===o?w(t):o,a=t.collapsed,f=t.colors,u=t.level,l=t.diff,c="undefined"==typeof t.titleFormatter;e.forEach(function(o,s){var d=o.started,p=o.startedTime,g=o.action,h=o.prevState,y=o.error,v=o.took,w=o.nextState,x=e[s+1];x&&(w=x.prevState, v=x.started-d);var S=n(g),k="function"==typeof a?a(function(){return w},g,o):a,j=D(p),E=f.title?"color: "+f.title(S)+";":"",A=["color: gray; font-weight: lighter;"];A.push(E), t.timestamp&&A.push("color: gray; font-weight: lighter;"), t.duration&&A.push("color: gray; font-weight: lighter;");var O=i(S,j,v);try{k?f.title&&c?r.groupCollapsed.apply(r,["%c "+O].concat(A)):r.groupCollapsed(O):f.title&&c?r.group.apply(r,["%c "+O].concat(A)):r.group(O);}catch(e){r.log(O);}var N=m(u,S,[h],"prevState"),P=m(u,S,[S],"action"),C=m(u,S,[y,h],"error"),F=m(u,S,[w],"nextState");if(N)if(f.prevState){var L="color: "+f.prevState(h)+"; font-weight: bold";r[N]("%c prev state",L,h);}else r[N]("prev state",h);if(P)if(f.action){var T="color: "+f.action(S)+"; font-weight: bold";r[P]("%c action    ",T,S);}else r[P]("action    ",S);if(y&&C)if(f.error){var M="color: "+f.error(y,h)+"; font-weight: bold;";r[C]("%c error     ",M,y);}else r[C]("error     ",y);if(F)if(f.nextState){var _="color: "+f.nextState(w)+"; font-weight: bold";r[F]("%c next state",_,w);}else r[F]("next state",w);l&&b(h,w,r,k);try{r.groupEnd();}catch(e){r.log("—— log end ——");}});}function S(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=Object.assign({},L,e),r=t.logger,n=t.stateTransformer,o=t.errorTransformer,i=t.predicate,a=t.logErrors,f=t.diffPredicate;if("undefined"==typeof r)return function(){return function(e){return function(t){return e(t)}}};if(e.getState&&e.dispatch)return console.error("[redux-logger] redux-logger not installed. Make sure to pass logger instance as middleware:\n// Logger with default options\nimport { logger } from 'redux-logger'\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n// Or you can create your own logger with custom options http://bit.ly/redux-logger-options\nimport createLogger from 'redux-logger'\nconst logger = createLogger({\n  // ...options\n});\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n)\n"), function(){return function(e){return function(t){return e(t)}}};var u=[];return function(e){var r=e.getState;return function(e){return function(l){if("function"==typeof i&&!i(r,l))return e(l);var c={};u.push(c), c.started=O.now(), c.startedTime=new Date, c.prevState=n(r()), c.action=l;var s=void 0;if(a)try{s=e(l);}catch(e){c.error=o(e);}else s=e(l);c.took=O.now()-c.started, c.nextState=n(r());var d=t.diff&&"function"==typeof f?f(r,l):t.diff;if(x(u,Object.assign({},t,{diff:d})), u.length=0, c.error)throw c.error;return s}}}}var k,j,E=function(e,t){return new Array(t+1).join(e)},A=function(e,t){return E("0",t-e.toString().length)+e},D=function(e){return A(e.getHours(),2)+":"+A(e.getMinutes(),2)+":"+A(e.getSeconds(),2)+"."+A(e.getMilliseconds(),3)},O="undefined"!=typeof performance&&null!==performance&&"function"==typeof performance.now?performance:Date,N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P=function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)},C=[];k="object"===("undefined"==typeof commonjsGlobal?"undefined":N(commonjsGlobal))&&commonjsGlobal?commonjsGlobal:"undefined"!=typeof window?window:{}, j=k.DeepDiff, j&&C.push(function(){"undefined"!=typeof j&&k.DeepDiff===c&&(k.DeepDiff=j, j=void 0);}), t(n,r), t(o,r), t(i,r), t(a,r), Object.defineProperties(c,{diff:{value:c,enumerable:!0},observableDiff:{value:l,enumerable:!0},applyDiff:{value:h,enumerable:!0},applyChange:{value:d,enumerable:!0},revertChange:{value:g,enumerable:!0},isConflict:{value:function(){return"undefined"!=typeof j},enumerable:!0},noConflict:{value:function(){return C&&(C.forEach(function(e){e();}), C=null), c},enumerable:!0}});var F={E:{color:"#2196F3",text:"CHANGED:"},N:{color:"#4CAF50",text:"ADDED:"},D:{color:"#F44336",text:"DELETED:"},A:{color:"#2196F3",text:"ARRAY:"}},L={level:"log",logger:console,logErrors:!0,collapsed:void 0,predicate:void 0,duration:!1,timestamp:!0,stateTransformer:function(e){return e},actionTransformer:function(e){return e},errorTransformer:function(e){return e},colors:{title:function(){return"inherit"},prevState:function(){return"#9E9E9E"},action:function(){return"#03A9F4"},nextState:function(){return"#4CAF50"},error:function(){return"#F20404"}},diff:!1,diffPredicate:void 0,transformer:void 0},T=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dispatch,r=e.getState;return"function"==typeof t||"function"==typeof r?S()({dispatch:t,getState:r}):void console.error("\n[redux-logger v3] BREAKING CHANGE\n[redux-logger v3] Since 3.0.0 redux-logger exports by default logger with default settings.\n[redux-logger v3] Change\n[redux-logger v3] import createLogger from 'redux-logger'\n[redux-logger v3] to\n[redux-logger v3] import { createLogger } from 'redux-logger'\n")};e.defaults=L, e.createLogger=S, e.logger=T, e.default=T, Object.defineProperty(e,"__esModule",{value:!0});});
	});

	var logger = unwrapExports(reduxLogger);

	const RECEIVE_HARDWARE_INFO = 'RECEIVE_HARDWARE_INFO';
	const STOP_TRACKING_HARDWARE_INFO = 'STOP_TRACKING_HARDWARE_INFO';

	const SET_MINING_ADDRESS = 'SET_MINING_ADDRESS';
	const SELECT_MINER = 'SELECT_MINER';
	const SET_MINING_SPEED = 'SET_MINING_SPEED';
	const SET_PROCESS_ID = 'SET_PROCESS_ID';
	const START_MINING = 'START_MINING';
	const STOP_MINING = 'STOP_MINING';
	const RECEIVE_MINING_METRICS = 'RECEIVE_MINING_METRICS';
	const REQUEST_MINING_METRICS = 'REQUEST_MINING_METRICS';

	const hardwareInfo = (state = {
	  isListening: false,
	  data: null
	}, { type, data }) => {
	  switch (type) {
	    case RECEIVE_HARDWARE_INFO:
	      return { isListening: true, data };
	    case STOP_TRACKING_HARDWARE_INFO:
	      return { isListening: false };
	    default:
	      return state;
	  }
	};

	const generateParser = regex => line => {
	  const result = {
	    timestamp: Date.now()
	  };
	  console.info(line);
	  const parsed = line.match(regex);
	  if (!parsed) return;
	  result.speed = parseFloat(parsed[1]);
	  return result;
	};

	const ethereumLogsStorage = localforage.createInstance({
	  name: 'Raccoon Miner',
	  storeName: 'ethereum-logs'
	});

	const ETHEREUM_MINER = 'ETHEREUM_MINER';
	const minerGroup = "0x799db2f010a5a9934eca801c5d702a7d96373b9d";
	const ethereum = {
	  name: 'Ethereum',
	  identifier: ETHEREUM_MINER,
	  logo: 'assets/ethereum.png',
	  currency: 'Ether',
	  minimumPaymentThreshold: 0.05,
	  parser: generateParser(/Speed\s+(.+)\sMh\/s/),
	  path: 'ethminer.exe',
	  args: `--farm-recheck 200 -G -S eu1.ethermine.org:4444 -FS us1.ethermine.org:4444 -O ${minerGroup}.XIGMA`,
	  environmentVariables: JSON.stringify({
	    GPU_FORCE_64BIT_PTR: '0',
	    GPU_MAX_HEAP_SIZE: '100',
	    GPU_USE_SYNC_OBJECTS: '1',
	    GPU_MAX_ALLOC_PERCENT: '100',
	    GPU_SINGLE_ALLOC_PERCENT: '100'
	  }),
	  api: {
	    workerStats: `https://api.ethermine.org/miner/${minerGroup}/worker/:workerId/currentStats`
	  },
	  storage: ethereumLogsStorage
	};

	//import { generateParser } from './_generateParser';

	const moneroLogsStorage = localforage.createInstance({
	  name: 'Raccoon Miner',
	  storeName: 'monero-logs'
	});

	const MONERO_MINER = 'MONERO_MINER';
	const minerGroup$1 = "47nCkeWhyJDEoaDPbtm7xc2QyQh2gbRMSdQ8V3NUyuFm6J3UuLiVGn57KjXhLAJD4SZ6jzcukSPRa3auNb1WTfmHRA8ikzr";
	const monero = {
	  disabled: true,
	  name: 'Monero',
	  identifier: MONERO_MINER,
	  logo: 'assets/monero.png',
	  currency: 'XMR',
	  minimumPaymentThreshold: 0.1,
	  parser: () => {},
	  path: '',
	  args: '',
	  environmentVariables: JSON.stringify({}),
	  api: {
	    workerStats: `https://supportxmr.com/api/miner/${minerGroup$1}/stats/:workerId`
	  },
	  storage: moneroLogsStorage
	};

	const getMiner = minerIdentifier => {
	  switch (minerIdentifier) {
	    case ETHEREUM_MINER:
	      return ethereum;
	    case MONERO_MINER:
	      return monero;
	  }
	};

	/** Detect free variable `global` from Node.js. */
	var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	var _freeGlobal = freeGlobal$1;

	/** Detect free variable `self`. */
	var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$2 = _freeGlobal || freeSelf$1 || Function('return this')();

	var _root = root$2;

	/** Built-in value references. */
	var Symbol$2 = _root.Symbol;

	var _Symbol = Symbol$2;

	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$2 = objectProto$3.toString;

	/** Built-in value references. */
	var symToStringTag$2 = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag$1(value) {
	  var isOwn = hasOwnProperty$2.call(value, symToStringTag$2),
	      tag = value[symToStringTag$2];

	  try {
	    value[symToStringTag$2] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString$2.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag$2] = tag;
	    } else {
	      delete value[symToStringTag$2];
	    }
	  }
	  return result;
	}

	var _getRawTag = getRawTag$1;

	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$3 = objectProto$4.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString$1(value) {
	  return nativeObjectToString$3.call(value);
	}

	var _objectToString = objectToString$1;

	/** `Object#toString` result references. */
	var nullTag$1 = '[object Null]',
	    undefinedTag$1 = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag$3 = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag$1(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag$1 : nullTag$1;
	  }
	  return (symToStringTag$3 && symToStringTag$3 in Object(value))
	    ? _getRawTag(value)
	    : _objectToString(value);
	}

	var _baseGetTag = baseGetTag$1;

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	var isObject_1 = isObject;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject_1(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = _baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	var isFunction_1 = isFunction;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = _root['__core-js_shared__'];

	var _coreJsData = coreJsData;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	var _isMasked = isMasked;

	/** Used for built-in method references. */
	var funcProto$1 = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString$1.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	var _toSource = toSource;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto$2 = Function.prototype,
	    objectProto$5 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$2 = funcProto$2.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$5.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString$2.call(hasOwnProperty$3).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject_1(value) || _isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(_toSource(value));
	}

	var _baseIsNative = baseIsNative;

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	var _getValue = getValue;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = _getValue(object, key);
	  return _baseIsNative(value) ? value : undefined;
	}

	var _getNative = getNative;

	var defineProperty = (function() {
	  try {
	    var func = _getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	var _defineProperty = defineProperty;

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && _defineProperty) {
	    _defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	var _baseAssignValue = baseAssignValue;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	var eq_1 = eq;

	/** Used for built-in method references. */
	var objectProto$6 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto$6.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty$4.call(object, key) && eq_1(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    _baseAssignValue(object, key, value);
	  }
	}

	var _assignValue = assignValue;

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	var isArray_1 = isArray;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike$1(value) {
	  return value != null && typeof value == 'object';
	}

	var isObjectLike_1 = isObjectLike$1;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
	}

	var isSymbol_1 = isSymbol;

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray_1(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol_1(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	var _isKey = isKey;

	/* Built-in method references that are verified to be native. */
	var nativeCreate = _getNative(Object, 'create');

	var _nativeCreate = nativeCreate;

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
	  this.size = 0;
	}

	var _hashClear = hashClear;

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _hashDelete = hashDelete;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto$7 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$5 = objectProto$7.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (_nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty$5.call(data, key) ? data[key] : undefined;
	}

	var _hashGet = hashGet;

	/** Used for built-in method references. */
	var objectProto$8 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$6.call(data, key);
	}

	var _hashHas = hashHas;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
	  return this;
	}

	var _hashSet = hashSet;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = _hashClear;
	Hash.prototype['delete'] = _hashDelete;
	Hash.prototype.get = _hashGet;
	Hash.prototype.has = _hashHas;
	Hash.prototype.set = _hashSet;

	var _Hash = Hash;

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	var _listCacheClear = listCacheClear;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq_1(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	var _assocIndexOf = assocIndexOf;

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	var _listCacheDelete = listCacheDelete;

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	var _listCacheGet = listCacheGet;

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return _assocIndexOf(this.__data__, key) > -1;
	}

	var _listCacheHas = listCacheHas;

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = _assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	var _listCacheSet = listCacheSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = _listCacheClear;
	ListCache.prototype['delete'] = _listCacheDelete;
	ListCache.prototype.get = _listCacheGet;
	ListCache.prototype.has = _listCacheHas;
	ListCache.prototype.set = _listCacheSet;

	var _ListCache = ListCache;

	/* Built-in method references that are verified to be native. */
	var Map$1 = _getNative(_root, 'Map');

	var _Map = Map$1;

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new _Hash,
	    'map': new (_Map || _ListCache),
	    'string': new _Hash
	  };
	}

	var _mapCacheClear = mapCacheClear;

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	var _isKeyable = isKeyable;

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return _isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	var _getMapData = getMapData;

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = _getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	var _mapCacheDelete = mapCacheDelete;

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return _getMapData(this, key).get(key);
	}

	var _mapCacheGet = mapCacheGet;

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return _getMapData(this, key).has(key);
	}

	var _mapCacheHas = mapCacheHas;

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = _getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	var _mapCacheSet = mapCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = _mapCacheClear;
	MapCache.prototype['delete'] = _mapCacheDelete;
	MapCache.prototype.get = _mapCacheGet;
	MapCache.prototype.has = _mapCacheHas;
	MapCache.prototype.set = _mapCacheSet;

	var _MapCache = MapCache;

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || _MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = _MapCache;

	var memoize_1 = memoize;

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize_1(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	var _memoizeCapped = memoizeCapped;

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = _memoizeCapped(function(string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	var _stringToPath = stringToPath;

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	var _arrayMap = arrayMap;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray_1(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return _arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol_1(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	var _baseToString = baseToString;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : _baseToString(value);
	}

	var toString_1 = toString;

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray_1(value)) {
	    return value;
	  }
	  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
	}

	var _castPath = castPath;

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	var _isIndex = isIndex;

	/** Used as references for various `Number` constants. */
	var INFINITY$1 = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol_1(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
	}

	var _toKey = toKey;

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!isObject_1(object)) {
	    return object;
	  }
	  path = _castPath(path, object);

	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = _toKey(path[index]),
	        newValue = value;

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject_1(objValue)
	          ? objValue
	          : (_isIndex(path[index + 1]) ? [] : {});
	      }
	    }
	    _assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}

	var _baseSet = baseSet;

	/**
	 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
	 * it's created. Arrays are created for missing index properties while objects
	 * are created for all other missing properties. Use `_.setWith` to customize
	 * `path` creation.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.set(object, 'a[0].b.c', 4);
	 * console.log(object.a[0].b.c);
	 * // => 4
	 *
	 * _.set(object, ['x', '0', 'y', 'z'], 5);
	 * console.log(object.x[0].y.z);
	 * // => 5
	 */
	function set(object, path, value) {
	  return object == null ? object : _baseSet(object, path, value);
	}

	var set_1 = set;

	var _extends$5 = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	var objectWithoutProperties = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

	const defaultMinerProps = {
	  processId: null,
	  isMining: false,
	  currentSpeed: 0,
	  address: '',
	  isFetchingMetrics: false,
	  metrics: []
	};

	const mining = (state = {
	  selectedMinerIdentifier: ETHEREUM_MINER,
	  miners: {
	    [ETHEREUM_MINER]: _extends$5({}, defaultMinerProps),
	    [MONERO_MINER]: _extends$5({}, defaultMinerProps)
	  }
	}, { type, data }) => {
	  const newState = _extends$5({}, state);
	  switch (type) {
	    case SET_MINING_ADDRESS:
	      set_1(newState, `miners.${data.minerIdentifier}.address`, data.address);
	      break;
	    case SELECT_MINER:
	      set_1(newState, `selectedMinerIdentifier`, data);
	      break;
	    case SET_MINING_SPEED:
	      set_1(newState, `miners.${data.minerIdentifier}.currentSpeed`, data.speed);
	      break;
	    case SET_PROCESS_ID:
	      set_1(newState, `miners.${data.minerIdentifier}.processId`, data.processId);
	      break;
	    case START_MINING:
	      set_1(newState, `miners.${data.minerIdentifier}.isMining`, true);
	      break;
	    case STOP_MINING:
	      set_1(newState, `miners.${data.minerIdentifier}.isMining`, false);
	      break;
	    case REQUEST_MINING_METRICS:
	      set_1(newState, `miners.${data.minerIdentifier}.isFetchingMetrics`, true);
	      break;
	    case RECEIVE_MINING_METRICS:
	      set_1(newState, `miners.${data.minerIdentifier}.isFetchingMetrics`, false);
	      set_1(newState, `miners.${data.minerIdentifier}.metrics`, data.metrics);
	      break;
	  }
	  return newState;
	};

	const reducers = combineReducers({
	  hardwareInfo,
	  mining
	});

	function createThunkMiddleware(extraArgument) {
	  return function (_ref) {
	    var dispatch = _ref.dispatch,
	        getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        if (typeof action === 'function') {
	          return action(dispatch, getState, extraArgument);
	        }

	        return next(action);
	      };
	    };
	  };
	}

	var thunk = createThunkMiddleware();
	thunk.withExtraArgument = createThunkMiddleware;

	const reduxStorage = localforage.createInstance({
	  name: 'Raccoon Miner',
	  storeName: 'redux'
	});

	const persistConfig = {
	  key: 'root',
	  storage: reduxStorage
	};
	const persistedReducer = persistReducer(persistConfig, reducers);
	const createStoreWithMiddleware = applyMiddleware(thunk, logger)(createStore);

	const store = createStoreWithMiddleware(persistedReducer);
	const persistor = persistStore(store);

	var _global = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var _core = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.5.3' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});
	var _core_1 = _core.version;

	var _aFunction = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	// optional / simple context binding

	var _ctx = function (fn, that, length) {
	  _aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var _isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject = function (it) {
	  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var _fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !_fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var document$1 = _global.document;
	// typeof document.createElement is 'object' in old IE
	var is = _isObject(document$1) && _isObject(document$1.createElement);
	var _domCreate = function (it) {
	  return is ? document$1.createElement(it) : {};
	};

	var _ie8DomDefine = !_descriptors && !_fails(function () {
	  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function (it, S) {
	  if (!_isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP = Object.defineProperty;

	var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject(O);
	  P = _toPrimitive(P, true);
	  _anObject(Attributes);
	  if (_ie8DomDefine) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp = {
		f: f
	};

	var _propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide = _descriptors ? function (object, key, value) {
	  return _objectDp.f(object, key, _propertyDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && key in exports) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? _ctx(out, _global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	var hasOwnProperty$7 = {}.hasOwnProperty;
	var _has = function (it, key) {
	  return hasOwnProperty$7.call(it, key);
	};

	var toString$1 = {}.toString;

	var _cof = function (it) {
	  return toString$1.call(it).slice(8, -1);
	};

	// fallback for non-array-like ES3 and non-enumerable old V8 strings

	// eslint-disable-next-line no-prototype-builtins
	var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return _cof(it) == 'String' ? it.split('') : Object(it);
	};

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

	// to indexed object, toObject with fallback for non-array-like ES3 strings


	var _toIobject = function (it) {
	  return _iobject(_defined(it));
	};

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	var _toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	// 7.1.15 ToLength

	var min = Math.min;
	var _toLength = function (it) {
	  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;
	var _toAbsoluteIndex = function (index, length) {
	  index = _toInteger(index);
	  return index < 0 ? max(index + length, 0) : min$1(index, length);
	};

	// false -> Array#indexOf
	// true  -> Array#includes



	var _arrayIncludes = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = _toIobject($this);
	    var length = _toLength(O.length);
	    var index = _toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var SHARED = '__core-js_shared__';
	var store$1 = _global[SHARED] || (_global[SHARED] = {});
	var _shared = function (key) {
	  return store$1[key] || (store$1[key] = {});
	};

	var id = 0;
	var px = Math.random();
	var _uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

	var shared = _shared('keys');

	var _sharedKey = function (key) {
	  return shared[key] || (shared[key] = _uid(key));
	};

	var arrayIndexOf = _arrayIncludes(false);
	var IE_PROTO = _sharedKey('IE_PROTO');

	var _objectKeysInternal = function (object, names) {
	  var O = _toIobject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (_has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE 8- don't enum bug keys
	var _enumBugKeys = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)



	var _objectKeys = Object.keys || function keys(O) {
	  return _objectKeysInternal(O, _enumBugKeys);
	};

	var f$1 = Object.getOwnPropertySymbols;

	var _objectGops = {
		f: f$1
	};

	var f$2 = {}.propertyIsEnumerable;

	var _objectPie = {
		f: f$2
	};

	// 7.1.13 ToObject(argument)

	var _toObject = function (it) {
	  return Object(_defined(it));
	};

	// 19.1.2.1 Object.assign(target, source, ...)





	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	var _objectAssign = !$assign || _fails(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = _toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = _objectGops.f;
	  var isEnum = _objectPie.f;
	  while (aLen > index) {
	    var S = _iobject(arguments[index++]);
	    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;

	// 19.1.3.1 Object.assign(target, source)


	_export(_export.S + _export.F, 'Object', { assign: _objectAssign });

	var assign = _core.Object.assign;

	var assign$1 = createCommonjsModule(function (module) {
	module.exports = { "default": assign, __esModule: true };
	});

	unwrapExports(assign$1);

	var _extends$6 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _assign2 = _interopRequireDefault(assign$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};
	});

	unwrapExports(_extends$6);

	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });

	var $Object = _core.Object;
	var defineProperty$2 = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};

	var defineProperty$3 = createCommonjsModule(function (module) {
	module.exports = { "default": defineProperty$2, __esModule: true };
	});

	unwrapExports(defineProperty$3);

	var defineProperty$5 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _defineProperty2 = _interopRequireDefault(defineProperty$3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};
	});

	unwrapExports(defineProperty$5);

	var objectWithoutProperties$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	exports.default = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};
	});

	unwrapExports(objectWithoutProperties$1);

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty$8 = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty$8.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	var emptyObject = {};

	{
	  Object.freeze(emptyObject);
	}

	var emptyObject_1 = emptyObject;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	{
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	var invariant_1 = invariant;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	var emptyFunction_1 = emptyFunction;

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning$1 = emptyFunction_1;

	{
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  warning$1 = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var warning_1 = warning$1;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret;

	{
	  var invariant$1 = invariant_1;
	  var warning$2 = warning_1;
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant$1(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }
	        warning$2(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          warning$2(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}

	var checkPropTypes_1 = checkPropTypes;

	var react_development = createCommonjsModule(function (module) {



	{
	  (function() {

	var _assign = objectAssign;
	var emptyObject = emptyObject_1;
	var invariant = invariant_1;
	var warning = warning_1;
	var emptyFunction = emptyFunction_1;
	var checkPropTypes = checkPropTypes_1;

	// TODO: this is special because it gets imported during build.

	var ReactVersion = '16.2.0';

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol['for'];

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
	var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
	var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;

	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';

	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable === 'undefined') {
	    return null;
	  }
	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }
	  return null;
	}

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	var didWarnStateUpdateForUnmountedComponent = {};

	function warnNoop(publicInstance, callerName) {
	  {
	    var constructor = publicInstance.constructor;
	    var componentName = constructor && (constructor.displayName || constructor.name) || 'ReactClass';
	    var warningKey = componentName + '.' + callerName;
	    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	      return;
	    }
	    warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, componentName);
	    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance, callback, callerName) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} callerName name of the calling function in the public API.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @param {?function} callback Called after component is updated.
	   * @param {?string} Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function Component(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	Component.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	Component.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
	  this.updater.enqueueSetState(this, partialState, callback, 'setState');
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	Component.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	{
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    Object.defineProperty(Component.prototype, methodName, {
	      get: function () {
	        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	        return undefined;
	      }
	    });
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function PureComponent(props, context, updater) {
	  // Duplicated from Component.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = Component.prototype;
	var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	pureComponentPrototype.constructor = PureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(pureComponentPrototype, Component.prototype);
	pureComponentPrototype.isPureReactComponent = true;

	function AsyncComponent(props, context, updater) {
	  // Duplicated from Component.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	var asyncComponentPrototype = AsyncComponent.prototype = new ComponentDummy();
	asyncComponentPrototype.constructor = AsyncComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(asyncComponentPrototype, Component.prototype);
	asyncComponentPrototype.unstable_isAsyncReactComponent = true;
	asyncComponentPrototype.render = function () {
	  return this.props.children;
	};

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown;
	var specialPropRefWarningShown;

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    });
	    // self and source are DEV only properties.
	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    });
	    // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.
	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://reactjs.org/docs/react-api.html#createelement
	 */
	function createElement(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	}

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://reactjs.org/docs/react-api.html#createfactory
	 */


	function cloneAndReplaceKey(oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	}

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://reactjs.org/docs/react-api.html#cloneelement
	 */
	function cloneElement(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	}

	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	function isValidElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}

	var ReactDebugCurrentFrame = {};

	{
	  // Component that is being worked on
	  ReactDebugCurrentFrame.getCurrentStack = null;

	  ReactDebugCurrentFrame.getStackAddendum = function () {
	    var impl = ReactDebugCurrentFrame.getCurrentStack;
	    if (impl) {
	      return impl();
	    }
	    return null;
	  };
	}

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	var POOL_SIZE = 10;
	var traverseContextPool = [];
	function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
	  if (traverseContextPool.length) {
	    var traverseContext = traverseContextPool.pop();
	    traverseContext.result = mapResult;
	    traverseContext.keyPrefix = keyPrefix;
	    traverseContext.func = mapFunction;
	    traverseContext.context = mapContext;
	    traverseContext.count = 0;
	    return traverseContext;
	  } else {
	    return {
	      result: mapResult,
	      keyPrefix: keyPrefix,
	      func: mapFunction,
	      context: mapContext,
	      count: 0
	    };
	  }
	}

	function releaseTraverseContext(traverseContext) {
	  traverseContext.result = null;
	  traverseContext.keyPrefix = null;
	  traverseContext.func = null;
	  traverseContext.context = null;
	  traverseContext.count = 0;
	  if (traverseContextPool.length < POOL_SIZE) {
	    traverseContextPool.push(traverseContext);
	  }
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  var invokeCallback = false;

	  if (children === null) {
	    invokeCallback = true;
	  } else {
	    switch (type) {
	      case 'string':
	      case 'number':
	        invokeCallback = true;
	        break;
	      case 'object':
	        switch (children.$$typeof) {
	          case REACT_ELEMENT_TYPE:
	          case REACT_CALL_TYPE:
	          case REACT_RETURN_TYPE:
	          case REACT_PORTAL_TYPE:
	            invokeCallback = true;
	        }
	    }
	  }

	  if (invokeCallback) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (typeof iteratorFn === 'function') {
	      {
	        // Warn about using Maps as children
	        if (iteratorFn === children.entries) {
	          warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', ReactDebugCurrentFrame.getStackAddendum());
	          didWarnAboutMaps = true;
	        }
	      }

	      var iterator = iteratorFn.call(children);
	      var step;
	      var ii = 0;
	      while (!(step = iterator.next()).done) {
	        child = step.value;
	        nextName = nextNamePrefix + getComponentKey(child, ii++);
	        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
	      }
	      var childrenString = '' + children;
	      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (typeof component === 'object' && component !== null && component.key != null) {
	    // Explicit key
	    return escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (isValidElement(mappedChild)) {
	      mappedChild = cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  releaseTraverseContext(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://reactjs.org/docs/react-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, emptyFunction.thatReturnsNull, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://reactjs.org/docs/react-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://reactjs.org/docs/react-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
	  return children;
	}

	var describeComponentFrame = function (name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	};

	function getComponentName(fiber) {
	  var type = fiber.type;

	  if (typeof type === 'string') {
	    return type;
	  }
	  if (typeof type === 'function') {
	    return type.displayName || type.name;
	  }
	  return null;
	}

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	{
	  var currentlyValidatingElement = null;

	  var propTypesMisspellWarningShown = false;

	  var getDisplayName = function (element) {
	    if (element == null) {
	      return '#empty';
	    } else if (typeof element === 'string' || typeof element === 'number') {
	      return '#text';
	    } else if (typeof element.type === 'string') {
	      return element.type;
	    } else if (element.type === REACT_FRAGMENT_TYPE) {
	      return 'React.Fragment';
	    } else {
	      return element.type.displayName || element.type.name || 'Unknown';
	    }
	  };

	  var getStackAddendum = function () {
	    var stack = '';
	    if (currentlyValidatingElement) {
	      var name = getDisplayName(currentlyValidatingElement);
	      var owner = currentlyValidatingElement._owner;
	      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner));
	    }
	    stack += ReactDebugCurrentFrame.getStackAddendum() || '';
	    return stack;
	  };

	  var VALID_FRAGMENT_PROPS = new Map([['children', true], ['key', true]]);
	}

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = getComponentName(ReactCurrentOwner.current);
	    if (name) {
	      return '\n\nCheck the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	    return;
	  }
	  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + getComponentName(element._owner) + '.';
	  }

	  currentlyValidatingElement = element;
	  {
	    warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());
	  }
	  currentlyValidatingElement = null;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    if (typeof iteratorFn === 'function') {
	      // Entry iterators used to provide implicit keys,
	      // but now we print a separate warning for them later.
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  var propTypes = componentClass.propTypes;
	  if (propTypes) {
	    currentlyValidatingElement = element;
	    checkPropTypes(propTypes, element.props, 'prop', name, getStackAddendum);
	    currentlyValidatingElement = null;
	  } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	    propTypesMisspellWarningShown = true;
	    warning(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	  }
	}

	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */
	function validateFragmentProps(fragment) {
	  currentlyValidatingElement = fragment;

	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = Object.keys(fragment.props)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var key = _step.value;

	      if (!VALID_FRAGMENT_PROPS.has(key)) {
	        warning(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());
	        break;
	      }
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator['return']) {
	        _iterator['return']();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  if (fragment.ref !== null) {
	    warning(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());
	  }

	  currentlyValidatingElement = null;
	}

	function createElementWithValidation(type, props, children) {
	  var validType = typeof type === 'string' || typeof type === 'function' || typeof type === 'symbol' || typeof type === 'number';
	  // We warn in this case but don't throw. We expect the element creation to
	  // succeed and there will likely be errors in render.
	  if (!validType) {
	    var info = '';
	    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	    }

	    var sourceInfo = getSourceInfoErrorAddendum(props);
	    if (sourceInfo) {
	      info += sourceInfo;
	    } else {
	      info += getDeclarationErrorAddendum();
	    }

	    info += getStackAddendum() || '';

	    warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
	  }

	  var element = createElement.apply(this, arguments);

	  // The result can be nullish if a mock or a custom function is used.
	  // TODO: Drop this when these are no longer allowed as the type argument.
	  if (element == null) {
	    return element;
	  }

	  // Skip key warning if the type isn't valid since our key validation logic
	  // doesn't expect a non-string/function type and can throw confusing errors.
	  // We don't want exception behavior to differ between dev and prod.
	  // (Rendering will throw with a helpful message and as soon as the type is
	  // fixed, the key warnings will appear.)
	  if (validType) {
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }
	  }

	  if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE) {
	    validateFragmentProps(element);
	  } else {
	    validatePropTypes(element);
	  }

	  return element;
	}

	function createFactoryWithValidation(type) {
	  var validatedFactory = createElementWithValidation.bind(null, type);
	  // Legacy hook TODO: Warn if this is accessed
	  validatedFactory.type = type;

	  {
	    Object.defineProperty(validatedFactory, 'type', {
	      enumerable: false,
	      get: function () {
	        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	        Object.defineProperty(this, 'type', {
	          value: type
	        });
	        return type;
	      }
	    });
	  }

	  return validatedFactory;
	}

	function cloneElementWithValidation(element, props, children) {
	  var newElement = cloneElement.apply(this, arguments);
	  for (var i = 2; i < arguments.length; i++) {
	    validateChildKeys(arguments[i], newElement.type);
	  }
	  validatePropTypes(newElement);
	  return newElement;
	}

	var React = {
	  Children: {
	    map: mapChildren,
	    forEach: forEachChildren,
	    count: countChildren,
	    toArray: toArray,
	    only: onlyChild
	  },

	  Component: Component,
	  PureComponent: PureComponent,
	  unstable_AsyncComponent: AsyncComponent,

	  Fragment: REACT_FRAGMENT_TYPE,

	  createElement: createElementWithValidation,
	  cloneElement: cloneElementWithValidation,
	  createFactory: createFactoryWithValidation,
	  isValidElement: isValidElement,

	  version: ReactVersion,

	  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
	    ReactCurrentOwner: ReactCurrentOwner,
	    // Used by renderers to avoid bundling object-assign twice in UMD bundles:
	    assign: _assign
	  }
	};

	{
	  _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
	    // These should not be included in production.
	    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
	    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
	    // TODO: remove in React 17.0.
	    ReactComponentTreeHook: {}
	  });
	}



	var React$2 = Object.freeze({
		default: React
	});

	var React$3 = ( React$2 && React ) || React$2;

	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.
	var react = React$3['default'] ? React$3['default'] : React$3;

	module.exports = react;
	  })();
	}
	});

	var react = createCommonjsModule(function (module) {

	{
	  module.exports = react_development;
	}
	});
	var react_1 = react.Component;
	var react_2 = react.PureComponent;
	var react_3 = react.Children;
	var react_4 = react.createElement;
	var react_5 = react.Fragment;
	var react_6 = react.cloneElement;
	var react_7 = react.isValidElement;

	var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret_1) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant_1(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if ("development" !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning_1(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction_1.thatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      warning_1(false, 'Invalid argument supplied to oneOf, expected an instance of array.');
	      return emptyFunction_1.thatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      warning_1(false, 'Invalid argument supplied to oneOfType, expected an instance of array.');
	      return emptyFunction_1.thatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        warning_1(
	          false,
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received %s at index %s.',
	          getPostfixForTypeWarning(checker),
	          i
	        );
	        return emptyFunction_1.thatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = objectAssign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes_1;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	var propTypes = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;

	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
	}
	});

	var classnames = createCommonjsModule(function (module) {
	/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if ('object' !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (typeof undefined === 'function' && typeof undefined.amd === 'object' && undefined.amd) {
			// register as 'classnames', consistent with npm package name
			undefined('classnames', [], function () {
				return classNames;
			});
		} else {
			window.classNames = classNames;
		}
	}());
	});

	// most Object methods by ES6 should accept primitives



	var _objectSap = function (KEY, exec) {
	  var fn = (_core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);
	};

	// 19.1.2.14 Object.keys(O)



	_objectSap('keys', function () {
	  return function keys(it) {
	    return _objectKeys(_toObject(it));
	  };
	});

	var keys = _core.Object.keys;

	var keys$1 = createCommonjsModule(function (module) {
	module.exports = { "default": keys, __esModule: true };
	});

	unwrapExports(keys$1);

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


	var IE_PROTO$1 = _sharedKey('IE_PROTO');
	var ObjectProto = Object.prototype;

	var _objectGpo = Object.getPrototypeOf || function (O) {
	  O = _toObject(O);
	  if (_has(O, IE_PROTO$1)) return O[IE_PROTO$1];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

	// 19.1.2.9 Object.getPrototypeOf(O)



	_objectSap('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return _objectGpo(_toObject(it));
	  };
	});

	var getPrototypeOf = _core.Object.getPrototypeOf;

	var getPrototypeOf$1 = createCommonjsModule(function (module) {
	module.exports = { "default": getPrototypeOf, __esModule: true };
	});

	unwrapExports(getPrototypeOf$1);

	var classCallCheck$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	});

	unwrapExports(classCallCheck$1);

	var createClass$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _defineProperty2 = _interopRequireDefault(defineProperty$3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	});

	unwrapExports(createClass$1);

	// true  -> String#at
	// false -> String#codePointAt
	var _stringAt = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(_defined(that));
	    var i = _toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

	var _library = true;

	var _redefine = _hide;

	var _iterators = {};

	var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  _anObject(O);
	  var keys = _objectKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

	var document$2 = _global.document;
	var _html = document$2 && document$2.documentElement;

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



	var IE_PROTO$2 = _sharedKey('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE$1 = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = _domCreate('iframe');
	  var i = _enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  _html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
	  return createDict();
	};

	var _objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE$1] = _anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$2] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : _objectDps(result, Properties);
	};

	var _wks = createCommonjsModule(function (module) {
	var store = _shared('wks');

	var Symbol = _global.Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
	};

	$exports.store = store;
	});

	var def = _objectDp.f;

	var TAG = _wks('toStringTag');

	var _setToStringTag = function (it, tag, stat) {
	  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	_hide(IteratorPrototype, _wks('iterator'), function () { return this; });

	var _iterCreate = function (Constructor, NAME, next) {
	  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
	  _setToStringTag(Constructor, NAME + ' Iterator');
	};

	var ITERATOR = _wks('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  _iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = (!BUGGY && $native) || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      _setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!_library && !_has(IteratorPrototype, ITERATOR)) _hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    _hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  _iterators[NAME] = $default;
	  _iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) _redefine(proto, key, methods[key]);
	    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

	var $at = _stringAt(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	_iterDefine(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

	var _iterStep = function (done, value) {
	  return { value: value, done: !!done };
	};

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
	  this._t = _toIobject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return _iterStep(1);
	  }
	  if (kind == 'keys') return _iterStep(0, index);
	  if (kind == 'values') return _iterStep(0, O[index]);
	  return _iterStep(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	_iterators.Arguments = _iterators.Array;

	var TO_STRING_TAG = _wks('toStringTag');

	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');

	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = _global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
	  _iterators[NAME] = _iterators.Array;
	}

	var f$3 = _wks;

	var _wksExt = {
		f: f$3
	};

	var iterator = _wksExt.f('iterator');

	var iterator$1 = createCommonjsModule(function (module) {
	module.exports = { "default": iterator, __esModule: true };
	});

	unwrapExports(iterator$1);

	var _meta = createCommonjsModule(function (module) {
	var META = _uid('meta');


	var setDesc = _objectDp.f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !_fails(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};
	});
	var _meta_1 = _meta.KEY;
	var _meta_2 = _meta.NEED;
	var _meta_3 = _meta.fastKey;
	var _meta_4 = _meta.getWeak;
	var _meta_5 = _meta.onFreeze;

	var defineProperty$7 = _objectDp.f;
	var _wksDefine = function (name) {
	  var $Symbol = _core.Symbol || (_core.Symbol = _library ? {} : _global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty$7($Symbol, name, { value: _wksExt.f(name) });
	};

	// all enumerable object keys, includes symbols



	var _enumKeys = function (it) {
	  var result = _objectKeys(it);
	  var getSymbols = _objectGops.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = _objectPie.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};

	// 7.2.2 IsArray(argument)

	var _isArray = Array.isArray || function isArray(arg) {
	  return _cof(arg) == 'Array';
	};

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

	var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

	var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return _objectKeysInternal(O, hiddenKeys);
	};

	var _objectGopn = {
		f: f$4
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

	var gOPN = _objectGopn.f;
	var toString$2 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && toString$2.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
	};

	var _objectGopnExt = {
		f: f$5
	};

	var gOPD = Object.getOwnPropertyDescriptor;

	var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = _toIobject(O);
	  P = _toPrimitive(P, true);
	  if (_ie8DomDefine) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
	};

	var _objectGopd = {
		f: f$6
	};

	// ECMAScript 6 symbols shim





	var META = _meta.KEY;



















	var gOPD$1 = _objectGopd.f;
	var dP$1 = _objectDp.f;
	var gOPN$1 = _objectGopnExt.f;
	var $Symbol = _global.Symbol;
	var $JSON = _global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE$2 = 'prototype';
	var HIDDEN = _wks('_hidden');
	var TO_PRIMITIVE = _wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = _shared('symbol-registry');
	var AllSymbols = _shared('symbols');
	var OPSymbols = _shared('op-symbols');
	var ObjectProto$1 = Object[PROTOTYPE$2];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = _global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = _descriptors && _fails(function () {
	  return _objectCreate(dP$1({}, 'a', {
	    get: function () { return dP$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD$1(ObjectProto$1, key);
	  if (protoDesc) delete ObjectProto$1[key];
	  dP$1(it, key, D);
	  if (protoDesc && it !== ObjectProto$1) dP$1(ObjectProto$1, key, protoDesc);
	} : dP$1;

	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol$1 = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto$1) $defineProperty(OPSymbols, key, D);
	  _anObject(it);
	  key = _toPrimitive(key, true);
	  _anObject(D);
	  if (_has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP$1(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  _anObject(it);
	  var keys = _enumKeys(P = _toIobject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = _toPrimitive(key, true));
	  if (this === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
	  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = _toIobject(it);
	  key = _toPrimitive(key, true);
	  if (it === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
	  var D = gOPD$1(it, key);
	  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN$1(_toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto$1;
	  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto$1, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto$1) $set.call(OPSymbols, value);
	      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, _propertyDesc(1, value));
	    };
	    if (_descriptors && setter) setSymbolDesc(ObjectProto$1, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
	    return this._k;
	  });

	  _objectGopd.f = $getOwnPropertyDescriptor;
	  _objectDp.f = $defineProperty;
	  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
	  _objectPie.f = $propertyIsEnumerable;
	  _objectGops.f = $getOwnPropertySymbols;

	  if (_descriptors && !_library) {
	    _redefine(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  _wksExt.f = function (name) {
	    return wrap(_wks(name));
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);

	for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);

	_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return _has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol$1(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});

	_export(_export.S + _export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!_isObject(replacer) && it === undefined || isSymbol$1(it)) return; // IE8 returns string on undefined
	    if (!_isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol$1(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	_setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	_setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	_setToStringTag(_global.JSON, 'JSON', true);

	_wksDefine('asyncIterator');

	_wksDefine('observable');

	var symbol = _core.Symbol;

	var symbol$1 = createCommonjsModule(function (module) {
	module.exports = { "default": symbol, __esModule: true };
	});

	unwrapExports(symbol$1);

	var _typeof_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _iterator2 = _interopRequireDefault(iterator$1);



	var _symbol2 = _interopRequireDefault(symbol$1);

	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};
	});

	unwrapExports(_typeof_1);

	var possibleConstructorReturn$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _typeof3 = _interopRequireDefault(_typeof_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};
	});

	unwrapExports(possibleConstructorReturn$1);

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */


	var check = function (O, proto) {
	  _anObject(O);
	  if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	var _setProto = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

	// 19.1.3.19 Object.setPrototypeOf(O, proto)

	_export(_export.S, 'Object', { setPrototypeOf: _setProto.set });

	var setPrototypeOf = _core.Object.setPrototypeOf;

	var setPrototypeOf$1 = createCommonjsModule(function (module) {
	module.exports = { "default": setPrototypeOf, __esModule: true };
	});

	unwrapExports(setPrototypeOf$1);

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	_export(_export.S, 'Object', { create: _objectCreate });

	var $Object$1 = _core.Object;
	var create = function create(P, D) {
	  return $Object$1.create(P, D);
	};

	var create$1 = createCommonjsModule(function (module) {
	module.exports = { "default": create, __esModule: true };
	});

	unwrapExports(create$1);

	var inherits$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$1);



	var _typeof3 = _interopRequireDefault(_typeof_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }

	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};
	});

	unwrapExports(inherits$1);

	var _redefineAll = function (target, src, safe) {
	  for (var key in src) {
	    if (safe && target[key]) target[key] = src[key];
	    else _hide(target, key, src[key]);
	  } return target;
	};

	var _anInstance = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

	// call something on iterator step with safe closing on error

	var _iterCall = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) _anObject(ret.call(iterator));
	    throw e;
	  }
	};

	// check on default Array iterator

	var ITERATOR$1 = _wks('iterator');
	var ArrayProto = Array.prototype;

	var _isArrayIter = function (it) {
	  return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
	};

	// getting tag from 19.1.3.6 Object.prototype.toString()

	var TAG$1 = _wks('toStringTag');
	// ES3 wrong here
	var ARG = _cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	var _classof = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
	    // builtinTag case
	    : ARG ? _cof(O)
	    // ES3 arguments fallback
	    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

	var ITERATOR$2 = _wks('iterator');

	var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$2]
	    || it['@@iterator']
	    || _iterators[_classof(it)];
	};

	var _forOf = createCommonjsModule(function (module) {
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : core_getIteratorMethod(iterable);
	  var f = _ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
	    result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = _iterCall(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;
	});

	var SPECIES = _wks('species');

	var _setSpecies = function (KEY) {
	  var C = typeof _core[KEY] == 'function' ? _core[KEY] : _global[KEY];
	  if (_descriptors && C && !C[SPECIES]) _objectDp.f(C, SPECIES, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};

	var _validateCollection = function (it, TYPE) {
	  if (!_isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};

	var dP$2 = _objectDp.f;









	var fastKey = _meta.fastKey;

	var SIZE = _descriptors ? '_s' : 'size';

	var getEntry = function (that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};

	var _collectionStrong = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      _anInstance(that, C, NAME, '_i');
	      that._t = NAME;         // collection type
	      that._i = _objectCreate(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    _redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = _validateCollection(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = _validateCollection(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        _validateCollection(this, NAME);
	        var f = _ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(_validateCollection(this, NAME), key);
	      }
	    });
	    if (_descriptors) dP$2(C.prototype, 'size', {
	      get: function () {
	        return _validateCollection(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function (C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    _iterDefine(C, NAME, function (iterated, kind) {
	      this._t = _validateCollection(iterated, NAME); // target
	      this._k = kind;                     // kind
	      this._l = undefined;                // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return _iterStep(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return _iterStep(0, entry.k);
	      if (kind == 'values') return _iterStep(0, entry.v);
	      return _iterStep(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    _setSpecies(NAME);
	  }
	};

	var SPECIES$1 = _wks('species');

	var _arraySpeciesConstructor = function (original) {
	  var C;
	  if (_isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;
	    if (_isObject(C)) {
	      C = C[SPECIES$1];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)


	var _arraySpeciesCreate = function (original, length) {
	  return new (_arraySpeciesConstructor(original))(length);
	};

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex





	var _arrayMethods = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || _arraySpeciesCreate;
	  return function ($this, callbackfn, that) {
	    var O = _toObject($this);
	    var self = _iobject(O);
	    var f = _ctx(callbackfn, that, 3);
	    var length = _toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

	var dP$3 = _objectDp.f;
	var each = _arrayMethods(0);


	var _collection = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = _global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  if (!_descriptors || typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    _redefineAll(C.prototype, methods);
	    _meta.NEED = true;
	  } else {
	    C = wrapper(function (target, iterable) {
	      _anInstance(target, C, NAME, '_c');
	      target._c = new Base();
	      if (iterable != undefined) _forOf(iterable, IS_MAP, target[ADDER], target);
	    });
	    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) _hide(C.prototype, KEY, function (a, b) {
	        _anInstance(this, C, KEY);
	        if (!IS_ADDER && IS_WEAK && !_isObject(a)) return KEY == 'get' ? undefined : false;
	        var result = this._c[KEY](a === 0 ? 0 : a, b);
	        return IS_ADDER ? this : result;
	      });
	    });
	    IS_WEAK || dP$3(C.prototype, 'size', {
	      get: function () {
	        return this._c.size;
	      }
	    });
	  }

	  _setToStringTag(C, NAME);

	  O[NAME] = C;
	  _export(_export.G + _export.W + _export.F, O);

	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

	  return C;
	};

	var MAP = 'Map';

	// 23.1 Map Objects
	var es6_map = _collection(MAP, function (get) {
	  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = _collectionStrong.getEntry(_validateCollection(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return _collectionStrong.def(_validateCollection(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, _collectionStrong, true);

	var _arrayFromIterable = function (iter, ITERATOR) {
	  var result = [];
	  _forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON


	var _collectionToJson = function (NAME) {
	  return function toJSON() {
	    if (_classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
	    return _arrayFromIterable(this);
	  };
	};

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON


	_export(_export.P + _export.R, 'Map', { toJSON: _collectionToJson('Map') });

	// https://tc39.github.io/proposal-setmap-offrom/


	var _setCollectionOf = function (COLLECTION) {
	  _export(_export.S, COLLECTION, { of: function of() {
	    var length = arguments.length;
	    var A = new Array(length);
	    while (length--) A[length] = arguments[length];
	    return new this(A);
	  } });
	};

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
	_setCollectionOf('Map');

	// https://tc39.github.io/proposal-setmap-offrom/





	var _setCollectionFrom = function (COLLECTION) {
	  _export(_export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
	    var mapFn = arguments[1];
	    var mapping, A, n, cb;
	    _aFunction(this);
	    mapping = mapFn !== undefined;
	    if (mapping) _aFunction(mapFn);
	    if (source == undefined) return new this();
	    A = [];
	    if (mapping) {
	      n = 0;
	      cb = _ctx(mapFn, arguments[2], 2);
	      _forOf(source, false, function (nextItem) {
	        A.push(cb(nextItem, n++));
	      });
	    } else {
	      _forOf(source, false, A.push, A);
	    }
	    return new this(A);
	  } });
	};

	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
	_setCollectionFrom('Map');

	var map = _core.Map;

	var map$1 = createCommonjsModule(function (module) {
	module.exports = { "default": map, __esModule: true };
	});

	unwrapExports(map$1);

	// 20.1.2.10 Number.MIN_SAFE_INTEGER


	_export(_export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

	var minSafeInteger = -0x1fffffffffffff;

	var minSafeInteger$1 = createCommonjsModule(function (module) {
	module.exports = { "default": minSafeInteger, __esModule: true };
	});

	unwrapExports(minSafeInteger$1);

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning$3 = function() {};

	{
	  warning$3 = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	var browser = warning$3;

	var hoistNonReactStatics = createCommonjsModule(function (module, exports) {
	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	(function (global, factory) {
	    module.exports = factory();
	}(commonjsGlobal, (function () {
	    
	    var REACT_STATICS = {
	        childContextTypes: true,
	        contextTypes: true,
	        defaultProps: true,
	        displayName: true,
	        getDefaultProps: true,
	        getDerivedStateFromProps: true,
	        mixins: true,
	        propTypes: true,
	        type: true
	    };
	    
	    var KNOWN_STATICS = {
	        name: true,
	        length: true,
	        prototype: true,
	        caller: true,
	        callee: true,
	        arguments: true,
	        arity: true
	    };
	    
	    var defineProperty = Object.defineProperty;
	    var getOwnPropertyNames = Object.getOwnPropertyNames;
	    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	    var getPrototypeOf = Object.getPrototypeOf;
	    var objectPrototype = getPrototypeOf && getPrototypeOf(Object);
	    
	    return function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	        if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	            
	            if (objectPrototype) {
	                var inheritedComponent = getPrototypeOf(sourceComponent);
	                if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	                }
	            }
	            
	            var keys = getOwnPropertyNames(sourceComponent);
	            
	            if (getOwnPropertySymbols) {
	                keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	            }
	            
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
	                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
	                    try { // Avoid failures from read-only properties
	                        defineProperty(targetComponent, key, descriptor);
	                    } catch (e) {}
	                }
	            }
	            
	            return targetComponent;
	        }
	        
	        return targetComponent;
	    };
	})));
	});

	var getDisplayName_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	var getDisplayName = function getDisplayName(Component) {
	  if (typeof Component === 'string') {
	    return Component;
	  }

	  if (!Component) {
	    return undefined;
	  }

	  return Component.displayName || Component.name || 'Component';
	};

	exports.default = getDisplayName;
	});

	unwrapExports(getDisplayName_1);

	var wrapDisplayName_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _getDisplayName2 = _interopRequireDefault(getDisplayName_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var wrapDisplayName = function wrapDisplayName(BaseComponent, hocName) {
	  return hocName + '(' + (0, _getDisplayName2.default)(BaseComponent) + ')';
	};

	exports.default = wrapDisplayName;
	});

	unwrapExports(wrapDisplayName_1);

	var ns = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Namespaces to avoid conflicts on the context.
	 */
	var jss = exports.jss = '64a55d578f856d258dc345b094a2a2b3';
	var sheetsRegistry = exports.sheetsRegistry = 'd4bd0baacbc52bbd48bbb9eb24344ecd';
	var managers = exports.managers = 'b768b78919504fba9de2c03545c5cd3a';
	var sheetOptions = exports.sheetOptions = '6fc570d6bd61383819d0f9e7407c452d';
	});

	unwrapExports(ns);
	var ns_1 = ns.jss;
	var ns_2 = ns.sheetsRegistry;
	var ns_3 = ns.managers;
	var ns_4 = ns.sheetOptions;

	var propTypes$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	exports['default'] = {
	  jss: (0, propTypes.shape)({
	    options: (0, propTypes.shape)({
	      createGenerateClassName: propTypes.func.isRequired
	    }).isRequired,
	    createStyleSheet: propTypes.func.isRequired,
	    removeStyleSheet: propTypes.func.isRequired
	  }),
	  registry: (0, propTypes.shape)({
	    add: propTypes.func.isRequired,
	    toString: propTypes.func.isRequired
	  })
	};
	});

	unwrapExports(propTypes$1);

	var contextTypes = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _ns$jss$ns$sheetOptio;





	var ns$$1 = _interopRequireWildcard(ns);



	var _propTypes3 = _interopRequireDefault(propTypes$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	exports['default'] = (_ns$jss$ns$sheetOptio = {}, _defineProperty(_ns$jss$ns$sheetOptio, ns$$1.jss, _propTypes3['default'].jss), _defineProperty(_ns$jss$ns$sheetOptio, ns$$1.sheetOptions, propTypes.object), _defineProperty(_ns$jss$ns$sheetOptio, ns$$1.sheetsRegistry, _propTypes3['default'].registry), _defineProperty(_ns$jss$ns$sheetOptio, ns$$1.managers, propTypes.object), _ns$jss$ns$sheetOptio);
	});

	unwrapExports(contextTypes);

	var getDynamicStyles = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Extracts a styles object with only props that contain function values.
	 */
	exports['default'] = function (styles) {
	  // eslint-disable-next-line no-shadow
	  function extract(styles) {
	    var to = null;

	    for (var key in styles) {
	      var value = styles[key];
	      var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

	      if (type === 'function') {
	        if (!to) to = {};
	        to[key] = value;
	      } else if (type === 'object' && value !== null && !Array.isArray(value)) {
	        var extracted = extract(value);
	        if (extracted) {
	          if (!to) to = {};
	          to[key] = extracted;
	        }
	      }
	    }

	    return to;
	  }

	  return extract(styles);
	};
	});

	unwrapExports(getDynamicStyles);

	var toCssValue_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = toCssValue;
	var join = function join(value, by) {
	  var result = '';
	  for (var i = 0; i < value.length; i++) {
	    // Remove !important from the value, it will be readded later.
	    if (value[i] === '!important') break;
	    if (result) result += by;
	    result += value[i];
	  }
	  return result;
	};

	/**
	 * Converts array values to string.
	 *
	 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
	 * `border: ['1px', '2px']` > `border: 1px, 2px;`
	 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
	 * `color: ['red', !important]` > `color: red !important;`
	 */
	function toCssValue(value) {
	  var ignoreImportant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  if (!Array.isArray(value)) return value;

	  var cssValue = '';

	  // Support space separated values via `[['5px', '10px']]`.
	  if (Array.isArray(value[0])) {
	    for (var i = 0; i < value.length; i++) {
	      if (value[i] === '!important') break;
	      if (cssValue) cssValue += ', ';
	      cssValue += join(value[i], ' ');
	    }
	  } else cssValue = join(value, ', ');

	  // Add !important, because it was ignored.
	  if (!ignoreImportant && value[value.length - 1] === '!important') {
	    cssValue += ' !important';
	  }

	  return cssValue;
	}
	});

	unwrapExports(toCssValue_1);

	var SheetsRegistry_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Sheets registry to access them all at one place.
	 */
	var SheetsRegistry = function () {
	  function SheetsRegistry() {
	    _classCallCheck(this, SheetsRegistry);

	    this.registry = [];
	  }

	  _createClass(SheetsRegistry, [{
	    key: 'add',


	    /**
	     * Register a Style Sheet.
	     */
	    value: function add(sheet) {
	      var registry = this.registry;
	      var index = sheet.options.index;


	      if (registry.indexOf(sheet) !== -1) return;

	      if (registry.length === 0 || index >= this.index) {
	        registry.push(sheet);
	        return;
	      }

	      // Find a position.
	      for (var i = 0; i < registry.length; i++) {
	        if (registry[i].options.index > index) {
	          registry.splice(i, 0, sheet);
	          return;
	        }
	      }
	    }

	    /**
	     * Reset the registry.
	     */

	  }, {
	    key: 'reset',
	    value: function reset() {
	      this.registry = [];
	    }

	    /**
	     * Remove a Style Sheet.
	     */

	  }, {
	    key: 'remove',
	    value: function remove(sheet) {
	      var index = this.registry.indexOf(sheet);
	      this.registry.splice(index, 1);
	    }

	    /**
	     * Convert all attached sheets to a CSS string.
	     */

	  }, {
	    key: 'toString',
	    value: function toString(options) {
	      return this.registry.filter(function (sheet) {
	        return sheet.attached;
	      }).map(function (sheet) {
	        return sheet.toString(options);
	      }).join('\n');
	    }
	  }, {
	    key: 'index',


	    /**
	     * Current highest index number.
	     */
	    get: function get() {
	      return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
	    }
	  }]);

	  return SheetsRegistry;
	}();

	exports['default'] = SheetsRegistry;
	});

	unwrapExports(SheetsRegistry_1);

	var SheetsManager_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _warning2 = _interopRequireDefault(browser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * SheetsManager is like a WeakMap which is designed to count StyleSheet
	 * instances and attach/detach automatically.
	 */
	var SheetsManager = function () {
	  function SheetsManager() {
	    _classCallCheck(this, SheetsManager);

	    this.sheets = [];
	    this.refs = [];
	    this.keys = [];
	  }

	  _createClass(SheetsManager, [{
	    key: 'get',
	    value: function get(key) {
	      var index = this.keys.indexOf(key);
	      return this.sheets[index];
	    }
	  }, {
	    key: 'add',
	    value: function add(key, sheet) {
	      var sheets = this.sheets,
	          refs = this.refs,
	          keys = this.keys;

	      var index = sheets.indexOf(sheet);

	      if (index !== -1) return index;

	      sheets.push(sheet);
	      refs.push(0);
	      keys.push(key);

	      return sheets.length - 1;
	    }
	  }, {
	    key: 'manage',
	    value: function manage(key) {
	      var index = this.keys.indexOf(key);
	      var sheet = this.sheets[index];
	      if (this.refs[index] === 0) sheet.attach();
	      this.refs[index]++;
	      if (!this.keys[index]) this.keys.splice(index, 0, key);
	      return sheet;
	    }
	  }, {
	    key: 'unmanage',
	    value: function unmanage(key) {
	      var index = this.keys.indexOf(key);
	      if (index === -1) {
	        // eslint-ignore-next-line no-console
	        (0, _warning2['default'])(false, "SheetsManager: can't find sheet to unmanage");
	        return;
	      }
	      if (this.refs[index] > 0) {
	        this.refs[index]--;
	        if (this.refs[index] === 0) this.sheets[index].detach();
	      }
	    }
	  }, {
	    key: 'size',
	    get: function get() {
	      return this.keys.length;
	    }
	  }]);

	  return SheetsManager;
	}();

	exports['default'] = SheetsManager;
	});

	unwrapExports(SheetsManager_1);

	var toCss_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = toCss;



	var _toCssValue2 = _interopRequireDefault(toCssValue_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Indent a string.
	 * http://jsperf.com/array-join-vs-for
	 */
	function indentStr(str, indent) {
	  var result = '';
	  for (var index = 0; index < indent; index++) {
	    result += '  ';
	  }return result + str;
	}

	/**
	 * Converts a Rule to CSS string.
	 */

	function toCss(selector, style) {
	  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	  var result = '';

	  if (!style) return result;

	  var _options$indent = options.indent,
	      indent = _options$indent === undefined ? 0 : _options$indent;
	  var fallbacks = style.fallbacks;


	  indent++;

	  // Apply fallbacks first.
	  if (fallbacks) {
	    // Array syntax {fallbacks: [{prop: value}]}
	    if (Array.isArray(fallbacks)) {
	      for (var index = 0; index < fallbacks.length; index++) {
	        var fallback = fallbacks[index];
	        for (var prop in fallback) {
	          var value = fallback[prop];
	          if (value != null) {
	            result += '\n' + indentStr(prop + ': ' + (0, _toCssValue2['default'])(value) + ';', indent);
	          }
	        }
	      }
	    } else {
	      // Object syntax {fallbacks: {prop: value}}
	      for (var _prop in fallbacks) {
	        var _value = fallbacks[_prop];
	        if (_value != null) {
	          result += '\n' + indentStr(_prop + ': ' + (0, _toCssValue2['default'])(_value) + ';', indent);
	        }
	      }
	    }
	  }

	  for (var _prop2 in style) {
	    var _value2 = style[_prop2];
	    if (_value2 != null && _prop2 !== 'fallbacks') {
	      result += '\n' + indentStr(_prop2 + ': ' + (0, _toCssValue2['default'])(_value2) + ';', indent);
	    }
	  }

	  // Allow empty style in this case, because properties will be added dynamically.
	  if (!result && !options.allowEmpty) return result;

	  indent--;
	  result = indentStr(selector + ' {' + result + '\n', indent) + indentStr('}', indent);

	  return result;
	}
	});

	unwrapExports(toCss_1);

	var StyleRule_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _warning2 = _interopRequireDefault(browser);



	var _toCss2 = _interopRequireDefault(toCss_1);



	var _toCssValue2 = _interopRequireDefault(toCssValue_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var StyleRule = function () {
	  function StyleRule(key, style, options) {
	    _classCallCheck(this, StyleRule);

	    this.type = 'style';
	    this.isProcessed = false;
	    var sheet = options.sheet,
	        Renderer = options.Renderer,
	        selector = options.selector;

	    this.key = key;
	    this.options = options;
	    this.style = style;
	    if (selector) this.selectorText = selector;
	    this.renderer = sheet ? sheet.renderer : new Renderer();
	  }

	  /**
	   * Set selector string.
	   * Attention: use this with caution. Most browsers didn't implement
	   * selectorText setter, so this may result in rerendering of entire Style Sheet.
	   */


	  _createClass(StyleRule, [{
	    key: 'prop',


	    /**
	     * Get or set a style property.
	     */
	    value: function prop(name, value) {
	      // It's a getter.
	      if (value === undefined) return this.style[name];

	      // Don't do anything if the value has not changed.
	      if (this.style[name] === value) return this;

	      value = this.options.jss.plugins.onChangeValue(value, name, this);

	      var isEmpty = value == null || value === false;
	      var isDefined = name in this.style;

	      // Value is empty and wasn't defined before.
	      if (isEmpty && !isDefined) return this;

	      // We are going to remove this value.
	      var remove = isEmpty && isDefined;

	      if (remove) delete this.style[name];else this.style[name] = value;

	      // Renderable is defined if StyleSheet option `link` is true.
	      if (this.renderable) {
	        if (remove) this.renderer.removeProperty(this.renderable, name);else this.renderer.setProperty(this.renderable, name, value);
	        return this;
	      }

	      var sheet = this.options.sheet;

	      if (sheet && sheet.attached) {
	        (0, _warning2['default'])(false, 'Rule is not linked. Missing sheet option "link: true".');
	      }
	      return this;
	    }

	    /**
	     * Apply rule to an element inline.
	     */

	  }, {
	    key: 'applyTo',
	    value: function applyTo(renderable) {
	      var json = this.toJSON();
	      for (var prop in json) {
	        this.renderer.setProperty(renderable, prop, json[prop]);
	      }return this;
	    }

	    /**
	     * Returns JSON representation of the rule.
	     * Fallbacks are not supported.
	     * Useful for inline styles.
	     */

	  }, {
	    key: 'toJSON',
	    value: function toJSON() {
	      var json = {};
	      for (var prop in this.style) {
	        var value = this.style[prop];
	        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') json[prop] = value;else if (Array.isArray(value)) json[prop] = (0, _toCssValue2['default'])(value);
	      }
	      return json;
	    }

	    /**
	     * Generates a CSS string.
	     */

	  }, {
	    key: 'toString',
	    value: function toString(options) {
	      var sheet = this.options.sheet;

	      var link = sheet ? sheet.options.link : false;
	      var opts = link ? _extends({}, options, { allowEmpty: true }) : options;
	      return (0, _toCss2['default'])(this.selector, this.style, opts);
	    }
	  }, {
	    key: 'selector',
	    set: function set(selector) {
	      if (selector === this.selectorText) return;

	      this.selectorText = selector;

	      if (!this.renderable) return;

	      var hasChanged = this.renderer.setSelector(this.renderable, selector);

	      // If selector setter is not implemented, rerender the rule.
	      if (!hasChanged && this.renderable) {
	        var renderable = this.renderer.replaceRule(this.renderable, this);
	        if (renderable) this.renderable = renderable;
	      }
	    }

	    /**
	     * Get selector string.
	     */
	    ,
	    get: function get() {
	      return this.selectorText;
	    }
	  }]);

	  return StyleRule;
	}();

	exports['default'] = StyleRule;
	});

	unwrapExports(StyleRule_1);

	function symbolObservablePonyfill$1(root) {
		var result;
		var Symbol = root.Symbol;

		if (typeof Symbol === 'function') {
			if (Symbol.observable) {
				result = Symbol.observable;
			} else {
				result = Symbol('observable');
				Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}

		return result;
	}

	/* global window */

	var root$3;

	if (typeof self !== 'undefined') {
	  root$3 = self;
	} else if (typeof window !== 'undefined') {
	  root$3 = window;
	} else if (typeof global !== 'undefined') {
	  root$3 = global;
	} else if (typeof module !== 'undefined') {
	  root$3 = module;
	} else {
	  root$3 = Function('return this')();
	}

	var result$1 = symbolObservablePonyfill$1(root$3);

	var es = /*#__PURE__*/Object.freeze({
		default: result$1
	});

	var _symbolObservable = ( es && result$1 ) || es;

	var isObservable = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	exports['default'] = function (value) {
	  return value && value[_symbolObservable2['default']] && value === value[_symbolObservable2['default']]();
	};
	});

	unwrapExports(isObservable);

	var cloneStyle_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports['default'] = cloneStyle;



	var _isObservable2 = _interopRequireDefault(isObservable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var isArray = Array.isArray;
	function cloneStyle(style) {
	  // Support empty values in case user ends up with them by accident.
	  if (style == null) return style;

	  // Support string value for SimpleRule.
	  var typeOfStyle = typeof style === 'undefined' ? 'undefined' : _typeof(style);

	  if (typeOfStyle === 'string' || typeOfStyle === 'number' || typeOfStyle === 'function') {
	    return style;
	  }

	  // Support array for FontFaceRule.
	  if (isArray(style)) return style.map(cloneStyle);

	  // Support Observable styles.  Observables are immutable, so we don't need to
	  // copy them.
	  if ((0, _isObservable2['default'])(style)) return style;

	  var newStyle = {};
	  for (var name in style) {
	    var value = style[name];
	    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
	      newStyle[name] = cloneStyle(value);
	      continue;
	    }
	    newStyle[name] = value;
	  }

	  return newStyle;
	}
	});

	unwrapExports(cloneStyle_1);

	var createRule_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = createRule;



	var _warning2 = _interopRequireDefault(browser);



	var _StyleRule2 = _interopRequireDefault(StyleRule_1);



	var _cloneStyle2 = _interopRequireDefault(cloneStyle_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Create a rule instance.
	 */
	function createRule() {
	  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unnamed';
	  var decl = arguments[1];
	  var options = arguments[2];
	  var jss = options.jss;

	  var declCopy = (0, _cloneStyle2['default'])(decl);

	  var rule = jss.plugins.onCreateRule(name, declCopy, options);
	  if (rule) return rule;

	  // It is an at-rule and it has no instance.
	  if (name[0] === '@') {
	    (0, _warning2['default'])(false, '[JSS] Unknown at-rule %s', name);
	  }

	  return new _StyleRule2['default'](name, declCopy, options);
	}
	});

	unwrapExports(createRule_1);

	var linkRule_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = linkRule;
	/**
	 * Link rule with CSSStyleRule and nested rules with corresponding nested cssRules if both exists.
	 */
	function linkRule(rule, cssRule) {
	  rule.renderable = cssRule;
	  if (rule.rules && cssRule.cssRules) rule.rules.link(cssRule.cssRules);
	}
	});

	unwrapExports(linkRule_1);

	var _escape = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var CSS = commonjsGlobal.CSS;

	var env = "development";

	var escapeRegex = /([[\].#*$><+~=|^:(),"'`])/g;

	exports['default'] = function (str) {
	  // We don't need to escape it in production, because we are not using user's
	  // input for selectors, we are generating a valid selector.
	  if (env === 'production') return str;

	  if (!CSS || !CSS.escape) {
	    return str.replace(escapeRegex, '\\$1');
	  }

	  return CSS.escape(str);
	};
	});

	unwrapExports(_escape);

	var RuleList_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _createRule2 = _interopRequireDefault(createRule_1);



	var _linkRule2 = _interopRequireDefault(linkRule_1);



	var _StyleRule2 = _interopRequireDefault(StyleRule_1);



	var _escape2 = _interopRequireDefault(_escape);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Contains rules objects and allows adding/removing etc.
	 * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
	 */
	var RuleList = function () {

	  // Original styles object.
	  function RuleList(options) {
	    _classCallCheck(this, RuleList);

	    this.map = {};
	    this.raw = {};
	    this.index = [];

	    this.options = options;
	    this.classes = options.classes;
	  }

	  /**
	   * Create and register rule.
	   *
	   * Will not render after Style Sheet was rendered the first time.
	   */


	  // Used to ensure correct rules order.

	  // Rules registry for access by .get() method.
	  // It contains the same rule registered by name and by selector.


	  _createClass(RuleList, [{
	    key: 'add',
	    value: function add(name, decl, options) {
	      var _options = this.options,
	          parent = _options.parent,
	          sheet = _options.sheet,
	          jss = _options.jss,
	          Renderer = _options.Renderer,
	          generateClassName = _options.generateClassName;


	      options = _extends({
	        classes: this.classes,
	        parent: parent,
	        sheet: sheet,
	        jss: jss,
	        Renderer: Renderer,
	        generateClassName: generateClassName
	      }, options);

	      if (!options.selector && this.classes[name]) {
	        options.selector = '.' + (0, _escape2['default'])(this.classes[name]);
	      }

	      this.raw[name] = decl;

	      var rule = (0, _createRule2['default'])(name, decl, options);

	      var className = void 0;

	      if (!options.selector && rule instanceof _StyleRule2['default']) {
	        className = generateClassName(rule, sheet);
	        rule.selector = '.' + (0, _escape2['default'])(className);
	      }

	      this.register(rule, className);

	      var index = options.index === undefined ? this.index.length : options.index;
	      this.index.splice(index, 0, rule);

	      return rule;
	    }

	    /**
	     * Get a rule.
	     */

	  }, {
	    key: 'get',
	    value: function get(name) {
	      return this.map[name];
	    }

	    /**
	     * Delete a rule.
	     */

	  }, {
	    key: 'remove',
	    value: function remove(rule) {
	      this.unregister(rule);
	      this.index.splice(this.indexOf(rule), 1);
	    }

	    /**
	     * Get index of a rule.
	     */

	  }, {
	    key: 'indexOf',
	    value: function indexOf(rule) {
	      return this.index.indexOf(rule);
	    }

	    /**
	     * Run `onProcessRule()` plugins on every rule.
	     */

	  }, {
	    key: 'process',
	    value: function process() {
	      var plugins = this.options.jss.plugins;
	      // We need to clone array because if we modify the index somewhere else during a loop
	      // we end up with very hard-to-track-down side effects.

	      this.index.slice(0).forEach(plugins.onProcessRule, plugins);
	    }

	    /**
	     * Register a rule in `.map` and `.classes` maps.
	     */

	  }, {
	    key: 'register',
	    value: function register(rule, className) {
	      this.map[rule.key] = rule;
	      if (rule instanceof _StyleRule2['default']) {
	        this.map[rule.selector] = rule;
	        if (className) this.classes[rule.key] = className;
	      }
	    }

	    /**
	     * Unregister a rule.
	     */

	  }, {
	    key: 'unregister',
	    value: function unregister(rule) {
	      delete this.map[rule.key];
	      if (rule instanceof _StyleRule2['default']) {
	        delete this.map[rule.selector];
	        delete this.classes[rule.key];
	      }
	    }

	    /**
	     * Update the function values with a new data.
	     */

	  }, {
	    key: 'update',
	    value: function update(name, data) {
	      var _options2 = this.options,
	          plugins = _options2.jss.plugins,
	          sheet = _options2.sheet;

	      if (typeof name === 'string') {
	        plugins.onUpdate(data, this.get(name), sheet);
	        return;
	      }

	      for (var index = 0; index < this.index.length; index++) {
	        plugins.onUpdate(name, this.index[index], sheet);
	      }
	    }

	    /**
	     * Link renderable rules with CSSRuleList.
	     */

	  }, {
	    key: 'link',
	    value: function link(cssRules) {
	      var map = this.options.sheet.renderer.getUnescapedKeysMap(this.index);

	      for (var i = 0; i < cssRules.length; i++) {
	        var cssRule = cssRules[i];
	        var _key = this.options.sheet.renderer.getKey(cssRule);
	        if (map[_key]) _key = map[_key];
	        var rule = this.map[_key];
	        if (rule) (0, _linkRule2['default'])(rule, cssRule);
	      }
	    }

	    /**
	     * Convert rules to a CSS string.
	     */

	  }, {
	    key: 'toString',
	    value: function toString(options) {
	      var str = '';
	      var sheet = this.options.sheet;

	      var link = sheet ? sheet.options.link : false;

	      for (var index = 0; index < this.index.length; index++) {
	        var rule = this.index[index];
	        var css = rule.toString(options);

	        // No need to render an empty rule.
	        if (!css && !link) continue;

	        if (str) str += '\n';
	        str += css;
	      }

	      return str;
	    }
	  }]);

	  return RuleList;
	}();

	exports['default'] = RuleList;
	});

	unwrapExports(RuleList_1);

	var sheets = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _SheetsRegistry2 = _interopRequireDefault(SheetsRegistry_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * This is a global sheets registry. Only DomRenderer will add sheets to it.
	 * On the server one should use an own SheetsRegistry instance and add the
	 * sheets to it, because you need to make sure to create a new registry for
	 * each request in order to not leak sheets across requests.
	 */
	exports['default'] = new _SheetsRegistry2['default']();
	});

	unwrapExports(sheets);

	var StyleSheet_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _linkRule2 = _interopRequireDefault(linkRule_1);



	var _RuleList2 = _interopRequireDefault(RuleList_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var StyleSheet = function () {
	  function StyleSheet(styles, options) {
	    _classCallCheck(this, StyleSheet);

	    this.attached = false;
	    this.deployed = false;
	    this.linked = false;
	    this.classes = {};
	    this.options = _extends({}, options, {
	      sheet: this,
	      parent: this,
	      classes: this.classes
	    });
	    this.renderer = new options.Renderer(this);
	    this.rules = new _RuleList2['default'](this.options);

	    for (var name in styles) {
	      this.rules.add(name, styles[name]);
	    }

	    this.rules.process();
	  }

	  /**
	   * Attach renderable to the render tree.
	   */


	  _createClass(StyleSheet, [{
	    key: 'attach',
	    value: function attach() {
	      if (this.attached) return this;
	      if (!this.deployed) this.deploy();
	      this.renderer.attach();
	      if (!this.linked && this.options.link) this.link();
	      this.attached = true;
	      return this;
	    }

	    /**
	     * Remove renderable from render tree.
	     */

	  }, {
	    key: 'detach',
	    value: function detach() {
	      if (!this.attached) return this;
	      this.renderer.detach();
	      this.attached = false;
	      return this;
	    }

	    /**
	     * Add a rule to the current stylesheet.
	     * Will insert a rule also after the stylesheet has been rendered first time.
	     */

	  }, {
	    key: 'addRule',
	    value: function addRule(name, decl, options) {
	      var queue = this.queue;

	      // Plugins can create rules.
	      // In order to preserve the right order, we need to queue all `.addRule` calls,
	      // which happen after the first `rules.add()` call.

	      if (this.attached && !queue) this.queue = [];

	      var rule = this.rules.add(name, decl, options);
	      this.options.jss.plugins.onProcessRule(rule);

	      if (this.attached) {
	        if (!this.deployed) return rule;
	        // Don't insert rule directly if there is no stringified version yet.
	        // It will be inserted all together when .attach is called.
	        if (queue) queue.push(rule);else {
	          this.insertRule(rule);
	          if (this.queue) {
	            this.queue.forEach(this.insertRule, this);
	            this.queue = undefined;
	          }
	        }
	        return rule;
	      }

	      // We can't add rules to a detached style node.
	      // We will redeploy the sheet once user will attach it.
	      this.deployed = false;

	      return rule;
	    }

	    /**
	     * Insert rule into the StyleSheet
	     */

	  }, {
	    key: 'insertRule',
	    value: function insertRule(rule) {
	      var renderable = this.renderer.insertRule(rule);
	      if (renderable && this.options.link) (0, _linkRule2['default'])(rule, renderable);
	    }

	    /**
	     * Create and add rules.
	     * Will render also after Style Sheet was rendered the first time.
	     */

	  }, {
	    key: 'addRules',
	    value: function addRules(styles, options) {
	      var added = [];
	      for (var name in styles) {
	        added.push(this.addRule(name, styles[name], options));
	      }
	      return added;
	    }

	    /**
	     * Get a rule by name.
	     */

	  }, {
	    key: 'getRule',
	    value: function getRule(name) {
	      return this.rules.get(name);
	    }

	    /**
	     * Delete a rule by name.
	     * Returns `true`: if rule has been deleted from the DOM.
	     */

	  }, {
	    key: 'deleteRule',
	    value: function deleteRule(name) {
	      var rule = this.rules.get(name);

	      if (!rule) return false;

	      this.rules.remove(rule);

	      if (this.attached && rule.renderable) {
	        return this.renderer.deleteRule(rule.renderable);
	      }

	      return true;
	    }

	    /**
	     * Get index of a rule.
	     */

	  }, {
	    key: 'indexOf',
	    value: function indexOf(rule) {
	      return this.rules.indexOf(rule);
	    }

	    /**
	     * Deploy pure CSS string to a renderable.
	     */

	  }, {
	    key: 'deploy',
	    value: function deploy() {
	      this.renderer.deploy();
	      this.deployed = true;
	      return this;
	    }

	    /**
	     * Link renderable CSS rules from sheet with their corresponding models.
	     */

	  }, {
	    key: 'link',
	    value: function link() {
	      var cssRules = this.renderer.getRules();

	      // Is undefined when VirtualRenderer is used.
	      if (cssRules) this.rules.link(cssRules);
	      this.linked = true;
	      return this;
	    }

	    /**
	     * Update the function values with a new data.
	     */

	  }, {
	    key: 'update',
	    value: function update(name, data) {
	      this.rules.update(name, data);
	      return this;
	    }

	    /**
	     * Convert rules to a CSS string.
	     */

	  }, {
	    key: 'toString',
	    value: function toString(options) {
	      return this.rules.toString(options);
	    }
	  }]);

	  return StyleSheet;
	}();

	exports['default'] = StyleSheet;
	});

	unwrapExports(StyleSheet_1);

	var moduleId = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var ns = '2f1acc6c3a606b082e5eef5e54414ffb';
	if (commonjsGlobal[ns] == null) commonjsGlobal[ns] = 0;

	// Bundle may contain multiple JSS versions at the same time. In order to identify
	// the current version with just one short number and use it for classes generation
	// we use a counter. Also it is more accurate, because user can manually reevaluate
	// the module.
	exports['default'] = commonjsGlobal[ns]++;
	});

	unwrapExports(moduleId);

	var createGenerateClassName = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _warning2 = _interopRequireDefault(browser);



	var _StyleSheet2 = _interopRequireDefault(StyleSheet_1);



	var _moduleId2 = _interopRequireDefault(moduleId);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var maxRules = 1e10;


	var env = "development";

	/**
	 * Returns a function which generates unique class names based on counters.
	 * When new generator function is created, rule counter is reseted.
	 * We need to reset the rule counter for SSR for each request.
	 */

	exports['default'] = function () {
	  var ruleCounter = 0;
	  var defaultPrefix = env === 'production' ? 'c' : '';

	  return function (rule, sheet) {
	    ruleCounter += 1;

	    if (ruleCounter > maxRules) {
	      (0, _warning2['default'])(false, '[JSS] You might have a memory leak. Rule counter is at %s.', ruleCounter);
	    }

	    var prefix = defaultPrefix;
	    var jssId = '';

	    if (sheet) {
	      prefix = sheet.options.classNamePrefix || defaultPrefix;
	      if (sheet.options.jss.id != null) jssId += sheet.options.jss.id;
	    }

	    if (env === 'production') {
	      return '' + prefix + _moduleId2['default'] + jssId + ruleCounter;
	    }

	    return prefix + rule.key + '-' + _moduleId2['default'] + (jssId && '-' + jssId) + '-' + ruleCounter;
	  };
	};
	});

	unwrapExports(createGenerateClassName);

	var _typeof$4 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var isBrowser = (typeof window === "undefined" ? "undefined" : _typeof$4(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof$4(document)) === 'object' && document.nodeType === 9;

	var module$1 = /*#__PURE__*/Object.freeze({
		isBrowser: isBrowser,
		default: isBrowser
	});

	var PluginsRegistry_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _warning2 = _interopRequireDefault(browser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PluginsRegistry = function () {
	  function PluginsRegistry() {
	    _classCallCheck(this, PluginsRegistry);

	    this.hooks = {
	      onCreateRule: [],
	      onProcessRule: [],
	      onProcessStyle: [],
	      onProcessSheet: [],
	      onChangeValue: [],
	      onUpdate: []

	      /**
	       * Call `onCreateRule` hooks and return an object if returned by a hook.
	       */
	    };
	  }

	  _createClass(PluginsRegistry, [{
	    key: 'onCreateRule',
	    value: function onCreateRule(name, decl, options) {
	      for (var i = 0; i < this.hooks.onCreateRule.length; i++) {
	        var rule = this.hooks.onCreateRule[i](name, decl, options);
	        if (rule) return rule;
	      }
	      return null;
	    }

	    /**
	     * Call `onProcessRule` hooks.
	     */

	  }, {
	    key: 'onProcessRule',
	    value: function onProcessRule(rule) {
	      if (rule.isProcessed) return;
	      var sheet = rule.options.sheet;

	      for (var i = 0; i < this.hooks.onProcessRule.length; i++) {
	        this.hooks.onProcessRule[i](rule, sheet);
	      }

	      // $FlowFixMe
	      if (rule.style) this.onProcessStyle(rule.style, rule, sheet);

	      rule.isProcessed = true;
	    }

	    /**
	     * Call `onProcessStyle` hooks.
	     */

	  }, {
	    key: 'onProcessStyle',
	    value: function onProcessStyle(style, rule, sheet) {
	      var nextStyle = style;

	      for (var i = 0; i < this.hooks.onProcessStyle.length; i++) {
	        nextStyle = this.hooks.onProcessStyle[i](nextStyle, rule, sheet);
	        // $FlowFixMe
	        rule.style = nextStyle;
	      }
	    }

	    /**
	     * Call `onProcessSheet` hooks.
	     */

	  }, {
	    key: 'onProcessSheet',
	    value: function onProcessSheet(sheet) {
	      for (var i = 0; i < this.hooks.onProcessSheet.length; i++) {
	        this.hooks.onProcessSheet[i](sheet);
	      }
	    }

	    /**
	     * Call `onUpdate` hooks.
	     */

	  }, {
	    key: 'onUpdate',
	    value: function onUpdate(data, rule, sheet) {
	      for (var i = 0; i < this.hooks.onUpdate.length; i++) {
	        this.hooks.onUpdate[i](data, rule, sheet);
	      }
	    }

	    /**
	     * Call `onChangeValue` hooks.
	     */

	  }, {
	    key: 'onChangeValue',
	    value: function onChangeValue(value, prop, rule) {
	      var processedValue = value;
	      for (var i = 0; i < this.hooks.onChangeValue.length; i++) {
	        processedValue = this.hooks.onChangeValue[i](processedValue, prop, rule);
	      }
	      return processedValue;
	    }

	    /**
	     * Register a plugin.
	     * If function is passed, it is a shortcut for `{onProcessRule}`.
	     */

	  }, {
	    key: 'use',
	    value: function use(plugin) {
	      for (var name in plugin) {
	        if (this.hooks[name]) this.hooks[name].push(plugin[name]);else (0, _warning2['default'])(false, '[JSS] Unknown hook "%s".', name);
	      }
	    }
	  }]);

	  return PluginsRegistry;
	}();

	exports['default'] = PluginsRegistry;
	});

	unwrapExports(PluginsRegistry_1);

	var SimpleRule_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var SimpleRule = function () {
	  function SimpleRule(key, value, options) {
	    _classCallCheck(this, SimpleRule);

	    this.type = 'simple';
	    this.isProcessed = false;

	    this.key = key;
	    this.value = value;
	    this.options = options;
	  }

	  /**
	   * Generates a CSS string.
	   */
	  // eslint-disable-next-line no-unused-vars


	  _createClass(SimpleRule, [{
	    key: 'toString',
	    value: function toString(options) {
	      if (Array.isArray(this.value)) {
	        var str = '';
	        for (var index = 0; index < this.value.length; index++) {
	          str += this.key + ' ' + this.value[index] + ';';
	          if (this.value[index + 1]) str += '\n';
	        }
	        return str;
	      }

	      return this.key + ' ' + this.value + ';';
	    }
	  }]);

	  return SimpleRule;
	}();

	exports['default'] = SimpleRule;
	});

	unwrapExports(SimpleRule_1);

	var KeyframesRule_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _RuleList2 = _interopRequireDefault(RuleList_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Rule for @keyframes
	 */
	var KeyframesRule = function () {
	  function KeyframesRule(key, frames, options) {
	    _classCallCheck(this, KeyframesRule);

	    this.type = 'keyframes';
	    this.isProcessed = false;

	    this.key = key;
	    this.options = options;
	    this.rules = new _RuleList2['default'](_extends({}, options, { parent: this }));

	    for (var name in frames) {
	      this.rules.add(name, frames[name], _extends({}, this.options, {
	        parent: this,
	        selector: name
	      }));
	    }

	    this.rules.process();
	  }

	  /**
	   * Generates a CSS string.
	   */


	  _createClass(KeyframesRule, [{
	    key: 'toString',
	    value: function toString() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { indent: 1 };

	      var inner = this.rules.toString(options);
	      if (inner) inner += '\n';
	      return this.key + ' {\n' + inner + '}';
	    }
	  }]);

	  return KeyframesRule;
	}();

	exports['default'] = KeyframesRule;
	});

	unwrapExports(KeyframesRule_1);

	var ConditionalRule_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _RuleList2 = _interopRequireDefault(RuleList_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Conditional rule for @media, @supports
	 */
	var ConditionalRule = function () {
	  function ConditionalRule(key, styles, options) {
	    _classCallCheck(this, ConditionalRule);

	    this.type = 'conditional';
	    this.isProcessed = false;

	    this.key = key;
	    this.options = options;
	    this.rules = new _RuleList2['default'](_extends({}, options, { parent: this }));

	    for (var name in styles) {
	      this.rules.add(name, styles[name]);
	    }

	    this.rules.process();
	  }

	  /**
	   * Get a rule.
	   */


	  _createClass(ConditionalRule, [{
	    key: 'getRule',
	    value: function getRule(name) {
	      return this.rules.get(name);
	    }

	    /**
	     * Get index of a rule.
	     */

	  }, {
	    key: 'indexOf',
	    value: function indexOf(rule) {
	      return this.rules.indexOf(rule);
	    }

	    /**
	     * Create and register rule, run plugins.
	     */

	  }, {
	    key: 'addRule',
	    value: function addRule(name, style, options) {
	      var rule = this.rules.add(name, style, options);
	      this.options.jss.plugins.onProcessRule(rule);
	      return rule;
	    }

	    /**
	     * Generates a CSS string.
	     */

	  }, {
	    key: 'toString',
	    value: function toString() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { indent: 1 };

	      var inner = this.rules.toString(options);
	      return inner ? this.key + ' {\n' + inner + '\n}' : '';
	    }
	  }]);

	  return ConditionalRule;
	}();

	exports['default'] = ConditionalRule;
	});

	unwrapExports(ConditionalRule_1);

	var FontFaceRule_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _toCss2 = _interopRequireDefault(toCss_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var FontFaceRule = function () {
	  function FontFaceRule(key, style, options) {
	    _classCallCheck(this, FontFaceRule);

	    this.type = 'font-face';
	    this.isProcessed = false;

	    this.key = key;
	    this.style = style;
	    this.options = options;
	  }

	  /**
	   * Generates a CSS string.
	   */


	  _createClass(FontFaceRule, [{
	    key: 'toString',
	    value: function toString(options) {
	      if (Array.isArray(this.style)) {
	        var str = '';
	        for (var index = 0; index < this.style.length; index++) {
	          str += (0, _toCss2['default'])(this.key, this.style[index]);
	          if (this.style[index + 1]) str += '\n';
	        }
	        return str;
	      }

	      return (0, _toCss2['default'])(this.key, this.style, options);
	    }
	  }]);

	  return FontFaceRule;
	}();

	exports['default'] = FontFaceRule;
	});

	unwrapExports(FontFaceRule_1);

	var ViewportRule_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _toCss2 = _interopRequireDefault(toCss_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ViewportRule = function () {
	  function ViewportRule(key, style, options) {
	    _classCallCheck(this, ViewportRule);

	    this.type = 'viewport';
	    this.isProcessed = false;

	    this.key = key;
	    this.style = style;
	    this.options = options;
	  }

	  /**
	   * Generates a CSS string.
	   */


	  _createClass(ViewportRule, [{
	    key: 'toString',
	    value: function toString(options) {
	      return (0, _toCss2['default'])(this.key, this.style, options);
	    }
	  }]);

	  return ViewportRule;
	}();

	exports['default'] = ViewportRule;
	});

	unwrapExports(ViewportRule_1);

	var rules = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _SimpleRule2 = _interopRequireDefault(SimpleRule_1);



	var _KeyframesRule2 = _interopRequireDefault(KeyframesRule_1);



	var _ConditionalRule2 = _interopRequireDefault(ConditionalRule_1);



	var _FontFaceRule2 = _interopRequireDefault(FontFaceRule_1);



	var _ViewportRule2 = _interopRequireDefault(ViewportRule_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var classes = {
	  '@charset': _SimpleRule2['default'],
	  '@import': _SimpleRule2['default'],
	  '@namespace': _SimpleRule2['default'],
	  '@keyframes': _KeyframesRule2['default'],
	  '@media': _ConditionalRule2['default'],
	  '@supports': _ConditionalRule2['default'],
	  '@font-face': _FontFaceRule2['default'],
	  '@viewport': _ViewportRule2['default'],
	  '@-ms-viewport': _ViewportRule2['default']

	  /**
	   * Generate plugins which will register all rules.
	   */
	};
	exports['default'] = Object.keys(classes).map(function (key) {
	  // https://jsperf.com/indexof-vs-substr-vs-regex-at-the-beginning-3
	  var re = new RegExp('^' + key);
	  var onCreateRule = function onCreateRule(name, decl, options) {
	    return re.test(name) ? new classes[key](name, decl, options) : null;
	  };
	  return { onCreateRule: onCreateRule };
	});
	});

	unwrapExports(rules);

	var observables = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _StyleRule2 = _interopRequireDefault(StyleRule_1);



	var _createRule2 = _interopRequireDefault(createRule_1);



	var _isObservable2 = _interopRequireDefault(isObservable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	exports['default'] = {
	  onCreateRule: function onCreateRule(name, decl, options) {
	    if (!(0, _isObservable2['default'])(decl)) return null;

	    // Cast `decl` to `Observable`, since it passed the type guard.
	    var style$ = decl;

	    var rule = (0, _createRule2['default'])(name, {}, options);

	    // TODO
	    // Call `stream.subscribe()` returns a subscription, which should be explicitly
	    // unsubscribed from when we know this sheet is no longer needed.
	    style$.subscribe(function (style) {
	      for (var prop in style) {
	        rule.prop(prop, style[prop]);
	      }
	    });

	    return rule;
	  },
	  onProcessRule: function onProcessRule(rule) {
	    if (!(rule instanceof _StyleRule2['default'])) return;
	    var styleRule = rule;
	    var style = styleRule.style;

	    var _loop = function _loop(prop) {
	      var value = style[prop];
	      if (!(0, _isObservable2['default'])(value)) return 'continue';
	      delete style[prop];
	      value.subscribe({
	        next: function next(nextValue) {
	          styleRule.prop(prop, nextValue);
	        }
	      });
	    };

	    for (var prop in style) {
	      var _ret = _loop(prop);

	      if (_ret === 'continue') continue;
	    }
	  }
	};
	});

	unwrapExports(observables);

	var functions = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _RuleList2 = _interopRequireDefault(RuleList_1);



	var _StyleRule2 = _interopRequireDefault(StyleRule_1);



	var _createRule2 = _interopRequireDefault(createRule_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	// A symbol replacement.
	var now = Date.now();

	var fnValuesNs = 'fnValues' + now;
	var fnStyleNs = 'fnStyle' + ++now;

	exports['default'] = {
	  onCreateRule: function onCreateRule(name, decl, options) {
	    if (typeof decl !== 'function') return null;
	    var rule = (0, _createRule2['default'])(name, {}, options);
	    rule[fnStyleNs] = decl;
	    return rule;
	  },
	  onProcessStyle: function onProcessStyle(style, rule) {
	    var fn = {};
	    for (var prop in style) {
	      var value = style[prop];
	      if (typeof value !== 'function') continue;
	      delete style[prop];
	      fn[prop] = value;
	    }
	    rule = rule;
	    rule[fnValuesNs] = fn;
	    return style;
	  },
	  onUpdate: function onUpdate(data, rule) {
	    // It is a rules container like for e.g. ConditionalRule.
	    if (rule.rules instanceof _RuleList2['default']) {
	      rule.rules.update(data);
	      return;
	    }
	    if (!(rule instanceof _StyleRule2['default'])) return;

	    rule = rule;

	    // If we have a fn values map, it is a rule with function values.
	    if (rule[fnValuesNs]) {
	      for (var prop in rule[fnValuesNs]) {
	        rule.prop(prop, rule[fnValuesNs][prop](data));
	      }
	    }

	    rule = rule;

	    var fnStyle = rule[fnStyleNs];

	    // If we have a style function, the entire rule is dynamic and style object
	    // will be returned from that function.
	    if (fnStyle) {
	      var style = fnStyle(data);
	      for (var _prop in style) {
	        rule.prop(_prop, style[_prop]);
	      }
	    }
	  }
	};
	});

	unwrapExports(functions);

	var DomRenderer_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _warning2 = _interopRequireDefault(browser);



	var _sheets2 = _interopRequireDefault(sheets);



	var _StyleRule2 = _interopRequireDefault(StyleRule_1);



	var _toCssValue2 = _interopRequireDefault(toCssValue_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Cache the value from the first time a function is called.
	 */
	var memoize = function memoize(fn) {
	  var value = void 0;
	  return function () {
	    if (!value) value = fn();
	    return value;
	  };
	};

	/**
	 * Get a style property value.
	 */
	function getPropertyValue(cssRule, prop) {
	  try {
	    return cssRule.style.getPropertyValue(prop);
	  } catch (err) {
	    // IE may throw if property is unknown.
	    return '';
	  }
	}

	/**
	 * Set a style property.
	 */
	function setProperty(cssRule, prop, value) {
	  try {
	    var cssValue = value;

	    if (Array.isArray(value)) {
	      cssValue = (0, _toCssValue2['default'])(value, true);

	      if (value[value.length - 1] === '!important') {
	        cssRule.style.setProperty(prop, cssValue, 'important');
	        return true;
	      }
	    }

	    cssRule.style.setProperty(prop, cssValue);
	  } catch (err) {
	    // IE may throw if property is unknown.
	    return false;
	  }
	  return true;
	}

	/**
	 * Remove a style property.
	 */
	function removeProperty(cssRule, prop) {
	  try {
	    cssRule.style.removeProperty(prop);
	  } catch (err) {
	    (0, _warning2['default'])(false, '[JSS] DOMException "%s" was thrown. Tried to remove property "%s".', err.message, prop);
	  }
	}

	var CSSRuleTypes = {
	  STYLE_RULE: 1,
	  KEYFRAMES_RULE: 7

	  /**
	   * Get the CSS Rule key.
	   */

	};var getKey = function () {
	  var extractKey = function extractKey(cssText) {
	    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    return cssText.substr(from, cssText.indexOf('{') - 1);
	  };

	  return function (cssRule) {
	    if (cssRule.type === CSSRuleTypes.STYLE_RULE) return cssRule.selectorText;
	    if (cssRule.type === CSSRuleTypes.KEYFRAMES_RULE) {
	      var name = cssRule.name;

	      if (name) return '@keyframes ' + name;

	      // There is no rule.name in the following browsers:
	      // - IE 9
	      // - Safari 7.1.8
	      // - Mobile Safari 9.0.0
	      var cssText = cssRule.cssText;

	      return '@' + extractKey(cssText, cssText.indexOf('keyframes'));
	    }

	    // Conditionals.
	    return extractKey(cssRule.cssText);
	  };
	}();

	/**
	 * Set the selector.
	 */
	function setSelector(cssRule, selectorText) {
	  cssRule.selectorText = selectorText;

	  // Return false if setter was not successful.
	  // Currently works in chrome only.
	  return cssRule.selectorText === selectorText;
	}

	/**
	 * Gets the `head` element upon the first call and caches it.
	 */
	var getHead = memoize(function () {
	  return document.head || document.getElementsByTagName('head')[0];
	});

	/**
	 * Gets a map of rule keys, where the property is an unescaped key and value
	 * is a potentially escaped one.
	 * It is used to identify CSS rules and the corresponding JSS rules. As an identifier
	 * for CSSStyleRule we normally use `selectorText`. Though if original selector text
	 * contains escaped code points e.g. `:not(#\\20)`, CSSOM will compile it to `:not(# )`
	 * and so CSS rule's `selectorText` won't match JSS rule selector.
	 *
	 * https://www.w3.org/International/questions/qa-escapes#cssescapes
	 */
	var getUnescapedKeysMap = function () {
	  var style = void 0;
	  var isAttached = false;

	  return function (rules) {
	    var map = {};
	    // https://github.com/facebook/flow/issues/2696
	    if (!style) style = document.createElement('style');
	    for (var i = 0; i < rules.length; i++) {
	      var rule = rules[i];
	      if (!(rule instanceof _StyleRule2['default'])) continue;
	      var selector = rule.selector;
	      // Only unescape selector over CSSOM if it contains a back slash.

	      if (selector && selector.indexOf('\\') !== -1) {
	        // Lazilly attach when needed.
	        if (!isAttached) {
	          getHead().appendChild(style);
	          isAttached = true;
	        }
	        style.textContent = selector + ' {}';
	        var _style = style,
	            sheet = _style.sheet;

	        if (sheet) {
	          var cssRules = sheet.cssRules;

	          if (cssRules) map[cssRules[0].selectorText] = rule.key;
	        }
	      }
	    }
	    if (isAttached) {
	      getHead().removeChild(style);
	      isAttached = false;
	    }
	    return map;
	  };
	}();

	/**
	 * Find attached sheet with an index higher than the passed one.
	 */
	function findHigherSheet(registry, options) {
	  for (var i = 0; i < registry.length; i++) {
	    var sheet = registry[i];
	    if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
	      return sheet;
	    }
	  }
	  return null;
	}

	/**
	 * Find attached sheet with the highest index.
	 */
	function findHighestSheet(registry, options) {
	  for (var i = registry.length - 1; i >= 0; i--) {
	    var sheet = registry[i];
	    if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
	      return sheet;
	    }
	  }
	  return null;
	}

	/**
	 * Find a comment with "jss" inside.
	 */
	function findCommentNode(text) {
	  var head = getHead();
	  for (var i = 0; i < head.childNodes.length; i++) {
	    var node = head.childNodes[i];
	    if (node.nodeType === 8 && node.nodeValue.trim() === text) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Find a node before which we can insert the sheet.
	 */
	function findPrevNode(options) {
	  var registry = _sheets2['default'].registry;


	  if (registry.length > 0) {
	    // Try to insert before the next higher sheet.
	    var sheet = findHigherSheet(registry, options);
	    if (sheet) return sheet.renderer.element;

	    // Otherwise insert after the last attached.
	    sheet = findHighestSheet(registry, options);
	    if (sheet) return sheet.renderer.element.nextElementSibling;
	  }

	  // Try to find a comment placeholder if registry is empty.
	  var insertionPoint = options.insertionPoint;

	  if (insertionPoint && typeof insertionPoint === 'string') {
	    var comment = findCommentNode(insertionPoint);
	    if (comment) return comment.nextSibling;
	    // If user specifies an insertion point and it can't be found in the document -
	    // bad specificity issues may appear.
	    (0, _warning2['default'])(insertionPoint === 'jss', '[JSS] Insertion point "%s" not found.', insertionPoint);
	  }

	  return null;
	}

	/**
	 * Insert style element into the DOM.
	 */
	function insertStyle(style, options) {
	  var insertionPoint = options.insertionPoint;

	  var prevNode = findPrevNode(options);

	  if (prevNode) {
	    var parentNode = prevNode.parentNode;

	    if (parentNode) parentNode.insertBefore(style, prevNode);
	    return;
	  }

	  // Works with iframes and any node types.
	  if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
	    // https://stackoverflow.com/questions/41328728/force-casting-in-flow
	    var insertionPointElement = insertionPoint;
	    var _parentNode = insertionPointElement.parentNode;

	    if (_parentNode) _parentNode.insertBefore(style, insertionPointElement.nextSibling);else (0, _warning2['default'])(false, '[JSS] Insertion point is not in the DOM.');
	    return;
	  }

	  getHead().insertBefore(style, prevNode);
	}

	/**
	 * Read jss nonce setting from the page if the user has set it.
	 */
	var getNonce = memoize(function () {
	  var node = document.querySelector('meta[property="csp-nonce"]');
	  return node ? node.getAttribute('content') : null;
	});

	var DomRenderer = function () {
	  function DomRenderer(sheet) {
	    _classCallCheck(this, DomRenderer);

	    this.getPropertyValue = getPropertyValue;
	    this.setProperty = setProperty;
	    this.removeProperty = removeProperty;
	    this.setSelector = setSelector;
	    this.getKey = getKey;
	    this.getUnescapedKeysMap = getUnescapedKeysMap;
	    this.hasInsertedRules = false;

	    // There is no sheet when the renderer is used from a standalone StyleRule.
	    if (sheet) _sheets2['default'].add(sheet);

	    this.sheet = sheet;

	    var _ref = this.sheet ? this.sheet.options : {},
	        media = _ref.media,
	        meta = _ref.meta,
	        element = _ref.element;

	    this.element = element || document.createElement('style');
	    this.element.type = 'text/css';
	    this.element.setAttribute('data-jss', '');
	    if (media) this.element.setAttribute('media', media);
	    if (meta) this.element.setAttribute('data-meta', meta);
	    var nonce = getNonce();
	    if (nonce) this.element.setAttribute('nonce', nonce);
	  }

	  /**
	   * Insert style element into render tree.
	   */


	  // HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696


	  _createClass(DomRenderer, [{
	    key: 'attach',
	    value: function attach() {
	      // In the case the element node is external and it is already in the DOM.
	      if (this.element.parentNode || !this.sheet) return;

	      // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
	      // browsers remove those rules.
	      // TODO figure out if its a bug and if it is known.
	      // Workaround is to redeploy the sheet before attaching as a string.
	      if (this.hasInsertedRules) {
	        this.deploy();
	        this.hasInsertedRules = false;
	      }

	      insertStyle(this.element, this.sheet.options);
	    }

	    /**
	     * Remove style element from render tree.
	     */

	  }, {
	    key: 'detach',
	    value: function detach() {
	      this.element.parentNode.removeChild(this.element);
	    }

	    /**
	     * Inject CSS string into element.
	     */

	  }, {
	    key: 'deploy',
	    value: function deploy() {
	      if (!this.sheet) return;
	      this.element.textContent = '\n' + this.sheet.toString() + '\n';
	    }

	    /**
	     * Insert a rule into element.
	     */

	  }, {
	    key: 'insertRule',
	    value: function insertRule(rule, index) {
	      var sheet = this.element.sheet;
	      var cssRules = sheet.cssRules;

	      var str = rule.toString();
	      if (!index) index = cssRules.length;

	      if (!str) return false;

	      try {
	        sheet.insertRule(str, index);
	      } catch (err) {
	        (0, _warning2['default'])(false, '[JSS] Can not insert an unsupported rule \n\r%s', rule);
	        return false;
	      }
	      this.hasInsertedRules = true;

	      return cssRules[index];
	    }

	    /**
	     * Delete a rule.
	     */

	  }, {
	    key: 'deleteRule',
	    value: function deleteRule(cssRule) {
	      var sheet = this.element.sheet;

	      var index = this.indexOf(cssRule);
	      if (index === -1) return false;
	      sheet.deleteRule(index);
	      return true;
	    }

	    /**
	     * Get index of a CSS Rule.
	     */

	  }, {
	    key: 'indexOf',
	    value: function indexOf(cssRule) {
	      var cssRules = this.element.sheet.cssRules;

	      for (var _index = 0; _index < cssRules.length; _index++) {
	        if (cssRule === cssRules[_index]) return _index;
	      }
	      return -1;
	    }

	    /**
	     * Generate a new CSS rule and replace the existing one.
	     */

	  }, {
	    key: 'replaceRule',
	    value: function replaceRule(cssRule, rule) {
	      var index = this.indexOf(cssRule);
	      var newCssRule = this.insertRule(rule, index);
	      this.element.sheet.deleteRule(index);
	      return newCssRule;
	    }

	    /**
	     * Get all rules elements.
	     */

	  }, {
	    key: 'getRules',
	    value: function getRules() {
	      return this.element.sheet.cssRules;
	    }
	  }]);

	  return DomRenderer;
	}();

	exports['default'] = DomRenderer;
	});

	unwrapExports(DomRenderer_1);

	var VirtualRenderer_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* eslint-disable class-methods-use-this */

	/**
	 * Rendering backend to do nothing in nodejs.
	 */
	var VirtualRenderer = function () {
	  function VirtualRenderer() {
	    _classCallCheck(this, VirtualRenderer);
	  }

	  _createClass(VirtualRenderer, [{
	    key: 'setProperty',
	    value: function setProperty() {
	      return true;
	    }
	  }, {
	    key: 'getPropertyValue',
	    value: function getPropertyValue() {
	      return '';
	    }
	  }, {
	    key: 'removeProperty',
	    value: function removeProperty() {}
	  }, {
	    key: 'setSelector',
	    value: function setSelector() {
	      return true;
	    }
	  }, {
	    key: 'getKey',
	    value: function getKey() {
	      return '';
	    }
	  }, {
	    key: 'attach',
	    value: function attach() {}
	  }, {
	    key: 'detach',
	    value: function detach() {}
	  }, {
	    key: 'deploy',
	    value: function deploy() {}
	  }, {
	    key: 'insertRule',
	    value: function insertRule() {
	      return false;
	    }
	  }, {
	    key: 'deleteRule',
	    value: function deleteRule() {
	      return true;
	    }
	  }, {
	    key: 'replaceRule',
	    value: function replaceRule() {
	      return false;
	    }
	  }, {
	    key: 'getRules',
	    value: function getRules() {}
	  }, {
	    key: 'indexOf',
	    value: function indexOf() {
	      return -1;
	    }
	  }]);

	  return VirtualRenderer;
	}();

	exports['default'] = VirtualRenderer;
	});

	unwrapExports(VirtualRenderer_1);

	var _isInBrowser = ( module$1 && isBrowser ) || module$1;

	var Jss_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _isInBrowser2 = _interopRequireDefault(_isInBrowser);



	var _StyleSheet2 = _interopRequireDefault(StyleSheet_1);



	var _PluginsRegistry2 = _interopRequireDefault(PluginsRegistry_1);



	var _rules2 = _interopRequireDefault(rules);



	var _observables2 = _interopRequireDefault(observables);



	var _functions2 = _interopRequireDefault(functions);



	var _sheets2 = _interopRequireDefault(sheets);



	var _StyleRule2 = _interopRequireDefault(StyleRule_1);



	var _createGenerateClassName2 = _interopRequireDefault(createGenerateClassName);



	var _createRule3 = _interopRequireDefault(createRule_1);



	var _DomRenderer2 = _interopRequireDefault(DomRenderer_1);



	var _VirtualRenderer2 = _interopRequireDefault(VirtualRenderer_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var defaultPlugins = _rules2['default'].concat([_observables2['default'], _functions2['default']]);

	var instanceCounter = 0;

	var Jss = function () {
	  function Jss(options) {
	    _classCallCheck(this, Jss);

	    this.id = instanceCounter++;
	    this.version = "9.8.0";
	    this.plugins = new _PluginsRegistry2['default']();
	    this.options = {
	      createGenerateClassName: _createGenerateClassName2['default'],
	      Renderer: _isInBrowser2['default'] ? _DomRenderer2['default'] : _VirtualRenderer2['default'],
	      plugins: []
	    };
	    this.generateClassName = (0, _createGenerateClassName2['default'])();

	    // eslint-disable-next-line prefer-spread
	    this.use.apply(this, defaultPlugins);
	    this.setup(options);
	  }

	  _createClass(Jss, [{
	    key: 'setup',
	    value: function setup() {
	      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      if (options.createGenerateClassName) {
	        this.options.createGenerateClassName = options.createGenerateClassName;
	        // $FlowFixMe
	        this.generateClassName = options.createGenerateClassName();
	      }

	      if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;
	      if (options.virtual || options.Renderer) {
	        this.options.Renderer = options.Renderer || (options.virtual ? _VirtualRenderer2['default'] : _DomRenderer2['default']);
	      }

	      // eslint-disable-next-line prefer-spread
	      if (options.plugins) this.use.apply(this, options.plugins);

	      return this;
	    }

	    /**
	     * Create a Style Sheet.
	     */

	  }, {
	    key: 'createStyleSheet',
	    value: function createStyleSheet(styles) {
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      var index = options.index;
	      if (typeof index !== 'number') {
	        index = _sheets2['default'].index === 0 ? 0 : _sheets2['default'].index + 1;
	      }
	      var sheet = new _StyleSheet2['default'](styles, _extends({}, options, {
	        jss: this,
	        generateClassName: options.generateClassName || this.generateClassName,
	        insertionPoint: this.options.insertionPoint,
	        Renderer: this.options.Renderer,
	        index: index
	      }));
	      this.plugins.onProcessSheet(sheet);

	      return sheet;
	    }

	    /**
	     * Detach the Style Sheet and remove it from the registry.
	     */

	  }, {
	    key: 'removeStyleSheet',
	    value: function removeStyleSheet(sheet) {
	      sheet.detach();
	      _sheets2['default'].remove(sheet);
	      return this;
	    }

	    /**
	     * Create a rule without a Style Sheet.
	     */

	  }, {
	    key: 'createRule',
	    value: function createRule(name) {
	      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	      // Enable rule without name for inline styles.
	      if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	        options = style;
	        style = name;
	        name = undefined;
	      }

	      // Cast from RuleFactoryOptions to RuleOptions
	      // https://stackoverflow.com/questions/41328728/force-casting-in-flow
	      var ruleOptions = options;

	      ruleOptions.jss = this;
	      ruleOptions.Renderer = this.options.Renderer;
	      if (!ruleOptions.generateClassName) ruleOptions.generateClassName = this.generateClassName;
	      if (!ruleOptions.classes) ruleOptions.classes = {};
	      var rule = (0, _createRule3['default'])(name, style, ruleOptions);

	      if (!ruleOptions.selector && rule instanceof _StyleRule2['default']) {
	        rule.selector = '.' + ruleOptions.generateClassName(rule);
	      }

	      this.plugins.onProcessRule(rule);

	      return rule;
	    }

	    /**
	     * Register plugin. Passed function will be invoked with a rule instance.
	     */

	  }, {
	    key: 'use',
	    value: function use() {
	      var _this = this;

	      for (var _len = arguments.length, plugins = Array(_len), _key = 0; _key < _len; _key++) {
	        plugins[_key] = arguments[_key];
	      }

	      plugins.forEach(function (plugin) {
	        // Avoids applying same plugin twice, at least based on ref.
	        if (_this.options.plugins.indexOf(plugin) === -1) {
	          _this.options.plugins.push(plugin);
	          _this.plugins.use(plugin);
	        }
	      });

	      return this;
	    }
	  }]);

	  return Jss;
	}();

	exports['default'] = Jss;
	});

	unwrapExports(Jss_1);

	var lib = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.create = exports.createGenerateClassName = exports.sheets = exports.RuleList = exports.SheetsManager = exports.SheetsRegistry = exports.toCssValue = exports.getDynamicStyles = undefined;



	Object.defineProperty(exports, 'getDynamicStyles', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(getDynamicStyles)['default'];
	  }
	});



	Object.defineProperty(exports, 'toCssValue', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(toCssValue_1)['default'];
	  }
	});



	Object.defineProperty(exports, 'SheetsRegistry', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(SheetsRegistry_1)['default'];
	  }
	});



	Object.defineProperty(exports, 'SheetsManager', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(SheetsManager_1)['default'];
	  }
	});



	Object.defineProperty(exports, 'RuleList', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(RuleList_1)['default'];
	  }
	});



	Object.defineProperty(exports, 'sheets', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(sheets)['default'];
	  }
	});



	Object.defineProperty(exports, 'createGenerateClassName', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(createGenerateClassName)['default'];
	  }
	});



	var _Jss2 = _interopRequireDefault(Jss_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Creates a new instance of Jss.
	 */
	var create = exports.create = function create(options) {
	  return new _Jss2['default'](options);
	};

	/**
	 * A global Jss instance.
	 */
	exports['default'] = create();
	});

	unwrapExports(lib);
	var lib_1 = lib.create;
	var lib_2 = lib.createGenerateClassName;
	var lib_3 = lib.sheets;
	var lib_4 = lib.RuleList;
	var lib_5 = lib.SheetsManager;
	var lib_6 = lib.SheetsRegistry;
	var lib_7 = lib.toCssValue;
	var lib_8 = lib.getDynamicStyles;

	var lib$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	exports['default'] = jssGlobal;



	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var propKey = '@global';
	var prefixKey = '@global ';

	var GlobalContainerRule = function () {
	  function GlobalContainerRule(key, styles, options) {
	    _classCallCheck(this, GlobalContainerRule);

	    this.type = 'global';

	    this.key = key;
	    this.options = options;
	    this.rules = new lib.RuleList(_extends({}, options, {
	      parent: this
	    }));

	    for (var selector in styles) {
	      this.rules.add(selector, styles[selector], { selector: selector });
	    }

	    this.rules.process();
	  }

	  /**
	   * Get a rule.
	   */


	  _createClass(GlobalContainerRule, [{
	    key: 'getRule',
	    value: function getRule(name) {
	      return this.rules.get(name);
	    }

	    /**
	     * Create and register rule, run plugins.
	     */

	  }, {
	    key: 'addRule',
	    value: function addRule(name, style, options) {
	      var rule = this.rules.add(name, style, options);
	      this.options.jss.plugins.onProcessRule(rule);
	      return rule;
	    }

	    /**
	     * Get index of a rule.
	     */

	  }, {
	    key: 'indexOf',
	    value: function indexOf(rule) {
	      return this.rules.indexOf(rule);
	    }

	    /**
	     * Generates a CSS string.
	     */

	  }, {
	    key: 'toString',
	    value: function toString() {
	      return this.rules.toString();
	    }
	  }]);

	  return GlobalContainerRule;
	}();

	var GlobalPrefixedRule = function () {
	  function GlobalPrefixedRule(name, style, options) {
	    _classCallCheck(this, GlobalPrefixedRule);

	    this.name = name;
	    this.options = options;
	    var selector = name.substr(prefixKey.length);
	    this.rule = options.jss.createRule(selector, style, _extends({}, options, {
	      parent: this,
	      selector: selector
	    }));
	  }

	  _createClass(GlobalPrefixedRule, [{
	    key: 'toString',
	    value: function toString(options) {
	      return this.rule.toString(options);
	    }
	  }]);

	  return GlobalPrefixedRule;
	}();

	var separatorRegExp = /\s*,\s*/g;

	function addScope(selector, scope) {
	  var parts = selector.split(separatorRegExp);
	  var scoped = '';
	  for (var i = 0; i < parts.length; i++) {
	    scoped += scope + ' ' + parts[i].trim();
	    if (parts[i + 1]) scoped += ', ';
	  }
	  return scoped;
	}

	function handleNestedGlobalContainerRule(rule) {
	  var options = rule.options,
	      style = rule.style;

	  var rules = style[propKey];

	  if (!rules) return;

	  for (var name in rules) {
	    options.sheet.addRule(name, rules[name], _extends({}, options, {
	      selector: addScope(name, rule.selector)
	    }));
	  }

	  delete style[propKey];
	}

	function handlePrefixedGlobalRule(rule) {
	  var options = rule.options,
	      style = rule.style;

	  for (var prop in style) {
	    if (prop.substr(0, propKey.length) !== propKey) continue;

	    var selector = addScope(prop.substr(propKey.length), rule.selector);
	    options.sheet.addRule(selector, style[prop], _extends({}, options, {
	      selector: selector
	    }));
	    delete style[prop];
	  }
	}

	/**
	 * Convert nested rules to separate, remove them from original styles.
	 *
	 * @param {Rule} rule
	 * @api public
	 */
	function jssGlobal() {
	  function onCreateRule(name, styles, options) {
	    if (name === propKey) {
	      return new GlobalContainerRule(name, styles, options);
	    }

	    if (name[0] === '@' && name.substr(0, prefixKey.length) === prefixKey) {
	      return new GlobalPrefixedRule(name, styles, options);
	    }

	    var parent = options.parent;


	    if (parent) {
	      if (parent.type === 'global' || parent.options.parent.type === 'global') {
	        options.global = true;
	      }
	    }

	    if (options.global) options.selector = name;

	    return null;
	  }

	  function onProcessRule(rule) {
	    if (rule.type !== 'style') return;

	    handleNestedGlobalContainerRule(rule);
	    handlePrefixedGlobalRule(rule);
	  }

	  return { onCreateRule: onCreateRule, onProcessRule: onProcessRule };
	}
	});

	unwrapExports(lib$1);

	var lib$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	exports.default = jssNested;



	var _warning2 = _interopRequireDefault(browser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var separatorRegExp = /\s*,\s*/g;
	var parentRegExp = /&/g;
	var refRegExp = /\$([\w-]+)/g;

	/**
	 * Convert nested rules to separate, remove them from original styles.
	 *
	 * @param {Rule} rule
	 * @api public
	 */
	function jssNested() {
	  // Get a function to be used for $ref replacement.
	  function getReplaceRef(container) {
	    return function (match, key) {
	      var rule = container.getRule(key);
	      if (rule) return rule.selector;
	      (0, _warning2.default)(false, '[JSS] Could not find the referenced rule %s in %s.', key, container.options.meta || container);
	      return key;
	    };
	  }

	  var hasAnd = function hasAnd(str) {
	    return str.indexOf('&') !== -1;
	  };

	  function replaceParentRefs(nestedProp, parentProp) {
	    var parentSelectors = parentProp.split(separatorRegExp);
	    var nestedSelectors = nestedProp.split(separatorRegExp);

	    var result = '';

	    for (var i = 0; i < parentSelectors.length; i++) {
	      var parent = parentSelectors[i];

	      for (var j = 0; j < nestedSelectors.length; j++) {
	        var nested = nestedSelectors[j];
	        if (result) result += ', ';
	        // Replace all & by the parent or prefix & with the parent.
	        result += hasAnd(nested) ? nested.replace(parentRegExp, parent) : parent + ' ' + nested;
	      }
	    }

	    return result;
	  }

	  function getOptions(rule, container, options) {
	    // Options has been already created, now we only increase index.
	    if (options) return _extends({}, options, { index: options.index + 1 });

	    var nestingLevel = rule.options.nestingLevel;

	    nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;

	    return _extends({}, rule.options, {
	      nestingLevel: nestingLevel,
	      index: container.indexOf(rule) + 1
	    });
	  }

	  function onProcessStyle(style, rule) {
	    if (rule.type !== 'style') return style;
	    var container = rule.options.parent;
	    var options = void 0;
	    var replaceRef = void 0;
	    for (var prop in style) {
	      var isNested = hasAnd(prop);
	      var isNestedConditional = prop[0] === '@';

	      if (!isNested && !isNestedConditional) continue;

	      options = getOptions(rule, container, options);

	      if (isNested) {
	        var selector = replaceParentRefs(prop, rule.selector
	        // Lazily create the ref replacer function just once for
	        // all nested rules within the sheet.
	        );if (!replaceRef) replaceRef = getReplaceRef(container
	        // Replace all $refs.
	        );selector = selector.replace(refRegExp, replaceRef);

	        container.addRule(selector, style[prop], _extends({}, options, { selector: selector }));
	      } else if (isNestedConditional) {
	        container
	        // Place conditional right after the parent rule to ensure right ordering.
	        .addRule(prop, null, options).addRule(rule.key, style[prop], { selector: rule.selector });
	      }

	      delete style[prop];
	    }

	    return style;
	  }

	  return { onProcessStyle: onProcessStyle };
	}
	});

	unwrapExports(lib$2);

	var uppercasePattern = /[A-Z]/g;
	var msPattern = /^ms-/;
	var cache = {};

	function hyphenateStyleName(string) {
	    return string in cache
	    ? cache[string]
	    : cache[string] = string
	      .replace(uppercasePattern, '-$&')
	      .toLowerCase()
	      .replace(msPattern, '-ms-');
	}

	var hyphenateStyleName_1 = hyphenateStyleName;

	var lib$3 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = camelCase;



	var _hyphenateStyleName2 = _interopRequireDefault(hyphenateStyleName_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Convert camel cased property names to dash separated.
	 *
	 * @param {Object} style
	 * @return {Object}
	 */
	function convertCase(style) {
	  var converted = {};

	  for (var prop in style) {
	    converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];
	  }

	  if (style.fallbacks) {
	    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);
	  }

	  return converted;
	}

	/**
	 * Allow camel cased property names by converting them back to dasherized.
	 *
	 * @param {Rule} rule
	 */
	function camelCase() {
	  function onProcessStyle(style) {
	    if (Array.isArray(style)) {
	      // Handle rules like @font-face, which can have multiple styles in an array
	      for (var index = 0; index < style.length; index++) {
	        style[index] = convertCase(style[index]);
	      }
	      return style;
	    }

	    return convertCase(style);
	  }

	  function onChangeValue(value, prop, rule) {
	    var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop);

	    // There was no camel case in place
	    if (prop === hyphenatedProp) return value;

	    rule.prop(hyphenatedProp, value);

	    // Core will ignore that property value we set the proper one above.
	    return null;
	  }

	  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };
	}
	});

	unwrapExports(lib$3);

	var defaultUnits = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/**
	 * Generated jss-default-unit CSS property units
	 *
	 * @type object
	 */
	exports['default'] = {
	  'animation-delay': 'ms',
	  'animation-duration': 'ms',
	  'background-position': 'px',
	  'background-position-x': 'px',
	  'background-position-y': 'px',
	  'background-size': 'px',
	  border: 'px',
	  'border-bottom': 'px',
	  'border-bottom-left-radius': 'px',
	  'border-bottom-right-radius': 'px',
	  'border-bottom-width': 'px',
	  'border-left': 'px',
	  'border-left-width': 'px',
	  'border-radius': 'px',
	  'border-right': 'px',
	  'border-right-width': 'px',
	  'border-spacing': 'px',
	  'border-top': 'px',
	  'border-top-left-radius': 'px',
	  'border-top-right-radius': 'px',
	  'border-top-width': 'px',
	  'border-width': 'px',
	  'border-after-width': 'px',
	  'border-before-width': 'px',
	  'border-end-width': 'px',
	  'border-horizontal-spacing': 'px',
	  'border-start-width': 'px',
	  'border-vertical-spacing': 'px',
	  bottom: 'px',
	  'box-shadow': 'px',
	  'column-gap': 'px',
	  'column-rule': 'px',
	  'column-rule-width': 'px',
	  'column-width': 'px',
	  'flex-basis': 'px',
	  'font-size': 'px',
	  'font-size-delta': 'px',
	  height: 'px',
	  left: 'px',
	  'letter-spacing': 'px',
	  'logical-height': 'px',
	  'logical-width': 'px',
	  margin: 'px',
	  'margin-after': 'px',
	  'margin-before': 'px',
	  'margin-bottom': 'px',
	  'margin-left': 'px',
	  'margin-right': 'px',
	  'margin-top': 'px',
	  'max-height': 'px',
	  'max-width': 'px',
	  'margin-end': 'px',
	  'margin-start': 'px',
	  'mask-position-x': 'px',
	  'mask-position-y': 'px',
	  'mask-size': 'px',
	  'max-logical-height': 'px',
	  'max-logical-width': 'px',
	  'min-height': 'px',
	  'min-width': 'px',
	  'min-logical-height': 'px',
	  'min-logical-width': 'px',
	  motion: 'px',
	  'motion-offset': 'px',
	  outline: 'px',
	  'outline-offset': 'px',
	  'outline-width': 'px',
	  padding: 'px',
	  'padding-bottom': 'px',
	  'padding-left': 'px',
	  'padding-right': 'px',
	  'padding-top': 'px',
	  'padding-after': 'px',
	  'padding-before': 'px',
	  'padding-end': 'px',
	  'padding-start': 'px',
	  'perspective-origin-x': '%',
	  'perspective-origin-y': '%',
	  perspective: 'px',
	  right: 'px',
	  'shape-margin': 'px',
	  size: 'px',
	  'text-indent': 'px',
	  'text-stroke': 'px',
	  'text-stroke-width': 'px',
	  top: 'px',
	  'transform-origin': '%',
	  'transform-origin-x': '%',
	  'transform-origin-y': '%',
	  'transform-origin-z': '%',
	  'transition-delay': 'ms',
	  'transition-duration': 'ms',
	  'vertical-align': 'px',
	  width: 'px',
	  'word-spacing': 'px',
	  // Not existing properties.
	  // Used to avoid issues with jss-expand intergration.
	  'box-shadow-x': 'px',
	  'box-shadow-y': 'px',
	  'box-shadow-blur': 'px',
	  'box-shadow-spread': 'px',
	  'font-line-height': 'px',
	  'text-shadow-x': 'px',
	  'text-shadow-y': 'px',
	  'text-shadow-blur': 'px'
	};
	});

	unwrapExports(defaultUnits);

	var lib$4 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports['default'] = defaultUnit;



	var _defaultUnits2 = _interopRequireDefault(defaultUnits);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Clones the object and adds a camel cased property version.
	 */
	function addCamelCasedVersion(obj) {
	  var regExp = /(-[a-z])/g;
	  var replace = function replace(str) {
	    return str[1].toUpperCase();
	  };
	  var newObj = {};
	  for (var key in obj) {
	    newObj[key] = obj[key];
	    newObj[key.replace(regExp, replace)] = obj[key];
	  }
	  return newObj;
	}

	var units = addCamelCasedVersion(_defaultUnits2['default']);

	/**
	 * Recursive deep style passing function
	 *
	 * @param {String} current property
	 * @param {(Object|Array|Number|String)} property value
	 * @param {Object} options
	 * @return {(Object|Array|Number|String)} resulting value
	 */
	function iterate(prop, value, options) {
	  if (!value) return value;

	  var convertedValue = value;

	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  if (type === 'object' && Array.isArray(value)) type = 'array';

	  switch (type) {
	    case 'object':
	      if (prop === 'fallbacks') {
	        for (var innerProp in value) {
	          value[innerProp] = iterate(innerProp, value[innerProp], options);
	        }
	        break;
	      }
	      for (var _innerProp in value) {
	        value[_innerProp] = iterate(prop + '-' + _innerProp, value[_innerProp], options);
	      }
	      break;
	    case 'array':
	      for (var i = 0; i < value.length; i++) {
	        value[i] = iterate(prop, value[i], options);
	      }
	      break;
	    case 'number':
	      if (value !== 0) {
	        convertedValue = value + (options[prop] || units[prop] || '');
	      }
	      break;
	    default:
	      break;
	  }

	  return convertedValue;
	}

	/**
	 * Add unit to numeric values.
	 */
	function defaultUnit() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  var camelCasedOptions = addCamelCasedVersion(options);

	  function onProcessStyle(style, rule) {
	    if (rule.type !== 'style') return style;

	    for (var prop in style) {
	      style[prop] = iterate(prop, style[prop], camelCasedOptions);
	    }

	    return style;
	  }

	  function onChangeValue(value, prop) {
	    return iterate(prop, value, camelCasedOptions);
	  }

	  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };
	}
	});

	unwrapExports(lib$4);

	var prefix = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _isInBrowser2 = _interopRequireDefault(_isInBrowser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var js = ''; /**
	              * Export javascript style and css style vendor prefixes.
	              * Based on "transform" support test.
	              */

	var css = '';

	// We should not do anything if required serverside.
	if (_isInBrowser2['default']) {
	  // Order matters. We need to check Webkit the last one because
	  // other vendors use to add Webkit prefixes to some properties
	  var jsCssMap = {
	    Moz: '-moz-',
	    // IE did it wrong again ...
	    ms: '-ms-',
	    O: '-o-',
	    Webkit: '-webkit-'
	  };
	  var style = document.createElement('p').style;
	  var testProp = 'Transform';

	  for (var key in jsCssMap) {
	    if (key + testProp in style) {
	      js = key;
	      css = jsCssMap[key];
	      break;
	    }
	  }
	}

	/**
	 * Vendor prefix string for the current browser.
	 *
	 * @type {{js: String, css: String}}
	 * @api public
	 */
	exports['default'] = { js: js, css: css };
	});

	unwrapExports(prefix);

	var camelize_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = camelize;
	var regExp = /[-\s]+(.)?/g;

	/**
	 * Convert dash separated strings to camel cased.
	 *
	 * @param {String} str
	 * @return {String}
	 */
	function camelize(str) {
	  return str.replace(regExp, toUpper);
	}

	function toUpper(match, c) {
	  return c ? c.toUpperCase() : '';
	}
	});

	unwrapExports(camelize_1);

	var supportedProperty_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = supportedProperty;



	var _isInBrowser2 = _interopRequireDefault(_isInBrowser);



	var _prefix2 = _interopRequireDefault(prefix);



	var _camelize2 = _interopRequireDefault(camelize_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var el = void 0;
	var cache = {};

	if (_isInBrowser2['default']) {
	  el = document.createElement('p');

	  /**
	   * We test every property on vendor prefix requirement.
	   * Once tested, result is cached. It gives us up to 70% perf boost.
	   * http://jsperf.com/element-style-object-access-vs-plain-object
	   *
	   * Prefill cache with known css properties to reduce amount of
	   * properties we need to feature test at runtime.
	   * http://davidwalsh.name/vendor-prefix
	   */
	  var computed = window.getComputedStyle(document.documentElement, '');
	  for (var key in computed) {
	    if (!isNaN(key)) cache[computed[key]] = computed[key];
	  }
	}

	/**
	 * Test if a property is supported, returns supported property with vendor
	 * prefix if required. Returns `false` if not supported.
	 *
	 * @param {String} prop dash separated
	 * @return {String|Boolean}
	 * @api public
	 */
	function supportedProperty(prop) {
	  // For server-side rendering.
	  if (!el) return prop;

	  // We have not tested this prop yet, lets do the test.
	  if (cache[prop] != null) return cache[prop];

	  // Camelization is required because we can't test using
	  // css syntax for e.g. in FF.
	  // Test if property is supported as it is.
	  if ((0, _camelize2['default'])(prop) in el.style) {
	    cache[prop] = prop;
	  }
	  // Test if property is supported with vendor prefix.
	  else if (_prefix2['default'].js + (0, _camelize2['default'])('-' + prop) in el.style) {
	      cache[prop] = _prefix2['default'].css + prop;
	    } else {
	      cache[prop] = false;
	    }

	  return cache[prop];
	}
	});

	unwrapExports(supportedProperty_1);

	var supportedValue_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = supportedValue;



	var _isInBrowser2 = _interopRequireDefault(_isInBrowser);



	var _prefix2 = _interopRequireDefault(prefix);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var cache = {};
	var el = void 0;

	if (_isInBrowser2['default']) el = document.createElement('p');

	/**
	 * Returns prefixed value if needed. Returns `false` if value is not supported.
	 *
	 * @param {String} property
	 * @param {String} value
	 * @return {String|Boolean}
	 * @api public
	 */
	function supportedValue(property, value) {
	  // For server-side rendering.
	  if (!el) return value;

	  // It is a string or a number as a string like '1'.
	  // We want only prefixable values here.
	  if (typeof value !== 'string' || !isNaN(parseInt(value, 10))) return value;

	  var cacheKey = property + value;

	  if (cache[cacheKey] != null) return cache[cacheKey];

	  // IE can even throw an error in some cases, for e.g. style.content = 'bar'
	  try {
	    // Test value as it is.
	    el.style[property] = value;
	  } catch (err) {
	    cache[cacheKey] = false;
	    return false;
	  }

	  // Value is supported as it is.
	  if (el.style[property] !== '') {
	    cache[cacheKey] = value;
	  } else {
	    // Test value with vendor prefix.
	    value = _prefix2['default'].css + value;

	    // Hardcode test to convert "flex" to "-ms-flexbox" for IE10.
	    if (value === '-ms-flex') value = '-ms-flexbox';

	    el.style[property] = value;

	    // Value is supported with vendor prefix.
	    if (el.style[property] !== '') cache[cacheKey] = value;
	  }

	  if (!cache[cacheKey]) cache[cacheKey] = false;

	  // Reset style value.
	  el.style[property] = '';

	  return cache[cacheKey];
	}
	});

	unwrapExports(supportedValue_1);

	var lib$5 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.supportedValue = exports.supportedProperty = exports.prefix = undefined;



	var _prefix2 = _interopRequireDefault(prefix);



	var _supportedProperty2 = _interopRequireDefault(supportedProperty_1);



	var _supportedValue2 = _interopRequireDefault(supportedValue_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	exports['default'] = {
	  prefix: _prefix2['default'],
	  supportedProperty: _supportedProperty2['default'],
	  supportedValue: _supportedValue2['default']
	}; /**
	    * CSS Vendor prefix detection and property feature testing.
	    *
	    * @copyright Oleg Slobodskoi 2015
	    * @website https://github.com/jsstyles/css-vendor
	    * @license MIT
	    */

	exports.prefix = _prefix2['default'];
	exports.supportedProperty = _supportedProperty2['default'];
	exports.supportedValue = _supportedValue2['default'];
	});

	unwrapExports(lib$5);
	var lib_1$1 = lib$5.supportedValue;
	var lib_2$1 = lib$5.supportedProperty;
	var lib_3$1 = lib$5.prefix;

	var lib$6 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = jssVendorPrefixer;



	var vendor = _interopRequireWildcard(lib$5);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	/**
	 * Add vendor prefix to a property name when needed.
	 *
	 * @param {Rule} rule
	 * @api public
	 */
	function jssVendorPrefixer() {
	  function onProcessRule(rule) {
	    if (rule.type === 'keyframes') {
	      rule.key = '@' + vendor.prefix.css + rule.key.substr(1);
	    }
	  }

	  function onProcessStyle(style, rule) {
	    if (rule.type !== 'style') return style;

	    for (var prop in style) {
	      var value = style[prop];

	      var changeProp = false;
	      var supportedProp = vendor.supportedProperty(prop);
	      if (supportedProp && supportedProp !== prop) changeProp = true;

	      var changeValue = false;
	      var supportedValue = vendor.supportedValue(supportedProp, value);
	      if (supportedValue && supportedValue !== value) changeValue = true;

	      if (changeProp || changeValue) {
	        if (changeProp) delete style[prop];
	        style[supportedProp || prop] = supportedValue || value;
	      }
	    }

	    return style;
	  }

	  function onChangeValue(value, prop) {
	    return vendor.supportedValue(prop, value);
	  }

	  return { onProcessRule: onProcessRule, onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };
	}
	});

	unwrapExports(lib$6);

	var lib$7 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = jssPropsSort;
	/**
	 * Sort props by length.
	 */
	function jssPropsSort() {
	  function sort(prop0, prop1) {
	    return prop0.length - prop1.length;
	  }

	  function onProcessStyle(style, rule) {
	    if (rule.type !== 'style') return style;

	    var newStyle = {};
	    var props = Object.keys(style).sort(sort);
	    for (var prop in props) {
	      newStyle[props[prop]] = style[props[prop]];
	    }
	    return newStyle;
	  }

	  return { onProcessStyle: onProcessStyle };
	}
	});

	unwrapExports(lib$7);

	var jssPreset_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _jssGlobal2 = _interopRequireDefault(lib$1);



	var _jssNested2 = _interopRequireDefault(lib$2);



	var _jssCamelCase2 = _interopRequireDefault(lib$3);



	var _jssDefaultUnit2 = _interopRequireDefault(lib$4);



	var _jssVendorPrefixer2 = _interopRequireDefault(lib$6);



	var _jssPropsSort2 = _interopRequireDefault(lib$7);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Subset of jss-preset-default with only the plugins the Material-UI
	// components are using.
	function jssPreset() {
	  return {
	    plugins: [(0, _jssGlobal2.default)(), (0, _jssNested2.default)(), (0, _jssCamelCase2.default)(), (0, _jssDefaultUnit2.default)(), (0, _jssVendorPrefixer2.default)(), (0, _jssPropsSort2.default)()]
	  };
	}

	exports.default = jssPreset;
	});

	unwrapExports(jssPreset_1);

	var isMergeableObject = function isMergeableObject(value) {
		return isNonNullObject(value)
			&& !isSpecial(value)
	};

	function isNonNullObject(value) {
		return !!value && typeof value === 'object'
	}

	function isSpecial(value) {
		var stringValue = Object.prototype.toString.call(value);

		return stringValue === '[object RegExp]'
			|| stringValue === '[object Date]'
			|| isReactElement(value)
	}

	// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
	var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

	function isReactElement(value) {
		return value.$$typeof === REACT_ELEMENT_TYPE
	}

	function emptyTarget(val) {
		return Array.isArray(val) ? [] : {}
	}

	function cloneUnlessOtherwiseSpecified(value, options) {
		return (options.clone !== false && options.isMergeableObject(value))
			? deepmerge(emptyTarget(value), value, options)
			: value
	}

	function defaultArrayMerge(target, source, options) {
		return target.concat(source).map(function(element) {
			return cloneUnlessOtherwiseSpecified(element, options)
		})
	}

	function mergeObject(target, source, options) {
		var destination = {};
		if (options.isMergeableObject(target)) {
			Object.keys(target).forEach(function(key) {
				destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
			});
		}
		Object.keys(source).forEach(function(key) {
			if (!options.isMergeableObject(source[key]) || !target[key]) {
				destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
			} else {
				destination[key] = deepmerge(target[key], source[key], options);
			}
		});
		return destination
	}

	function deepmerge(target, source, options) {
		options = options || {};
		options.arrayMerge = options.arrayMerge || defaultArrayMerge;
		options.isMergeableObject = options.isMergeableObject || isMergeableObject;

		var sourceIsArray = Array.isArray(source);
		var targetIsArray = Array.isArray(target);
		var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

		if (!sourceAndTargetTypesMatch) {
			return cloneUnlessOtherwiseSpecified(source, options)
		} else if (sourceIsArray) {
			return options.arrayMerge(target, source, options)
		} else {
			return mergeObject(target, source, options)
		}
	}

	deepmerge.all = function deepmergeAll(array, options) {
		if (!Array.isArray(array)) {
			throw new Error('first argument should be an array')
		}

		return array.reduce(function(prev, next) {
			return deepmerge(prev, next, options)
		}, {})
	};

	var deepmerge_1 = deepmerge;

	var es$1 = /*#__PURE__*/Object.freeze({
		default: deepmerge_1
	});

	var _deepmerge = ( es$1 && deepmerge_1 ) || es$1;

	var createTypography_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);

	exports.default = createTypography;



	var _deepmerge2 = _interopRequireDefault(_deepmerge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// < 1kb payload overhead when lodash/merge is > 3kb.

	function round(value) {
	  return Math.round(value * 1e5) / 1e5;
	}

	function createTypography(palette, typography) {
	  var _ref = typeof typography === 'function' ? typography(palette) : typography,
	      _ref$fontFamily = _ref.fontFamily,
	      fontFamily = _ref$fontFamily === undefined ? '"Roboto", "Helvetica", "Arial", sans-serif' : _ref$fontFamily,
	      _ref$fontSize = _ref.fontSize,
	      fontSize = _ref$fontSize === undefined ? 14 : _ref$fontSize,
	      _ref$fontWeightLight = _ref.fontWeightLight,
	      fontWeightLight = _ref$fontWeightLight === undefined ? 300 : _ref$fontWeightLight,
	      _ref$fontWeightRegula = _ref.fontWeightRegular,
	      fontWeightRegular = _ref$fontWeightRegula === undefined ? 400 : _ref$fontWeightRegula,
	      _ref$fontWeightMedium = _ref.fontWeightMedium,
	      fontWeightMedium = _ref$fontWeightMedium === undefined ? 500 : _ref$fontWeightMedium,
	      _ref$htmlFontSize = _ref.htmlFontSize,
	      htmlFontSize = _ref$htmlFontSize === undefined ? 16 : _ref$htmlFontSize,
	      other = (0, _objectWithoutProperties3.default)(_ref, ['fontFamily', 'fontSize', 'fontWeightLight', 'fontWeightRegular', 'fontWeightMedium', 'htmlFontSize']);

	  function pxToRem(value) {
	    return value / htmlFontSize + 'rem';
	  }

	  return (0, _deepmerge2.default)({
	    pxToRem: pxToRem,
	    round: round,
	    fontFamily: fontFamily,
	    fontSize: fontSize,
	    fontWeightLight: fontWeightLight,
	    fontWeightRegular: fontWeightRegular,
	    fontWeightMedium: fontWeightMedium,
	    display4: {
	      fontSize: pxToRem(112),
	      fontWeight: fontWeightLight,
	      fontFamily: fontFamily,
	      letterSpacing: '-.04em',
	      lineHeight: round(128 / 112) + 'em',
	      marginLeft: '-.06em',
	      color: palette.text.secondary
	    },
	    display3: {
	      fontSize: pxToRem(56),
	      fontWeight: fontWeightRegular,
	      fontFamily: fontFamily,
	      letterSpacing: '-.02em',
	      lineHeight: round(73 / 56) + 'em',
	      marginLeft: '-.04em',
	      color: palette.text.secondary
	    },
	    display2: {
	      fontSize: pxToRem(45),
	      fontWeight: fontWeightRegular,
	      fontFamily: fontFamily,
	      lineHeight: round(48 / 45) + 'em',
	      marginLeft: '-.04em',
	      color: palette.text.secondary
	    },
	    display1: {
	      fontSize: pxToRem(34),
	      fontWeight: fontWeightRegular,
	      fontFamily: fontFamily,
	      lineHeight: round(41 / 34) + 'em',
	      marginLeft: '-.04em',
	      color: palette.text.secondary
	    },
	    headline: {
	      fontSize: pxToRem(24),
	      fontWeight: fontWeightRegular,
	      fontFamily: fontFamily,
	      lineHeight: round(32.5 / 24) + 'em',
	      color: palette.text.primary
	    },
	    title: {
	      fontSize: pxToRem(21),
	      fontWeight: fontWeightMedium,
	      fontFamily: fontFamily,
	      lineHeight: round(24.5 / 21) + 'em',
	      color: palette.text.primary
	    },
	    subheading: {
	      fontSize: pxToRem(16),
	      fontWeight: fontWeightRegular,
	      fontFamily: fontFamily,
	      lineHeight: round(24 / 16) + 'em',
	      color: palette.text.primary
	    },
	    body2: {
	      fontSize: pxToRem(14),
	      fontWeight: fontWeightMedium,
	      fontFamily: fontFamily,
	      lineHeight: round(24 / 14) + 'em',
	      color: palette.text.primary
	    },
	    body1: {
	      fontSize: pxToRem(14),
	      fontWeight: fontWeightRegular,
	      fontFamily: fontFamily,
	      lineHeight: round(20.5 / 14) + 'em',
	      color: palette.text.primary
	    },
	    caption: {
	      fontSize: pxToRem(12),
	      fontWeight: fontWeightRegular,
	      fontFamily: fontFamily,
	      lineHeight: round(16.5 / 12) + 'em',
	      color: palette.text.secondary
	    },
	    button: {
	      fontSize: pxToRem(fontSize),
	      textTransform: 'uppercase',
	      fontWeight: fontWeightMedium,
	      fontFamily: fontFamily
	    }
	  }, other, {
	    clone: false // No need to clone deep
	  });
	}
	});

	unwrapExports(createTypography_1);

	var createBreakpoints_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.keys = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);

	exports.default = createBreakpoints;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Sorted ASC by size. That's important.
	// It can't be configured as it's used statically for propTypes.
	var keys = exports.keys = ['xs', 'sm', 'md', 'lg', 'xl'];

	// Keep in mind that @media is inclusive by the CSS specification.
	function createBreakpoints(breakpoints) {
	  var _breakpoints$values = breakpoints.values,
	      values = _breakpoints$values === undefined ? {
	    xs: 0,
	    sm: 600,
	    md: 960,
	    lg: 1280,
	    xl: 1920
	  } : _breakpoints$values,
	      _breakpoints$unit = breakpoints.unit,
	      unit = _breakpoints$unit === undefined ? 'px' : _breakpoints$unit,
	      _breakpoints$step = breakpoints.step,
	      step = _breakpoints$step === undefined ? 5 : _breakpoints$step,
	      other = (0, _objectWithoutProperties3.default)(breakpoints, ['values', 'unit', 'step']);


	  function up(key) {
	    var value = typeof values[key] === 'number' ? values[key] : key;
	    return '@media (min-width:' + value + unit + ')';
	  }

	  function down(key) {
	    var endIndex = keys.indexOf(key) + 1;
	    var upperbound = values[keys[endIndex]];

	    if (endIndex === keys.length) {
	      // xl down applies to all sizes
	      return up('xs');
	    }

	    var value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;
	    return '@media (max-width:' + (value - step / 100) + unit + ')';
	  }

	  function between(start, end) {
	    var endIndex = keys.indexOf(end) + 1;

	    if (endIndex === keys.length) {
	      return up(start);
	    }

	    return '@media (min-width:' + values[start] + unit + ') and ' + ('(max-width:' + (values[keys[endIndex]] - step / 100) + unit + ')');
	  }

	  function only(key) {
	    return between(key, key);
	  }

	  function width(key) {
	    return values[key];
	  }

	  return (0, _extends3.default)({
	    keys: keys,
	    values: values,
	    up: up,
	    down: down,
	    between: between,
	    only: only,
	    width: width
	  }, other);
	}
	});

	unwrapExports(createBreakpoints_1);
	var createBreakpoints_2 = createBreakpoints_1.keys;

	var indigo_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var indigo = {
	  50: '#e8eaf6',
	  100: '#c5cae9',
	  200: '#9fa8da',
	  300: '#7986cb',
	  400: '#5c6bc0',
	  500: '#3f51b5',
	  600: '#3949ab',
	  700: '#303f9f',
	  800: '#283593',
	  900: '#1a237e',
	  A100: '#8c9eff',
	  A200: '#536dfe',
	  A400: '#3d5afe',
	  A700: '#304ffe'
	};

	exports.default = indigo;
	});

	unwrapExports(indigo_1);

	var pink_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var pink = {
	  50: '#fce4ec',
	  100: '#f8bbd0',
	  200: '#f48fb1',
	  300: '#f06292',
	  400: '#ec407a',
	  500: '#e91e63',
	  600: '#d81b60',
	  700: '#c2185b',
	  800: '#ad1457',
	  900: '#880e4f',
	  A100: '#ff80ab',
	  A200: '#ff4081',
	  A400: '#f50057',
	  A700: '#c51162'
	};

	exports.default = pink;
	});

	unwrapExports(pink_1);

	var grey_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var grey = {
	  50: '#fafafa',
	  100: '#f5f5f5',
	  200: '#eeeeee',
	  300: '#e0e0e0',
	  400: '#bdbdbd',
	  500: '#9e9e9e',
	  600: '#757575',
	  700: '#616161',
	  800: '#424242',
	  900: '#212121',
	  A100: '#d5d5d5',
	  A200: '#aaaaaa',
	  A400: '#303030',
	  A700: '#616161'
	};

	exports.default = grey;
	});

	unwrapExports(grey_1);

	var red_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var red = {
	  50: '#ffebee',
	  100: '#ffcdd2',
	  200: '#ef9a9a',
	  300: '#e57373',
	  400: '#ef5350',
	  500: '#f44336',
	  600: '#e53935',
	  700: '#d32f2f',
	  800: '#c62828',
	  900: '#b71c1c',
	  A100: '#ff8a80',
	  A200: '#ff5252',
	  A400: '#ff1744',
	  A700: '#d50000'
	};

	exports.default = red;
	});

	unwrapExports(red_1);

	var common_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var common = {
	  black: '#000',
	  white: '#fff'
	};

	exports.default = common;
	});

	unwrapExports(common_1);

	var colorManipulator = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.convertHexToRGB = convertHexToRGB;
	exports.decomposeColor = decomposeColor;
	exports.recomposeColor = recomposeColor;
	exports.getContrastRatio = getContrastRatio;
	exports.getLuminance = getLuminance;
	exports.emphasize = emphasize;
	exports.fade = fade;
	exports.darken = darken;
	exports.lighten = lighten;



	var _warning2 = _interopRequireDefault(browser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Returns a number whose value is limited to the given range.
	 *
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp(value) {
	  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

	  (0, _warning2.default)(value >= min && value <= max, 'Material-UI: the value provided ' + value + ' is out of range [' + min + ', ' + max + '].');

	  if (value < min) {
	    return min;
	  }
	  if (value > max) {
	    return max;
	  }
	  return value;
	}

	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 *
	 *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 *  @returns {string} A CSS rgb color string
	 */
	//  weak
	/* eslint-disable no-use-before-define */

	function convertHexToRGB(color) {
	  color = color.substr(1);

	  var re = new RegExp('.{1,' + color.length / 3 + '}', 'g');
	  var colors = color.match(re);

	  if (colors && colors[0].length === 1) {
	    colors = colors.map(function (n) {
	      return n + n;
	    });
	  }

	  return colors ? 'rgb(' + colors.map(function (n) {
	    return parseInt(n, 16);
	  }).join(', ') + ')' : '';
	}

	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {object} - A MUI color object: {type: string, values: number[]}
	 */
	function decomposeColor(color) {
	  if (color.charAt(0) === '#') {
	    return decomposeColor(convertHexToRGB(color));
	  }

	  var marker = color.indexOf('(');
	  var type = color.substring(0, marker);
	  var values = color.substring(marker + 1, color.length - 1).split(',');
	  values = values.map(function (value) {
	    return parseFloat(value);
	  });

	  return { type: type, values: values };
	}

	/**
	 * Converts a color object with type and values to a string.
	 *
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */
	function recomposeColor(color) {
	  var type = color.type;
	  var values = color.values;


	  if (type.indexOf('rgb') > -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    values = values.map(function (n, i) {
	      return i < 3 ? parseInt(n, 10) : n;
	    });
	  }

	  if (type.indexOf('hsl') > -1) {
	    values[1] = values[1] + '%';
	    values[2] = values[2] + '%';
	  }

	  return color.type + '(' + values.join(', ') + ')';
	}

	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 *
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21.
	 */
	function getContrastRatio(foreground, background) {
	  var lumA = getLuminance(foreground);
	  var lumB = getLuminance(background);
	  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
	}

	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */
	function getLuminance(color) {
	  var decomposedColor = decomposeColor(color);

	  if (decomposedColor.type.indexOf('rgb') > -1) {
	    var rgb = decomposedColor.values.map(function (val) {
	      val /= 255; // normalized
	      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
	    });
	    // Truncate at 3 digits
	    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
	  } else if (decomposedColor.type.indexOf('hsl') > -1) {
	    return decomposedColor.values[2] / 100;
	  }

	  throw new Error('Material-UI: unsupported `' + color + '` color.');
	}

	/**
	 * Darken or lighten a colour, depending on its luminance.
	 * Light colors are darkened, dark colors are lightened.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function emphasize(color) {
	  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;

	  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
	}

	/**
	 * Set the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} value - value to set the alpha channel to in the range 0 -1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function fade(color, value) {
	  (0, _warning2.default)(color, 'Material-UI: missing color argument in fade(' + color + ', ' + value + ').');

	  if (!color) return color;

	  color = decomposeColor(color);
	  value = clamp(value);

	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }
	  color.values[3] = value;

	  return recomposeColor(color);
	}

	/**
	 * Darkens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function darken(color, coefficient) {
	  (0, _warning2.default)(color, 'Material-UI: missing color argument in darken(' + color + ', ' + coefficient + ').');

	  if (!color) return color;

	  color = decomposeColor(color);
	  coefficient = clamp(coefficient);

	  if (color.type.indexOf('hsl') > -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') > -1) {
	    for (var i = 0; i < 3; i += 1) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }
	  return recomposeColor(color);
	}

	/**
	 * Lightens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function lighten(color, coefficient) {
	  (0, _warning2.default)(color, 'Material-UI: missing color argument in lighten(' + color + ', ' + coefficient + ').');

	  if (!color) return color;

	  color = decomposeColor(color);
	  coefficient = clamp(coefficient);

	  if (color.type.indexOf('hsl') > -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') > -1) {
	    for (var i = 0; i < 3; i += 1) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  }

	  return recomposeColor(color);
	}
	});

	unwrapExports(colorManipulator);
	var colorManipulator_1 = colorManipulator.convertHexToRGB;
	var colorManipulator_2 = colorManipulator.decomposeColor;
	var colorManipulator_3 = colorManipulator.recomposeColor;
	var colorManipulator_4 = colorManipulator.getContrastRatio;
	var colorManipulator_5 = colorManipulator.getLuminance;
	var colorManipulator_6 = colorManipulator.emphasize;
	var colorManipulator_7 = colorManipulator.fade;
	var colorManipulator_8 = colorManipulator.darken;
	var colorManipulator_9 = colorManipulator.lighten;

	var createPalette_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.dark = exports.light = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);

	exports.default = createPalette;



	var _warning2 = _interopRequireDefault(browser);



	var _deepmerge2 = _interopRequireDefault(_deepmerge);



	var _indigo2 = _interopRequireDefault(indigo_1);



	var _pink2 = _interopRequireDefault(pink_1);



	var _grey2 = _interopRequireDefault(grey_1);



	var _red2 = _interopRequireDefault(red_1);



	var _common2 = _interopRequireDefault(common_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// < 1kb payload overhead when lodash/merge is > 3kb.
	var light = exports.light = {
	  // The colors used to style the text.
	  text: {
	    // The most important text.
	    primary: 'rgba(0, 0, 0, 0.87)',
	    // Secondary text.
	    secondary: 'rgba(0, 0, 0, 0.54)',
	    // Disabled text have even lower visual prominence.
	    disabled: 'rgba(0, 0, 0, 0.38)',
	    // Text hints.
	    hint: 'rgba(0, 0, 0, 0.38)'
	  },
	  // The color used to divide different elements.
	  divider: 'rgba(0, 0, 0, 0.12)',
	  // The background colors used to style the surfaces.
	  // Consistency between these values is important.
	  background: {
	    paper: _common2.default.white,
	    default: _grey2.default[50]
	  },
	  // The colors used to style the action elements.
	  action: {
	    // The color of an active action like an icon button.
	    active: 'rgba(0, 0, 0, 0.54)',
	    // The color of an hovered action.
	    hover: 'rgba(0, 0, 0, 0.08)',
	    // The color of a selected action.
	    selected: 'rgba(0, 0, 0, 0.14)',
	    // The color of a disabled action.
	    disabled: 'rgba(0, 0, 0, 0.26)',
	    // The background color of a disabled action.
	    disabledBackground: 'rgba(0, 0, 0, 0.12)'
	  }
	};

	var dark = exports.dark = {
	  text: {
	    primary: _common2.default.white,
	    secondary: 'rgba(255, 255, 255, 0.7)',
	    disabled: 'rgba(255, 255, 255, 0.5)',
	    hint: 'rgba(255, 255, 255, 0.5)',
	    icon: 'rgba(255, 255, 255, 0.5)'
	  },
	  divider: 'rgba(255, 255, 255, 0.12)',
	  background: {
	    paper: _grey2.default[800],
	    default: '#303030'
	  },
	  action: {
	    active: _common2.default.white,
	    hover: 'rgba(255, 255, 255, 0.1)',
	    selected: 'rgba(255, 255, 255, 0.2)',
	    disabled: 'rgba(255, 255, 255, 0.3)',
	    disabledBackground: 'rgba(255, 255, 255, 0.12)'
	  }
	};

	function addLightOrDark(intent, direction, shade, tonalOffset) {
	  if (!intent[direction]) {
	    if (intent.hasOwnProperty(shade)) {
	      intent[direction] = intent[shade];
	    } else if (direction === 'light') {
	      intent.light = (0, colorManipulator.lighten)(intent.main, tonalOffset);
	    } else if (direction === 'dark') {
	      intent.dark = (0, colorManipulator.darken)(intent.main, tonalOffset * 1.5);
	    }
	  }
	}

	function createPalette(palette) {
	  var _palette$primary = palette.primary,
	      primary = _palette$primary === undefined ? {
	    light: _indigo2.default[300],
	    main: _indigo2.default[500],
	    dark: _indigo2.default[700]
	  } : _palette$primary,
	      _palette$secondary = palette.secondary,
	      secondary = _palette$secondary === undefined ? {
	    light: _pink2.default.A200,
	    main: _pink2.default.A400,
	    dark: _pink2.default.A700
	  } : _palette$secondary,
	      _palette$error = palette.error,
	      error = _palette$error === undefined ? {
	    light: _red2.default[300],
	    main: _red2.default[500],
	    dark: _red2.default[700]
	  } : _palette$error,
	      _palette$type = palette.type,
	      type = _palette$type === undefined ? 'light' : _palette$type,
	      _palette$contrastThre = palette.contrastThreshold,
	      contrastThreshold = _palette$contrastThre === undefined ? 3 : _palette$contrastThre,
	      _palette$tonalOffset = palette.tonalOffset,
	      tonalOffset = _palette$tonalOffset === undefined ? 0.2 : _palette$tonalOffset,
	      other = (0, _objectWithoutProperties3.default)(palette, ['primary', 'secondary', 'error', 'type', 'contrastThreshold', 'tonalOffset']);


	  function getContrastText(background) {
	    // Use the same logic as
	    // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
	    // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
	    var contrastText = (0, colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

	    {
	      var contrast = (0, colorManipulator.getContrastRatio)(background, contrastText);
	      (0, _warning2.default)(contrast >= 3, ['Material-UI: the contrast ratio of ' + contrast + ':1 for ' + contrastText + ' on ' + background, 'falls below the WACG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
	    }

	    return contrastText;
	  }

	  function augmentColor(color, mainShade, lightShade, darkShade) {
	    if (!color.main && color[mainShade]) {
	      color.main = color[mainShade];
	    }
	    addLightOrDark(color, 'light', lightShade, tonalOffset);
	    addLightOrDark(color, 'dark', darkShade, tonalOffset);
	    if (!color.contrastText) {
	      color.contrastText = getContrastText(color.main);
	    }
	  }

	  augmentColor(primary, 500, 300, 700);
	  augmentColor(secondary, 'A400', 'A200', 'A700');
	  augmentColor(error, 500, 300, 700);

	  var types = { dark: dark, light: light };

	  (0, _warning2.default)(types[type], 'Material-UI: the palette type `' + type + '` is not supported.');

	  var paletteOutput = (0, _deepmerge2.default)((0, _extends3.default)({
	    // A collection of common colors.
	    common: _common2.default,
	    // The palette type, can be light or dark.
	    type: type,
	    // The colors used to represent primary interface elements for a user.
	    primary: primary,
	    // The colors used to represent secondary interface elements for a user.
	    secondary: secondary,
	    // The colors used to represent interface elements that the user should be made aware of.
	    error: error,
	    // The grey colors.
	    grey: _grey2.default,
	    // Used by `getContrastText()` to maximize the contrast between the background and
	    // the text.
	    contrastThreshold: contrastThreshold,
	    // Take a background color and return the color of the text to maximize the contrast.
	    getContrastText: getContrastText,
	    // Used by the functions below to shift a color's luminance by approximately
	    // two indexes within its tonal palette.
	    // E.g., shift from Red 500 to Red 300 or Red 700.
	    tonalOffset: tonalOffset
	  }, types[type]), other, {
	    clone: false // No need to clone deep
	  });

	  return paletteOutput;
	}
	});

	unwrapExports(createPalette_1);
	var createPalette_2 = createPalette_1.dark;
	var createPalette_3 = createPalette_1.light;

	var createMixins_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _extends4 = _interopRequireDefault(_extends$6);

	exports.default = createMixins;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createMixins(breakpoints, spacing, mixins) {
	  var _toolbar;

	  return (0, _extends4.default)({
	    gutters: function gutters() {
	      var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	      return (0, _extends4.default)({
	        paddingLeft: spacing.unit * 2,
	        paddingRight: spacing.unit * 2
	      }, styles, (0, _defineProperty3.default)({}, breakpoints.up('sm'), (0, _extends4.default)({
	        paddingLeft: spacing.unit * 3,
	        paddingRight: spacing.unit * 3
	      }, styles[breakpoints.up('sm')])));
	    },
	    toolbar: (_toolbar = {
	      minHeight: 56
	    }, (0, _defineProperty3.default)(_toolbar, breakpoints.up('xs') + ' and (orientation: landscape)', {
	      minHeight: 48
	    }), (0, _defineProperty3.default)(_toolbar, breakpoints.up('sm'), {
	      minHeight: 64
	    }), _toolbar)
	  }, mixins);
	}
	});

	unwrapExports(createMixins_1);

	var shadows_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var shadowKeyUmbraOpacity = 0.2;
	var shadowKeyPenumbraOpacity = 0.14;
	var shadowAmbientShadowOpacity = 0.12;

	function createShadow() {
	  return [(arguments.length <= 0 ? undefined : arguments[0]) + 'px ' + (arguments.length <= 1 ? undefined : arguments[1]) + 'px ' + (arguments.length <= 2 ? undefined : arguments[2]) + 'px ' + (arguments.length <= 3 ? undefined : arguments[3]) + 'px rgba(0, 0, 0, ' + shadowKeyUmbraOpacity + ')', (arguments.length <= 4 ? undefined : arguments[4]) + 'px ' + (arguments.length <= 5 ? undefined : arguments[5]) + 'px ' + (arguments.length <= 6 ? undefined : arguments[6]) + 'px ' + (arguments.length <= 7 ? undefined : arguments[7]) + 'px rgba(0, 0, 0, ' + shadowKeyPenumbraOpacity + ')', (arguments.length <= 8 ? undefined : arguments[8]) + 'px ' + (arguments.length <= 9 ? undefined : arguments[9]) + 'px ' + (arguments.length <= 10 ? undefined : arguments[10]) + 'px ' + (arguments.length <= 11 ? undefined : arguments[11]) + 'px rgba(0, 0, 0, ' + shadowAmbientShadowOpacity + ')'].join(',');
	}

	var shadows = ['none', createShadow(0, 1, 3, 0, 0, 1, 1, 0, 0, 2, 1, -1), createShadow(0, 1, 5, 0, 0, 2, 2, 0, 0, 3, 1, -2), createShadow(0, 1, 8, 0, 0, 3, 4, 0, 0, 3, 3, -2), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];

	exports.default = shadows;
	});

	unwrapExports(shadows_1);

	// 20.1.2.4 Number.isNaN(number)


	_export(_export.S, 'Number', {
	  isNaN: function isNaN(number) {
	    // eslint-disable-next-line no-self-compare
	    return number != number;
	  }
	});

	var isNan = _core.Number.isNaN;

	var isNan$1 = createCommonjsModule(function (module) {
	module.exports = { "default": isNan, __esModule: true };
	});

	unwrapExports(isNan$1);

	var transitions = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isNumber = exports.isString = exports.formatMs = exports.duration = exports.easing = undefined;



	var _keys2 = _interopRequireDefault(keys$1);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _isNan2 = _interopRequireDefault(isNan$1);



	var _warning2 = _interopRequireDefault(browser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
	// to learn the context in which each easing should be used.
	var easing = exports.easing = {
	  // This is the most common easing curve.
	  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
	  // Objects enter the screen at full velocity from off-screen and
	  // slowly decelerate to a resting point.
	  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
	  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
	  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
	  // The sharp curve is used by objects that may return to the screen at any time.
	  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
	};

	// Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
	// to learn when use what timing

	/* eslint-disable no-param-reassign */

	var duration = exports.duration = {
	  shortest: 150,
	  shorter: 200,
	  short: 250,
	  // most basic recommended timing
	  standard: 300,
	  // this is to be used in complex animations
	  complex: 375,
	  // recommended when something is entering screen
	  enteringScreen: 225,
	  // recommended when something is leaving screen
	  leavingScreen: 195
	};

	var formatMs = exports.formatMs = function formatMs(milliseconds) {
	  return Math.round(milliseconds) + 'ms';
	};
	var isString = exports.isString = function isString(value) {
	  return typeof value === 'string';
	};
	var isNumber = exports.isNumber = function isNumber(value) {
	  return !(0, _isNan2.default)(parseFloat(value));
	};

	/**
	 * @param {string|Array} props
	 * @param {object} param
	 * @param {string} param.prop
	 * @param {number} param.duration
	 * @param {string} param.easing
	 * @param {number} param.delay
	 */
	exports.default = {
	  easing: easing,
	  duration: duration,
	  create: function create() {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var _options$duration = options.duration,
	        durationOption = _options$duration === undefined ? duration.standard : _options$duration,
	        _options$easing = options.easing,
	        easingOption = _options$easing === undefined ? easing.easeInOut : _options$easing,
	        _options$delay = options.delay,
	        delay = _options$delay === undefined ? 0 : _options$delay,
	        other = (0, _objectWithoutProperties3.default)(options, ['duration', 'easing', 'delay']);


	    (0, _warning2.default)(isString(props) || Array.isArray(props), 'Material-UI: argument "props" must be a string or Array.');
	    (0, _warning2.default)(isNumber(durationOption) || isString(durationOption), 'Material-UI: argument "duration" must be a number or a string but found ' + durationOption + '.');
	    (0, _warning2.default)(isString(easingOption), 'Material-UI: argument "easing" must be a string.');
	    (0, _warning2.default)(isNumber(delay) || isString(delay), 'Material-UI: argument "delay" must be a number or a string.');
	    (0, _warning2.default)((0, _keys2.default)(other).length === 0, 'Material-UI: unrecognized argument(s) [' + (0, _keys2.default)(other).join(',') + ']');

	    return (Array.isArray(props) ? props : [props]).map(function (animatedProp) {
	      return animatedProp + ' ' + (typeof durationOption === 'string' ? durationOption : formatMs(durationOption)) + ' ' + easingOption + ' ' + (typeof delay === 'string' ? delay : formatMs(delay));
	    }).join(',');
	  },
	  getAutoHeightDuration: function getAutoHeightDuration(height) {
	    if (!height) {
	      return 0;
	    }

	    var constant = height / 36;

	    // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
	    return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
	  }
	};
	});

	unwrapExports(transitions);
	var transitions_1 = transitions.isNumber;
	var transitions_2 = transitions.isString;
	var transitions_3 = transitions.formatMs;
	var transitions_4 = transitions.duration;
	var transitions_5 = transitions.easing;

	var zIndex_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// We need to centralize the zIndex definitions as they work
	// like global values in the browser.
	var zIndex = {
	  mobileStepper: 1000,
	  appBar: 1100,
	  drawer: 1200,
	  modal: 1300,
	  snackbar: 1400,
	  tooltip: 1500
	};

	exports.default = zIndex;
	});

	unwrapExports(zIndex_1);

	var spacing = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  // All components align to an 8dp square baseline grid for mobile, tablet, and desktop.
	  // https://material.io/guidelines/layout/metrics-keylines.html#metrics-keylines-baseline-grids
	  unit: 8
	};
	});

	unwrapExports(spacing);

	var createMuiTheme_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _deepmerge2 = _interopRequireDefault(_deepmerge);



	var _warning2 = _interopRequireDefault(browser);



	var _createTypography2 = _interopRequireDefault(createTypography_1);



	var _createBreakpoints2 = _interopRequireDefault(createBreakpoints_1);



	var _createPalette2 = _interopRequireDefault(createPalette_1);



	var _createMixins2 = _interopRequireDefault(createMixins_1);



	var _shadows2 = _interopRequireDefault(shadows_1);



	var _transitions2 = _interopRequireDefault(transitions);



	var _zIndex2 = _interopRequireDefault(zIndex_1);



	var _spacing2 = _interopRequireDefault(spacing);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function createMuiTheme() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var _options$palette = options.palette,
	      paletteInput = _options$palette === undefined ? {} : _options$palette,
	      _options$breakpoints = options.breakpoints,
	      breakpointsInput = _options$breakpoints === undefined ? {} : _options$breakpoints,
	      _options$mixins = options.mixins,
	      mixinsInput = _options$mixins === undefined ? {} : _options$mixins,
	      _options$typography = options.typography,
	      typographyInput = _options$typography === undefined ? {} : _options$typography,
	      shadowsInput = options.shadows,
	      other = (0, _objectWithoutProperties3.default)(options, ['palette', 'breakpoints', 'mixins', 'typography', 'shadows']);


	  var palette = (0, _createPalette2.default)(paletteInput);
	  var breakpoints = (0, _createBreakpoints2.default)(breakpointsInput);

	  var muiTheme = (0, _extends3.default)({
	    direction: 'ltr',
	    palette: palette,
	    typography: (0, _createTypography2.default)(palette, typographyInput),
	    mixins: (0, _createMixins2.default)(breakpoints, _spacing2.default, mixinsInput),
	    breakpoints: breakpoints,
	    shadows: shadowsInput || _shadows2.default
	  }, (0, _deepmerge2.default)({
	    transitions: _transitions2.default,
	    spacing: _spacing2.default,
	    zIndex: _zIndex2.default
	  }, other));

	  (0, _warning2.default)(muiTheme.shadows.length === 25, 'Material-UI: the shadows array provided to createMuiTheme should support 25 elevations.');

	  return muiTheme;
	} // < 1kb payload overhead when lodash/merge is > 3kb.
	exports.default = createMuiTheme;
	});

	unwrapExports(createMuiTheme_1);

	var themeListener_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CHANNEL = undefined;



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Same value used by react-jss
	var CHANNEL = exports.CHANNEL = '__THEMING__';

	var themeListener = {
	  contextTypes: (0, _defineProperty3.default)({}, CHANNEL, _propTypes2.default.object),
	  initial: function initial(context) {
	    if (!context[CHANNEL]) {
	      return null;
	    }

	    return context[CHANNEL].getState();
	  },
	  subscribe: function subscribe(context, cb) {
	    if (!context[CHANNEL]) {
	      return null;
	    }

	    return context[CHANNEL].subscribe(cb);
	  },
	  unsubscribe: function unsubscribe(context, subscriptionId) {
	    if (context[CHANNEL]) {
	      context[CHANNEL].unsubscribe(subscriptionId);
	    }
	  }
	};

	exports.default = themeListener;
	});

	unwrapExports(themeListener_1);
	var themeListener_2 = themeListener_1.CHANNEL;

	var createGenerateClassName_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createGenerateClassName;



	var _warning2 = _interopRequireDefault(browser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Returns a function which generates unique class names based on counters.
	// When new generator function is created, rule counter is reset.
	// We need to reset the rule counter for SSR for each request.
	//
	// It's inspired by
	// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js
	function createGenerateClassName() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var _options$dangerouslyU = options.dangerouslyUseGlobalCSS,
	      dangerouslyUseGlobalCSS = _options$dangerouslyU === undefined ? false : _options$dangerouslyU,
	      _options$productionPr = options.productionPrefix;

	  var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
	  var ruleCounter = 0;

	  return function (rule, styleSheet) {
	    ruleCounter += 1;
	    (0, _warning2.default)(ruleCounter < 1e10, ['Material-UI: you might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));

	    // Code branch the whole block at the expense of more code.
	    if (dangerouslyUseGlobalCSS) {
	      if (styleSheet && styleSheet.options.classNamePrefix) {
	        var prefix = styleSheet.options.classNamePrefix;
	        // Sanitize the string as will be used to prefix the generated class name.
	        prefix = prefix.replace(escapeRegex, '-');

	        if (prefix.match(/^Mui/)) {
	          return prefix + '-' + rule.key;
	        }

	        {
	          return prefix + '-' + rule.key + '-' + ruleCounter;
	        }
	      }

	      return rule.key + '-' + ruleCounter;
	    }

	    if (styleSheet && styleSheet.options.classNamePrefix) {
	      var _prefix = styleSheet.options.classNamePrefix;
	      // Sanitize the string as will be used to prefix the generated class name.
	      _prefix = _prefix.replace(escapeRegex, '-');

	      return _prefix + '-' + rule.key + '-' + ruleCounter;
	    }

	    return rule.key + '-' + ruleCounter;
	  };
	}
	});

	unwrapExports(createGenerateClassName_1);

	var getStylesCreator_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _keys2 = _interopRequireDefault(keys$1);



	var _extends3 = _interopRequireDefault(_extends$6);



	var _warning2 = _interopRequireDefault(browser);



	var _deepmerge2 = _interopRequireDefault(_deepmerge);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// < 1kb payload overhead when lodash/merge is > 3kb.

	function arrayMerge(destination, source) {
	  return source;
	}

	function getStylesCreator(stylesOrCreator) {
	  var themingEnabled = typeof stylesOrCreator === 'function';

	  function create(theme, name) {
	    var styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;

	    if (!theme.overrides || !name || !theme.overrides[name]) {
	      return styles;
	    }

	    var overrides = theme.overrides[name];
	    var stylesWithOverrides = (0, _extends3.default)({}, styles);

	    (0, _keys2.default)(overrides).forEach(function (key) {
	      (0, _warning2.default)(stylesWithOverrides[key], ['Material-UI: you are trying to override a style that does not exist.', 'Fix the `' + key + '` key of `theme.overrides.' + name + '`.'].join('\n'));
	      stylesWithOverrides[key] = (0, _deepmerge2.default)(stylesWithOverrides[key], overrides[key], {
	        arrayMerge: arrayMerge
	      });
	    });

	    return stylesWithOverrides;
	  }

	  return {
	    create: create,
	    options: {},
	    themingEnabled: themingEnabled
	  };
	}

	exports.default = getStylesCreator;
	});

	unwrapExports(getStylesCreator_1);

	var withStyles_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.sheetsManager = undefined;



	var _keys2 = _interopRequireDefault(keys$1);



	var _extends3 = _interopRequireDefault(_extends$6);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _map2 = _interopRequireDefault(map$1);



	var _minSafeInteger2 = _interopRequireDefault(minSafeInteger$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _warning2 = _interopRequireDefault(browser);



	var _hoistNonReactStatics2 = _interopRequireDefault(hoistNonReactStatics);



	var _getDisplayName2 = _interopRequireDefault(getDisplayName_1);



	var _wrapDisplayName2 = _interopRequireDefault(wrapDisplayName_1);



	var _contextTypes2 = _interopRequireDefault(contextTypes);





	var ns$$1 = _interopRequireWildcard(ns);



	var _jssPreset2 = _interopRequireDefault(jssPreset_1);



	var _createMuiTheme2 = _interopRequireDefault(createMuiTheme_1);



	var _themeListener2 = _interopRequireDefault(themeListener_1);



	var _createGenerateClassName2 = _interopRequireDefault(createGenerateClassName_1);



	var _getStylesCreator2 = _interopRequireDefault(getStylesCreator_1);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Default JSS instance.
	var jss = (0, lib.create)((0, _jssPreset2.default)());

	// Use a singleton or the provided one by the context.
	var generateClassName = (0, _createGenerateClassName2.default)();

	// Global index counter to preserve source order.
	// We create the style sheet during at the creation of the component,
	// children are handled after the parents, so the order of style elements would be parent->child.
	// It is a problem though when a parent passes a className
	// which needs to override any childs styles.
	// StyleSheet of the child has a higher specificity, because of the source order.
	// So our solution is to render sheets them in the reverse order child->sheet, so
	// that parent has a higher specificity.
	var indexCounter = _minSafeInteger2.default;

	var sheetsManager = exports.sheetsManager = new _map2.default();

	// We use the same empty object to ref count the styles that don't need a theme object.
	var noopTheme = {};

	// In order to have self-supporting components, we rely on default theme when not provided.
	var defaultTheme = void 0;

	function getDefaultTheme() {
	  if (defaultTheme) {
	    return defaultTheme;
	  }

	  defaultTheme = (0, _createMuiTheme2.default)();
	  return defaultTheme;
	}

	// Link a style sheet with a component.
	// It does not modify the component passed to it;
	// instead, it returns a new component, with a `classes` property.
	var withStyles = function withStyles(stylesOrCreator) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  return function (Component) {
	    var _options$withTheme = options.withTheme,
	        withTheme = _options$withTheme === undefined ? false : _options$withTheme,
	        _options$flip = options.flip,
	        flip = _options$flip === undefined ? null : _options$flip,
	        name = options.name,
	        styleSheetOptions = (0, _objectWithoutProperties3.default)(options, ['withTheme', 'flip', 'name']);

	    var stylesCreator = (0, _getStylesCreator2.default)(stylesOrCreator);
	    var listenToTheme = stylesCreator.themingEnabled || withTheme || typeof name === 'string';

	    indexCounter += 1;
	    stylesCreator.options.index = indexCounter;

	    (0, _warning2.default)(indexCounter < 0, ['Material-UI: you might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join(' '));

	    var WithStyles = function (_React$Component) {
	      (0, _inherits3.default)(WithStyles, _React$Component);

	      function WithStyles(props, context) {
	        (0, _classCallCheck3.default)(this, WithStyles);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (WithStyles.__proto__ || (0, _getPrototypeOf2.default)(WithStyles)).call(this, props, context));

	        _this.state = {};
	        _this.disableStylesGeneration = false;
	        _this.jss = null;
	        _this.sheetOptions = null;
	        _this.sheetsManager = sheetsManager;
	        _this.stylesCreatorSaved = null;
	        _this.theme = null;
	        _this.unsubscribeId = null;


	        _this.jss = _this.context[ns$$1.jss] || jss;

	        var muiThemeProviderOptions = _this.context.muiThemeProviderOptions;

	        if (muiThemeProviderOptions) {
	          if (muiThemeProviderOptions.sheetsManager) {
	            _this.sheetsManager = muiThemeProviderOptions.sheetsManager;
	          }

	          _this.disableStylesGeneration = muiThemeProviderOptions.disableStylesGeneration;
	        }

	        // Attach the stylesCreator to the instance of the component as in the context
	        // of react-hot-loader the hooks can be executed in a different closure context:
	        // https://github.com/gaearon/react-hot-loader/blob/master/src/patch.dev.js#L107
	        _this.stylesCreatorSaved = stylesCreator;
	        _this.sheetOptions = (0, _extends3.default)({
	          generateClassName: generateClassName
	        }, _this.context[ns$$1.sheetOptions]);
	        // We use || as the function call is lazy evaluated.
	        _this.theme = listenToTheme ? _themeListener2.default.initial(context) || getDefaultTheme() : noopTheme;

	        _this.attach(_this.theme);
	        return _this;
	      }

	      (0, _createClass3.default)(WithStyles, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	          var _this2 = this;

	          if (!listenToTheme) {
	            return;
	          }

	          this.unsubscribeId = _themeListener2.default.subscribe(this.context, function (theme) {
	            var oldTheme = _this2.theme;
	            _this2.theme = theme;
	            _this2.attach(_this2.theme);

	            // Rerender the component so the underlying component gets the theme update.
	            // By theme update we mean receiving and applying the new class names.
	            _this2.setState({}, function () {
	              _this2.detach(oldTheme);
	            });
	          });
	        }
	      }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps() {
	          // react-hot-loader specific logic
	          if (this.stylesCreatorSaved === stylesCreator || "development" === 'production') {
	            return;
	          }

	          this.detach(this.theme);
	          this.stylesCreatorSaved = stylesCreator;
	          this.attach(this.theme);
	        }
	      }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	          this.detach(this.theme);

	          if (this.unsubscribeId !== null) {
	            _themeListener2.default.unsubscribe(this.context, this.unsubscribeId);
	          }
	        }
	      }, {
	        key: 'attach',
	        value: function attach(theme) {
	          if (this.disableStylesGeneration) {
	            return;
	          }

	          var stylesCreatorSaved = this.stylesCreatorSaved;
	          var sheetManager = this.sheetsManager.get(stylesCreatorSaved);

	          if (!sheetManager) {
	            sheetManager = new _map2.default();
	            this.sheetsManager.set(stylesCreatorSaved, sheetManager);
	          }

	          var sheetManagerTheme = sheetManager.get(theme);

	          if (!sheetManagerTheme) {
	            sheetManagerTheme = {
	              refs: 0,
	              sheet: null
	            };
	            sheetManager.set(theme, sheetManagerTheme);
	          }

	          if (sheetManagerTheme.refs === 0) {
	            var styles = stylesCreatorSaved.create(theme, name);
	            var meta = name;

	            if ("development" !== 'production' && !meta) {
	              meta = (0, _getDisplayName2.default)(Component);
	            }

	            var sheet = this.jss.createStyleSheet(styles, (0, _extends3.default)({
	              meta: meta,
	              classNamePrefix: meta,
	              flip: typeof flip === 'boolean' ? flip : theme.direction === 'rtl',
	              link: false
	            }, this.sheetOptions, stylesCreatorSaved.options, {
	              name: name
	            }, styleSheetOptions));

	            sheetManagerTheme.sheet = sheet;
	            sheet.attach();

	            var sheetsRegistry = this.context[ns$$1.sheetsRegistry];
	            if (sheetsRegistry) {
	              sheetsRegistry.add(sheet);
	            }
	          }

	          sheetManagerTheme.refs += 1;
	        }
	      }, {
	        key: 'detach',
	        value: function detach(theme) {
	          if (this.disableStylesGeneration) {
	            return;
	          }

	          var stylesCreatorSaved = this.stylesCreatorSaved;
	          var sheetManager = this.sheetsManager.get(stylesCreatorSaved);
	          var sheetManagerTheme = sheetManager.get(theme);

	          sheetManagerTheme.refs -= 1;

	          if (sheetManagerTheme.refs === 0) {
	            sheetManager.delete(theme);
	            this.jss.removeStyleSheet(sheetManagerTheme.sheet);
	            var sheetsRegistry = this.context[ns$$1.sheetsRegistry];
	            if (sheetsRegistry) {
	              sheetsRegistry.remove(sheetManagerTheme.sheet);
	            }
	          }
	        }
	      }, {
	        key: 'render',
	        value: function render() {
	          var _this3 = this;

	          var _props = this.props,
	              classesProp = _props.classes,
	              innerRef = _props.innerRef,
	              other = (0, _objectWithoutProperties3.default)(_props, ['classes', 'innerRef']);


	          var classes = void 0;
	          var renderedClasses = {};

	          if (!this.disableStylesGeneration) {
	            var sheetManager = this.sheetsManager.get(this.stylesCreatorSaved);
	            var sheetsManagerTheme = sheetManager.get(this.theme);
	            renderedClasses = sheetsManagerTheme.sheet.classes;
	          }

	          if (classesProp) {
	            classes = (0, _extends3.default)({}, renderedClasses, (0, _keys2.default)(classesProp).reduce(function (accumulator, key) {
	              (0, _warning2.default)(renderedClasses[key] || _this3.disableStylesGeneration, ['Material-UI: the key `' + key + '` ' + ('provided to the classes property is not implemented in ' + (0, _getDisplayName2.default)(Component) + '.'), 'You can only override one of the following: ' + (0, _keys2.default)(renderedClasses).join(',')].join('\n'));

	              (0, _warning2.default)(!classesProp[key] || typeof classesProp[key] === 'string', ['Material-UI: the key `' + key + '` ' + ('provided to the classes property is not valid for ' + (0, _getDisplayName2.default)(Component) + '.'), 'You need to provide a non empty string instead of: ' + classesProp[key] + '.'].join('\n'));

	              if (classesProp[key]) {
	                accumulator[key] = renderedClasses[key] + ' ' + classesProp[key];
	              }

	              return accumulator;
	            }, {}));
	          } else {
	            classes = renderedClasses;
	          }

	          var more = {};

	          // Provide the theme to the wrapped component.
	          // So we don't have to use the `withTheme()` Higher-order Component.
	          if (withTheme) {
	            more.theme = this.theme;
	          }

	          return _react2.default.createElement(Component, (0, _extends3.default)({ classes: classes }, more, other, { ref: innerRef }));
	        }
	      }]);
	      return WithStyles;
	    }(_react2.default.Component);

	    WithStyles.propTypes = {
	      /**
	       * Useful to extend the style applied to components.
	       */
	      classes: _propTypes2.default.object,
	      /**
	       * Use that property to pass a ref callback to the decorated component.
	       */
	      innerRef: _propTypes2.default.func
	    };

	    WithStyles.contextTypes = (0, _extends3.default)({
	      muiThemeProviderOptions: _propTypes2.default.object
	    }, _contextTypes2.default, listenToTheme ? _themeListener2.default.contextTypes : {});

	    {
	      WithStyles.displayName = (0, _wrapDisplayName2.default)(Component, 'WithStyles');
	    }

	    (0, _hoistNonReactStatics2.default)(WithStyles, Component);

	    {
	      // Exposed for test purposes.
	      WithStyles.Naked = Component;
	      WithStyles.options = options;
	    }

	    return WithStyles;
	  };
	};

	exports.default = withStyles;
	});

	unwrapExports(withStyles_1);
	var withStyles_2 = withStyles_1.sheetsManager;

	var helpers = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _typeof3 = _interopRequireDefault(_typeof_1);



	var _keys2 = _interopRequireDefault(keys$1);

	exports.capitalize = capitalize;
	exports.contains = contains;
	exports.findIndex = findIndex;
	exports.find = find;
	exports.createChainedFunction = createChainedFunction;



	var _warning2 = _interopRequireDefault(browser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function capitalize(string) {
	  if ("development" !== 'production' && typeof string !== 'string') {
	    throw new Error('Material-UI: capitalize(string) expects a string argument.');
	  }

	  return string.charAt(0).toUpperCase() + string.slice(1);
	} //  weak

	function contains(obj, pred) {
	  return (0, _keys2.default)(pred).every(function (key) {
	    return obj.hasOwnProperty(key) && obj[key] === pred[key];
	  });
	}

	function findIndex(arr, pred) {
	  var predType = typeof pred === 'undefined' ? 'undefined' : (0, _typeof3.default)(pred);
	  for (var i = 0; i < arr.length; i += 1) {
	    if (predType === 'function' && !!pred(arr[i], i, arr) === true) {
	      return i;
	    }
	    if (predType === 'object' && contains(arr[i], pred)) {
	      return i;
	    }
	    if (['string', 'number', 'boolean'].indexOf(predType) !== -1) {
	      return arr.indexOf(pred);
	    }
	  }
	  return -1;
	}

	function find(arr, pred) {
	  var index = findIndex(arr, pred);
	  return index > -1 ? arr[index] : undefined;
	}

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @param {function} functions to chain
	 * @returns {function|null}
	 */
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return funcs.filter(function (func) {
	    return func != null;
	  }).reduce(function (acc, func) {
	    (0, _warning2.default)(typeof func === 'function', 'Material-UI: invalid Argument Type, must only provide functions, undefined, or null.');

	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      acc.apply(this, args);
	      func.apply(this, args);
	    };
	  }, function () {});
	}
	});

	unwrapExports(helpers);
	var helpers_1 = helpers.capitalize;
	var helpers_2 = helpers.contains;
	var helpers_3 = helpers.findIndex;
	var helpers_4 = helpers.find;
	var helpers_5 = helpers.createChainedFunction;

	var Paper_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _extends3 = _interopRequireDefault(_extends$6);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _warning2 = _interopRequireDefault(browser);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  var elevations = {};
	  theme.shadows.forEach(function (shadow, index) {
	    elevations['elevation' + index] = {
	      boxShadow: shadow
	    };
	  });

	  return (0, _extends3.default)({
	    root: {
	      backgroundColor: theme.palette.background.paper
	    },
	    rounded: {
	      borderRadius: 2
	    }
	  }, elevations);
	};

	function Paper(props) {
	  var classes = props.classes,
	      classNameProp = props.className,
	      Component = props.component,
	      square = props.square,
	      elevation = props.elevation,
	      other = (0, _objectWithoutProperties3.default)(props, ['classes', 'className', 'component', 'square', 'elevation']);


	  (0, _warning2.default)(elevation >= 0 && elevation < 25, 'Material-UI: this elevation `' + elevation + '` is not implemented.');

	  var className = (0, _classnames2.default)(classes.root, classes['elevation' + elevation], (0, _defineProperty3.default)({}, classes.rounded, !square), classNameProp);

	  return _react2.default.createElement(Component, (0, _extends3.default)({ className: className }, other));
	}

	Paper.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * Shadow depth, corresponds to `dp` in the spec.
	   * It's accepting values between 0 and 24 inclusive.
	   */
	  elevation: _propTypes2.default.number,
	  /**
	   * If `true`, rounded corners are disabled.
	   */
	  square: _propTypes2.default.bool
	};

	Paper.defaultProps = {
	  component: 'div',
	  elevation: 2,
	  square: false
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiPaper' })(Paper);
	});

	unwrapExports(Paper_1);
	var Paper_2 = Paper_1.styles;

	var Paper$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Paper_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(Paper$1);

	var AppBar_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);





	var _Paper2 = _interopRequireDefault(Paper$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// @inheritedComponent Paper

	var styles = exports.styles = function styles(theme) {
	  var backgroundColorDefault = theme.palette.type === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];

	  return {
	    root: {
	      display: 'flex',
	      flexDirection: 'column',
	      width: '100%',
	      boxSizing: 'border-box', // Prevent padding issue with the Modal and fixed positioned AppBar.
	      zIndex: theme.zIndex.appBar,
	      flexShrink: 0
	    },
	    positionFixed: {
	      position: 'fixed',
	      top: 0,
	      left: 'auto',
	      right: 0
	    },
	    positionAbsolute: {
	      position: 'absolute',
	      top: 0,
	      left: 'auto',
	      right: 0
	    },
	    positionSticky: {
	      position: 'sticky',
	      top: 0,
	      left: 'auto',
	      right: 0
	    },
	    positionStatic: {
	      position: 'static'
	    },
	    colorDefault: {
	      backgroundColor: backgroundColorDefault,
	      color: theme.palette.getContrastText(backgroundColorDefault)
	    },
	    colorPrimary: {
	      backgroundColor: theme.palette.primary.main,
	      color: theme.palette.primary.contrastText
	    },
	    colorSecondary: {
	      backgroundColor: theme.palette.secondary.main,
	      color: theme.palette.secondary.contrastText
	    }
	  };
	};

	function AppBar(props) {
	  var _classNames;

	  var children = props.children,
	      classes = props.classes,
	      classNameProp = props.className,
	      color = props.color,
	      position = props.position,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className', 'color', 'position']);


	  var className = (0, _classnames2.default)(classes.root, classes['position' + (0, helpers.capitalize)(position)], (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes['color' + (0, helpers.capitalize)(color)], color !== 'inherit'), (0, _defineProperty3.default)(_classNames, 'mui-fixed', position === 'fixed'), _classNames), classNameProp);

	  return _react2.default.createElement(
	    _Paper2.default,
	    (0, _extends3.default)({ square: true, component: 'header', elevation: 4, className: className }, other),
	    children
	  );
	}

	AppBar.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node.isRequired,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: _propTypes2.default.oneOf(['inherit', 'primary', 'secondary', 'default']),
	  /**
	   * The positioning type. The behavior of the different options is described
	   * [here](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
	   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
	   */
	  position: _propTypes2.default.oneOf(['fixed', 'absolute', 'sticky', 'static'])
	};

	AppBar.defaultProps = {
	  color: 'primary',
	  position: 'fixed'
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiAppBar' })(AppBar);
	});

	unwrapExports(AppBar_1);
	var AppBar_2 = AppBar_1.styles;

	var AppBar$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(AppBar_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	var AppBar$2 = unwrapExports(AppBar$1);

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	var ExecutionEnvironment_1 = ExecutionEnvironment;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */



	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction_1
	      };
	    }
	  },

	  registerDefault: function registerDefault() {}
	};

	var EventListener_1 = EventListener;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	var getActiveElement_1 = getActiveElement;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 * 
	 */

	var hasOwnProperty$9 = Object.prototype.hasOwnProperty;

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is$1(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is$1(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty$9.call(objB, keysA[i]) || !is$1(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	var shallowEqual_1 = shallowEqual;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	var isNode_1 = isNode;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */



	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode_1(object) && object.nodeType == 3;
	}

	var isTextNode_1 = isTextNode;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */



	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode_1(outerNode)) {
	    return false;
	  } else if (isTextNode_1(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	var containsNode_1 = containsNode;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */

	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	var focusNode_1 = focusNode;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	var hyphenate_1 = hyphenate;

	var msPattern$1 = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName$1(string) {
	  return hyphenate_1(string).replace(msPattern$1, '-ms-');
	}

	var hyphenateStyleName_1$1 = hyphenateStyleName$1;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize$1(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	var camelize_1$1 = camelize$1;

	var msPattern$2 = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize_1$1(string.replace(msPattern$2, 'ms-'));
	}

	var camelizeStyleName_1 = camelizeStyleName;

	var reactDom_development = createCommonjsModule(function (module) {



	{
	  (function() {

	var React = react;
	var invariant = invariant_1;
	var warning = warning_1;
	var ExecutionEnvironment = ExecutionEnvironment_1;
	var _assign = objectAssign;
	var emptyFunction = emptyFunction_1;
	var EventListener = EventListener_1;
	var getActiveElement = getActiveElement_1;
	var shallowEqual = shallowEqual_1;
	var containsNode = containsNode_1;
	var focusNode = focusNode_1;
	var emptyObject = emptyObject_1;
	var checkPropTypes = checkPropTypes_1;
	var hyphenateStyleName = hyphenateStyleName_1$1;
	var camelizeStyleName = camelizeStyleName_1;

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	!React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

	// These attributes should be all lowercase to allow for
	// case insensitive checks
	var RESERVED_PROPS = {
	  children: true,
	  dangerouslySetInnerHTML: true,
	  defaultValue: true,
	  defaultChecked: true,
	  innerHTML: true,
	  suppressContentEditableWarning: true,
	  suppressHydrationWarning: true,
	  style: true
	};

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	  HAS_STRING_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    for (var propName in Properties) {
	      !!properties.hasOwnProperty(propName) ? invariant(false, "injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.", propName) : void 0;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE),
	        hasStringBooleanValue: checkMask(propConfig, Injection.HAS_STRING_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? invariant(false, "DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s", propName) : void 0;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];

	        propertyInfo.attributeName = attributeName;
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      // Downcase references to whitelist properties to check for membership
	      // without case-sensitivity. This allows the whitelist to pick up
	      // `allowfullscreen`, which should be written using the property configuration
	      // for `allowFullscreen`
	      properties[propName] = propertyInfo;
	    }
	  }
	};

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
	/* eslint-enable max-len */
	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";


	var ROOT_ATTRIBUTE_NAME = 'data-reactroot';

	/**
	 * Map from property "standard name" to an object with info about how to set
	 * the property in the DOM. Each object contains:
	 *
	 * attributeName:
	 *   Used when rendering markup or with `*Attribute()`.
	 * attributeNamespace
	 * propertyName:
	 *   Used on DOM node instances. (This includes properties that mutate due to
	 *   external factors.)
	 * mutationMethod:
	 *   If non-null, used instead of the property or `setAttribute()` after
	 *   initial render.
	 * mustUseProperty:
	 *   Whether the property must be accessed and mutated as an object property.
	 * hasBooleanValue:
	 *   Whether the property should be removed when set to a falsey value.
	 * hasNumericValue:
	 *   Whether the property must be numeric or parse as a numeric and should be
	 *   removed when set to a falsey value.
	 * hasPositiveNumericValue:
	 *   Whether the property must be positive numeric or parse as a positive
	 *   numeric and should be removed when set to a falsey value.
	 * hasOverloadedBooleanValue:
	 *   Whether the property can be used as a flag as well as with a value.
	 *   Removed when strictly equal to false; present without a value when
	 *   strictly equal to true; present with a value otherwise.
	 */
	var properties = {};

	/**
	 * Checks whether a property name is a writeable attribute.
	 * @method
	 */
	function shouldSetAttribute(name, value) {
	  if (isReservedProp(name)) {
	    return false;
	  }
	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return false;
	  }
	  if (value === null) {
	    return true;
	  }
	  switch (typeof value) {
	    case 'boolean':
	      return shouldAttributeAcceptBooleanValue(name);
	    case 'undefined':
	    case 'number':
	    case 'string':
	    case 'object':
	      return true;
	    default:
	      // function, symbol
	      return false;
	  }
	}

	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function shouldAttributeAcceptBooleanValue(name) {
	  if (isReservedProp(name)) {
	    return true;
	  }
	  var propertyInfo = getPropertyInfo(name);
	  if (propertyInfo) {
	    return propertyInfo.hasBooleanValue || propertyInfo.hasStringBooleanValue || propertyInfo.hasOverloadedBooleanValue;
	  }
	  var prefix = name.toLowerCase().slice(0, 5);
	  return prefix === 'data-' || prefix === 'aria-';
	}

	/**
	 * Checks to see if a property name is within the list of properties
	 * reserved for internal React operations. These properties should
	 * not be set on an HTML element.
	 *
	 * @private
	 * @param {string} name
	 * @return {boolean} If the name is within reserved props
	 */
	function isReservedProp(name) {
	  return RESERVED_PROPS.hasOwnProperty(name);
	}

	var injection = DOMPropertyInjection;

	var MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	var HAS_STRING_BOOLEAN_VALUE = injection.HAS_STRING_BOOLEAN_VALUE;

	var HTMLDOMPropertyConfig = {
	  // When adding attributes to this list, be sure to also add them to
	  // the `possibleStandardNames` module to ensure casing and incorrect
	  // name warnings.
	  Properties: {
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    // specifies target context for links with `preload` type
	    async: HAS_BOOLEAN_VALUE,
	    // Note: there is a special case that prevents it from being written to the DOM
	    // on the client side because the browsers are inconsistent. Instead we call focus().
	    autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_OVERLOADED_BOOLEAN_VALUE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    contentEditable: HAS_STRING_BOOLEAN_VALUE,
	    controls: HAS_BOOLEAN_VALUE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: HAS_STRING_BOOLEAN_VALUE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    hidden: HAS_BOOLEAN_VALUE,
	    loop: HAS_BOOLEAN_VALUE,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    playsInline: HAS_BOOLEAN_VALUE,
	    readOnly: HAS_BOOLEAN_VALUE,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    scoped: HAS_BOOLEAN_VALUE,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    start: HAS_NUMERIC_VALUE,
	    // support for projecting regular DOM Elements via V1 named slots ( shadow dom )
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: HAS_STRING_BOOLEAN_VALUE,
	    // Style must be explicitly set in the attribute list. React components
	    // expect a style object
	    style: 0,
	    // Keep it in the whitelist because it is case-sensitive for SVG.
	    tabIndex: 0,
	    // itemScope is for for Microdata support.
	    // See http://schema.org/docs/gs.html
	    itemScope: HAS_BOOLEAN_VALUE,
	    // These attributes must stay in the white-list because they have
	    // different attribute names (see DOMAttributeNames below)
	    acceptCharset: 0,
	    className: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    // Attributes with mutation methods must be specified in the whitelist
	    // Set the string boolean flag to allow the behavior
	    value: HAS_STRING_BOOLEAN_VALUE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMMutationMethods: {
	    value: function (node, value) {
	      if (value == null) {
	        return node.removeAttribute('value');
	      }

	      // Number inputs get special treatment due to some edge cases in
	      // Chrome. Let everything else assign the value attribute as normal.
	      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
	      if (node.type !== 'number' || node.hasAttribute('value') === false) {
	        node.setAttribute('value', '' + value);
	      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
	        // Don't assign an attribute if validation reports bad
	        // input. Chrome will clear the value. Additionally, don't
	        // operate on inputs that have focus, otherwise Chrome might
	        // strip off trailing decimal places and cause the user's
	        // cursor position to jump to the beginning of the input.
	        //
	        // In ReactDOMInput, we have an onBlur event that will trigger
	        // this function again when focus is lost.
	        node.setAttribute('value', '' + value);
	      }
	    }
	  }
	};

	var HAS_STRING_BOOLEAN_VALUE$1 = injection.HAS_STRING_BOOLEAN_VALUE;


	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	/**
	 * This is a list of all SVG attributes that need special casing,
	 * namespacing, or boolean value assignment.
	 *
	 * When adding attributes to this list, be sure to also add them to
	 * the `possibleStandardNames` module to ensure casing and incorrect
	 * name warnings.
	 *
	 * SVG Attributes List:
	 * https://www.w3.org/TR/SVG/attindex.html
	 * SMIL Spec:
	 * https://www.w3.org/TR/smil
	 */
	var ATTRS = ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'x-height', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xmlns:xlink', 'xml:lang', 'xml:space'];

	var SVGDOMPropertyConfig = {
	  Properties: {
	    autoReverse: HAS_STRING_BOOLEAN_VALUE$1,
	    externalResourcesRequired: HAS_STRING_BOOLEAN_VALUE$1,
	    preserveAlpha: HAS_STRING_BOOLEAN_VALUE$1
	  },
	  DOMAttributeNames: {
	    autoReverse: 'autoReverse',
	    externalResourcesRequired: 'externalResourcesRequired',
	    preserveAlpha: 'preserveAlpha'
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  }
	};

	var CAMELIZE = /[\-\:]([a-z])/g;
	var capitalize = function (token) {
	  return token[1].toUpperCase();
	};

	ATTRS.forEach(function (original) {
	  var reactName = original.replace(CAMELIZE, capitalize);

	  SVGDOMPropertyConfig.Properties[reactName] = 0;
	  SVGDOMPropertyConfig.DOMAttributeNames[reactName] = original;
	});

	injection.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	injection.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	var ReactErrorUtils = {
	  // Used by Fiber to simulate a try-catch.
	  _caughtError: null,
	  _hasCaughtError: false,

	  // Used by event system to capture/rethrow the first error.
	  _rethrowError: null,
	  _hasRethrowError: false,

	  injection: {
	    injectErrorUtils: function (injectedErrorUtils) {
	      !(typeof injectedErrorUtils.invokeGuardedCallback === 'function') ? invariant(false, 'Injected invokeGuardedCallback() must be a function.') : void 0;
	      invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
	    }
	  },

	  /**
	   * Call a function while guarding against errors that happens within it.
	   * Returns an error if it throws, otherwise null.
	   *
	   * In production, this is implemented using a try-catch. The reason we don't
	   * use a try-catch directly is so that we can swap out a different
	   * implementation in DEV mode.
	   *
	   * @param {String} name of the guard to use for logging or debugging
	   * @param {Function} func The function to invoke
	   * @param {*} context The context to use when calling the function
	   * @param {...*} args Arguments for function
	   */
	  invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {
	    invokeGuardedCallback.apply(ReactErrorUtils, arguments);
	  },

	  /**
	   * Same as invokeGuardedCallback, but instead of returning an error, it stores
	   * it in a global so it can be rethrown by `rethrowCaughtError` later.
	   * TODO: See if _caughtError and _rethrowError can be unified.
	   *
	   * @param {String} name of the guard to use for logging or debugging
	   * @param {Function} func The function to invoke
	   * @param {*} context The context to use when calling the function
	   * @param {...*} args Arguments for function
	   */
	  invokeGuardedCallbackAndCatchFirstError: function (name, func, context, a, b, c, d, e, f) {
	    ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
	    if (ReactErrorUtils.hasCaughtError()) {
	      var error = ReactErrorUtils.clearCaughtError();
	      if (!ReactErrorUtils._hasRethrowError) {
	        ReactErrorUtils._hasRethrowError = true;
	        ReactErrorUtils._rethrowError = error;
	      }
	    }
	  },

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    return rethrowCaughtError.apply(ReactErrorUtils, arguments);
	  },

	  hasCaughtError: function () {
	    return ReactErrorUtils._hasCaughtError;
	  },

	  clearCaughtError: function () {
	    if (ReactErrorUtils._hasCaughtError) {
	      var error = ReactErrorUtils._caughtError;
	      ReactErrorUtils._caughtError = null;
	      ReactErrorUtils._hasCaughtError = false;
	      return error;
	    } else {
	      invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
	    }
	  }
	};

	var invokeGuardedCallback = function (name, func, context, a, b, c, d, e, f) {
	  ReactErrorUtils._hasCaughtError = false;
	  ReactErrorUtils._caughtError = null;
	  var funcArgs = Array.prototype.slice.call(arguments, 3);
	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    ReactErrorUtils._caughtError = error;
	    ReactErrorUtils._hasCaughtError = true;
	  }
	};

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // untintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!

	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
	      // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.
	      var didError = true;

	      // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.
	      var funcArgs = Array.prototype.slice.call(arguments, 3);
	      function callCallback() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false);
	        func.apply(context, funcArgs);
	        didError = false;
	      }

	      // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.
	      var error = void 0;
	      // Use this to track whether the error event is ever called.
	      var didSetError = false;
	      var isCrossOriginError = false;

	      function onError(event) {
	        error = event.error;
	        didSetError = true;
	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }
	      }

	      // Create a fake event type.
	      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');

	      // Attach our event handlers
	      window.addEventListener('error', onError);
	      fakeNode.addEventListener(evtType, callCallback, false);

	      // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
	        }
	        ReactErrorUtils._hasCaughtError = true;
	        ReactErrorUtils._caughtError = error;
	      } else {
	        ReactErrorUtils._hasCaughtError = false;
	        ReactErrorUtils._caughtError = null;
	      }

	      // Remove our event listeners
	      window.removeEventListener('error', onError);
	    };

	    invokeGuardedCallback = invokeGuardedCallbackDev;
	  }
	}

	var rethrowCaughtError = function () {
	  if (ReactErrorUtils._hasRethrowError) {
	    var error = ReactErrorUtils._rethrowError;
	    ReactErrorUtils._rethrowError = null;
	    ReactErrorUtils._hasRethrowError = false;
	    throw error;
	  }
	};

	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;
	    if (plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
	    plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
	  eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
	  registrationNameModules[registrationName] = pluginModule;
	  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */

	/**
	 * Ordered list of injected plugins.
	 */
	var plugins = [];

	/**
	 * Mapping from event name to dispatch config
	 */
	var eventNameDispatchConfigs = {};

	/**
	 * Mapping from registration name to plugin module
	 */
	var registrationNameModules = {};

	/**
	 * Mapping from registration name to event name
	 */
	var registrationNameDependencies = {};

	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */
	var possibleRegistrationNames = {};
	// Trust the developer to only use possibleRegistrationNames in true

	/**
	 * Injects an ordering of plugins (by plugin name). This allows the ordering
	 * to be decoupled from injection of the actual plugins so that ordering is
	 * always deterministic regardless of packaging, on-the-fly injection, etc.
	 *
	 * @param {array} InjectedEventPluginOrder
	 * @internal
	 * @see {EventPluginHub.injection.injectEventPluginOrder}
	 */
	function injectEventPluginOrder(injectedEventPluginOrder) {
	  !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0;
	  // Clone the ordering so it cannot be dynamically mutated.
	  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	  recomputePluginOrdering();
	}

	/**
	 * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	 * in the ordering injected by `injectEventPluginOrder`.
	 *
	 * Plugins can be injected as part of page initialization or on-the-fly.
	 *
	 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	 * @internal
	 * @see {EventPluginHub.injection.injectEventPluginsByName}
	 */
	function injectEventPluginsByName(injectedNamesToPlugins) {
	  var isOrderingDirty = false;
	  for (var pluginName in injectedNamesToPlugins) {
	    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	      continue;
	    }
	    var pluginModule = injectedNamesToPlugins[pluginName];
	    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	      !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
	      namesToPlugins[pluginName] = pluginModule;
	      isOrderingDirty = true;
	    }
	  }
	  if (isOrderingDirty) {
	    recomputePluginOrdering();
	  }
	}

	var EventPluginRegistry = Object.freeze({
		plugins: plugins,
		eventNameDispatchConfigs: eventNameDispatchConfigs,
		registrationNameModules: registrationNameModules,
		registrationNameDependencies: registrationNameDependencies,
		possibleRegistrationNames: possibleRegistrationNames,
		injectEventPluginOrder: injectEventPluginOrder,
		injectEventPluginsByName: injectEventPluginsByName
	});

	var getFiberCurrentPropsFromNode = null;
	var getInstanceFromNode = null;
	var getNodeFromInstance = null;

	var injection$2 = {
	  injectComponentTree: function (Injected) {
	    getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;
	    getInstanceFromNode = Injected.getInstanceFromNode;
	    getNodeFromInstance = Injected.getNodeFromInstance;

	    {
	      warning(getNodeFromInstance && getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
	    }
	  }
	};






	var validateEventDispatches;
	{
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

	    warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = getNodeFromInstance(inst);
	  ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */


	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */


	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */

	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }

	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 * @param {function} cb Callback invoked with each element or a collection.
	 * @param {?} [scope] Scope used as `this` in a callback.
	 */
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */

	/**
	 * Methods for injecting dependencies.
	 */
	var injection$1 = {
	  /**
	   * @param {array} InjectedEventPluginOrder
	   * @public
	   */
	  injectEventPluginOrder: injectEventPluginOrder,

	  /**
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   */
	  injectEventPluginsByName: injectEventPluginsByName
	};

	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */
	function getListener(inst, registrationName) {
	  var listener;

	  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	  // live here; needs to be moved to a better place soon
	  var stateNode = inst.stateNode;
	  if (!stateNode) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }
	  var props = getFiberCurrentPropsFromNode(stateNode);
	  if (!props) {
	    // Work in progress.
	    return null;
	  }
	  listener = props[registrationName];
	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }
	  !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
	  return listener;
	}

	/**
	 * Allows registered plugins an opportunity to extract events from top-level
	 * native browser events.
	 *
	 * @return {*} An accumulation of synthetic events.
	 * @internal
	 */
	function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var events;
	  for (var i = 0; i < plugins.length; i++) {
	    // Not every plugin in the ordering may be loaded at runtime.
	    var possiblePlugin = plugins[i];
	    if (possiblePlugin) {
	      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	      if (extractedEvents) {
	        events = accumulateInto(events, extractedEvents);
	      }
	    }
	  }
	  return events;
	}

	/**
	 * Enqueues a synthetic event that should be dispatched when
	 * `processEventQueue` is invoked.
	 *
	 * @param {*} events An accumulation of synthetic events.
	 * @internal
	 */
	function enqueueEvents(events) {
	  if (events) {
	    eventQueue = accumulateInto(eventQueue, events);
	  }
	}

	/**
	 * Dispatches all synthetic events on the event queue.
	 *
	 * @internal
	 */
	function processEventQueue(simulated) {
	  // Set `eventQueue` to null before processing it so that we can tell if more
	  // events get enqueued while processing.
	  var processingEventQueue = eventQueue;
	  eventQueue = null;

	  if (!processingEventQueue) {
	    return;
	  }

	  if (simulated) {
	    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	  } else {
	    forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	  }
	  !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0;
	  // This would be a good time to rethrow if any of the event handlers threw.
	  ReactErrorUtils.rethrowCaughtError();
	}

	var EventPluginHub = Object.freeze({
		injection: injection$1,
		getListener: getListener,
		extractEvents: extractEvents,
		enqueueEvents: enqueueEvents,
		processEventQueue: processEventQueue
	});

	var IndeterminateComponent = 0; // Before we know whether it is functional or class
	var FunctionalComponent = 1;
	var ClassComponent = 2;
	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
	var HostComponent = 5;
	var HostText = 6;
	var CallComponent = 7;
	var CallHandlerPhase = 8;
	var ReturnComponent = 9;
	var Fragment = 10;

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactInternalInstance$' + randomKey;
	var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

	function precacheFiberNode$1(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}

	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }

	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }

	  var closest = void 0;
	  var inst = node[internalInstanceKey];
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber, this will always be the deepest root.
	    return inst;
	  }
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	  }

	  return closest;
	}

	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode$1(node) {
	  var inst = node[internalInstanceKey];
	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText) {
	      return inst;
	    } else {
	      return null;
	    }
	  }
	  return null;
	}

	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance$1(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  }

	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  invariant(false, 'getNodeFromInstance: Invalid argument.');
	}

	function getFiberCurrentPropsFromNode$1(node) {
	  return node[internalEventHandlersKey] || null;
	}

	function updateFiberProps$1(node, props) {
	  node[internalEventHandlersKey] = props;
	}

	var ReactDOMComponentTree = Object.freeze({
		precacheFiberNode: precacheFiberNode$1,
		getClosestInstanceFromNode: getClosestInstanceFromNode,
		getInstanceFromNode: getInstanceFromNode$1,
		getNodeFromInstance: getNodeFromInstance$1,
		getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
		updateFiberProps: updateFiberProps$1
	});

	function getParent(inst) {
	  do {
	    inst = inst['return'];
	    // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);
	  if (inst) {
	    return inst;
	  }
	  return null;
	}

	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  }

	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = getParent(instA);
	    depthA--;
	  }

	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = getParent(instB);
	    depthB--;
	  }

	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB || instA === instB.alternate) {
	      return instA;
	    }
	    instA = getParent(instA);
	    instB = getParent(instB);
	  }
	  return null;
	}

	/**
	 * Return if A is an ancestor of B.
	 */


	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  return getParent(inst);
	}

	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = getParent(inst);
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}

	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (true) {
	    if (!from) {
	      break;
	    }
	    if (from === common) {
	      break;
	    }
	    var alternate = from.alternate;
	    if (alternate !== null && alternate === common) {
	      break;
	    }
	    pathFrom.push(from);
	    from = getParent(from);
	  }
	  var pathTo = [];
	  while (true) {
	    if (!to) {
	      break;
	    }
	    if (to === common) {
	      break;
	    }
	    var _alternate = to.alternate;
	    if (_alternate !== null && _alternate === common) {
	      break;
	    }
	    pathTo.push(to);
	    to = getParent(to);
	  }
	  for (var i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (var _i = pathTo.length; _i-- > 0;) {
	    fn(pathTo[_i], 'captured', argTo);
	  }
	}

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing even a
	 * single one.
	 */

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  {
	    warning(inst, 'Dispatching inst must not be null');
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? getParentInstance(targetInst) : null;
	    traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (inst && event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	var EventPropagators = Object.freeze({
		accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
		accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
		accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,
		accumulateDirectDispatches: accumulateDirectDispatches
	});

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	/**
	 * This helper object stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */
	var compositionState = {
	  _root: null,
	  _startText: null,
	  _fallbackText: null
	};

	function initialize(nativeEventTarget) {
	  compositionState._root = nativeEventTarget;
	  compositionState._startText = getText();
	  return true;
	}

	function reset() {
	  compositionState._root = null;
	  compositionState._startText = null;
	  compositionState._fallbackText = null;
	}

	function getData() {
	  if (compositionState._fallbackText) {
	    return compositionState._fallbackText;
	  }

	  var start;
	  var startValue = compositionState._startText;
	  var startLength = startValue.length;
	  var end;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;
	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  compositionState._fallbackText = endValue.slice(start, sliceTail);
	  return compositionState._fallbackText;
	}

	function getText() {
	  if ('value' in compositionState._root) {
	    return compositionState._root.value;
	  }
	  return compositionState._root[getTextContentAccessor()];
	}

	/* eslint valid-typeof: 0 */

	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	var EVENT_POOL_SIZE = 10;

	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }

	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}

	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }

	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();

	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	  addEventPoolingTo(Class);
	};

	/** Proxying after everything set on SyntheticEvent
	 * to resolve Proxy issue on some WebKit browsers
	 * in which some Event properties are set to undefined (GH#10010)
	 */
	{
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}

	addEventPoolingTo(SyntheticEvent);

	/**
	 * Helper to nullify syntheticEvent instance properties when destructing
	 *
	 * @param {String} propName
	 * @param {?object} getVal
	 * @return {object} defineProperty object
	 */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };

	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }

	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }

	  function warn(action, result) {
	    var warningCondition = false;
	    warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
	  }
	}

	function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
	  var EventConstructor = this;
	  if (EventConstructor.eventPool.length) {
	    var instance = EventConstructor.eventPool.pop();
	    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
	    return instance;
	  }
	  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
	}

	function releasePooledEvent(event) {
	  var EventConstructor = this;
	  !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance  into a pool of a different type.') : void 0;
	  event.destructor();
	  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
	    EventConstructor.eventPool.push(event);
	  }
	}

	function addEventPoolingTo(EventConstructor) {
	  EventConstructor.eventPool = [];
	  EventConstructor.getPooled = getPooledEvent;
	  EventConstructor.release = releasePooledEvent;
	}

	var SyntheticEvent$1 = SyntheticEvent;

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent$1.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent$1.augmentClass(SyntheticInputEvent, InputEventInterface);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition status, if any.
	var isComposing = false;

	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === eventTypes.compositionStart) {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `BrowserEventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};

	// Use to restore controlled state after a change event has fired.

	var fiberHostComponent = null;

	var ReactControlledComponentInjection = {
	  injectFiberControlledHostComponent: function (hostComponentImpl) {
	    // The fiber implementation doesn't use dynamic dispatch so we need to
	    // inject the implementation.
	    fiberHostComponent = hostComponentImpl;
	  }
	};

	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);
	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }
	  !(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function') ? invariant(false, 'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
	  fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
	}

	var injection$3 = ReactControlledComponentInjection;

	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}

	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }
	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;

	  restoreStateOfTarget(target);
	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	var ReactControlledComponent = Object.freeze({
		injection: injection$3,
		enqueueStateRestore: enqueueStateRestore,
		restoreStateIfNeeded: restoreStateIfNeeded
	});

	// Used as a way to call batchedUpdates when we don't have a reference to
	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.

	// Defaults
	var fiberBatchedUpdates = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};

	var isNestingBatched = false;
	function batchedUpdates(fn, bookkeeping) {
	  if (isNestingBatched) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state. Therefore, we add the target to
	    // a queue of work.
	    return fiberBatchedUpdates(fn, bookkeeping);
	  }
	  isNestingBatched = true;
	  try {
	    return fiberBatchedUpdates(fn, bookkeeping);
	  } finally {
	    // Here we wait until all updates have propagated, which is important
	    // when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    // Then we restore state of any controlled component.
	    isNestingBatched = false;
	    restoreStateIfNeeded();
	  }
	}

	var ReactGenericBatchingInjection = {
	  injectFiberBatchedUpdates: function (_batchedUpdates) {
	    fiberBatchedUpdates = _batchedUpdates;
	  }
	};

	var injection$4 = ReactGenericBatchingInjection;

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	/**
	 * HTML nodeType values that represent the type of the node
	 */

	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;

	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }

	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';
	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

	  var currentValue = '' + node[valueField];

	  // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)
	  if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }

	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable,
	    configurable: true,
	    get: function () {
	      return descriptor.get.call(this);
	    },
	    set: function (value) {
	      currentValue = '' + value;
	      descriptor.set.call(this, value);
	    }
	  });

	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  }

	  // TODO: Once it's just Fiber we can move this to node._wrapperState
	  node._valueTracker = trackValueOnNode(node);
	}

	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node);
	  // if there is no tracker at this point it's unlikely
	  // that trying again will succeed
	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);
	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }
	  return false;
	}

	var eventTypes$1 = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};

	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent$1.getPooled(eventTypes$1.change, inst, nativeEvent, target);
	  event.type = 'change';
	  // Flag this event loop as needing state restore.
	  enqueueStateRestore(target);
	  accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  enqueueEvents(event);
	  processEventQueue(false);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance$1(targetInst);
	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}

	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}

	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(inst, node) {
	  // TODO: In IE, inst is occasionally null. Why?
	  if (inst == null) {
	    return;
	  }

	  // Fiber and ReactDOM keep wrapper state in separate places
	  var state = inst._wrapperState || node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  // If controlled, assign the value attribute to the current value on blur
	  var value = '' + node.value;
	  if (node.getAttribute('value') !== value) {
	    node.setAttribute('value', value);
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	  eventTypes: eventTypes$1,

	  _isInputEventSupported: isInputEventSupported,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForChangeEvent;
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }

	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }

	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === 'topBlur') {
	      handleControlledInputBlur(targetInst, targetNode);
	    }
	  }
	};

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: null,
	  detail: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent$1.augmentClass(SyntheticUIEvent, UIEventInterface);

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  pageX: null,
	  pageY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: null,
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	var eventTypes$2 = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};

	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes$2,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromNode = from == null ? win : getNodeFromInstance$1(from);
	    var toNode = to == null ? win : getNodeFromInstance$1(to);

	    var leave = SyntheticMouseEvent.getPooled(eventTypes$2.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes$2.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;

	    accumulateEnterLeaveDispatches(leave, enter, from, to);

	    return [leave, enter];
	  }
	};

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */

	/**
	 * This API should be called `delete` but we'd have to make sure to always
	 * transform these to strings for IE support. When this transform is fully
	 * supported we can rename it.
	 */


	function get(key) {
	  return key._reactInternalFiber;
	}

	function has(key) {
	  return key._reactInternalFiber !== undefined;
	}

	function set(key, value) {
	  key._reactInternalFiber = value;
	}

	var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	var ReactCurrentOwner = ReactInternals.ReactCurrentOwner;
	var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame;

	function getComponentName(fiber) {
	  var type = fiber.type;

	  if (typeof type === 'string') {
	    return type;
	  }
	  if (typeof type === 'function') {
	    return type.displayName || type.name;
	  }
	  return null;
	}

	// Don't change these two values:
	var NoEffect = 0; //           0b00000000
	var PerformedWork = 1; //      0b00000001

	// You can change the rest (and add more).
	var Placement = 2; //          0b00000010
	var Update = 4; //             0b00000100
	var PlacementAndUpdate = 6; // 0b00000110
	var Deletion = 8; //           0b00001000
	var ContentReset = 16; //      0b00010000
	var Callback = 32; //          0b00100000
	var Err = 64; //               0b01000000
	var Ref = 128; //              0b10000000

	var MOUNTING = 1;
	var MOUNTED = 2;
	var UNMOUNTED = 3;

	function isFiberMountedImpl(fiber) {
	  var node = fiber;
	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    if ((node.effectTag & Placement) !== NoEffect) {
	      return MOUNTING;
	    }
	    while (node['return']) {
	      node = node['return'];
	      if ((node.effectTag & Placement) !== NoEffect) {
	        return MOUNTING;
	      }
	    }
	  } else {
	    while (node['return']) {
	      node = node['return'];
	    }
	  }
	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return MOUNTED;
	  }
	  // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.
	  return UNMOUNTED;
	}

	function isFiberMounted(fiber) {
	  return isFiberMountedImpl(fiber) === MOUNTED;
	}

	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;
	      warning(instance._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber) || 'A component');
	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);
	  if (!fiber) {
	    return false;
	  }
	  return isFiberMountedImpl(fiber) === MOUNTED;
	}

	function assertIsMounted(fiber) {
	  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;
	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var state = isFiberMountedImpl(fiber);
	    !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	    if (state === MOUNTING) {
	      return null;
	    }
	    return fiber;
	  }
	  // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.
	  var a = fiber;
	  var b = alternate;
	  while (true) {
	    var parentA = a['return'];
	    var parentB = parentA ? parentA.alternate : null;
	    if (!parentA || !parentB) {
	      // We're at the root.
	      break;
	    }

	    // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.
	    if (parentA.child === parentB.child) {
	      var child = parentA.child;
	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }
	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }
	        child = child.sibling;
	      }
	      // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.
	      invariant(false, 'Unable to find node on an unmounted component.');
	    }

	    if (a['return'] !== b['return']) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;
	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }
	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }
	        _child = _child.sibling;
	      }
	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;
	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }
	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }
	          _child = _child.sibling;
	        }
	        !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
	      }
	    }

	    !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	  }
	  // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.
	  !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  }
	  // Otherwise B has to be current branch.
	  return alternate;
	}

	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  if (!currentParent) {
	    return null;
	  }

	  // Next we'll drill down this component to find the first HostComponent/Text.
	  var node = currentParent;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child) {
	      node.child['return'] = node;
	      node = node.child;
	      continue;
	    }
	    if (node === currentParent) {
	      return null;
	    }
	    while (!node.sibling) {
	      if (!node['return'] || node['return'] === currentParent) {
	        return null;
	      }
	      node = node['return'];
	    }
	    node.sibling['return'] = node['return'];
	    node = node.sibling;
	  }
	  // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  if (!currentParent) {
	    return null;
	  }

	  // Next we'll drill down this component to find the first HostComponent/Text.
	  var node = currentParent;
	  while (true) {
	    if (node.tag === HostComponent || node.tag === HostText) {
	      return node;
	    } else if (node.child && node.tag !== HostPortal) {
	      node.child['return'] = node;
	      node = node.child;
	      continue;
	    }
	    if (node === currentParent) {
	      return null;
	    }
	    while (!node.sibling) {
	      if (!node['return'] || node['return'] === currentParent) {
	        return null;
	      }
	      node = node['return'];
	    }
	    node.sibling['return'] = node['return'];
	    node = node.sibling;
	  }
	  // Flow needs the return null here, but ESLint complains about it.
	  // eslint-disable-next-line no-unreachable
	  return null;
	}

	var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
	var callbackBookkeepingPool = [];

	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findRootContainerNode(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst['return']) {
	    inst = inst['return'];
	  }
	  if (inst.tag !== HostRoot) {
	    // This can happen if we're in a detached tree.
	    return null;
	  }
	  return inst.stateNode.containerInfo;
	}

	// Used to store ancestor hierarchy in top level callback
	function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
	  if (callbackBookkeepingPool.length) {
	    var instance = callbackBookkeepingPool.pop();
	    instance.topLevelType = topLevelType;
	    instance.nativeEvent = nativeEvent;
	    instance.targetInst = targetInst;
	    return instance;
	  }
	  return {
	    topLevelType: topLevelType,
	    nativeEvent: nativeEvent,
	    targetInst: targetInst,
	    ancestors: []
	  };
	}

	function releaseTopLevelCallbackBookKeeping(instance) {
	  instance.topLevelType = null;
	  instance.nativeEvent = null;
	  instance.targetInst = null;
	  instance.ancestors.length = 0;
	  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
	    callbackBookkeepingPool.push(instance);
	  }
	}

	function handleTopLevelImpl(bookKeeping) {
	  var targetInst = bookKeeping.targetInst;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    if (!ancestor) {
	      bookKeeping.ancestors.push(ancestor);
	      break;
	    }
	    var root = findRootContainerNode(ancestor);
	    if (!root) {
	      break;
	    }
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = getClosestInstanceFromNode(root);
	  } while (ancestor);

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    _handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// TODO: can we stop exporting these?
	var _enabled = true;
	var _handleTopLevel = void 0;

	function setHandleTopLevel(handleTopLevel) {
	  _handleTopLevel = handleTopLevel;
	}

	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}

	function isEnabled() {
	  return _enabled;
	}

	/**
	 * Traps top-level events by using event bubbling.
	 *
	 * @param {string} topLevelType Record from `BrowserEventConstants`.
	 * @param {string} handlerBaseName Event name (e.g. "click").
	 * @param {object} element Element on which to attach listener.
	 * @return {?object} An object with a remove function which will forcefully
	 *                  remove the listener.
	 * @internal
	 */
	function trapBubbledEvent(topLevelType, handlerBaseName, element) {
	  if (!element) {
	    return null;
	  }
	  return EventListener.listen(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));
	}

	/**
	 * Traps a top-level event by using event capturing.
	 *
	 * @param {string} topLevelType Record from `BrowserEventConstants`.
	 * @param {string} handlerBaseName Event name (e.g. "click").
	 * @param {object} element Element on which to attach listener.
	 * @return {?object} An object with a remove function which will forcefully
	 *                  remove the listener.
	 * @internal
	 */
	function trapCapturedEvent(topLevelType, handlerBaseName, element) {
	  if (!element) {
	    return null;
	  }
	  return EventListener.capture(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));
	}

	function dispatchEvent(topLevelType, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);
	  if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
	    // If we get an event (ex: img onload) before committing that
	    // component's mount, ignore it for now (that is, treat it as if it was an
	    // event on a non-React tree). We might also consider queueing events and
	    // dispatching them after the mount.
	    targetInst = null;
	  }

	  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

	  try {
	    // Event queue being processed in the same cycle allows
	    // `preventDefault`.
	    batchedUpdates(handleTopLevelImpl, bookKeeping);
	  } finally {
	    releaseTopLevelCallbackBookKeeping(bookKeeping);
	  }
	}

	var ReactDOMEventListener = Object.freeze({
		get _enabled () { return _enabled; },
		get _handleTopLevel () { return _handleTopLevel; },
		setHandleTopLevel: setHandleTopLevel,
		setEnabled: setEnabled,
		isEnabled: isEnabled,
		trapBubbledEvent: trapBubbledEvent,
		trapCapturedEvent: trapCapturedEvent,
		dispatchEvent: dispatchEvent
	});

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};

	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

	  return prefixes;
	}

	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};

	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};

	/**
	 * Element to check for prefixes on.
	 */
	var style = {};

	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;

	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }

	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}

	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return '';
	}

	/**
	 * Types of raw signals from the browser caught at the top level.
	 *
	 * For events like 'submit' which don't consistently bubble (which we
	 * trap at a lower node than `document`), binding at `document` would
	 * cause duplicate events so we don't include them here.
	 */
	var topLevelTypes$1 = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCancel: 'cancel',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topClose: 'close',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoad: 'load',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topToggle: 'toggle',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	var BrowserEventConstants = {
	  topLevelTypes: topLevelTypes$1
	};

	function runEventQueueInBatch(events) {
	  enqueueEvents(events);
	  processEventQueue(false);
	}

	/**
	 * Streams a fired top-level event to `EventPluginHub` where plugins have the
	 * opportunity to create `ReactEvent`s to be dispatched.
	 */
	function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	  runEventQueueInBatch(events);
	}

	var topLevelTypes = BrowserEventConstants.topLevelTypes;

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactDOMEventListener, which is injected and can therefore support
	 *    pluggable event sources. This is the only work that occurs in the main
	 *    thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var reactTopListenersCounter = 0;

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * We listen for bubbled touch events on the document object.
	 *
	 * Firefox v8.01 (and possibly others) exhibited strange behavior when
	 * mounting `onmousemove` events at some node that was not the document
	 * element. The symptoms were that if your mouse is not moving over something
	 * contained within that mount point (for example on the background) the
	 * top-level listeners for `onmousemove` won't be called. However, if you
	 * register the `mousemove` on the document object, then it will of course
	 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	 * top-level listeners to the document object only, at least for these
	 * movement types of events and possibly all events.
	 *
	 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	 *
	 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	 * they bubble to document.
	 *
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @param {object} contentDocumentHandle Document which owns the container
	 */
	function listenTo(registrationName, contentDocumentHandle) {
	  var mountAt = contentDocumentHandle;
	  var isListening = getListeningForDocument(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];

	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	      if (dependency === 'topScroll') {
	        trapCapturedEvent('topScroll', 'scroll', mountAt);
	      } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	        trapCapturedEvent('topFocus', 'focus', mountAt);
	        trapCapturedEvent('topBlur', 'blur', mountAt);

	        // to make sure blur and focus event listeners are only attached once
	        isListening.topBlur = true;
	        isListening.topFocus = true;
	      } else if (dependency === 'topCancel') {
	        if (isEventSupported('cancel', true)) {
	          trapCapturedEvent('topCancel', 'cancel', mountAt);
	        }
	        isListening.topCancel = true;
	      } else if (dependency === 'topClose') {
	        if (isEventSupported('close', true)) {
	          trapCapturedEvent('topClose', 'close', mountAt);
	        }
	        isListening.topClose = true;
	      } else if (topLevelTypes.hasOwnProperty(dependency)) {
	        trapBubbledEvent(dependency, topLevelTypes[dependency], mountAt);
	      }

	      isListening[dependency] = true;
	    }
	  }
	}

	function isListeningToAllDependencies(registrationName, mountAt) {
	  var isListening = getListeningForDocument(mountAt);
	  var dependencies = registrationNameDependencies[registrationName];
	  for (var i = 0; i < dependencies.length; i++) {
	    var dependency = dependencies[i];
	    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	      return false;
	    }
	  }
	  return true;
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */
	function getOffsets(outerNode) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode$$1 = selection.focusNode,
	      focusOffset = selection.focusOffset;

	  // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode$$1.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode$$1, focusOffset);
	}

	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */
	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode$$1, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }
	      if (node === focusNode$$1 && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      }
	      // Moving from `node` to its first child `next`.
	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }
	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }
	      if (parentNode === focusNode$$1 && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }
	      if ((next = node.nextSibling) !== null) {
	        break;
	      }
	      node = parentNode;
	      parentNode = node.parentNode;
	    }

	    // Moving from `node` to its next sibling `next`.
	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	}

	function getSelectionInformation() {
	  var focusedElem = getActiveElement();
	  return {
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
	  };
	}

	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */
	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElement();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;
	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    }

	    // Focusing a node can change the scroll position, which is undesirable
	    var ancestors = [];
	    var ancestor = priorFocusedElem;
	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    focusNode(priorFocusedElem);

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}

	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */
	function getSelection$1(input) {
	  var selection = void 0;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || { start: 0, end: 0 };
	}

	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */
	function setSelection(input, offsets) {
	  var start = offsets.start,
	      end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes$3 = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};

	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement$1);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent$1.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement$1;

	    accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	  eventTypes: eventTypes$3,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === DOCUMENT_NODE ? nativeEventTarget : nativeEventTarget.ownerDocument;
	    // Track whether all listeners exists for this plugin. If none exist, we do
	    // not extract events. See #3639.
	    if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
	      return null;
	    }

	    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement$1 = targetNode;
	          activeElementInst$1 = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement$1 = null;
	        activeElementInst$1 = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  }
	};

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent$1.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent$1.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent$1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent$1.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes$4 = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'toggle', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;

	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes$4[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});

	// Only used in DEV for exhaustiveness validation.
	var knownHTMLTopLevelTypes = ['topAbort', 'topCancel', 'topCanPlay', 'topCanPlayThrough', 'topClose', 'topDurationChange', 'topEmptied', 'topEncrypted', 'topEnded', 'topError', 'topInput', 'topInvalid', 'topLoad', 'topLoadedData', 'topLoadedMetadata', 'topLoadStart', 'topPause', 'topPlay', 'topPlaying', 'topProgress', 'topRateChange', 'topReset', 'topSeeked', 'topSeeking', 'topStalled', 'topSubmit', 'topSuspend', 'topTimeUpdate', 'topToggle', 'topVolumeChange', 'topWaiting'];

	var SimpleEventPlugin = {
	  eventTypes: eventTypes$4,

	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	      default:
	        {
	          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
	            warning(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
	          }
	        }
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent$1;
	        break;
	    }
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    accumulateTwoPhaseDispatches(event);
	    return event;
	  }
	};

	setHandleTopLevel(handleTopLevel);

	/**
	 * Inject modules for resolving DOM hierarchy and plugin ordering.
	 */
	injection$1.injectEventPluginOrder(DOMEventPluginOrder);
	injection$2.injectComponentTree(ReactDOMComponentTree);

	/**
	 * Some important event plugins included by default (without having to require
	 * them).
	 */
	injection$1.injectEventPluginsByName({
	  SimpleEventPlugin: SimpleEventPlugin,
	  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	  ChangeEventPlugin: ChangeEventPlugin,
	  SelectEventPlugin: SelectEventPlugin,
	  BeforeInputEventPlugin: BeforeInputEventPlugin
	});

	var enableAsyncSubtreeAPI = true;
	var enableAsyncSchedulingByDefaultInReactDOM = false;
	// Exports ReactDOM.createRoot
	var enableCreateRoot = false;
	var enableUserTimingAPI = true;

	// Mutating mode (React DOM, React ART, React Native):
	var enableMutatingReconciler = true;
	// Experimental noop mode (currently unused):
	var enableNoopReconciler = false;
	// Experimental persistent mode (CS):
	var enablePersistentReconciler = false;

	// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
	var debugRenderPhaseSideEffects = false;

	// Only used in www builds.

	var valueStack = [];

	{
	  var fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}



	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      warning(false, 'Unexpected pop.');
	    }
	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      warning(false, 'Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];

	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;

	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	function reset$1() {
	  while (index > -1) {
	    valueStack[index] = null;

	    {
	      fiberStack[index] = null;
	    }

	    index--;
	  }
	}

	var describeComponentFrame = function (name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	};

	function describeFiber(fiber) {
	  switch (fiber.tag) {
	    case IndeterminateComponent:
	    case FunctionalComponent:
	    case ClassComponent:
	    case HostComponent:
	      var owner = fiber._debugOwner;
	      var source = fiber._debugSource;
	      var name = getComponentName(fiber);
	      var ownerName = null;
	      if (owner) {
	        ownerName = getComponentName(owner);
	      }
	      return describeComponentFrame(name, source, ownerName);
	    default:
	      return '';
	  }
	}

	// This function can only be called with a work-in-progress fiber and
	// only during begin or complete phase. Do not call it under any other
	// circumstances.
	function getStackAddendumByWorkInProgressFiber(workInProgress) {
	  var info = '';
	  var node = workInProgress;
	  do {
	    info += describeFiber(node);
	    // Otherwise this return pointer might point to the wrong tree:
	    node = node['return'];
	  } while (node);
	  return info;
	}

	function getCurrentFiberOwnerName() {
	  {
	    var fiber = ReactDebugCurrentFiber.current;
	    if (fiber === null) {
	      return null;
	    }
	    var owner = fiber._debugOwner;
	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentName(owner);
	    }
	  }
	  return null;
	}

	function getCurrentFiberStackAddendum() {
	  {
	    var fiber = ReactDebugCurrentFiber.current;
	    if (fiber === null) {
	      return null;
	    }
	    // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.
	    return getStackAddendumByWorkInProgressFiber(fiber);
	  }
	  return null;
	}

	function resetCurrentFiber() {
	  ReactDebugCurrentFrame.getCurrentStack = null;
	  ReactDebugCurrentFiber.current = null;
	  ReactDebugCurrentFiber.phase = null;
	}

	function setCurrentFiber(fiber) {
	  ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;
	  ReactDebugCurrentFiber.current = fiber;
	  ReactDebugCurrentFiber.phase = null;
	}

	function setCurrentPhase(phase) {
	  ReactDebugCurrentFiber.phase = phase;
	}

	var ReactDebugCurrentFiber = {
	  current: null,
	  phase: null,
	  resetCurrentFiber: resetCurrentFiber,
	  setCurrentFiber: setCurrentFiber,
	  setCurrentPhase: setCurrentPhase,
	  getCurrentFiberOwnerName: getCurrentFiberOwnerName,
	  getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
	};

	// Prefix measurements so that it's possible to filter them.
	// Longer prefixes are hard to read in DevTools.
	var reactEmoji = '\u269B';
	var warningEmoji = '\u26D4';
	var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

	// Keep track of current fiber so that we know the path to unwind on pause.
	// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
	var currentFiber = null;
	// If we're in the middle of user code, which fiber and method is it?
	// Reusing `currentFiber` would be confusing for this because user code fiber
	// can change during commit phase too, but we don't need to unwind it (since
	// lifecycles in the commit phase don't resemble a tree).
	var currentPhase = null;
	var currentPhaseFiber = null;
	// Did lifecycle hook schedule an update? This is often a performance problem,
	// so we will keep track of it, and include it in the report.
	// Track commits caused by cascading updates.
	var isCommitting = false;
	var hasScheduledUpdateInCurrentCommit = false;
	var hasScheduledUpdateInCurrentPhase = false;
	var commitCountInCurrentWorkLoop = 0;
	var effectCountInCurrentCommit = 0;
	var isWaitingForCallback = false;
	// During commits, we only show a measurement once per method name
	// to avoid stretch the commit phase with measurement overhead.
	var labelsInCurrentCommit = new Set();

	var formatMarkName = function (markName) {
	  return reactEmoji + ' ' + markName;
	};

	var formatLabel = function (label, warning$$1) {
	  var prefix = warning$$1 ? warningEmoji + ' ' : reactEmoji + ' ';
	  var suffix = warning$$1 ? ' Warning: ' + warning$$1 : '';
	  return '' + prefix + label + suffix;
	};

	var beginMark = function (markName) {
	  performance.mark(formatMarkName(markName));
	};

	var clearMark = function (markName) {
	  performance.clearMarks(formatMarkName(markName));
	};

	var endMark = function (label, markName, warning$$1) {
	  var formattedMarkName = formatMarkName(markName);
	  var formattedLabel = formatLabel(label, warning$$1);
	  try {
	    performance.measure(formattedLabel, formattedMarkName);
	  } catch (err) {}
	  // If previous mark was missing for some reason, this will throw.
	  // This could only happen if React crashed in an unexpected place earlier.
	  // Don't pile on with more errors.

	  // Clear marks immediately to avoid growing buffer.
	  performance.clearMarks(formattedMarkName);
	  performance.clearMeasures(formattedLabel);
	};

	var getFiberMarkName = function (label, debugID) {
	  return label + ' (#' + debugID + ')';
	};

	var getFiberLabel = function (componentName, isMounted, phase) {
	  if (phase === null) {
	    // These are composite component total time measurements.
	    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
	  } else {
	    // Composite component methods.
	    return componentName + '.' + phase;
	  }
	};

	var beginFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);

	  if (isCommitting && labelsInCurrentCommit.has(label)) {
	    // During the commit phase, we don't show duplicate labels because
	    // there is a fixed overhead for every measurement, and we don't
	    // want to stretch the commit phase beyond necessary.
	    return false;
	  }
	  labelsInCurrentCommit.add(label);

	  var markName = getFiberMarkName(label, debugID);
	  beginMark(markName);
	  return true;
	};

	var clearFiberMark = function (fiber, phase) {
	  var componentName = getComponentName(fiber) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  clearMark(markName);
	};

	var endFiberMark = function (fiber, phase, warning$$1) {
	  var componentName = getComponentName(fiber) || 'Unknown';
	  var debugID = fiber._debugID;
	  var isMounted = fiber.alternate !== null;
	  var label = getFiberLabel(componentName, isMounted, phase);
	  var markName = getFiberMarkName(label, debugID);
	  endMark(label, markName, warning$$1);
	};

	var shouldIgnoreFiber = function (fiber) {
	  // Host components should be skipped in the timeline.
	  // We could check typeof fiber.type, but does this work with RN?
	  switch (fiber.tag) {
	    case HostRoot:
	    case HostComponent:
	    case HostText:
	    case HostPortal:
	    case ReturnComponent:
	    case Fragment:
	      return true;
	    default:
	      return false;
	  }
	};

	var clearPendingPhaseMeasurement = function () {
	  if (currentPhase !== null && currentPhaseFiber !== null) {
	    clearFiberMark(currentPhaseFiber, currentPhase);
	  }
	  currentPhaseFiber = null;
	  currentPhase = null;
	  hasScheduledUpdateInCurrentPhase = false;
	};

	var pauseTimers = function () {
	  // Stops all currently active measurements so that they can be resumed
	  // if we continue in a later deferred loop from the same unit of work.
	  var fiber = currentFiber;
	  while (fiber) {
	    if (fiber._debugIsCurrentlyTiming) {
	      endFiberMark(fiber, null, null);
	    }
	    fiber = fiber['return'];
	  }
	};

	var resumeTimersRecursively = function (fiber) {
	  if (fiber['return'] !== null) {
	    resumeTimersRecursively(fiber['return']);
	  }
	  if (fiber._debugIsCurrentlyTiming) {
	    beginFiberMark(fiber, null);
	  }
	};

	var resumeTimers = function () {
	  // Resumes all measurements that were active during the last deferred loop.
	  if (currentFiber !== null) {
	    resumeTimersRecursively(currentFiber);
	  }
	};

	function recordEffect() {
	  if (enableUserTimingAPI) {
	    effectCountInCurrentCommit++;
	  }
	}

	function recordScheduleUpdate() {
	  if (enableUserTimingAPI) {
	    if (isCommitting) {
	      hasScheduledUpdateInCurrentCommit = true;
	    }
	    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
	      hasScheduledUpdateInCurrentPhase = true;
	    }
	  }
	}

	function startRequestCallbackTimer() {
	  if (enableUserTimingAPI) {
	    if (supportsUserTiming && !isWaitingForCallback) {
	      isWaitingForCallback = true;
	      beginMark('(Waiting for async callback...)');
	    }
	  }
	}

	function stopRequestCallbackTimer(didExpire) {
	  if (enableUserTimingAPI) {
	    if (supportsUserTiming) {
	      isWaitingForCallback = false;
	      var warning$$1 = didExpire ? 'React was blocked by main thread' : null;
	      endMark('(Waiting for async callback...)', '(Waiting for async callback...)', warning$$1);
	    }
	  }
	}

	function startWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, this is the fiber to unwind from.
	    currentFiber = fiber;
	    if (!beginFiberMark(fiber, null)) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = true;
	  }
	}

	function cancelWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // Remember we shouldn't complete measurement for this fiber.
	    // Otherwise flamechart will be deep even for small updates.
	    fiber._debugIsCurrentlyTiming = false;
	    clearFiberMark(fiber, null);
	  }
	}

	function stopWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, its parent is the fiber to unwind from.
	    currentFiber = fiber['return'];
	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = false;
	    endFiberMark(fiber, null, null);
	  }
	}

	function stopFailedWorkTimer(fiber) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
	      return;
	    }
	    // If we pause, its parent is the fiber to unwind from.
	    currentFiber = fiber['return'];
	    if (!fiber._debugIsCurrentlyTiming) {
	      return;
	    }
	    fiber._debugIsCurrentlyTiming = false;
	    var warning$$1 = 'An error was thrown inside this error boundary';
	    endFiberMark(fiber, null, warning$$1);
	  }
	}

	function startPhaseTimer(fiber, phase) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    clearPendingPhaseMeasurement();
	    if (!beginFiberMark(fiber, phase)) {
	      return;
	    }
	    currentPhaseFiber = fiber;
	    currentPhase = phase;
	  }
	}

	function stopPhaseTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    if (currentPhase !== null && currentPhaseFiber !== null) {
	      var warning$$1 = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
	      endFiberMark(currentPhaseFiber, currentPhase, warning$$1);
	    }
	    currentPhase = null;
	    currentPhaseFiber = null;
	  }
	}

	function startWorkLoopTimer(nextUnitOfWork) {
	  if (enableUserTimingAPI) {
	    currentFiber = nextUnitOfWork;
	    if (!supportsUserTiming) {
	      return;
	    }
	    commitCountInCurrentWorkLoop = 0;
	    // This is top level call.
	    // Any other measurements are performed within.
	    beginMark('(React Tree Reconciliation)');
	    // Resume any measurements that were in progress during the last loop.
	    resumeTimers();
	  }
	}

	function stopWorkLoopTimer(interruptedBy) {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var warning$$1 = null;
	    if (interruptedBy !== null) {
	      if (interruptedBy.tag === HostRoot) {
	        warning$$1 = 'A top-level update interrupted the previous render';
	      } else {
	        var componentName = getComponentName(interruptedBy) || 'Unknown';
	        warning$$1 = 'An update to ' + componentName + ' interrupted the previous render';
	      }
	    } else if (commitCountInCurrentWorkLoop > 1) {
	      warning$$1 = 'There were cascading updates';
	    }
	    commitCountInCurrentWorkLoop = 0;
	    // Pause any measurements until the next loop.
	    pauseTimers();
	    endMark('(React Tree Reconciliation)', '(React Tree Reconciliation)', warning$$1);
	  }
	}

	function startCommitTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    isCommitting = true;
	    hasScheduledUpdateInCurrentCommit = false;
	    labelsInCurrentCommit.clear();
	    beginMark('(Committing Changes)');
	  }
	}

	function stopCommitTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }

	    var warning$$1 = null;
	    if (hasScheduledUpdateInCurrentCommit) {
	      warning$$1 = 'Lifecycle hook scheduled a cascading update';
	    } else if (commitCountInCurrentWorkLoop > 0) {
	      warning$$1 = 'Caused by a cascading update in earlier commit';
	    }
	    hasScheduledUpdateInCurrentCommit = false;
	    commitCountInCurrentWorkLoop++;
	    isCommitting = false;
	    labelsInCurrentCommit.clear();

	    endMark('(Committing Changes)', '(Committing Changes)', warning$$1);
	  }
	}

	function startCommitHostEffectsTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Committing Host Effects)');
	  }
	}

	function stopCommitHostEffectsTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
	  }
	}

	function startCommitLifeCyclesTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    effectCountInCurrentCommit = 0;
	    beginMark('(Calling Lifecycle Methods)');
	  }
	}

	function stopCommitLifeCyclesTimer() {
	  if (enableUserTimingAPI) {
	    if (!supportsUserTiming) {
	      return;
	    }
	    var count = effectCountInCurrentCommit;
	    effectCountInCurrentCommit = 0;
	    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
	  }
	}

	{
	  var warnedAboutMissingGetChildContext = {};
	}

	// A cursor to the current merged context object on the stack.
	var contextStackCursor = createCursor(emptyObject);
	// A cursor to a boolean indicating whether the context has changed.
	var didPerformWorkStackCursor = createCursor(false);
	// Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.
	var previousContext = emptyObject;

	function getUnmaskedContext(workInProgress) {
	  var hasOwnContext = isContextProvider(workInProgress);
	  if (hasOwnContext) {
	    // If the fiber is a context provider itself, when we read its context
	    // we have already pushed its own child context on the stack. A context
	    // provider should not "see" its own child context. Therefore we read the
	    // previous (parent) context instead for a context provider.
	    return previousContext;
	  }
	  return contextStackCursor.current;
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  var instance = workInProgress.stateNode;
	  instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	  instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  var type = workInProgress.type;
	  var contextTypes = type.contextTypes;
	  if (!contextTypes) {
	    return emptyObject;
	  }

	  // Avoid recreating masked context unless unmasked context has changed.
	  // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	  // This may trigger infinite loops if componentWillReceiveProps calls setState.
	  var instance = workInProgress.stateNode;
	  if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	    return instance.__reactInternalMemoizedMaskedChildContext;
	  }

	  var context = {};
	  for (var key in contextTypes) {
	    context[key] = unmaskedContext[key];
	  }

	  {
	    var name = getComponentName(workInProgress) || 'Unknown';
	    checkPropTypes(contextTypes, context, 'context', name, ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
	  }

	  // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // Context is created before the class component is instantiated so check for instance.
	  if (instance) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return context;
	}

	function hasContextChanged() {
	  return didPerformWorkStackCursor.current;
	}

	function isContextConsumer(fiber) {
	  return fiber.tag === ClassComponent && fiber.type.contextTypes != null;
	}

	function isContextProvider(fiber) {
	  return fiber.tag === ClassComponent && fiber.type.childContextTypes != null;
	}

	function popContextProvider(fiber) {
	  if (!isContextProvider(fiber)) {
	    return;
	  }

	  pop(didPerformWorkStackCursor, fiber);
	  pop(contextStackCursor, fiber);
	}

	function popTopLevelContextObject(fiber) {
	  pop(didPerformWorkStackCursor, fiber);
	  pop(contextStackCursor, fiber);
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  !(contextStackCursor.cursor == null) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  push(contextStackCursor, context, fiber);
	  push(didPerformWorkStackCursor, didChange, fiber);
	}

	function processChildContext(fiber, parentContext) {
	  var instance = fiber.stateNode;
	  var childContextTypes = fiber.type.childContextTypes;

	  // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	  // It has only been added in Fiber to match the (unintentional) behavior in Stack.
	  if (typeof instance.getChildContext !== 'function') {
	    {
	      var componentName = getComponentName(fiber) || 'Unknown';

	      if (!warnedAboutMissingGetChildContext[componentName]) {
	        warnedAboutMissingGetChildContext[componentName] = true;
	        warning(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	      }
	    }
	    return parentContext;
	  }

	  var childContext = void 0;
	  {
	    ReactDebugCurrentFiber.setCurrentPhase('getChildContext');
	  }
	  startPhaseTimer(fiber, 'getChildContext');
	  childContext = instance.getChildContext();
	  stopPhaseTimer();
	  {
	    ReactDebugCurrentFiber.setCurrentPhase(null);
	  }
	  for (var contextKey in childContext) {
	    !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(fiber) || 'Unknown', contextKey) : void 0;
	  }
	  {
	    var name = getComponentName(fiber) || 'Unknown';
	    checkPropTypes(childContextTypes, childContext, 'child context', name,
	    // In practice, there is one case in which we won't get a stack. It's when
	    // somebody calls unstable_renderSubtreeIntoContainer() and we process
	    // context from the parent component instance. The stack will be missing
	    // because it's outside of the reconciliation, and so the pointer has not
	    // been set. This is rare and doesn't matter. We'll also remove that API.
	    ReactDebugCurrentFiber.getCurrentFiberStackAddendum);
	  }

	  return _assign({}, parentContext, childContext);
	}

	function pushContextProvider(workInProgress) {
	  if (!isContextProvider(workInProgress)) {
	    return false;
	  }

	  var instance = workInProgress.stateNode;
	  // We push the context as early as possible to ensure stack integrity.
	  // If the instance does not exist yet, we will push null at first,
	  // and replace it on the stack later when invalidating the context.
	  var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;

	  // Remember the parent context so we can merge with it later.
	  // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
	  previousContext = contextStackCursor.current;
	  push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	  push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);

	  return true;
	}

	function invalidateContextProvider(workInProgress, didChange) {
	  var instance = workInProgress.stateNode;
	  !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  if (didChange) {
	    // Merge parent and own context.
	    // Skip this if we're not updating due to sCU.
	    // This avoids unnecessarily recomputing memoized values.
	    var mergedContext = processChildContext(workInProgress, previousContext);
	    instance.__reactInternalMemoizedMergedChildContext = mergedContext;

	    // Replace the old (or empty) context with the new one.
	    // It is important to unwind the context in the reverse order.
	    pop(didPerformWorkStackCursor, workInProgress);
	    pop(contextStackCursor, workInProgress);
	    // Now push the new context and mark that it has changed.
	    push(contextStackCursor, mergedContext, workInProgress);
	    push(didPerformWorkStackCursor, didChange, workInProgress);
	  } else {
	    pop(didPerformWorkStackCursor, workInProgress);
	    push(didPerformWorkStackCursor, didChange, workInProgress);
	  }
	}

	function resetContext() {
	  previousContext = emptyObject;
	  contextStackCursor.current = emptyObject;
	  didPerformWorkStackCursor.current = false;
	}

	function findCurrentUnmaskedContext(fiber) {
	  // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	  // makes sense elsewhere
	  !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	  var node = fiber;
	  while (node.tag !== HostRoot) {
	    if (isContextProvider(node)) {
	      return node.stateNode.__reactInternalMemoizedMergedChildContext;
	    }
	    var parent = node['return'];
	    !parent ? invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    node = parent;
	  }
	  return node.stateNode.context;
	}

	var NoWork = 0; // TODO: Use an opaque type once ESLint et al support the syntax

	var Sync = 1;
	var Never = 2147483647; // Max int32: Math.pow(2, 31) - 1

	var UNIT_SIZE = 10;
	var MAGIC_NUMBER_OFFSET = 2;

	// 1 unit of expiration time represents 10ms.
	function msToExpirationTime(ms) {
	  // Always add an offset so that we don't clash with the magic number for NoWork.
	  return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;
	}

	function expirationTimeToMs(expirationTime) {
	  return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;
	}

	function ceiling(num, precision) {
	  return ((num / precision | 0) + 1) * precision;
	}

	function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
	  return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
	}

	var NoContext = 0;
	var AsyncUpdates = 1;

	{
	  var hasBadMapPolyfill = false;
	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    /* eslint-disable no-new */
	    
	    /* eslint-enable no-new */
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	// A Fiber is work on a Component that needs to be done or was done. There can
	// be more than one per component.


	{
	  var debugCounter = 1;
	}

	function FiberNode(tag, key, internalContextTag) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.type = null;
	  this.stateNode = null;

	  // Fiber
	  this['return'] = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;

	  this.ref = null;

	  this.pendingProps = null;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;

	  this.internalContextTag = internalContextTag;

	  // Effects
	  this.effectTag = NoEffect;
	  this.nextEffect = null;

	  this.firstEffect = null;
	  this.lastEffect = null;

	  this.expirationTime = NoWork;

	  this.alternate = null;

	  {
	    this._debugID = debugCounter++;
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugIsCurrentlyTiming = false;
	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	}

	// This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.
	var createFiber = function (tag, key, internalContextTag) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, key, internalContextTag);
	};

	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}

	// This is used to create an alternate fiber to do work on.
	function createWorkInProgress(current, pendingProps, expirationTime) {
	  var workInProgress = current.alternate;
	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, current.key, current.internalContextTag);
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      workInProgress._debugID = current._debugID;
	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    // We already have an alternate.
	    // Reset the effect tag.
	    workInProgress.effectTag = NoEffect;

	    // The effect list is no longer valid.
	    workInProgress.nextEffect = null;
	    workInProgress.firstEffect = null;
	    workInProgress.lastEffect = null;
	  }

	  workInProgress.expirationTime = expirationTime;
	  workInProgress.pendingProps = pendingProps;

	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue;

	  // These will be overridden during the parent's reconciliation
	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  return workInProgress;
	}

	function createHostRootFiber() {
	  var fiber = createFiber(HostRoot, null, NoContext);
	  return fiber;
	}

	function createFiberFromElement(element, internalContextTag, expirationTime) {
	  var owner = null;
	  {
	    owner = element._owner;
	  }

	  var fiber = void 0;
	  var type = element.type,
	      key = element.key;

	  if (typeof type === 'function') {
	    fiber = shouldConstruct(type) ? createFiber(ClassComponent, key, internalContextTag) : createFiber(IndeterminateComponent, key, internalContextTag);
	    fiber.type = type;
	    fiber.pendingProps = element.props;
	  } else if (typeof type === 'string') {
	    fiber = createFiber(HostComponent, key, internalContextTag);
	    fiber.type = type;
	    fiber.pendingProps = element.props;
	  } else if (typeof type === 'object' && type !== null && typeof type.tag === 'number') {
	    // Currently assumed to be a continuation and therefore is a fiber already.
	    // TODO: The yield system is currently broken for updates in some cases.
	    // The reified yield stores a fiber, but we don't know which fiber that is;
	    // the current or a workInProgress? When the continuation gets rendered here
	    // we don't know if we can reuse that fiber or if we need to clone it.
	    // There is probably a clever way to restructure this.
	    fiber = type;
	    fiber.pendingProps = element.props;
	  } else {
	    var info = '';
	    {
	      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	      }
	      var ownerName = owner ? getComponentName(owner) : null;
	      if (ownerName) {
	        info += '\n\nCheck the render method of `' + ownerName + '`.';
	      }
	    }
	    invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
	  }

	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }

	  fiber.expirationTime = expirationTime;

	  return fiber;
	}

	function createFiberFromFragment(elements, internalContextTag, expirationTime, key) {
	  var fiber = createFiber(Fragment, key, internalContextTag);
	  fiber.pendingProps = elements;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromText(content, internalContextTag, expirationTime) {
	  var fiber = createFiber(HostText, null, internalContextTag);
	  fiber.pendingProps = content;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, NoContext);
	  fiber.type = 'DELETED';
	  return fiber;
	}

	function createFiberFromCall(call, internalContextTag, expirationTime) {
	  var fiber = createFiber(CallComponent, call.key, internalContextTag);
	  fiber.type = call.handler;
	  fiber.pendingProps = call;
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromReturn(returnNode, internalContextTag, expirationTime) {
	  var fiber = createFiber(ReturnComponent, null, internalContextTag);
	  fiber.expirationTime = expirationTime;
	  return fiber;
	}

	function createFiberFromPortal(portal, internalContextTag, expirationTime) {
	  var fiber = createFiber(HostPortal, portal.key, internalContextTag);
	  fiber.pendingProps = portal.children || [];
	  fiber.expirationTime = expirationTime;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null, // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	}

	function createFiberRoot(containerInfo, hydrate) {
	  // Cyclic construction. This cheats the type system right now because
	  // stateNode is any.
	  var uninitializedFiber = createHostRootFiber();
	  var root = {
	    current: uninitializedFiber,
	    containerInfo: containerInfo,
	    pendingChildren: null,
	    remainingExpirationTime: NoWork,
	    isReadyForCommit: false,
	    finishedWork: null,
	    context: null,
	    pendingContext: null,
	    hydrate: hydrate,
	    nextScheduledRoot: null
	  };
	  uninitializedFiber.stateNode = root;
	  return root;
	}

	var onCommitFiberRoot = null;
	var onCommitFiberUnmount = null;
	var hasLoggedError = false;

	function catchErrors(fn) {
	  return function (arg) {
	    try {
	      return fn(arg);
	    } catch (err) {
	      if (true && !hasLoggedError) {
	        hasLoggedError = true;
	        warning(false, 'React DevTools encountered an error: %s', err);
	      }
	    }
	  };
	}

	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }
	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }
	  if (!hook.supportsFiber) {
	    {
	      warning(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
	    }
	    // DevTools exists, even though it doesn't support Fiber.
	    return true;
	  }
	  try {
	    var rendererID = hook.inject(internals);
	    // We have successfully injected, so now it is safe to set up hooks.
	    onCommitFiberRoot = catchErrors(function (root) {
	      return hook.onCommitFiberRoot(rendererID, root);
	    });
	    onCommitFiberUnmount = catchErrors(function (fiber) {
	      return hook.onCommitFiberUnmount(rendererID, fiber);
	    });
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      warning(false, 'React DevTools encountered an error: %s.', err);
	    }
	  }
	  // DevTools exists
	  return true;
	}

	function onCommitRoot(root) {
	  if (typeof onCommitFiberRoot === 'function') {
	    onCommitFiberRoot(root);
	  }
	}

	function onCommitUnmount(fiber) {
	  if (typeof onCommitFiberUnmount === 'function') {
	    onCommitFiberUnmount(fiber);
	  }
	}

	{
	  var didWarnUpdateInsideUpdate = false;
	}

	// Callbacks are not validated until invocation


	// Singly linked-list of updates. When an update is scheduled, it is added to
	// the queue of the current fiber and the work-in-progress fiber. The two queues
	// are separate but they share a persistent structure.
	//
	// During reconciliation, updates are removed from the work-in-progress fiber,
	// but they remain on the current fiber. That ensures that if a work-in-progress
	// is aborted, the aborted updates are recovered by cloning from current.
	//
	// The work-in-progress queue is always a subset of the current queue.
	//
	// When the tree is committed, the work-in-progress becomes the current.


	function createUpdateQueue(baseState) {
	  var queue = {
	    baseState: baseState,
	    expirationTime: NoWork,
	    first: null,
	    last: null,
	    callbackList: null,
	    hasForceUpdate: false,
	    isInitialized: false
	  };
	  {
	    queue.isProcessing = false;
	  }
	  return queue;
	}

	function insertUpdateIntoQueue(queue, update) {
	  // Append the update to the end of the list.
	  if (queue.last === null) {
	    // Queue is empty
	    queue.first = queue.last = update;
	  } else {
	    queue.last.next = update;
	    queue.last = update;
	  }
	  if (queue.expirationTime === NoWork || queue.expirationTime > update.expirationTime) {
	    queue.expirationTime = update.expirationTime;
	  }
	}

	function insertUpdateIntoFiber(fiber, update) {
	  // We'll have at least one and at most two distinct update queues.
	  var alternateFiber = fiber.alternate;
	  var queue1 = fiber.updateQueue;
	  if (queue1 === null) {
	    // TODO: We don't know what the base state will be until we begin work.
	    // It depends on which fiber is the next current. Initialize with an empty
	    // base state, then set to the memoizedState when rendering. Not super
	    // happy with this approach.
	    queue1 = fiber.updateQueue = createUpdateQueue(null);
	  }

	  var queue2 = void 0;
	  if (alternateFiber !== null) {
	    queue2 = alternateFiber.updateQueue;
	    if (queue2 === null) {
	      queue2 = alternateFiber.updateQueue = createUpdateQueue(null);
	    }
	  } else {
	    queue2 = null;
	  }
	  queue2 = queue2 !== queue1 ? queue2 : null;

	  // Warn if an update is scheduled from inside an updater function.
	  {
	    if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {
	      warning(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
	      didWarnUpdateInsideUpdate = true;
	    }
	  }

	  // If there's only one queue, add the update to that queue and exit.
	  if (queue2 === null) {
	    insertUpdateIntoQueue(queue1, update);
	    return;
	  }

	  // If either queue is empty, we need to add to both queues.
	  if (queue1.last === null || queue2.last === null) {
	    insertUpdateIntoQueue(queue1, update);
	    insertUpdateIntoQueue(queue2, update);
	    return;
	  }

	  // If both lists are not empty, the last update is the same for both lists
	  // because of structural sharing. So, we should only append to one of
	  // the lists.
	  insertUpdateIntoQueue(queue1, update);
	  // But we still need to update the `last` pointer of queue2.
	  queue2.last = update;
	}

	function getUpdateExpirationTime(fiber) {
	  if (fiber.tag !== ClassComponent && fiber.tag !== HostRoot) {
	    return NoWork;
	  }
	  var updateQueue = fiber.updateQueue;
	  if (updateQueue === null) {
	    return NoWork;
	  }
	  return updateQueue.expirationTime;
	}

	function getStateFromUpdate(update, instance, prevState, props) {
	  var partialState = update.partialState;
	  if (typeof partialState === 'function') {
	    var updateFn = partialState;

	    // Invoke setState callback an extra time to help detect side-effects.
	    if (debugRenderPhaseSideEffects) {
	      updateFn.call(instance, prevState, props);
	    }

	    return updateFn.call(instance, prevState, props);
	  } else {
	    return partialState;
	  }
	}

	function processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {
	  if (current !== null && current.updateQueue === queue) {
	    // We need to create a work-in-progress queue, by cloning the current queue.
	    var currentQueue = queue;
	    queue = workInProgress.updateQueue = {
	      baseState: currentQueue.baseState,
	      expirationTime: currentQueue.expirationTime,
	      first: currentQueue.first,
	      last: currentQueue.last,
	      isInitialized: currentQueue.isInitialized,
	      // These fields are no longer valid because they were already committed.
	      // Reset them.
	      callbackList: null,
	      hasForceUpdate: false
	    };
	  }

	  {
	    // Set this flag so we can warn if setState is called inside the update
	    // function of another setState.
	    queue.isProcessing = true;
	  }

	  // Reset the remaining expiration time. If we skip over any updates, we'll
	  // increase this accordingly.
	  queue.expirationTime = NoWork;

	  // TODO: We don't know what the base state will be until we begin work.
	  // It depends on which fiber is the next current. Initialize with an empty
	  // base state, then set to the memoizedState when rendering. Not super
	  // happy with this approach.
	  var state = void 0;
	  if (queue.isInitialized) {
	    state = queue.baseState;
	  } else {
	    state = queue.baseState = workInProgress.memoizedState;
	    queue.isInitialized = true;
	  }
	  var dontMutatePrevState = true;
	  var update = queue.first;
	  var didSkip = false;
	  while (update !== null) {
	    var updateExpirationTime = update.expirationTime;
	    if (updateExpirationTime > renderExpirationTime) {
	      // This update does not have sufficient priority. Skip it.
	      var remainingExpirationTime = queue.expirationTime;
	      if (remainingExpirationTime === NoWork || remainingExpirationTime > updateExpirationTime) {
	        // Update the remaining expiration time.
	        queue.expirationTime = updateExpirationTime;
	      }
	      if (!didSkip) {
	        didSkip = true;
	        queue.baseState = state;
	      }
	      // Continue to the next update.
	      update = update.next;
	      continue;
	    }

	    // This update does have sufficient priority.

	    // If no previous updates were skipped, drop this update from the queue by
	    // advancing the head of the list.
	    if (!didSkip) {
	      queue.first = update.next;
	      if (queue.first === null) {
	        queue.last = null;
	      }
	    }

	    // Process the update
	    var _partialState = void 0;
	    if (update.isReplace) {
	      state = getStateFromUpdate(update, instance, state, props);
	      dontMutatePrevState = true;
	    } else {
	      _partialState = getStateFromUpdate(update, instance, state, props);
	      if (_partialState) {
	        if (dontMutatePrevState) {
	          // $FlowFixMe: Idk how to type this properly.
	          state = _assign({}, state, _partialState);
	        } else {
	          state = _assign(state, _partialState);
	        }
	        dontMutatePrevState = false;
	      }
	    }
	    if (update.isForced) {
	      queue.hasForceUpdate = true;
	    }
	    if (update.callback !== null) {
	      // Append to list of callbacks.
	      var _callbackList = queue.callbackList;
	      if (_callbackList === null) {
	        _callbackList = queue.callbackList = [];
	      }
	      _callbackList.push(update);
	    }
	    update = update.next;
	  }

	  if (queue.callbackList !== null) {
	    workInProgress.effectTag |= Callback;
	  } else if (queue.first === null && !queue.hasForceUpdate) {
	    // The queue is empty. We can reset it.
	    workInProgress.updateQueue = null;
	  }

	  if (!didSkip) {
	    didSkip = true;
	    queue.baseState = state;
	  }

	  {
	    // No longer processing.
	    queue.isProcessing = false;
	  }

	  return state;
	}

	function commitCallbacks(queue, context) {
	  var callbackList = queue.callbackList;
	  if (callbackList === null) {
	    return;
	  }
	  // Set the list to null to make sure they don't get called more than once.
	  queue.callbackList = null;
	  for (var i = 0; i < callbackList.length; i++) {
	    var update = callbackList[i];
	    var _callback = update.callback;
	    // This update might be processed again. Clear the callback so it's only
	    // called once.
	    update.callback = null;
	    !(typeof _callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback) : void 0;
	    _callback.call(context);
	  }
	}

	var fakeInternalInstance = {};
	var isArray = Array.isArray;

	{
	  var didWarnAboutStateAssignmentForComponent = {};

	  var warnOnInvalidCallback = function (callback, callerName) {
	    warning(callback === null || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	  };

	  // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.
	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	var ReactFiberClassComponent = function (scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {
	  // Class component state updater
	  var updater = {
	    isMounted: isMounted,
	    enqueueSetState: function (instance, partialState, callback) {
	      var fiber = get(instance);
	      callback = callback === undefined ? null : callback;
	      {
	        warnOnInvalidCallback(callback, 'setState');
	      }
	      var expirationTime = computeExpirationForFiber(fiber);
	      var update = {
	        expirationTime: expirationTime,
	        partialState: partialState,
	        callback: callback,
	        isReplace: false,
	        isForced: false,
	        nextCallback: null,
	        next: null
	      };
	      insertUpdateIntoFiber(fiber, update);
	      scheduleWork(fiber, expirationTime);
	    },
	    enqueueReplaceState: function (instance, state, callback) {
	      var fiber = get(instance);
	      callback = callback === undefined ? null : callback;
	      {
	        warnOnInvalidCallback(callback, 'replaceState');
	      }
	      var expirationTime = computeExpirationForFiber(fiber);
	      var update = {
	        expirationTime: expirationTime,
	        partialState: state,
	        callback: callback,
	        isReplace: true,
	        isForced: false,
	        nextCallback: null,
	        next: null
	      };
	      insertUpdateIntoFiber(fiber, update);
	      scheduleWork(fiber, expirationTime);
	    },
	    enqueueForceUpdate: function (instance, callback) {
	      var fiber = get(instance);
	      callback = callback === undefined ? null : callback;
	      {
	        warnOnInvalidCallback(callback, 'forceUpdate');
	      }
	      var expirationTime = computeExpirationForFiber(fiber);
	      var update = {
	        expirationTime: expirationTime,
	        partialState: null,
	        callback: callback,
	        isReplace: false,
	        isForced: true,
	        nextCallback: null,
	        next: null
	      };
	      insertUpdateIntoFiber(fiber, update);
	      scheduleWork(fiber, expirationTime);
	    }
	  };

	  function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
	    if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {
	      // If the workInProgress already has an Update effect, return true
	      return true;
	    }

	    var instance = workInProgress.stateNode;
	    var type = workInProgress.type;
	    if (typeof instance.shouldComponentUpdate === 'function') {
	      startPhaseTimer(workInProgress, 'shouldComponentUpdate');
	      var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
	      stopPhaseTimer();

	      // Simulate an async bailout/interruption by invoking lifecycle twice.
	      if (debugRenderPhaseSideEffects) {
	        instance.shouldComponentUpdate(newProps, newState, newContext);
	      }

	      {
	        warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(workInProgress) || 'Unknown');
	      }

	      return shouldUpdate;
	    }

	    if (type.prototype && type.prototype.isPureReactComponent) {
	      return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	    }

	    return true;
	  }

	  function checkClassInstance(workInProgress) {
	    var instance = workInProgress.stateNode;
	    var type = workInProgress.type;
	    {
	      var name = getComponentName(workInProgress);
	      var renderPresent = instance.render;

	      if (!renderPresent) {
	        if (type.prototype && typeof type.prototype.render === 'function') {
	          warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	        } else {
	          warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	        }
	      }

	      var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
	      warning(noGetInitialStateOnES6, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
	      var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
	      warning(noGetDefaultPropsOnES6, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
	      var noInstancePropTypes = !instance.propTypes;
	      warning(noInstancePropTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
	      var noInstanceContextTypes = !instance.contextTypes;
	      warning(noInstanceContextTypes, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
	      var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
	      warning(noComponentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
	      if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	        warning(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(workInProgress) || 'A pure component');
	      }
	      var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
	      warning(noComponentDidUnmount, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
	      var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
	      warning(noComponentDidReceiveProps, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
	      var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
	      warning(noComponentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
	      var hasMutatedProps = instance.props !== workInProgress.pendingProps;
	      warning(instance.props === undefined || !hasMutatedProps, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
	      var noInstanceDefaultProps = !instance.defaultProps;
	      warning(noInstanceDefaultProps, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
	    }

	    var state = instance.state;
	    if (state && (typeof state !== 'object' || isArray(state))) {
	      warning(false, '%s.state: must be set to an object or null', getComponentName(workInProgress));
	    }
	    if (typeof instance.getChildContext === 'function') {
	      warning(typeof workInProgress.type.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', getComponentName(workInProgress));
	    }
	  }

	  function resetInputPointers(workInProgress, instance) {
	    instance.props = workInProgress.memoizedProps;
	    instance.state = workInProgress.memoizedState;
	  }

	  function adoptClassInstance(workInProgress, instance) {
	    instance.updater = updater;
	    workInProgress.stateNode = instance;
	    // The instance needs access to the fiber so that it can schedule updates
	    set(instance, workInProgress);
	    {
	      instance._reactInternalInstance = fakeInternalInstance;
	    }
	  }

	  function constructClassInstance(workInProgress, props) {
	    var ctor = workInProgress.type;
	    var unmaskedContext = getUnmaskedContext(workInProgress);
	    var needsContext = isContextConsumer(workInProgress);
	    var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : emptyObject;
	    var instance = new ctor(props, context);
	    adoptClassInstance(workInProgress, instance);

	    // Cache unmasked context so we can avoid recreating masked context unless necessary.
	    // ReactFiberContext usually updates this cache but can't for newly-created instances.
	    if (needsContext) {
	      cacheContext(workInProgress, unmaskedContext, context);
	    }

	    return instance;
	  }

	  function callComponentWillMount(workInProgress, instance) {
	    startPhaseTimer(workInProgress, 'componentWillMount');
	    var oldState = instance.state;
	    instance.componentWillMount();
	    stopPhaseTimer();

	    // Simulate an async bailout/interruption by invoking lifecycle twice.
	    if (debugRenderPhaseSideEffects) {
	      instance.componentWillMount();
	    }

	    if (oldState !== instance.state) {
	      {
	        warning(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress));
	      }
	      updater.enqueueReplaceState(instance, instance.state, null);
	    }
	  }

	  function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
	    startPhaseTimer(workInProgress, 'componentWillReceiveProps');
	    var oldState = instance.state;
	    instance.componentWillReceiveProps(newProps, newContext);
	    stopPhaseTimer();

	    // Simulate an async bailout/interruption by invoking lifecycle twice.
	    if (debugRenderPhaseSideEffects) {
	      instance.componentWillReceiveProps(newProps, newContext);
	    }

	    if (instance.state !== oldState) {
	      {
	        var componentName = getComponentName(workInProgress) || 'Component';
	        if (!didWarnAboutStateAssignmentForComponent[componentName]) {
	          warning(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	          didWarnAboutStateAssignmentForComponent[componentName] = true;
	        }
	      }
	      updater.enqueueReplaceState(instance, instance.state, null);
	    }
	  }

	  // Invokes the mount life-cycles on a previously never rendered instance.
	  function mountClassInstance(workInProgress, renderExpirationTime) {
	    var current = workInProgress.alternate;

	    {
	      checkClassInstance(workInProgress);
	    }

	    var instance = workInProgress.stateNode;
	    var state = instance.state || null;

	    var props = workInProgress.pendingProps;
	    !props ? invariant(false, 'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	    var unmaskedContext = getUnmaskedContext(workInProgress);

	    instance.props = props;
	    instance.state = workInProgress.memoizedState = state;
	    instance.refs = emptyObject;
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);

	    if (enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {
	      workInProgress.internalContextTag |= AsyncUpdates;
	    }

	    if (typeof instance.componentWillMount === 'function') {
	      callComponentWillMount(workInProgress, instance);
	      // If we had additional state updates during this life-cycle, let's
	      // process them now.
	      var updateQueue = workInProgress.updateQueue;
	      if (updateQueue !== null) {
	        instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);
	      }
	    }
	    if (typeof instance.componentDidMount === 'function') {
	      workInProgress.effectTag |= Update;
	    }
	  }

	  // Called on a preexisting class instance. Returns false if a resumed render
	  // could be reused.
	  // function resumeMountClassInstance(
	  //   workInProgress: Fiber,
	  //   priorityLevel: PriorityLevel,
	  // ): boolean {
	  //   const instance = workInProgress.stateNode;
	  //   resetInputPointers(workInProgress, instance);

	  //   let newState = workInProgress.memoizedState;
	  //   let newProps = workInProgress.pendingProps;
	  //   if (!newProps) {
	  //     // If there isn't any new props, then we'll reuse the memoized props.
	  //     // This could be from already completed work.
	  //     newProps = workInProgress.memoizedProps;
	  //     invariant(
	  //       newProps != null,
	  //       'There should always be pending or memoized props. This error is ' +
	  //         'likely caused by a bug in React. Please file an issue.',
	  //     );
	  //   }
	  //   const newUnmaskedContext = getUnmaskedContext(workInProgress);
	  //   const newContext = getMaskedContext(workInProgress, newUnmaskedContext);

	  //   const oldContext = instance.context;
	  //   const oldProps = workInProgress.memoizedProps;

	  //   if (
	  //     typeof instance.componentWillReceiveProps === 'function' &&
	  //     (oldProps !== newProps || oldContext !== newContext)
	  //   ) {
	  //     callComponentWillReceiveProps(
	  //       workInProgress,
	  //       instance,
	  //       newProps,
	  //       newContext,
	  //     );
	  //   }

	  //   // Process the update queue before calling shouldComponentUpdate
	  //   const updateQueue = workInProgress.updateQueue;
	  //   if (updateQueue !== null) {
	  //     newState = processUpdateQueue(
	  //       workInProgress,
	  //       updateQueue,
	  //       instance,
	  //       newState,
	  //       newProps,
	  //       priorityLevel,
	  //     );
	  //   }

	  //   // TODO: Should we deal with a setState that happened after the last
	  //   // componentWillMount and before this componentWillMount? Probably
	  //   // unsupported anyway.

	  //   if (
	  //     !checkShouldComponentUpdate(
	  //       workInProgress,
	  //       workInProgress.memoizedProps,
	  //       newProps,
	  //       workInProgress.memoizedState,
	  //       newState,
	  //       newContext,
	  //     )
	  //   ) {
	  //     // Update the existing instance's state, props, and context pointers even
	  //     // though we're bailing out.
	  //     instance.props = newProps;
	  //     instance.state = newState;
	  //     instance.context = newContext;
	  //     return false;
	  //   }

	  //   // Update the input pointers now so that they are correct when we call
	  //   // componentWillMount
	  //   instance.props = newProps;
	  //   instance.state = newState;
	  //   instance.context = newContext;

	  //   if (typeof instance.componentWillMount === 'function') {
	  //     callComponentWillMount(workInProgress, instance);
	  //     // componentWillMount may have called setState. Process the update queue.
	  //     const newUpdateQueue = workInProgress.updateQueue;
	  //     if (newUpdateQueue !== null) {
	  //       newState = processUpdateQueue(
	  //         workInProgress,
	  //         newUpdateQueue,
	  //         instance,
	  //         newState,
	  //         newProps,
	  //         priorityLevel,
	  //       );
	  //     }
	  //   }

	  //   if (typeof instance.componentDidMount === 'function') {
	  //     workInProgress.effectTag |= Update;
	  //   }

	  //   instance.state = newState;

	  //   return true;
	  // }

	  // Invokes the update life-cycles and returns false if it shouldn't rerender.
	  function updateClassInstance(current, workInProgress, renderExpirationTime) {
	    var instance = workInProgress.stateNode;
	    resetInputPointers(workInProgress, instance);

	    var oldProps = workInProgress.memoizedProps;
	    var newProps = workInProgress.pendingProps;
	    if (!newProps) {
	      // If there aren't any new props, then we'll reuse the memoized props.
	      // This could be from already completed work.
	      newProps = oldProps;
	      !(newProps != null) ? invariant(false, 'There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    }
	    var oldContext = instance.context;
	    var newUnmaskedContext = getUnmaskedContext(workInProgress);
	    var newContext = getMaskedContext(workInProgress, newUnmaskedContext);

	    // Note: During these life-cycles, instance.props/instance.state are what
	    // ever the previously attempted to render - not the "current". However,
	    // during componentDidUpdate we pass the "current" props.

	    if (typeof instance.componentWillReceiveProps === 'function' && (oldProps !== newProps || oldContext !== newContext)) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
	    }

	    // Compute the next state using the memoized state and the update queue.
	    var oldState = workInProgress.memoizedState;
	    // TODO: Previous state can be null.
	    var newState = void 0;
	    if (workInProgress.updateQueue !== null) {
	      newState = processUpdateQueue(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);
	    } else {
	      newState = oldState;
	    }

	    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {
	      // If an update was already in progress, we should schedule an Update
	      // effect even though we're bailing out, so that cWU/cDU are called.
	      if (typeof instance.componentDidUpdate === 'function') {
	        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	          workInProgress.effectTag |= Update;
	        }
	      }
	      return false;
	    }

	    var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);

	    if (shouldUpdate) {
	      if (typeof instance.componentWillUpdate === 'function') {
	        startPhaseTimer(workInProgress, 'componentWillUpdate');
	        instance.componentWillUpdate(newProps, newState, newContext);
	        stopPhaseTimer();

	        // Simulate an async bailout/interruption by invoking lifecycle twice.
	        if (debugRenderPhaseSideEffects) {
	          instance.componentWillUpdate(newProps, newState, newContext);
	        }
	      }
	      if (typeof instance.componentDidUpdate === 'function') {
	        workInProgress.effectTag |= Update;
	      }
	    } else {
	      // If an update was already in progress, we should schedule an Update
	      // effect even though we're bailing out, so that cWU/cDU are called.
	      if (typeof instance.componentDidUpdate === 'function') {
	        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	          workInProgress.effectTag |= Update;
	        }
	      }

	      // If shouldComponentUpdate returned false, we should still update the
	      // memoized props/state to indicate that this work can be reused.
	      memoizeProps(workInProgress, newProps);
	      memoizeState(workInProgress, newState);
	    }

	    // Update the existing instance's state, props, and context pointers even
	    // if shouldComponentUpdate returns false.
	    instance.props = newProps;
	    instance.state = newState;
	    instance.context = newContext;

	    return shouldUpdate;
	  }

	  return {
	    adoptClassInstance: adoptClassInstance,
	    constructClassInstance: constructClassInstance,
	    mountClassInstance: mountClassInstance,
	    // resumeMountClassInstance,
	    updateClassInstance: updateClassInstance
	  };
	};

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol['for'];

	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol['for']('react.element') : 0xeac7;
	var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8;
	var REACT_RETURN_TYPE = hasSymbol ? Symbol['for']('react.return') : 0xeac9;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol['for']('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol['for']('react.fragment') : 0xeacb;

	var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';

	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable === 'undefined') {
	    return null;
	  }
	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }
	  return null;
	}

	var getCurrentFiberStackAddendum$1 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


	{
	  var didWarnAboutMaps = false;
	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */
	  var ownerHasKeyUseWarning = {};
	  var ownerHasFunctionTypeWarning = {};

	  var warnForMissingKey = function (child) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }
	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }
	    !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    child._store.validated = true;

	    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum$1() || '');
	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }
	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

	    warning(false, 'Each child in an array or iterator should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum$1());
	  };
	}

	var isArray$1 = Array.isArray;

	function coerceRef(current, element) {
	  var mixedRef = element.ref;
	  if (mixedRef !== null && typeof mixedRef !== 'function') {
	    if (element._owner) {
	      var owner = element._owner;
	      var inst = void 0;
	      if (owner) {
	        var ownerFiber = owner;
	        !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Stateless function components cannot have refs.') : void 0;
	        inst = ownerFiber.stateNode;
	      }
	      !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
	      var stringRef = '' + mixedRef;
	      // Check if previous string ref matches new string ref
	      if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {
	        return current.ref;
	      }
	      var ref = function (value) {
	        var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };
	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function or a string.') : void 0;
	      !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).', mixedRef) : void 0;
	    }
	  }
	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  if (returnFiber.type !== 'textarea') {
	    var addendum = '';
	    {
	      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum$1() || '');
	    }
	    invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
	  }
	}

	function warnOnFunctionType() {
	  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + (getCurrentFiberStackAddendum$1() || '');

	  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
	    return;
	  }
	  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

	  warning(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum$1() || '');
	}

	// This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.
	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    }
	    // Deletions are added in reversed order so we add it to the front.
	    // At this point, the return fiber's effect list is empty except for
	    // deletions, so we can just append the deletion to the list. The remaining
	    // effects aren't added until the complete phase. Once we implement
	    // resuming, this may not be true.
	    var last = returnFiber.lastEffect;
	    if (last !== null) {
	      last.nextEffect = childToDelete;
	      returnFiber.lastEffect = childToDelete;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	    }
	    childToDelete.nextEffect = null;
	    childToDelete.effectTag = Deletion;
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    }

	    // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.
	    var childToDelete = currentFirstChild;
	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }
	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    var existingChildren = new Map();

	    var existingChild = currentFirstChild;
	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }
	      existingChild = existingChild.sibling;
	    }
	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps, expirationTime) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return lastPlacedIndex;
	    }
	    var current = newFiber.alternate;
	    if (current !== null) {
	      var oldIndex = current.index;
	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.effectTag = Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.effectTag = Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.effectTag = Placement;
	    }
	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current, textContent, expirationTime) {
	    if (current === null || current.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
	      created['return'] = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, textContent, expirationTime);
	      existing['return'] = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current, element, expirationTime) {
	    if (current !== null && current.type === element.type) {
	      // Move based on index
	      var existing = useFiber(current, element.props, expirationTime);
	      existing.ref = coerceRef(current, element);
	      existing['return'] = returnFiber;
	      {
	        existing._debugSource = element._source;
	        existing._debugOwner = element._owner;
	      }
	      return existing;
	    } else {
	      // Insert
	      var created = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
	      created.ref = coerceRef(current, element);
	      created['return'] = returnFiber;
	      return created;
	    }
	  }

	  function updateCall(returnFiber, current, call, expirationTime) {
	    // TODO: Should this also compare handler to determine whether to reuse?
	    if (current === null || current.tag !== CallComponent) {
	      // Insert
	      var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
	      created['return'] = returnFiber;
	      return created;
	    } else {
	      // Move based on index
	      var existing = useFiber(current, call, expirationTime);
	      existing['return'] = returnFiber;
	      return existing;
	    }
	  }

	  function updateReturn(returnFiber, current, returnNode, expirationTime) {
	    if (current === null || current.tag !== ReturnComponent) {
	      // Insert
	      var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
	      created.type = returnNode.value;
	      created['return'] = returnFiber;
	      return created;
	    } else {
	      // Move based on index
	      var existing = useFiber(current, null, expirationTime);
	      existing.type = returnNode.value;
	      existing['return'] = returnFiber;
	      return existing;
	    }
	  }

	  function updatePortal(returnFiber, current, portal, expirationTime) {
	    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
	      created['return'] = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, portal.children || [], expirationTime);
	      existing['return'] = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
	    if (current === null || current.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.internalContextTag, expirationTime, key);
	      created['return'] = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, fragment, expirationTime);
	      existing['return'] = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.internalContextTag, expirationTime);
	      created['return'] = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.type === REACT_FRAGMENT_TYPE) {
	              var _created = createFiberFromFragment(newChild.props.children, returnFiber.internalContextTag, expirationTime, newChild.key);
	              _created['return'] = returnFiber;
	              return _created;
	            } else {
	              var _created2 = createFiberFromElement(newChild, returnFiber.internalContextTag, expirationTime);
	              _created2.ref = coerceRef(null, newChild);
	              _created2['return'] = returnFiber;
	              return _created2;
	            }
	          }

	        case REACT_CALL_TYPE:
	          {
	            var _created3 = createFiberFromCall(newChild, returnFiber.internalContextTag, expirationTime);
	            _created3['return'] = returnFiber;
	            return _created3;
	          }

	        case REACT_RETURN_TYPE:
	          {
	            var _created4 = createFiberFromReturn(newChild, returnFiber.internalContextTag, expirationTime);
	            _created4.type = newChild.value;
	            _created4['return'] = returnFiber;
	            return _created4;
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _created5 = createFiberFromPortal(newChild, returnFiber.internalContextTag, expirationTime);
	            _created5['return'] = returnFiber;
	            return _created5;
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        var _created6 = createFiberFromFragment(newChild, returnFiber.internalContextTag, expirationTime, null);
	        _created6['return'] = returnFiber;
	        return _created6;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
	    // Update the fiber if the keys match, otherwise return null.

	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }
	      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              if (newChild.type === REACT_FRAGMENT_TYPE) {
	                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
	              }
	              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }

	        case REACT_CALL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updateCall(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }

	        case REACT_RETURN_TYPE:
	          {
	            // Returns don't have keys. If the previous node is implicitly keyed
	            // we can continue to replace it without aborting even if it is not a
	            // yield.
	            if (key === null) {
	              return updateReturn(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
	            } else {
	              return null;
	            }
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
	            if (newChild.type === REACT_FRAGMENT_TYPE) {
	              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
	            }
	            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
	          }

	        case REACT_CALL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
	            return updateCall(returnFiber, _matchedFiber2, newChild, expirationTime);
	          }

	        case REACT_RETURN_TYPE:
	          {
	            // Returns don't have keys, so we neither have to check the old nor
	            // new node for the key. If both are returns, they match.
	            var _matchedFiber3 = existingChildren.get(newIdx) || null;
	            return updateReturn(returnFiber, _matchedFiber3, newChild, expirationTime);
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber4 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
	            return updatePortal(returnFiber, _matchedFiber4, newChild, expirationTime);
	          }
	      }

	      if (isArray$1(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber5 = existingChildren.get(newIdx) || null;
	        return updateFragment(returnFiber, _matchedFiber5, newChild, expirationTime, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }

	    return null;
	  }

	  /**
	   * Warns if there is a duplicate or missing key
	   */
	  function warnOnInvalidKey(child, knownKeys) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }
	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_CALL_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child);
	          var key = child.key;
	          if (typeof key !== 'string') {
	            break;
	          }
	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }
	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }
	          warning(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum$1());
	          break;
	        default:
	          break;
	      }
	    }
	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
	    // This algorithm can't optimize by searching from boths ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.

	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.

	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.

	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.

	    {
	      // First, validate keys.
	      var knownKeys = null;
	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;

	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }
	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);
	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }
	        break;
	      }
	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }
	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }
	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);
	        if (!_newFiber) {
	          continue;
	        }
	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }
	        previousNewFiber = _newFiber;
	      }
	      return resultingFirstChild;
	    }

	    // Add all children to a key map for quick lookups.
	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

	    // Keep scanning and use the map to restore deleted items as moves.
	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);
	      if (_newFiber2) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren['delete'](_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }
	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }
	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.

	    var iteratorFn = getIteratorFn(newChildrenIterable);
	    !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	    {
	      // Warn about using Maps as children
	      if (typeof newChildrenIterable.entries === 'function') {
	        var possibleMap = newChildrenIterable;
	        if (possibleMap.entries === iteratorFn) {
	          warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum$1());
	          didWarnAboutMaps = true;
	        }
	      }

	      // First, validate keys.
	      // We'll get a different iterator later for the main pass.
	      var _newChildren = iteratorFn.call(newChildrenIterable);
	      if (_newChildren) {
	        var knownKeys = null;
	        var _step = _newChildren.next();
	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);
	    !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;

	    var resultingFirstChild = null;
	    var previousNewFiber = null;

	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    var step = newChildren.next();
	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }
	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);
	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (!oldFiber) {
	          oldFiber = nextOldFiber;
	        }
	        break;
	      }
	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }
	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }
	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);
	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);
	        if (_newFiber3 === null) {
	          continue;
	        }
	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }
	        previousNewFiber = _newFiber3;
	      }
	      return resultingFirstChild;
	    }

	    // Add all children to a key map for quick lookups.
	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);

	    // Keep scanning and use the map to restore deleted items as moves.
	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);
	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren['delete'](_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }
	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }
	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent, expirationTime);
	      existing['return'] = returnFiber;
	      return existing;
	    }
	    // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.
	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.internalContextTag, expirationTime);
	    created['return'] = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
	    var key = element.key;
	    var child = currentFirstChild;
	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.type === element.type) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
	          existing.ref = coerceRef(child, element);
	          existing['return'] = returnFiber;
	          {
	            existing._debugSource = element._source;
	            existing._debugOwner = element._owner;
	          }
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }
	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.internalContextTag, expirationTime, element.key);
	      created['return'] = returnFiber;
	      return created;
	    } else {
	      var _created7 = createFiberFromElement(element, returnFiber.internalContextTag, expirationTime);
	      _created7.ref = coerceRef(currentFirstChild, element);
	      _created7['return'] = returnFiber;
	      return _created7;
	    }
	  }

	  function reconcileSingleCall(returnFiber, currentFirstChild, call, expirationTime) {
	    var key = call.key;
	    var child = currentFirstChild;
	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === CallComponent) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, call, expirationTime);
	          existing['return'] = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }
	      child = child.sibling;
	    }

	    var created = createFiberFromCall(call, returnFiber.internalContextTag, expirationTime);
	    created['return'] = returnFiber;
	    return created;
	  }

	  function reconcileSingleReturn(returnFiber, currentFirstChild, returnNode, expirationTime) {
	    // There's no need to check for keys on yields since they're stateless.
	    var child = currentFirstChild;
	    if (child !== null) {
	      if (child.tag === ReturnComponent) {
	        deleteRemainingChildren(returnFiber, child.sibling);
	        var existing = useFiber(child, null, expirationTime);
	        existing.type = returnNode.value;
	        existing['return'] = returnFiber;
	        return existing;
	      } else {
	        deleteRemainingChildren(returnFiber, child);
	      }
	    }

	    var created = createFiberFromReturn(returnNode, returnFiber.internalContextTag, expirationTime);
	    created.type = returnNode.value;
	    created['return'] = returnFiber;
	    return created;
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
	    var key = portal.key;
	    var child = currentFirstChild;
	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || [], expirationTime);
	          existing['return'] = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }
	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.internalContextTag, expirationTime);
	    created['return'] = returnFiber;
	    return created;
	  }

	  // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.
	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.

	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    if (typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null) {
	      newChild = newChild.props.children;
	    }

	    // Handle object types
	    var isObject = typeof newChild === 'object' && newChild !== null;

	    if (isObject) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

	        case REACT_CALL_TYPE:
	          return placeSingleChild(reconcileSingleCall(returnFiber, currentFirstChild, newChild, expirationTime));
	        case REACT_RETURN_TYPE:
	          return placeSingleChild(reconcileSingleReturn(returnFiber, currentFirstChild, newChild, expirationTime));
	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
	      }
	    }

	    if (typeof newChild === 'string' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
	    }

	    if (isArray$1(newChild)) {
	      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (getIteratorFn(newChild)) {
	      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
	    }

	    if (isObject) {
	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType();
	      }
	    }
	    if (typeof newChild === 'undefined') {
	      // If the new child is undefined, and the return fiber is a composite
	      // component, throw an error. If Fiber return types are disabled,
	      // we already threw above.
	      switch (returnFiber.tag) {
	        case ClassComponent:
	          {
	            {
	              var instance = returnFiber.stateNode;
	              if (instance.render._isMockFunction) {
	                // We allow auto-mocks to proceed as if they're returning null.
	                break;
	              }
	            }
	          }
	        // Intentionally fall through to the next case, which handles both
	        // functions and classes
	        // eslint-disable-next-lined no-fallthrough
	        case FunctionalComponent:
	          {
	            var Component = returnFiber.type;
	            invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
	          }
	      }
	    }

	    // Remaining cases are all treated as empty.
	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);

	function cloneChildFibers(current, workInProgress) {
	  !(current === null || workInProgress.child === current.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
	  workInProgress.child = newChild;

	  newChild['return'] = workInProgress;
	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
	    newChild['return'] = workInProgress;
	  }
	  newChild.sibling = null;
	}

	{
	  var warnedAboutStatelessRefs = {};
	}

	var ReactFiberBeginWork = function (config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber) {
	  var shouldSetTextContent = config.shouldSetTextContent,
	      useSyncScheduling = config.useSyncScheduling,
	      shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;
	  var pushHostContext = hostContext.pushHostContext,
	      pushHostContainer = hostContext.pushHostContainer;
	  var enterHydrationState = hydrationContext.enterHydrationState,
	      resetHydrationState = hydrationContext.resetHydrationState,
	      tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;

	  var _ReactFiberClassCompo = ReactFiberClassComponent(scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),
	      adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
	      constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
	      mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
	      updateClassInstance = _ReactFiberClassCompo.updateClassInstance;

	  // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.


	  function reconcileChildren(current, workInProgress, nextChildren) {
	    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);
	  }

	  function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {
	    if (current === null) {
	      // If this is a fresh new component that hasn't been rendered yet, we
	      // won't update its child set by applying minimal side-effects. Instead,
	      // we will add them all to the child before it gets rendered. That means
	      // we can optimize this reconciliation pass by not tracking side-effects.
	      workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	    } else {
	      // If the current child is the same as the work in progress, it means that
	      // we haven't yet started any work on these children. Therefore, we use
	      // the clone algorithm to create a copy of all the current children.

	      // If we had any progressed work already, that is invalid at this point so
	      // let's throw it out.
	      workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
	    }
	  }

	  function updateFragment(current, workInProgress) {
	    var nextChildren = workInProgress.pendingProps;
	    if (hasContextChanged()) {
	      // Normally we can bail out on props equality but if context has changed
	      // we don't do the bailout and we have to reuse existing props instead.
	      if (nextChildren === null) {
	        nextChildren = workInProgress.memoizedProps;
	      }
	    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress);
	    }
	    reconcileChildren(current, workInProgress, nextChildren);
	    memoizeProps(workInProgress, nextChildren);
	    return workInProgress.child;
	  }

	  function markRef(current, workInProgress) {
	    var ref = workInProgress.ref;
	    if (ref !== null && (!current || current.ref !== ref)) {
	      // Schedule a Ref effect
	      workInProgress.effectTag |= Ref;
	    }
	  }

	  function updateFunctionalComponent(current, workInProgress) {
	    var fn = workInProgress.type;
	    var nextProps = workInProgress.pendingProps;

	    var memoizedProps = workInProgress.memoizedProps;
	    if (hasContextChanged()) {
	      // Normally we can bail out on props equality but if context has changed
	      // we don't do the bailout and we have to reuse existing props instead.
	      if (nextProps === null) {
	        nextProps = memoizedProps;
	      }
	    } else {
	      if (nextProps === null || memoizedProps === nextProps) {
	        return bailoutOnAlreadyFinishedWork(current, workInProgress);
	      }
	      // TODO: consider bringing fn.shouldComponentUpdate() back.
	      // It used to be here.
	    }

	    var unmaskedContext = getUnmaskedContext(workInProgress);
	    var context = getMaskedContext(workInProgress, unmaskedContext);

	    var nextChildren;

	    {
	      ReactCurrentOwner.current = workInProgress;
	      ReactDebugCurrentFiber.setCurrentPhase('render');
	      nextChildren = fn(nextProps, context);
	      ReactDebugCurrentFiber.setCurrentPhase(null);
	    }
	    // React DevTools reads this flag.
	    workInProgress.effectTag |= PerformedWork;
	    reconcileChildren(current, workInProgress, nextChildren);
	    memoizeProps(workInProgress, nextProps);
	    return workInProgress.child;
	  }

	  function updateClassComponent(current, workInProgress, renderExpirationTime) {
	    // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.
	    var hasContext = pushContextProvider(workInProgress);

	    var shouldUpdate = void 0;
	    if (current === null) {
	      if (!workInProgress.stateNode) {
	        // In the initial pass we might need to construct the instance.
	        constructClassInstance(workInProgress, workInProgress.pendingProps);
	        mountClassInstance(workInProgress, renderExpirationTime);
	        shouldUpdate = true;
	      } else {
	        invariant(false, 'Resuming work not yet implemented.');
	        // In a resume, we'll already have an instance we can reuse.
	        // shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
	      }
	    } else {
	      shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);
	    }
	    return finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
	  }

	  function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
	    // Refs should update even if shouldComponentUpdate returns false
	    markRef(current, workInProgress);

	    if (!shouldUpdate) {
	      // Context providers should defer to sCU for rendering
	      if (hasContext) {
	        invalidateContextProvider(workInProgress, false);
	      }

	      return bailoutOnAlreadyFinishedWork(current, workInProgress);
	    }

	    var instance = workInProgress.stateNode;

	    // Rerender
	    ReactCurrentOwner.current = workInProgress;
	    var nextChildren = void 0;
	    {
	      ReactDebugCurrentFiber.setCurrentPhase('render');
	      nextChildren = instance.render();
	      if (debugRenderPhaseSideEffects) {
	        instance.render();
	      }
	      ReactDebugCurrentFiber.setCurrentPhase(null);
	    }
	    // React DevTools reads this flag.
	    workInProgress.effectTag |= PerformedWork;
	    reconcileChildren(current, workInProgress, nextChildren);
	    // Memoize props and state using the values we just used to render.
	    // TODO: Restructure so we never read values from the instance.
	    memoizeState(workInProgress, instance.state);
	    memoizeProps(workInProgress, instance.props);

	    // The context might have changed so we need to recalculate it.
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, true);
	    }

	    return workInProgress.child;
	  }

	  function pushHostRootContext(workInProgress) {
	    var root = workInProgress.stateNode;
	    if (root.pendingContext) {
	      pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	    } else if (root.context) {
	      // Should always be set
	      pushTopLevelContextObject(workInProgress, root.context, false);
	    }
	    pushHostContainer(workInProgress, root.containerInfo);
	  }

	  function updateHostRoot(current, workInProgress, renderExpirationTime) {
	    pushHostRootContext(workInProgress);
	    var updateQueue = workInProgress.updateQueue;
	    if (updateQueue !== null) {
	      var prevState = workInProgress.memoizedState;
	      var state = processUpdateQueue(current, workInProgress, updateQueue, null, null, renderExpirationTime);
	      if (prevState === state) {
	        // If the state is the same as before, that's a bailout because we had
	        // no work that expires at this time.
	        resetHydrationState();
	        return bailoutOnAlreadyFinishedWork(current, workInProgress);
	      }
	      var element = state.element;
	      var root = workInProgress.stateNode;
	      if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
	        // If we don't have any current children this might be the first pass.
	        // We always try to hydrate. If this isn't a hydration pass there won't
	        // be any children to hydrate which is effectively the same thing as
	        // not hydrating.

	        // This is a bit of a hack. We track the host root as a placement to
	        // know that we're currently in a mounting state. That way isMounted
	        // works as expected. We must reset this before committing.
	        // TODO: Delete this when we delete isMounted and findDOMNode.
	        workInProgress.effectTag |= Placement;

	        // Ensure that children mount into this root without tracking
	        // side-effects. This ensures that we don't store Placement effects on
	        // nodes that will be hydrated.
	        workInProgress.child = mountChildFibers(workInProgress, null, element, renderExpirationTime);
	      } else {
	        // Otherwise reset hydration state in case we aborted and resumed another
	        // root.
	        resetHydrationState();
	        reconcileChildren(current, workInProgress, element);
	      }
	      memoizeState(workInProgress, state);
	      return workInProgress.child;
	    }
	    resetHydrationState();
	    // If there is no update queue, that's a bailout because the root has no props.
	    return bailoutOnAlreadyFinishedWork(current, workInProgress);
	  }

	  function updateHostComponent(current, workInProgress, renderExpirationTime) {
	    pushHostContext(workInProgress);

	    if (current === null) {
	      tryToClaimNextHydratableInstance(workInProgress);
	    }

	    var type = workInProgress.type;
	    var memoizedProps = workInProgress.memoizedProps;
	    var nextProps = workInProgress.pendingProps;
	    if (nextProps === null) {
	      nextProps = memoizedProps;
	      !(nextProps !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    }
	    var prevProps = current !== null ? current.memoizedProps : null;

	    if (hasContextChanged()) {
	      // Normally we can bail out on props equality but if context has changed
	      // we don't do the bailout and we have to reuse existing props instead.
	    } else if (nextProps === null || memoizedProps === nextProps) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress);
	    }

	    var nextChildren = nextProps.children;
	    var isDirectTextChild = shouldSetTextContent(type, nextProps);

	    if (isDirectTextChild) {
	      // We special case a direct text child of a host node. This is a common
	      // case. We won't handle it as a reified child. We will instead handle
	      // this in the host environment that also have access to this prop. That
	      // avoids allocating another HostText fiber and traversing it.
	      nextChildren = null;
	    } else if (prevProps && shouldSetTextContent(type, prevProps)) {
	      // If we're switching from a direct text child to a normal child, or to
	      // empty, we need to schedule the text content to be reset.
	      workInProgress.effectTag |= ContentReset;
	    }

	    markRef(current, workInProgress);

	    // Check the host config to see if the children are offscreen/hidden.
	    if (renderExpirationTime !== Never && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps)) {
	      // Down-prioritize the children.
	      workInProgress.expirationTime = Never;
	      // Bailout and come back to this fiber later.
	      return null;
	    }

	    reconcileChildren(current, workInProgress, nextChildren);
	    memoizeProps(workInProgress, nextProps);
	    return workInProgress.child;
	  }

	  function updateHostText(current, workInProgress) {
	    if (current === null) {
	      tryToClaimNextHydratableInstance(workInProgress);
	    }
	    var nextProps = workInProgress.pendingProps;
	    if (nextProps === null) {
	      nextProps = workInProgress.memoizedProps;
	    }
	    memoizeProps(workInProgress, nextProps);
	    // Nothing to do here. This is terminal. We'll do the completion step
	    // immediately after.
	    return null;
	  }

	  function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {
	    !(current === null) ? invariant(false, 'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    var fn = workInProgress.type;
	    var props = workInProgress.pendingProps;
	    var unmaskedContext = getUnmaskedContext(workInProgress);
	    var context = getMaskedContext(workInProgress, unmaskedContext);

	    var value;

	    {
	      if (fn.prototype && typeof fn.prototype.render === 'function') {
	        var componentName = getComponentName(workInProgress);
	        warning(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
	      }
	      ReactCurrentOwner.current = workInProgress;
	      value = fn(props, context);
	    }
	    // React DevTools reads this flag.
	    workInProgress.effectTag |= PerformedWork;

	    if (typeof value === 'object' && value !== null && typeof value.render === 'function') {
	      // Proceed under the assumption that this is a class instance
	      workInProgress.tag = ClassComponent;

	      // Push context providers early to prevent context stack mismatches.
	      // During mounting we don't know the child context yet as the instance doesn't exist.
	      // We will invalidate the child context in finishClassComponent() right after rendering.
	      var hasContext = pushContextProvider(workInProgress);
	      adoptClassInstance(workInProgress, value);
	      mountClassInstance(workInProgress, renderExpirationTime);
	      return finishClassComponent(current, workInProgress, true, hasContext);
	    } else {
	      // Proceed under the assumption that this is a functional component
	      workInProgress.tag = FunctionalComponent;
	      {
	        var Component = workInProgress.type;

	        if (Component) {
	          warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
	        }
	        if (workInProgress.ref !== null) {
	          var info = '';
	          var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName();
	          if (ownerName) {
	            info += '\n\nCheck the render method of `' + ownerName + '`.';
	          }

	          var warningKey = ownerName || workInProgress._debugID || '';
	          var debugSource = workInProgress._debugSource;
	          if (debugSource) {
	            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	          }
	          if (!warnedAboutStatelessRefs[warningKey]) {
	            warnedAboutStatelessRefs[warningKey] = true;
	            warning(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, ReactDebugCurrentFiber.getCurrentFiberStackAddendum());
	          }
	        }
	      }
	      reconcileChildren(current, workInProgress, value);
	      memoizeProps(workInProgress, props);
	      return workInProgress.child;
	    }
	  }

	  function updateCallComponent(current, workInProgress, renderExpirationTime) {
	    var nextCall = workInProgress.pendingProps;
	    if (hasContextChanged()) {
	      // Normally we can bail out on props equality but if context has changed
	      // we don't do the bailout and we have to reuse existing props instead.
	      if (nextCall === null) {
	        nextCall = current && current.memoizedProps;
	        !(nextCall !== null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      }
	    } else if (nextCall === null || workInProgress.memoizedProps === nextCall) {
	      nextCall = workInProgress.memoizedProps;
	      // TODO: When bailing out, we might need to return the stateNode instead
	      // of the child. To check it for work.
	      // return bailoutOnAlreadyFinishedWork(current, workInProgress);
	    }

	    var nextChildren = nextCall.children;

	    // The following is a fork of reconcileChildrenAtExpirationTime but using
	    // stateNode to store the child.
	    if (current === null) {
	      workInProgress.stateNode = mountChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
	    } else {
	      workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);
	    }

	    memoizeProps(workInProgress, nextCall);
	    // This doesn't take arbitrary time so we could synchronously just begin
	    // eagerly do the work of workInProgress.child as an optimization.
	    return workInProgress.stateNode;
	  }

	  function updatePortalComponent(current, workInProgress, renderExpirationTime) {
	    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	    var nextChildren = workInProgress.pendingProps;
	    if (hasContextChanged()) {
	      // Normally we can bail out on props equality but if context has changed
	      // we don't do the bailout and we have to reuse existing props instead.
	      if (nextChildren === null) {
	        nextChildren = current && current.memoizedProps;
	        !(nextChildren != null) ? invariant(false, 'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	      }
	    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress);
	    }

	    if (current === null) {
	      // Portals are special because we don't append the children during mount
	      // but at commit. Therefore we need to track insertions which the normal
	      // flow doesn't do during mount. This doesn't happen at the root because
	      // the root always starts with a "current" with a null child.
	      // TODO: Consider unifying this with how the root works.
	      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
	      memoizeProps(workInProgress, nextChildren);
	    } else {
	      reconcileChildren(current, workInProgress, nextChildren);
	      memoizeProps(workInProgress, nextChildren);
	    }
	    return workInProgress.child;
	  }

	  /*
	  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
	    let child = firstChild;
	    do {
	      // Ensure that the first and last effect of the parent corresponds
	      // to the children's first and last effect.
	      if (!returnFiber.firstEffect) {
	        returnFiber.firstEffect = child.firstEffect;
	      }
	      if (child.lastEffect) {
	        if (returnFiber.lastEffect) {
	          returnFiber.lastEffect.nextEffect = child.firstEffect;
	        }
	        returnFiber.lastEffect = child.lastEffect;
	      }
	    } while (child = child.sibling);
	  }
	  */

	  function bailoutOnAlreadyFinishedWork(current, workInProgress) {
	    cancelWorkTimer(workInProgress);

	    // TODO: We should ideally be able to bail out early if the children have no
	    // more work to do. However, since we don't have a separation of this
	    // Fiber's priority and its children yet - we don't know without doing lots
	    // of the same work we do anyway. Once we have that separation we can just
	    // bail out here if the children has no more work at this priority level.
	    // if (workInProgress.priorityOfChildren <= priorityLevel) {
	    //   // If there are side-effects in these children that have not yet been
	    //   // committed we need to ensure that they get properly transferred up.
	    //   if (current && current.child !== workInProgress.child) {
	    //     reuseChildrenEffects(workInProgress, child);
	    //   }
	    //   return null;
	    // }

	    cloneChildFibers(current, workInProgress);
	    return workInProgress.child;
	  }

	  function bailoutOnLowPriority(current, workInProgress) {
	    cancelWorkTimer(workInProgress);

	    // TODO: Handle HostComponent tags here as well and call pushHostContext()?
	    // See PR 8590 discussion for context
	    switch (workInProgress.tag) {
	      case HostRoot:
	        pushHostRootContext(workInProgress);
	        break;
	      case ClassComponent:
	        pushContextProvider(workInProgress);
	        break;
	      case HostPortal:
	        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	        break;
	    }
	    // TODO: What if this is currently in progress?
	    // How can that happen? How is this not being cloned?
	    return null;
	  }

	  // TODO: Delete memoizeProps/State and move to reconcile/bailout instead
	  function memoizeProps(workInProgress, nextProps) {
	    workInProgress.memoizedProps = nextProps;
	  }

	  function memoizeState(workInProgress, nextState) {
	    workInProgress.memoizedState = nextState;
	    // Don't reset the updateQueue, in case there are pending updates. Resetting
	    // is handled by processUpdateQueue.
	  }

	  function beginWork(current, workInProgress, renderExpirationTime) {
	    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
	      return bailoutOnLowPriority(current, workInProgress);
	    }

	    switch (workInProgress.tag) {
	      case IndeterminateComponent:
	        return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);
	      case FunctionalComponent:
	        return updateFunctionalComponent(current, workInProgress);
	      case ClassComponent:
	        return updateClassComponent(current, workInProgress, renderExpirationTime);
	      case HostRoot:
	        return updateHostRoot(current, workInProgress, renderExpirationTime);
	      case HostComponent:
	        return updateHostComponent(current, workInProgress, renderExpirationTime);
	      case HostText:
	        return updateHostText(current, workInProgress);
	      case CallHandlerPhase:
	        // This is a restart. Reset the tag to the initial phase.
	        workInProgress.tag = CallComponent;
	      // Intentionally fall through since this is now the same.
	      case CallComponent:
	        return updateCallComponent(current, workInProgress, renderExpirationTime);
	      case ReturnComponent:
	        // A return component is just a placeholder, we can just run through the
	        // next one immediately.
	        return null;
	      case HostPortal:
	        return updatePortalComponent(current, workInProgress, renderExpirationTime);
	      case Fragment:
	        return updateFragment(current, workInProgress);
	      default:
	        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  function beginFailedWork(current, workInProgress, renderExpirationTime) {
	    // Push context providers here to avoid a push/pop context mismatch.
	    switch (workInProgress.tag) {
	      case ClassComponent:
	        pushContextProvider(workInProgress);
	        break;
	      case HostRoot:
	        pushHostRootContext(workInProgress);
	        break;
	      default:
	        invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
	    }

	    // Add an error effect so we can handle the error during the commit phase
	    workInProgress.effectTag |= Err;

	    // This is a weird case where we do "resume" work — work that failed on
	    // our first attempt. Because we no longer have a notion of "progressed
	    // deletions," reset the child to the current child to make sure we delete
	    // it again. TODO: Find a better way to handle this, perhaps during a more
	    // general overhaul of error handling.
	    if (current === null) {
	      workInProgress.child = null;
	    } else if (workInProgress.child !== current.child) {
	      workInProgress.child = current.child;
	    }

	    if (workInProgress.expirationTime === NoWork || workInProgress.expirationTime > renderExpirationTime) {
	      return bailoutOnLowPriority(current, workInProgress);
	    }

	    // If we don't bail out, we're going be recomputing our children so we need
	    // to drop our effect list.
	    workInProgress.firstEffect = null;
	    workInProgress.lastEffect = null;

	    // Unmount the current children as if the component rendered null
	    var nextChildren = null;
	    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);

	    if (workInProgress.tag === ClassComponent) {
	      var instance = workInProgress.stateNode;
	      workInProgress.memoizedProps = instance.props;
	      workInProgress.memoizedState = instance.state;
	    }

	    return workInProgress.child;
	  }

	  return {
	    beginWork: beginWork,
	    beginFailedWork: beginFailedWork
	  };
	};

	var ReactFiberCompleteWork = function (config, hostContext, hydrationContext) {
	  var createInstance = config.createInstance,
	      createTextInstance = config.createTextInstance,
	      appendInitialChild = config.appendInitialChild,
	      finalizeInitialChildren = config.finalizeInitialChildren,
	      prepareUpdate = config.prepareUpdate,
	      mutation = config.mutation,
	      persistence = config.persistence;
	  var getRootHostContainer = hostContext.getRootHostContainer,
	      popHostContext = hostContext.popHostContext,
	      getHostContext = hostContext.getHostContext,
	      popHostContainer = hostContext.popHostContainer;
	  var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
	      prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
	      popHydrationState = hydrationContext.popHydrationState;


	  function markUpdate(workInProgress) {
	    // Tag the fiber with an update effect. This turns a Placement into
	    // an UpdateAndPlacement.
	    workInProgress.effectTag |= Update;
	  }

	  function markRef(workInProgress) {
	    workInProgress.effectTag |= Ref;
	  }

	  function appendAllReturns(returns, workInProgress) {
	    var node = workInProgress.stateNode;
	    if (node) {
	      node['return'] = workInProgress;
	    }
	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText || node.tag === HostPortal) {
	        invariant(false, 'A call cannot have host component children.');
	      } else if (node.tag === ReturnComponent) {
	        returns.push(node.type);
	      } else if (node.child !== null) {
	        node.child['return'] = node;
	        node = node.child;
	        continue;
	      }
	      while (node.sibling === null) {
	        if (node['return'] === null || node['return'] === workInProgress) {
	          return;
	        }
	        node = node['return'];
	      }
	      node.sibling['return'] = node['return'];
	      node = node.sibling;
	    }
	  }

	  function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {
	    var call = workInProgress.memoizedProps;
	    !call ? invariant(false, 'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	    // First step of the call has completed. Now we need to do the second.
	    // TODO: It would be nice to have a multi stage call represented by a
	    // single component, or at least tail call optimize nested ones. Currently
	    // that requires additional fields that we don't want to add to the fiber.
	    // So this requires nested handlers.
	    // Note: This doesn't mutate the alternate node. I don't think it needs to
	    // since this stage is reset for every pass.
	    workInProgress.tag = CallHandlerPhase;

	    // Build up the returns.
	    // TODO: Compare this to a generator or opaque helpers like Children.
	    var returns = [];
	    appendAllReturns(returns, workInProgress);
	    var fn = call.handler;
	    var props = call.props;
	    var nextChildren = fn(props, returns);

	    var currentFirstChild = current !== null ? current.child : null;
	    workInProgress.child = reconcileChildFibers(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);
	    return workInProgress.child;
	  }

	  function appendAllChildren(parent, workInProgress) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;
	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) {
	        // If we have a portal child, then we don't want to traverse
	        // down its children. Instead, we'll get insertions from each child in
	        // the portal directly.
	      } else if (node.child !== null) {
	        node.child['return'] = node;
	        node = node.child;
	        continue;
	      }
	      if (node === workInProgress) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node['return'] === null || node['return'] === workInProgress) {
	          return;
	        }
	        node = node['return'];
	      }
	      node.sibling['return'] = node['return'];
	      node = node.sibling;
	    }
	  }

	  var updateHostContainer = void 0;
	  var updateHostComponent = void 0;
	  var updateHostText = void 0;
	  if (mutation) {
	    if (enableMutatingReconciler) {
	      // Mutation mode
	      updateHostContainer = function (workInProgress) {
	        // Noop
	      };
	      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
	        // TODO: Type this specific to this type of component.
	        workInProgress.updateQueue = updatePayload;
	        // If the update payload indicates that there is a change or if there
	        // is a new ref we mark this as an update. All the work is done in commitWork.
	        if (updatePayload) {
	          markUpdate(workInProgress);
	        }
	      };
	      updateHostText = function (current, workInProgress, oldText, newText) {
	        // If the text differs, mark it as an update. All the work in done in commitWork.
	        if (oldText !== newText) {
	          markUpdate(workInProgress);
	        }
	      };
	    } else {
	      invariant(false, 'Mutating reconciler is disabled.');
	    }
	  } else if (persistence) {
	    if (enablePersistentReconciler) {
	      // Persistent host tree mode
	      var cloneInstance = persistence.cloneInstance,
	          createContainerChildSet = persistence.createContainerChildSet,
	          appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,
	          finalizeContainerChildren = persistence.finalizeContainerChildren;

	      // An unfortunate fork of appendAllChildren because we have two different parent types.

	      var appendAllChildrenToContainer = function (containerChildSet, workInProgress) {
	        // We only have the top Fiber that was created but we need recurse down its
	        // children to find all the terminal nodes.
	        var node = workInProgress.child;
	        while (node !== null) {
	          if (node.tag === HostComponent || node.tag === HostText) {
	            appendChildToContainerChildSet(containerChildSet, node.stateNode);
	          } else if (node.tag === HostPortal) {
	            // If we have a portal child, then we don't want to traverse
	            // down its children. Instead, we'll get insertions from each child in
	            // the portal directly.
	          } else if (node.child !== null) {
	            node.child['return'] = node;
	            node = node.child;
	            continue;
	          }
	          if (node === workInProgress) {
	            return;
	          }
	          while (node.sibling === null) {
	            if (node['return'] === null || node['return'] === workInProgress) {
	              return;
	            }
	            node = node['return'];
	          }
	          node.sibling['return'] = node['return'];
	          node = node.sibling;
	        }
	      };
	      updateHostContainer = function (workInProgress) {
	        var portalOrRoot = workInProgress.stateNode;
	        var childrenUnchanged = workInProgress.firstEffect === null;
	        if (childrenUnchanged) {
	          // No changes, just reuse the existing instance.
	        } else {
	          var container = portalOrRoot.containerInfo;
	          var newChildSet = createContainerChildSet(container);
	          if (finalizeContainerChildren(container, newChildSet)) {
	            markUpdate(workInProgress);
	          }
	          portalOrRoot.pendingChildren = newChildSet;
	          // If children might have changed, we have to add them all to the set.
	          appendAllChildrenToContainer(newChildSet, workInProgress);
	          // Schedule an update on the container to swap out the container.
	          markUpdate(workInProgress);
	        }
	      };
	      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
	        // If there are no effects associated with this node, then none of our children had any updates.
	        // This guarantees that we can reuse all of them.
	        var childrenUnchanged = workInProgress.firstEffect === null;
	        var currentInstance = current.stateNode;
	        if (childrenUnchanged && updatePayload === null) {
	          // No changes, just reuse the existing instance.
	          // Note that this might release a previous clone.
	          workInProgress.stateNode = currentInstance;
	        } else {
	          var recyclableInstance = workInProgress.stateNode;
	          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);
	          if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance)) {
	            markUpdate(workInProgress);
	          }
	          workInProgress.stateNode = newInstance;
	          if (childrenUnchanged) {
	            // If there are no other effects in this tree, we need to flag this node as having one.
	            // Even though we're not going to use it for anything.
	            // Otherwise parents won't know that there are new children to propagate upwards.
	            markUpdate(workInProgress);
	          } else {
	            // If children might have changed, we have to add them all to the set.
	            appendAllChildren(newInstance, workInProgress);
	          }
	        }
	      };
	      updateHostText = function (current, workInProgress, oldText, newText) {
	        if (oldText !== newText) {
	          // If the text content differs, we'll create a new text instance for it.
	          var rootContainerInstance = getRootHostContainer();
	          var currentHostContext = getHostContext();
	          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);
	          // We'll have to mark it as having an effect, even though we won't use the effect for anything.
	          // This lets the parents know that at least one of their children has changed.
	          markUpdate(workInProgress);
	        }
	      };
	    } else {
	      invariant(false, 'Persistent reconciler is disabled.');
	    }
	  } else {
	    if (enableNoopReconciler) {
	      // No host operations
	      updateHostContainer = function (workInProgress) {
	        // Noop
	      };
	      updateHostComponent = function (current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance) {
	        // Noop
	      };
	      updateHostText = function (current, workInProgress, oldText, newText) {
	        // Noop
	      };
	    } else {
	      invariant(false, 'Noop reconciler is disabled.');
	    }
	  }

	  function completeWork(current, workInProgress, renderExpirationTime) {
	    // Get the latest props.
	    var newProps = workInProgress.pendingProps;
	    if (newProps === null) {
	      newProps = workInProgress.memoizedProps;
	    } else if (workInProgress.expirationTime !== Never || renderExpirationTime === Never) {
	      // Reset the pending props, unless this was a down-prioritization.
	      workInProgress.pendingProps = null;
	    }

	    switch (workInProgress.tag) {
	      case FunctionalComponent:
	        return null;
	      case ClassComponent:
	        {
	          // We are leaving this subtree, so pop context if any.
	          popContextProvider(workInProgress);
	          return null;
	        }
	      case HostRoot:
	        {
	          popHostContainer(workInProgress);
	          popTopLevelContextObject(workInProgress);
	          var fiberRoot = workInProgress.stateNode;
	          if (fiberRoot.pendingContext) {
	            fiberRoot.context = fiberRoot.pendingContext;
	            fiberRoot.pendingContext = null;
	          }

	          if (current === null || current.child === null) {
	            // If we hydrated, pop so that we can delete any remaining children
	            // that weren't hydrated.
	            popHydrationState(workInProgress);
	            // This resets the hacky state to fix isMounted before committing.
	            // TODO: Delete this when we delete isMounted and findDOMNode.
	            workInProgress.effectTag &= ~Placement;
	          }
	          updateHostContainer(workInProgress);
	          return null;
	        }
	      case HostComponent:
	        {
	          popHostContext(workInProgress);
	          var rootContainerInstance = getRootHostContainer();
	          var type = workInProgress.type;
	          if (current !== null && workInProgress.stateNode != null) {
	            // If we have an alternate, that means this is an update and we need to
	            // schedule a side-effect to do the updates.
	            var oldProps = current.memoizedProps;
	            // If we get updated because one of our children updated, we don't
	            // have newProps so we'll have to reuse them.
	            // TODO: Split the update API as separate for the props vs. children.
	            // Even better would be if children weren't special cased at all tho.
	            var instance = workInProgress.stateNode;
	            var currentHostContext = getHostContext();
	            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);

	            updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance);

	            if (current.ref !== workInProgress.ref) {
	              markRef(workInProgress);
	            }
	          } else {
	            if (!newProps) {
	              !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	              // This can happen when we abort work.
	              return null;
	            }

	            var _currentHostContext = getHostContext();
	            // TODO: Move createInstance to beginWork and keep it on a context
	            // "stack" as the parent. Then append children as we go in beginWork
	            // or completeWork depending on we want to add then top->down or
	            // bottom->up. Top->down is faster in IE11.
	            var wasHydrated = popHydrationState(workInProgress);
	            if (wasHydrated) {
	              // TODO: Move this and createInstance step into the beginPhase
	              // to consolidate.
	              if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {
	                // If changes to the hydrated node needs to be applied at the
	                // commit-phase we mark this as such.
	                markUpdate(workInProgress);
	              }
	            } else {
	              var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);

	              appendAllChildren(_instance, workInProgress);

	              // Certain renderers require commit-time effects for initial mount.
	              // (eg DOM renderer supports auto-focus for certain elements).
	              // Make sure such renderers get scheduled for later work.
	              if (finalizeInitialChildren(_instance, type, newProps, rootContainerInstance)) {
	                markUpdate(workInProgress);
	              }
	              workInProgress.stateNode = _instance;
	            }

	            if (workInProgress.ref !== null) {
	              // If there is a ref on a host node we need to schedule a callback
	              markRef(workInProgress);
	            }
	          }
	          return null;
	        }
	      case HostText:
	        {
	          var newText = newProps;
	          if (current && workInProgress.stateNode != null) {
	            var oldText = current.memoizedProps;
	            // If we have an alternate, that means this is an update and we need
	            // to schedule a side-effect to do the updates.
	            updateHostText(current, workInProgress, oldText, newText);
	          } else {
	            if (typeof newText !== 'string') {
	              !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	              // This can happen when we abort work.
	              return null;
	            }
	            var _rootContainerInstance = getRootHostContainer();
	            var _currentHostContext2 = getHostContext();
	            var _wasHydrated = popHydrationState(workInProgress);
	            if (_wasHydrated) {
	              if (prepareToHydrateHostTextInstance(workInProgress)) {
	                markUpdate(workInProgress);
	              }
	            } else {
	              workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
	            }
	          }
	          return null;
	        }
	      case CallComponent:
	        return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);
	      case CallHandlerPhase:
	        // Reset the tag to now be a first phase call.
	        workInProgress.tag = CallComponent;
	        return null;
	      case ReturnComponent:
	        // Does nothing.
	        return null;
	      case Fragment:
	        return null;
	      case HostPortal:
	        popHostContainer(workInProgress);
	        updateHostContainer(workInProgress);
	        return null;
	      // Error cases
	      case IndeterminateComponent:
	        invariant(false, 'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.');
	      // eslint-disable-next-line no-fallthrough
	      default:
	        invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  return {
	    completeWork: completeWork
	  };
	};

	var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback;
	var hasCaughtError$1 = ReactErrorUtils.hasCaughtError;
	var clearCaughtError$1 = ReactErrorUtils.clearCaughtError;


	var ReactFiberCommitWork = function (config, captureError) {
	  var getPublicInstance = config.getPublicInstance,
	      mutation = config.mutation,
	      persistence = config.persistence;


	  var callComponentWillUnmountWithTimer = function (current, instance) {
	    startPhaseTimer(current, 'componentWillUnmount');
	    instance.props = current.memoizedProps;
	    instance.state = current.memoizedState;
	    instance.componentWillUnmount();
	    stopPhaseTimer();
	  };

	  // Capture errors so they don't interrupt unmounting.
	  function safelyCallComponentWillUnmount(current, instance) {
	    {
	      invokeGuardedCallback$2(null, callComponentWillUnmountWithTimer, null, current, instance);
	      if (hasCaughtError$1()) {
	        var unmountError = clearCaughtError$1();
	        captureError(current, unmountError);
	      }
	    }
	  }

	  function safelyDetachRef(current) {
	    var ref = current.ref;
	    if (ref !== null) {
	      {
	        invokeGuardedCallback$2(null, ref, null, null);
	        if (hasCaughtError$1()) {
	          var refError = clearCaughtError$1();
	          captureError(current, refError);
	        }
	      }
	    }
	  }

	  function commitLifeCycles(current, finishedWork) {
	    switch (finishedWork.tag) {
	      case ClassComponent:
	        {
	          var instance = finishedWork.stateNode;
	          if (finishedWork.effectTag & Update) {
	            if (current === null) {
	              startPhaseTimer(finishedWork, 'componentDidMount');
	              instance.props = finishedWork.memoizedProps;
	              instance.state = finishedWork.memoizedState;
	              instance.componentDidMount();
	              stopPhaseTimer();
	            } else {
	              var prevProps = current.memoizedProps;
	              var prevState = current.memoizedState;
	              startPhaseTimer(finishedWork, 'componentDidUpdate');
	              instance.props = finishedWork.memoizedProps;
	              instance.state = finishedWork.memoizedState;
	              instance.componentDidUpdate(prevProps, prevState);
	              stopPhaseTimer();
	            }
	          }
	          var updateQueue = finishedWork.updateQueue;
	          if (updateQueue !== null) {
	            commitCallbacks(updateQueue, instance);
	          }
	          return;
	        }
	      case HostRoot:
	        {
	          var _updateQueue = finishedWork.updateQueue;
	          if (_updateQueue !== null) {
	            var _instance = finishedWork.child !== null ? finishedWork.child.stateNode : null;
	            commitCallbacks(_updateQueue, _instance);
	          }
	          return;
	        }
	      case HostComponent:
	        {
	          var _instance2 = finishedWork.stateNode;

	          // Renderers may schedule work to be done after host components are mounted
	          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	          // These effects should only be committed when components are first mounted,
	          // aka when there is no current/alternate.
	          if (current === null && finishedWork.effectTag & Update) {
	            var type = finishedWork.type;
	            var props = finishedWork.memoizedProps;
	            commitMount(_instance2, type, props, finishedWork);
	          }

	          return;
	        }
	      case HostText:
	        {
	          // We have no life-cycles associated with text.
	          return;
	        }
	      case HostPortal:
	        {
	          // We have no life-cycles associated with portals.
	          return;
	        }
	      default:
	        {
	          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	        }
	    }
	  }

	  function commitAttachRef(finishedWork) {
	    var ref = finishedWork.ref;
	    if (ref !== null) {
	      var instance = finishedWork.stateNode;
	      switch (finishedWork.tag) {
	        case HostComponent:
	          ref(getPublicInstance(instance));
	          break;
	        default:
	          ref(instance);
	      }
	    }
	  }

	  function commitDetachRef(current) {
	    var currentRef = current.ref;
	    if (currentRef !== null) {
	      currentRef(null);
	    }
	  }

	  // User-originating errors (lifecycles and refs) should not interrupt
	  // deletion, so don't let them throw. Host-originating errors should
	  // interrupt deletion, so it's okay
	  function commitUnmount(current) {
	    if (typeof onCommitUnmount === 'function') {
	      onCommitUnmount(current);
	    }

	    switch (current.tag) {
	      case ClassComponent:
	        {
	          safelyDetachRef(current);
	          var instance = current.stateNode;
	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(current, instance);
	          }
	          return;
	        }
	      case HostComponent:
	        {
	          safelyDetachRef(current);
	          return;
	        }
	      case CallComponent:
	        {
	          commitNestedUnmounts(current.stateNode);
	          return;
	        }
	      case HostPortal:
	        {
	          // TODO: this is recursive.
	          // We are also not using this parent because
	          // the portal will get pushed immediately.
	          if (enableMutatingReconciler && mutation) {
	            unmountHostComponents(current);
	          } else if (enablePersistentReconciler && persistence) {
	            emptyPortalContainer(current);
	          }
	          return;
	        }
	    }
	  }

	  function commitNestedUnmounts(root) {
	    // While we're inside a removed host node we don't want to call
	    // removeChild on the inner nodes because they're removed by the top
	    // call anyway. We also want to call componentWillUnmount on all
	    // composites before this host node is removed from the tree. Therefore
	    var node = root;
	    while (true) {
	      commitUnmount(node);
	      // Visit children because they may contain more composite or host nodes.
	      // Skip portals because commitUnmount() currently visits them recursively.
	      if (node.child !== null && (
	      // If we use mutation we drill down into portals using commitUnmount above.
	      // If we don't use mutation we drill down into portals here instead.
	      !mutation || node.tag !== HostPortal)) {
	        node.child['return'] = node;
	        node = node.child;
	        continue;
	      }
	      if (node === root) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node['return'] === null || node['return'] === root) {
	          return;
	        }
	        node = node['return'];
	      }
	      node.sibling['return'] = node['return'];
	      node = node.sibling;
	    }
	  }

	  function detachFiber(current) {
	    // Cut off the return pointers to disconnect it from the tree. Ideally, we
	    // should clear the child pointer of the parent alternate to let this
	    // get GC:ed but we don't know which for sure which parent is the current
	    // one so we'll settle for GC:ing the subtree of this child. This child
	    // itself will be GC:ed when the parent updates the next time.
	    current['return'] = null;
	    current.child = null;
	    if (current.alternate) {
	      current.alternate.child = null;
	      current.alternate['return'] = null;
	    }
	  }

	  if (!mutation) {
	    var commitContainer = void 0;
	    if (persistence) {
	      var replaceContainerChildren = persistence.replaceContainerChildren,
	          createContainerChildSet = persistence.createContainerChildSet;

	      var emptyPortalContainer = function (current) {
	        var portal = current.stateNode;
	        var containerInfo = portal.containerInfo;

	        var emptyChildSet = createContainerChildSet(containerInfo);
	        replaceContainerChildren(containerInfo, emptyChildSet);
	      };
	      commitContainer = function (finishedWork) {
	        switch (finishedWork.tag) {
	          case ClassComponent:
	            {
	              return;
	            }
	          case HostComponent:
	            {
	              return;
	            }
	          case HostText:
	            {
	              return;
	            }
	          case HostRoot:
	          case HostPortal:
	            {
	              var portalOrRoot = finishedWork.stateNode;
	              var containerInfo = portalOrRoot.containerInfo,
	                  _pendingChildren = portalOrRoot.pendingChildren;

	              replaceContainerChildren(containerInfo, _pendingChildren);
	              return;
	            }
	          default:
	            {
	              invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	            }
	        }
	      };
	    } else {
	      commitContainer = function (finishedWork) {
	        // Noop
	      };
	    }
	    if (enablePersistentReconciler || enableNoopReconciler) {
	      return {
	        commitResetTextContent: function (finishedWork) {},
	        commitPlacement: function (finishedWork) {},
	        commitDeletion: function (current) {
	          // Detach refs and call componentWillUnmount() on the whole subtree.
	          commitNestedUnmounts(current);
	          detachFiber(current);
	        },
	        commitWork: function (current, finishedWork) {
	          commitContainer(finishedWork);
	        },

	        commitLifeCycles: commitLifeCycles,
	        commitAttachRef: commitAttachRef,
	        commitDetachRef: commitDetachRef
	      };
	    } else if (persistence) {
	      invariant(false, 'Persistent reconciler is disabled.');
	    } else {
	      invariant(false, 'Noop reconciler is disabled.');
	    }
	  }
	  var commitMount = mutation.commitMount,
	      commitUpdate = mutation.commitUpdate,
	      resetTextContent = mutation.resetTextContent,
	      commitTextUpdate = mutation.commitTextUpdate,
	      appendChild = mutation.appendChild,
	      appendChildToContainer = mutation.appendChildToContainer,
	      insertBefore = mutation.insertBefore,
	      insertInContainerBefore = mutation.insertInContainerBefore,
	      removeChild = mutation.removeChild,
	      removeChildFromContainer = mutation.removeChildFromContainer;


	  function getHostParentFiber(fiber) {
	    var parent = fiber['return'];
	    while (parent !== null) {
	      if (isHostParent(parent)) {
	        return parent;
	      }
	      parent = parent['return'];
	    }
	    invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  function isHostParent(fiber) {
	    return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	  }

	  function getHostSibling(fiber) {
	    // We're going to search forward into the tree until we find a sibling host
	    // node. Unfortunately, if multiple insertions are done in a row we have to
	    // search past them. This leads to exponential search for the next sibling.
	    var node = fiber;
	    siblings: while (true) {
	      // If we didn't find anything, let's try the next sibling.
	      while (node.sibling === null) {
	        if (node['return'] === null || isHostParent(node['return'])) {
	          // If we pop out of the root or hit the parent the fiber we are the
	          // last sibling.
	          return null;
	        }
	        node = node['return'];
	      }
	      node.sibling['return'] = node['return'];
	      node = node.sibling;
	      while (node.tag !== HostComponent && node.tag !== HostText) {
	        // If it is not host node and, we might have a host node inside it.
	        // Try to search down until we find one.
	        if (node.effectTag & Placement) {
	          // If we don't have a child, try the siblings instead.
	          continue siblings;
	        }
	        // If we don't have a child, try the siblings instead.
	        // We also skip portals because they are not part of this host tree.
	        if (node.child === null || node.tag === HostPortal) {
	          continue siblings;
	        } else {
	          node.child['return'] = node;
	          node = node.child;
	        }
	      }
	      // Check if this host node is stable or about to be placed.
	      if (!(node.effectTag & Placement)) {
	        // Found it!
	        return node.stateNode;
	      }
	    }
	  }

	  function commitPlacement(finishedWork) {
	    // Recursively insert all host nodes into the parent.
	    var parentFiber = getHostParentFiber(finishedWork);
	    var parent = void 0;
	    var isContainer = void 0;
	    switch (parentFiber.tag) {
	      case HostComponent:
	        parent = parentFiber.stateNode;
	        isContainer = false;
	        break;
	      case HostRoot:
	        parent = parentFiber.stateNode.containerInfo;
	        isContainer = true;
	        break;
	      case HostPortal:
	        parent = parentFiber.stateNode.containerInfo;
	        isContainer = true;
	        break;
	      default:
	        invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
	    }
	    if (parentFiber.effectTag & ContentReset) {
	      // Reset the text content of the parent before doing any insertions
	      resetTextContent(parent);
	      // Clear ContentReset from the effect tag
	      parentFiber.effectTag &= ~ContentReset;
	    }

	    var before = getHostSibling(finishedWork);
	    // We only have the top Fiber that was inserted but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = finishedWork;
	    while (true) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        if (before) {
	          if (isContainer) {
	            insertInContainerBefore(parent, node.stateNode, before);
	          } else {
	            insertBefore(parent, node.stateNode, before);
	          }
	        } else {
	          if (isContainer) {
	            appendChildToContainer(parent, node.stateNode);
	          } else {
	            appendChild(parent, node.stateNode);
	          }
	        }
	      } else if (node.tag === HostPortal) {
	        // If the insertion itself is a portal, then we don't want to traverse
	        // down its children. Instead, we'll get insertions from each child in
	        // the portal directly.
	      } else if (node.child !== null) {
	        node.child['return'] = node;
	        node = node.child;
	        continue;
	      }
	      if (node === finishedWork) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node['return'] === null || node['return'] === finishedWork) {
	          return;
	        }
	        node = node['return'];
	      }
	      node.sibling['return'] = node['return'];
	      node = node.sibling;
	    }
	  }

	  function unmountHostComponents(current) {
	    // We only have the top Fiber that was inserted but we need recurse down its
	    var node = current;

	    // Each iteration, currentParent is populated with node's host parent if not
	    // currentParentIsValid.
	    var currentParentIsValid = false;
	    var currentParent = void 0;
	    var currentParentIsContainer = void 0;

	    while (true) {
	      if (!currentParentIsValid) {
	        var parent = node['return'];
	        findParent: while (true) {
	          !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	          switch (parent.tag) {
	            case HostComponent:
	              currentParent = parent.stateNode;
	              currentParentIsContainer = false;
	              break findParent;
	            case HostRoot:
	              currentParent = parent.stateNode.containerInfo;
	              currentParentIsContainer = true;
	              break findParent;
	            case HostPortal:
	              currentParent = parent.stateNode.containerInfo;
	              currentParentIsContainer = true;
	              break findParent;
	          }
	          parent = parent['return'];
	        }
	        currentParentIsValid = true;
	      }

	      if (node.tag === HostComponent || node.tag === HostText) {
	        commitNestedUnmounts(node);
	        // After all the children have unmounted, it is now safe to remove the
	        // node from the tree.
	        if (currentParentIsContainer) {
	          removeChildFromContainer(currentParent, node.stateNode);
	        } else {
	          removeChild(currentParent, node.stateNode);
	        }
	        // Don't visit children because we already visited them.
	      } else if (node.tag === HostPortal) {
	        // When we go into a portal, it becomes the parent to remove from.
	        // We will reassign it back when we pop the portal on the way up.
	        currentParent = node.stateNode.containerInfo;
	        // Visit children because portals might contain host components.
	        if (node.child !== null) {
	          node.child['return'] = node;
	          node = node.child;
	          continue;
	        }
	      } else {
	        commitUnmount(node);
	        // Visit children because we may find more host components below.
	        if (node.child !== null) {
	          node.child['return'] = node;
	          node = node.child;
	          continue;
	        }
	      }
	      if (node === current) {
	        return;
	      }
	      while (node.sibling === null) {
	        if (node['return'] === null || node['return'] === current) {
	          return;
	        }
	        node = node['return'];
	        if (node.tag === HostPortal) {
	          // When we go out of the portal, we need to restore the parent.
	          // Since we don't keep a stack of them, we will search for it.
	          currentParentIsValid = false;
	        }
	      }
	      node.sibling['return'] = node['return'];
	      node = node.sibling;
	    }
	  }

	  function commitDeletion(current) {
	    // Recursively delete all host nodes from the parent.
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    unmountHostComponents(current);
	    detachFiber(current);
	  }

	  function commitWork(current, finishedWork) {
	    switch (finishedWork.tag) {
	      case ClassComponent:
	        {
	          return;
	        }
	      case HostComponent:
	        {
	          var instance = finishedWork.stateNode;
	          if (instance != null) {
	            // Commit the work prepared earlier.
	            var newProps = finishedWork.memoizedProps;
	            // For hydration we reuse the update path but we treat the oldProps
	            // as the newProps. The updatePayload will contain the real change in
	            // this case.
	            var oldProps = current !== null ? current.memoizedProps : newProps;
	            var type = finishedWork.type;
	            // TODO: Type the updateQueue to be specific to host components.
	            var updatePayload = finishedWork.updateQueue;
	            finishedWork.updateQueue = null;
	            if (updatePayload !== null) {
	              commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
	            }
	          }
	          return;
	        }
	      case HostText:
	        {
	          !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	          var textInstance = finishedWork.stateNode;
	          var newText = finishedWork.memoizedProps;
	          // For hydration we reuse the update path but we treat the oldProps
	          // as the newProps. The updatePayload will contain the real change in
	          // this case.
	          var oldText = current !== null ? current.memoizedProps : newText;
	          commitTextUpdate(textInstance, oldText, newText);
	          return;
	        }
	      case HostRoot:
	        {
	          return;
	        }
	      default:
	        {
	          invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
	        }
	    }
	  }

	  function commitResetTextContent(current) {
	    resetTextContent(current.stateNode);
	  }

	  if (enableMutatingReconciler) {
	    return {
	      commitResetTextContent: commitResetTextContent,
	      commitPlacement: commitPlacement,
	      commitDeletion: commitDeletion,
	      commitWork: commitWork,
	      commitLifeCycles: commitLifeCycles,
	      commitAttachRef: commitAttachRef,
	      commitDetachRef: commitDetachRef
	    };
	  } else {
	    invariant(false, 'Mutating reconciler is disabled.');
	  }
	};

	var NO_CONTEXT = {};

	var ReactFiberHostContext = function (config) {
	  var getChildHostContext = config.getChildHostContext,
	      getRootHostContext = config.getRootHostContext;


	  var contextStackCursor = createCursor(NO_CONTEXT);
	  var contextFiberStackCursor = createCursor(NO_CONTEXT);
	  var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	  function requiredContext(c) {
	    !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    return c;
	  }

	  function getRootHostContainer() {
	    var rootInstance = requiredContext(rootInstanceStackCursor.current);
	    return rootInstance;
	  }

	  function pushHostContainer(fiber, nextRootInstance) {
	    // Push current root instance onto the stack;
	    // This allows us to reset root when portals are popped.
	    push(rootInstanceStackCursor, nextRootInstance, fiber);

	    var nextRootContext = getRootHostContext(nextRootInstance);

	    // Track the context and the Fiber that provided it.
	    // This enables us to pop only Fibers that provide unique contexts.
	    push(contextFiberStackCursor, fiber, fiber);
	    push(contextStackCursor, nextRootContext, fiber);
	  }

	  function popHostContainer(fiber) {
	    pop(contextStackCursor, fiber);
	    pop(contextFiberStackCursor, fiber);
	    pop(rootInstanceStackCursor, fiber);
	  }

	  function getHostContext() {
	    var context = requiredContext(contextStackCursor.current);
	    return context;
	  }

	  function pushHostContext(fiber) {
	    var rootInstance = requiredContext(rootInstanceStackCursor.current);
	    var context = requiredContext(contextStackCursor.current);
	    var nextContext = getChildHostContext(context, fiber.type, rootInstance);

	    // Don't push this Fiber's context unless it's unique.
	    if (context === nextContext) {
	      return;
	    }

	    // Track the context and the Fiber that provided it.
	    // This enables us to pop only Fibers that provide unique contexts.
	    push(contextFiberStackCursor, fiber, fiber);
	    push(contextStackCursor, nextContext, fiber);
	  }

	  function popHostContext(fiber) {
	    // Do not pop unless this Fiber provided the current context.
	    // pushHostContext() only pushes Fibers that provide unique contexts.
	    if (contextFiberStackCursor.current !== fiber) {
	      return;
	    }

	    pop(contextStackCursor, fiber);
	    pop(contextFiberStackCursor, fiber);
	  }

	  function resetHostContainer() {
	    contextStackCursor.current = NO_CONTEXT;
	    rootInstanceStackCursor.current = NO_CONTEXT;
	  }

	  return {
	    getHostContext: getHostContext,
	    getRootHostContainer: getRootHostContainer,
	    popHostContainer: popHostContainer,
	    popHostContext: popHostContext,
	    pushHostContainer: pushHostContainer,
	    pushHostContext: pushHostContext,
	    resetHostContainer: resetHostContainer
	  };
	};

	var ReactFiberHydrationContext = function (config) {
	  var shouldSetTextContent = config.shouldSetTextContent,
	      hydration = config.hydration;

	  // If this doesn't have hydration mode.

	  if (!hydration) {
	    return {
	      enterHydrationState: function () {
	        return false;
	      },
	      resetHydrationState: function () {},
	      tryToClaimNextHydratableInstance: function () {},
	      prepareToHydrateHostInstance: function () {
	        invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
	      },
	      prepareToHydrateHostTextInstance: function () {
	        invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
	      },
	      popHydrationState: function (fiber) {
	        return false;
	      }
	    };
	  }

	  var canHydrateInstance = hydration.canHydrateInstance,
	      canHydrateTextInstance = hydration.canHydrateTextInstance,
	      getNextHydratableSibling = hydration.getNextHydratableSibling,
	      getFirstHydratableChild = hydration.getFirstHydratableChild,
	      hydrateInstance = hydration.hydrateInstance,
	      hydrateTextInstance = hydration.hydrateTextInstance,
	      didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,
	      didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,
	      didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,
	      didNotHydrateInstance = hydration.didNotHydrateInstance,
	      didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,
	      didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,
	      didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,
	      didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;

	  // The deepest Fiber on the stack involved in a hydration context.
	  // This may have been an insertion or a hydration.

	  var hydrationParentFiber = null;
	  var nextHydratableInstance = null;
	  var isHydrating = false;

	  function enterHydrationState(fiber) {
	    var parentInstance = fiber.stateNode.containerInfo;
	    nextHydratableInstance = getFirstHydratableChild(parentInstance);
	    hydrationParentFiber = fiber;
	    isHydrating = true;
	    return true;
	  }

	  function deleteHydratableInstance(returnFiber, instance) {
	    {
	      switch (returnFiber.tag) {
	        case HostRoot:
	          didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
	          break;
	        case HostComponent:
	          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
	          break;
	      }
	    }

	    var childToDelete = createFiberFromHostInstanceForDeletion();
	    childToDelete.stateNode = instance;
	    childToDelete['return'] = returnFiber;
	    childToDelete.effectTag = Deletion;

	    // This might seem like it belongs on progressedFirstDeletion. However,
	    // these children are not part of the reconciliation list of children.
	    // Even if we abort and rereconcile the children, that will try to hydrate
	    // again and the nodes are still in the host tree so these will be
	    // recreated.
	    if (returnFiber.lastEffect !== null) {
	      returnFiber.lastEffect.nextEffect = childToDelete;
	      returnFiber.lastEffect = childToDelete;
	    } else {
	      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
	    }
	  }

	  function insertNonHydratedInstance(returnFiber, fiber) {
	    fiber.effectTag |= Placement;
	    {
	      switch (returnFiber.tag) {
	        case HostRoot:
	          {
	            var parentContainer = returnFiber.stateNode.containerInfo;
	            switch (fiber.tag) {
	              case HostComponent:
	                var type = fiber.type;
	                var props = fiber.pendingProps;
	                didNotFindHydratableContainerInstance(parentContainer, type, props);
	                break;
	              case HostText:
	                var text = fiber.pendingProps;
	                didNotFindHydratableContainerTextInstance(parentContainer, text);
	                break;
	            }
	            break;
	          }
	        case HostComponent:
	          {
	            var parentType = returnFiber.type;
	            var parentProps = returnFiber.memoizedProps;
	            var parentInstance = returnFiber.stateNode;
	            switch (fiber.tag) {
	              case HostComponent:
	                var _type = fiber.type;
	                var _props = fiber.pendingProps;
	                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
	                break;
	              case HostText:
	                var _text = fiber.pendingProps;
	                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
	                break;
	            }
	            break;
	          }
	        default:
	          return;
	      }
	    }
	  }

	  function tryHydrate(fiber, nextInstance) {
	    switch (fiber.tag) {
	      case HostComponent:
	        {
	          var type = fiber.type;
	          var props = fiber.pendingProps;
	          var instance = canHydrateInstance(nextInstance, type, props);
	          if (instance !== null) {
	            fiber.stateNode = instance;
	            return true;
	          }
	          return false;
	        }
	      case HostText:
	        {
	          var text = fiber.pendingProps;
	          var textInstance = canHydrateTextInstance(nextInstance, text);
	          if (textInstance !== null) {
	            fiber.stateNode = textInstance;
	            return true;
	          }
	          return false;
	        }
	      default:
	        return false;
	    }
	  }

	  function tryToClaimNextHydratableInstance(fiber) {
	    if (!isHydrating) {
	      return;
	    }
	    var nextInstance = nextHydratableInstance;
	    if (!nextInstance) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    }
	    if (!tryHydrate(fiber, nextInstance)) {
	      // If we can't hydrate this instance let's try the next one.
	      // We use this as a heuristic. It's based on intuition and not data so it
	      // might be flawed or unnecessary.
	      nextInstance = getNextHydratableSibling(nextInstance);
	      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	        // Nothing to hydrate. Make it an insertion.
	        insertNonHydratedInstance(hydrationParentFiber, fiber);
	        isHydrating = false;
	        hydrationParentFiber = fiber;
	        return;
	      }
	      // We matched the next one, we'll now assume that the first one was
	      // superfluous and we'll delete it. Since we can't eagerly delete it
	      // we'll have to schedule a deletion. To do that, this node needs a dummy
	      // fiber associated with it.
	      deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
	    }
	    hydrationParentFiber = fiber;
	    nextHydratableInstance = getFirstHydratableChild(nextInstance);
	  }

	  function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
	    var instance = fiber.stateNode;
	    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
	    // TODO: Type this specific to this type of component.
	    fiber.updateQueue = updatePayload;
	    // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update.
	    if (updatePayload !== null) {
	      return true;
	    }
	    return false;
	  }

	  function prepareToHydrateHostTextInstance(fiber) {
	    var textInstance = fiber.stateNode;
	    var textContent = fiber.memoizedProps;
	    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
	    {
	      if (shouldUpdate) {
	        // We assume that prepareToHydrateHostTextInstance is called in a context where the
	        // hydration parent is the parent host component of this host text.
	        var returnFiber = hydrationParentFiber;
	        if (returnFiber !== null) {
	          switch (returnFiber.tag) {
	            case HostRoot:
	              {
	                var parentContainer = returnFiber.stateNode.containerInfo;
	                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
	                break;
	              }
	            case HostComponent:
	              {
	                var parentType = returnFiber.type;
	                var parentProps = returnFiber.memoizedProps;
	                var parentInstance = returnFiber.stateNode;
	                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
	                break;
	              }
	          }
	        }
	      }
	    }
	    return shouldUpdate;
	  }

	  function popToNextHostParent(fiber) {
	    var parent = fiber['return'];
	    while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot) {
	      parent = parent['return'];
	    }
	    hydrationParentFiber = parent;
	  }

	  function popHydrationState(fiber) {
	    if (fiber !== hydrationParentFiber) {
	      // We're deeper than the current hydration context, inside an inserted
	      // tree.
	      return false;
	    }
	    if (!isHydrating) {
	      // If we're not currently hydrating but we're in a hydration context, then
	      // we were an insertion and now need to pop up reenter hydration of our
	      // siblings.
	      popToNextHostParent(fiber);
	      isHydrating = true;
	      return false;
	    }

	    var type = fiber.type;

	    // If we have any remaining hydratable nodes, we need to delete them now.
	    // We only do this deeper than head and body since they tend to have random
	    // other nodes in them. We also ignore components with pure text content in
	    // side of them.
	    // TODO: Better heuristic.
	    if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
	      var nextInstance = nextHydratableInstance;
	      while (nextInstance) {
	        deleteHydratableInstance(fiber, nextInstance);
	        nextInstance = getNextHydratableSibling(nextInstance);
	      }
	    }

	    popToNextHostParent(fiber);
	    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	    return true;
	  }

	  function resetHydrationState() {
	    hydrationParentFiber = null;
	    nextHydratableInstance = null;
	    isHydrating = false;
	  }

	  return {
	    enterHydrationState: enterHydrationState,
	    resetHydrationState: resetHydrationState,
	    tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
	    prepareToHydrateHostInstance: prepareToHydrateHostInstance,
	    prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
	    popHydrationState: popHydrationState
	  };
	};

	// This lets us hook into Fiber to debug what it's doing.
	// See https://github.com/facebook/react/pull/8033.
	// This is not part of the public API, not even for React DevTools.
	// You may only inject a debugTool if you work on React Fiber itself.
	var ReactFiberInstrumentation = {
	  debugTool: null
	};

	var ReactFiberInstrumentation_1 = ReactFiberInstrumentation;

	var defaultShowDialog = function (capturedError) {
	  return true;
	};

	var showDialog = defaultShowDialog;

	function logCapturedError(capturedError) {
	  var logError = showDialog(capturedError);

	  // Allow injected showDialog() to prevent default console.error logging.
	  // This enables renderers like ReactNative to better manage redbox behavior.
	  if (logError === false) {
	    return;
	  }

	  var error = capturedError.error;
	  var suppressLogging = error && error.suppressReactErrorLogging;
	  if (suppressLogging) {
	    return;
	  }

	  {
	    var componentName = capturedError.componentName,
	        componentStack = capturedError.componentStack,
	        errorBoundaryName = capturedError.errorBoundaryName,
	        errorBoundaryFound = capturedError.errorBoundaryFound,
	        willRetry = capturedError.willRetry;


	    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';

	    var errorBoundaryMessage = void 0;
	    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
	    if (errorBoundaryFound && errorBoundaryName) {
	      if (willRetry) {
	        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
	      } else {
	        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
	      }
	    } else {
	      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
	    }
	    var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage);

	    // In development, we provide our own message with just the component stack.
	    // We don't include the original error message and JS stack because the browser
	    // has already printed it. Even if the application swallows the error, it is still
	    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
	    console.error(combinedMessage);
	  }
	}

	var invokeGuardedCallback$1 = ReactErrorUtils.invokeGuardedCallback;
	var hasCaughtError = ReactErrorUtils.hasCaughtError;
	var clearCaughtError = ReactErrorUtils.clearCaughtError;


	{
	  var didWarnAboutStateTransition = false;
	  var didWarnSetStateChildContext = false;
	  var didWarnStateUpdateForUnmountedComponent = {};

	  var warnAboutUpdateOnUnmounted = function (fiber) {
	    var componentName = getComponentName(fiber) || 'ReactClass';
	    if (didWarnStateUpdateForUnmountedComponent[componentName]) {
	      return;
	    }
	    warning(false, 'Can only update a mounted or mounting ' + 'component. This usually means you called setState, replaceState, ' + 'or forceUpdate on an unmounted component. This is a no-op.\n\nPlease ' + 'check the code for the %s component.', componentName);
	    didWarnStateUpdateForUnmountedComponent[componentName] = true;
	  };

	  var warnAboutInvalidUpdates = function (instance) {
	    switch (ReactDebugCurrentFiber.phase) {
	      case 'getChildContext':
	        if (didWarnSetStateChildContext) {
	          return;
	        }
	        warning(false, 'setState(...): Cannot call setState() inside getChildContext()');
	        didWarnSetStateChildContext = true;
	        break;
	      case 'render':
	        if (didWarnAboutStateTransition) {
	          return;
	        }
	        warning(false, 'Cannot update during an existing state transition (such as within ' + "`render` or another component's constructor). Render methods should " + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');
	        didWarnAboutStateTransition = true;
	        break;
	    }
	  };
	}

	var ReactFiberScheduler = function (config) {
	  var hostContext = ReactFiberHostContext(config);
	  var hydrationContext = ReactFiberHydrationContext(config);
	  var popHostContainer = hostContext.popHostContainer,
	      popHostContext = hostContext.popHostContext,
	      resetHostContainer = hostContext.resetHostContainer;

	  var _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleWork, computeExpirationForFiber),
	      beginWork = _ReactFiberBeginWork.beginWork,
	      beginFailedWork = _ReactFiberBeginWork.beginFailedWork;

	  var _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
	      completeWork = _ReactFiberCompleteWo.completeWork;

	  var _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
	      commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,
	      commitPlacement = _ReactFiberCommitWork.commitPlacement,
	      commitDeletion = _ReactFiberCommitWork.commitDeletion,
	      commitWork = _ReactFiberCommitWork.commitWork,
	      commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
	      commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
	      commitDetachRef = _ReactFiberCommitWork.commitDetachRef;

	  var now = config.now,
	      scheduleDeferredCallback = config.scheduleDeferredCallback,
	      cancelDeferredCallback = config.cancelDeferredCallback,
	      useSyncScheduling = config.useSyncScheduling,
	      prepareForCommit = config.prepareForCommit,
	      resetAfterCommit = config.resetAfterCommit;

	  // Represents the current time in ms.

	  var startTime = now();
	  var mostRecentCurrentTime = msToExpirationTime(0);

	  // Represents the expiration time that incoming updates should use. (If this
	  // is NoWork, use the default strategy: async updates in async mode, sync
	  // updates in sync mode.)
	  var expirationContext = NoWork;

	  var isWorking = false;

	  // The next work in progress fiber that we're currently working on.
	  var nextUnitOfWork = null;
	  var nextRoot = null;
	  // The time at which we're currently rendering work.
	  var nextRenderExpirationTime = NoWork;

	  // The next fiber with an effect that we're currently committing.
	  var nextEffect = null;

	  // Keep track of which fibers have captured an error that need to be handled.
	  // Work is removed from this collection after componentDidCatch is called.
	  var capturedErrors = null;
	  // Keep track of which fibers have failed during the current batch of work.
	  // This is a different set than capturedErrors, because it is not reset until
	  // the end of the batch. This is needed to propagate errors correctly if a
	  // subtree fails more than once.
	  var failedBoundaries = null;
	  // Error boundaries that captured an error during the current commit.
	  var commitPhaseBoundaries = null;
	  var firstUncaughtError = null;
	  var didFatal = false;

	  var isCommitting = false;
	  var isUnmounting = false;

	  // Used for performance tracking.
	  var interruptedBy = null;

	  function resetContextStack() {
	    // Reset the stack
	    reset$1();
	    // Reset the cursors
	    resetContext();
	    resetHostContainer();
	  }

	  function commitAllHostEffects() {
	    while (nextEffect !== null) {
	      {
	        ReactDebugCurrentFiber.setCurrentFiber(nextEffect);
	      }
	      recordEffect();

	      var effectTag = nextEffect.effectTag;
	      if (effectTag & ContentReset) {
	        commitResetTextContent(nextEffect);
	      }

	      if (effectTag & Ref) {
	        var current = nextEffect.alternate;
	        if (current !== null) {
	          commitDetachRef(current);
	        }
	      }

	      // The following switch statement is only concerned about placement,
	      // updates, and deletions. To avoid needing to add a case for every
	      // possible bitmap value, we remove the secondary effects from the
	      // effect tag and switch on that value.
	      var primaryEffectTag = effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork);
	      switch (primaryEffectTag) {
	        case Placement:
	          {
	            commitPlacement(nextEffect);
	            // Clear the "placement" from effect tag so that we know that this is inserted, before
	            // any life-cycles like componentDidMount gets called.
	            // TODO: findDOMNode doesn't rely on this any more but isMounted
	            // does and isMounted is deprecated anyway so we should be able
	            // to kill this.
	            nextEffect.effectTag &= ~Placement;
	            break;
	          }
	        case PlacementAndUpdate:
	          {
	            // Placement
	            commitPlacement(nextEffect);
	            // Clear the "placement" from effect tag so that we know that this is inserted, before
	            // any life-cycles like componentDidMount gets called.
	            nextEffect.effectTag &= ~Placement;

	            // Update
	            var _current = nextEffect.alternate;
	            commitWork(_current, nextEffect);
	            break;
	          }
	        case Update:
	          {
	            var _current2 = nextEffect.alternate;
	            commitWork(_current2, nextEffect);
	            break;
	          }
	        case Deletion:
	          {
	            isUnmounting = true;
	            commitDeletion(nextEffect);
	            isUnmounting = false;
	            break;
	          }
	      }
	      nextEffect = nextEffect.nextEffect;
	    }

	    {
	      ReactDebugCurrentFiber.resetCurrentFiber();
	    }
	  }

	  function commitAllLifeCycles() {
	    while (nextEffect !== null) {
	      var effectTag = nextEffect.effectTag;

	      if (effectTag & (Update | Callback)) {
	        recordEffect();
	        var current = nextEffect.alternate;
	        commitLifeCycles(current, nextEffect);
	      }

	      if (effectTag & Ref) {
	        recordEffect();
	        commitAttachRef(nextEffect);
	      }

	      if (effectTag & Err) {
	        recordEffect();
	        commitErrorHandling(nextEffect);
	      }

	      var next = nextEffect.nextEffect;
	      // Ensure that we clean these up so that we don't accidentally keep them.
	      // I'm not actually sure this matters because we can't reset firstEffect
	      // and lastEffect since they're on every node, not just the effectful
	      // ones. So we have to clean everything as we reuse nodes anyway.
	      nextEffect.nextEffect = null;
	      // Ensure that we reset the effectTag here so that we can rely on effect
	      // tags to reason about the current life-cycle.
	      nextEffect = next;
	    }
	  }

	  function commitRoot(finishedWork) {
	    // We keep track of this so that captureError can collect any boundaries
	    // that capture an error during the commit phase. The reason these aren't
	    // local to this function is because errors that occur during cWU are
	    // captured elsewhere, to prevent the unmount from being interrupted.
	    isWorking = true;
	    isCommitting = true;
	    startCommitTimer();

	    var root = finishedWork.stateNode;
	    !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    root.isReadyForCommit = false;

	    // Reset this to null before calling lifecycles
	    ReactCurrentOwner.current = null;

	    var firstEffect = void 0;
	    if (finishedWork.effectTag > PerformedWork) {
	      // A fiber's effect list consists only of its children, not itself. So if
	      // the root has an effect, we need to add it to the end of the list. The
	      // resulting list is the set that would belong to the root's parent, if
	      // it had one; that is, all the effects in the tree including the root.
	      if (finishedWork.lastEffect !== null) {
	        finishedWork.lastEffect.nextEffect = finishedWork;
	        firstEffect = finishedWork.firstEffect;
	      } else {
	        firstEffect = finishedWork;
	      }
	    } else {
	      // There is no effect on the root.
	      firstEffect = finishedWork.firstEffect;
	    }

	    prepareForCommit();

	    // Commit all the side-effects within a tree. We'll do this in two passes.
	    // The first pass performs all the host insertions, updates, deletions and
	    // ref unmounts.
	    nextEffect = firstEffect;
	    startCommitHostEffectsTimer();
	    while (nextEffect !== null) {
	      var didError = false;
	      var _error = void 0;
	      {
	        invokeGuardedCallback$1(null, commitAllHostEffects, null);
	        if (hasCaughtError()) {
	          didError = true;
	          _error = clearCaughtError();
	        }
	      }
	      if (didError) {
	        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        captureError(nextEffect, _error);
	        // Clean-up
	        if (nextEffect !== null) {
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    }
	    stopCommitHostEffectsTimer();

	    resetAfterCommit();

	    // The work-in-progress tree is now the current tree. This must come after
	    // the first pass of the commit phase, so that the previous tree is still
	    // current during componentWillUnmount, but before the second pass, so that
	    // the finished work is current during componentDidMount/Update.
	    root.current = finishedWork;

	    // In the second pass we'll perform all life-cycles and ref callbacks.
	    // Life-cycles happen as a separate pass so that all placements, updates,
	    // and deletions in the entire tree have already been invoked.
	    // This pass also triggers any renderer-specific initial effects.
	    nextEffect = firstEffect;
	    startCommitLifeCyclesTimer();
	    while (nextEffect !== null) {
	      var _didError = false;
	      var _error2 = void 0;
	      {
	        invokeGuardedCallback$1(null, commitAllLifeCycles, null);
	        if (hasCaughtError()) {
	          _didError = true;
	          _error2 = clearCaughtError();
	        }
	      }
	      if (_didError) {
	        !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	        captureError(nextEffect, _error2);
	        if (nextEffect !== null) {
	          nextEffect = nextEffect.nextEffect;
	        }
	      }
	    }

	    isCommitting = false;
	    isWorking = false;
	    stopCommitLifeCyclesTimer();
	    stopCommitTimer();
	    if (typeof onCommitRoot === 'function') {
	      onCommitRoot(finishedWork.stateNode);
	    }
	    if (true && ReactFiberInstrumentation_1.debugTool) {
	      ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
	    }

	    // If we caught any errors during this commit, schedule their boundaries
	    // to update.
	    if (commitPhaseBoundaries) {
	      commitPhaseBoundaries.forEach(scheduleErrorRecovery);
	      commitPhaseBoundaries = null;
	    }

	    if (firstUncaughtError !== null) {
	      var _error3 = firstUncaughtError;
	      firstUncaughtError = null;
	      onUncaughtError(_error3);
	    }

	    var remainingTime = root.current.expirationTime;

	    if (remainingTime === NoWork) {
	      capturedErrors = null;
	      failedBoundaries = null;
	    }

	    return remainingTime;
	  }

	  function resetExpirationTime(workInProgress, renderTime) {
	    if (renderTime !== Never && workInProgress.expirationTime === Never) {
	      // The children of this component are hidden. Don't bubble their
	      // expiration times.
	      return;
	    }

	    // Check for pending updates.
	    var newExpirationTime = getUpdateExpirationTime(workInProgress);

	    // TODO: Calls need to visit stateNode

	    // Bubble up the earliest expiration time.
	    var child = workInProgress.child;
	    while (child !== null) {
	      if (child.expirationTime !== NoWork && (newExpirationTime === NoWork || newExpirationTime > child.expirationTime)) {
	        newExpirationTime = child.expirationTime;
	      }
	      child = child.sibling;
	    }
	    workInProgress.expirationTime = newExpirationTime;
	  }

	  function completeUnitOfWork(workInProgress) {
	    while (true) {
	      // The current, flushed, state of this fiber is the alternate.
	      // Ideally nothing should rely on this, but relying on it here
	      // means that we don't need an additional field on the work in
	      // progress.
	      var current = workInProgress.alternate;
	      {
	        ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
	      }
	      var next = completeWork(current, workInProgress, nextRenderExpirationTime);
	      {
	        ReactDebugCurrentFiber.resetCurrentFiber();
	      }

	      var returnFiber = workInProgress['return'];
	      var siblingFiber = workInProgress.sibling;

	      resetExpirationTime(workInProgress, nextRenderExpirationTime);

	      if (next !== null) {
	        stopWorkTimer(workInProgress);
	        if (true && ReactFiberInstrumentation_1.debugTool) {
	          ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
	        }
	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        return next;
	      }

	      if (returnFiber !== null) {
	        // Append all the effects of the subtree and this fiber onto the effect
	        // list of the parent. The completion order of the children affects the
	        // side-effect order.
	        if (returnFiber.firstEffect === null) {
	          returnFiber.firstEffect = workInProgress.firstEffect;
	        }
	        if (workInProgress.lastEffect !== null) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
	          }
	          returnFiber.lastEffect = workInProgress.lastEffect;
	        }

	        // If this fiber had side-effects, we append it AFTER the children's
	        // side-effects. We can perform certain side-effects earlier if
	        // needed, by doing multiple passes over the effect list. We don't want
	        // to schedule our own side-effect on our own list because if end up
	        // reusing children we'll schedule this effect onto itself since we're
	        // at the end.
	        var effectTag = workInProgress.effectTag;
	        // Skip both NoWork and PerformedWork tags when creating the effect list.
	        // PerformedWork effect is read by React DevTools but shouldn't be committed.
	        if (effectTag > PerformedWork) {
	          if (returnFiber.lastEffect !== null) {
	            returnFiber.lastEffect.nextEffect = workInProgress;
	          } else {
	            returnFiber.firstEffect = workInProgress;
	          }
	          returnFiber.lastEffect = workInProgress;
	        }
	      }

	      stopWorkTimer(workInProgress);
	      if (true && ReactFiberInstrumentation_1.debugTool) {
	        ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
	      }

	      if (siblingFiber !== null) {
	        // If there is more work to do in this returnFiber, do that next.
	        return siblingFiber;
	      } else if (returnFiber !== null) {
	        // If there's no more work in this returnFiber. Complete the returnFiber.
	        workInProgress = returnFiber;
	        continue;
	      } else {
	        // We've reached the root.
	        var root = workInProgress.stateNode;
	        root.isReadyForCommit = true;
	        return null;
	      }
	    }

	    // Without this explicit null return Flow complains of invalid return type
	    // TODO Remove the above while(true) loop
	    // eslint-disable-next-line no-unreachable
	    return null;
	  }

	  function performUnitOfWork(workInProgress) {
	    // The current, flushed, state of this fiber is the alternate.
	    // Ideally nothing should rely on this, but relying on it here
	    // means that we don't need an additional field on the work in
	    // progress.
	    var current = workInProgress.alternate;

	    // See if beginning this work spawns more work.
	    startWorkTimer(workInProgress);
	    {
	      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
	    }

	    var next = beginWork(current, workInProgress, nextRenderExpirationTime);
	    {
	      ReactDebugCurrentFiber.resetCurrentFiber();
	    }
	    if (true && ReactFiberInstrumentation_1.debugTool) {
	      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
	    }

	    if (next === null) {
	      // If this doesn't spawn new work, complete the current work.
	      next = completeUnitOfWork(workInProgress);
	    }

	    ReactCurrentOwner.current = null;

	    return next;
	  }

	  function performFailedUnitOfWork(workInProgress) {
	    // The current, flushed, state of this fiber is the alternate.
	    // Ideally nothing should rely on this, but relying on it here
	    // means that we don't need an additional field on the work in
	    // progress.
	    var current = workInProgress.alternate;

	    // See if beginning this work spawns more work.
	    startWorkTimer(workInProgress);
	    {
	      ReactDebugCurrentFiber.setCurrentFiber(workInProgress);
	    }
	    var next = beginFailedWork(current, workInProgress, nextRenderExpirationTime);
	    {
	      ReactDebugCurrentFiber.resetCurrentFiber();
	    }
	    if (true && ReactFiberInstrumentation_1.debugTool) {
	      ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
	    }

	    if (next === null) {
	      // If this doesn't spawn new work, complete the current work.
	      next = completeUnitOfWork(workInProgress);
	    }

	    ReactCurrentOwner.current = null;

	    return next;
	  }

	  function workLoop(expirationTime) {
	    if (capturedErrors !== null) {
	      // If there are unhandled errors, switch to the slow work loop.
	      // TODO: How to avoid this check in the fast path? Maybe the renderer
	      // could keep track of which roots have unhandled errors and call a
	      // forked version of renderRoot.
	      slowWorkLoopThatChecksForFailedWork(expirationTime);
	      return;
	    }
	    if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
	      return;
	    }

	    if (nextRenderExpirationTime <= mostRecentCurrentTime) {
	      // Flush all expired work.
	      while (nextUnitOfWork !== null) {
	        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
	      }
	    } else {
	      // Flush asynchronous work until the deadline runs out of time.
	      while (nextUnitOfWork !== null && !shouldYield()) {
	        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
	      }
	    }
	  }

	  function slowWorkLoopThatChecksForFailedWork(expirationTime) {
	    if (nextRenderExpirationTime === NoWork || nextRenderExpirationTime > expirationTime) {
	      return;
	    }

	    if (nextRenderExpirationTime <= mostRecentCurrentTime) {
	      // Flush all expired work.
	      while (nextUnitOfWork !== null) {
	        if (hasCapturedError(nextUnitOfWork)) {
	          // Use a forked version of performUnitOfWork
	          nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
	        } else {
	          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
	        }
	      }
	    } else {
	      // Flush asynchronous work until the deadline runs out of time.
	      while (nextUnitOfWork !== null && !shouldYield()) {
	        if (hasCapturedError(nextUnitOfWork)) {
	          // Use a forked version of performUnitOfWork
	          nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork);
	        } else {
	          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
	        }
	      }
	    }
	  }

	  function renderRootCatchBlock(root, failedWork, boundary, expirationTime) {
	    // We're going to restart the error boundary that captured the error.
	    // Conceptually, we're unwinding the stack. We need to unwind the
	    // context stack, too.
	    unwindContexts(failedWork, boundary);

	    // Restart the error boundary using a forked version of
	    // performUnitOfWork that deletes the boundary's children. The entire
	    // failed subree will be unmounted. During the commit phase, a special
	    // lifecycle method is called on the error boundary, which triggers
	    // a re-render.
	    nextUnitOfWork = performFailedUnitOfWork(boundary);

	    // Continue working.
	    workLoop(expirationTime);
	  }

	  function renderRoot(root, expirationTime) {
	    !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    isWorking = true;

	    // We're about to mutate the work-in-progress tree. If the root was pending
	    // commit, it no longer is: we'll need to complete it again.
	    root.isReadyForCommit = false;

	    // Check if we're starting from a fresh stack, or if we're resuming from
	    // previously yielded work.
	    if (root !== nextRoot || expirationTime !== nextRenderExpirationTime || nextUnitOfWork === null) {
	      // Reset the stack and start working from the root.
	      resetContextStack();
	      nextRoot = root;
	      nextRenderExpirationTime = expirationTime;
	      nextUnitOfWork = createWorkInProgress(nextRoot.current, null, expirationTime);
	    }

	    startWorkLoopTimer(nextUnitOfWork);

	    var didError = false;
	    var error = null;
	    {
	      invokeGuardedCallback$1(null, workLoop, null, expirationTime);
	      if (hasCaughtError()) {
	        didError = true;
	        error = clearCaughtError();
	      }
	    }

	    // An error was thrown during the render phase.
	    while (didError) {
	      if (didFatal) {
	        // This was a fatal error. Don't attempt to recover from it.
	        firstUncaughtError = error;
	        break;
	      }

	      var failedWork = nextUnitOfWork;
	      if (failedWork === null) {
	        // An error was thrown but there's no current unit of work. This can
	        // happen during the commit phase if there's a bug in the renderer.
	        didFatal = true;
	        continue;
	      }

	      // "Capture" the error by finding the nearest boundary. If there is no
	      // error boundary, we use the root.
	      var boundary = captureError(failedWork, error);
	      !(boundary !== null) ? invariant(false, 'Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	      if (didFatal) {
	        // The error we just captured was a fatal error. This happens
	        // when the error propagates to the root more than once.
	        continue;
	      }

	      didError = false;
	      error = null;
	      {
	        invokeGuardedCallback$1(null, renderRootCatchBlock, null, root, failedWork, boundary, expirationTime);
	        if (hasCaughtError()) {
	          didError = true;
	          error = clearCaughtError();
	          continue;
	        }
	      }
	      // We're finished working. Exit the error loop.
	      break;
	    }

	    var uncaughtError = firstUncaughtError;

	    // We're done performing work. Time to clean up.
	    stopWorkLoopTimer(interruptedBy);
	    interruptedBy = null;
	    isWorking = false;
	    didFatal = false;
	    firstUncaughtError = null;

	    if (uncaughtError !== null) {
	      onUncaughtError(uncaughtError);
	    }

	    return root.isReadyForCommit ? root.current.alternate : null;
	  }

	  // Returns the boundary that captured the error, or null if the error is ignored
	  function captureError(failedWork, error) {
	    // It is no longer valid because we exited the user code.
	    ReactCurrentOwner.current = null;
	    {
	      ReactDebugCurrentFiber.resetCurrentFiber();
	    }

	    // Search for the nearest error boundary.
	    var boundary = null;

	    // Passed to logCapturedError()
	    var errorBoundaryFound = false;
	    var willRetry = false;
	    var errorBoundaryName = null;

	    // Host containers are a special case. If the failed work itself is a host
	    // container, then it acts as its own boundary. In all other cases, we
	    // ignore the work itself and only search through the parents.
	    if (failedWork.tag === HostRoot) {
	      boundary = failedWork;

	      if (isFailedBoundary(failedWork)) {
	        // If this root already failed, there must have been an error when
	        // attempting to unmount it. This is a worst-case scenario and
	        // should only be possible if there's a bug in the renderer.
	        didFatal = true;
	      }
	    } else {
	      var node = failedWork['return'];
	      while (node !== null && boundary === null) {
	        if (node.tag === ClassComponent) {
	          var instance = node.stateNode;
	          if (typeof instance.componentDidCatch === 'function') {
	            errorBoundaryFound = true;
	            errorBoundaryName = getComponentName(node);

	            // Found an error boundary!
	            boundary = node;
	            willRetry = true;
	          }
	        } else if (node.tag === HostRoot) {
	          // Treat the root like a no-op error boundary
	          boundary = node;
	        }

	        if (isFailedBoundary(node)) {
	          // This boundary is already in a failed state.

	          // If we're currently unmounting, that means this error was
	          // thrown while unmounting a failed subtree. We should ignore
	          // the error.
	          if (isUnmounting) {
	            return null;
	          }

	          // If we're in the commit phase, we should check to see if
	          // this boundary already captured an error during this commit.
	          // This case exists because multiple errors can be thrown during
	          // a single commit without interruption.
	          if (commitPhaseBoundaries !== null && (commitPhaseBoundaries.has(node) || node.alternate !== null && commitPhaseBoundaries.has(node.alternate))) {
	            // If so, we should ignore this error.
	            return null;
	          }

	          // The error should propagate to the next boundary -— we keep looking.
	          boundary = null;
	          willRetry = false;
	        }

	        node = node['return'];
	      }
	    }

	    if (boundary !== null) {
	      // Add to the collection of failed boundaries. This lets us know that
	      // subsequent errors in this subtree should propagate to the next boundary.
	      if (failedBoundaries === null) {
	        failedBoundaries = new Set();
	      }
	      failedBoundaries.add(boundary);

	      // This method is unsafe outside of the begin and complete phases.
	      // We might be in the commit phase when an error is captured.
	      // The risk is that the return path from this Fiber may not be accurate.
	      // That risk is acceptable given the benefit of providing users more context.
	      var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork);
	      var _componentName = getComponentName(failedWork);

	      // Add to the collection of captured errors. This is stored as a global
	      // map of errors and their component stack location keyed by the boundaries
	      // that capture them. We mostly use this Map as a Set; it's a Map only to
	      // avoid adding a field to Fiber to store the error.
	      if (capturedErrors === null) {
	        capturedErrors = new Map();
	      }

	      var capturedError = {
	        componentName: _componentName,
	        componentStack: _componentStack,
	        error: error,
	        errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
	        errorBoundaryFound: errorBoundaryFound,
	        errorBoundaryName: errorBoundaryName,
	        willRetry: willRetry
	      };

	      capturedErrors.set(boundary, capturedError);

	      try {
	        logCapturedError(capturedError);
	      } catch (e) {
	        // Prevent cycle if logCapturedError() throws.
	        // A cycle may still occur if logCapturedError renders a component that throws.
	        var suppressLogging = e && e.suppressReactErrorLogging;
	        if (!suppressLogging) {
	          console.error(e);
	        }
	      }

	      // If we're in the commit phase, defer scheduling an update on the
	      // boundary until after the commit is complete
	      if (isCommitting) {
	        if (commitPhaseBoundaries === null) {
	          commitPhaseBoundaries = new Set();
	        }
	        commitPhaseBoundaries.add(boundary);
	      } else {
	        // Otherwise, schedule an update now.
	        // TODO: Is this actually necessary during the render phase? Is it
	        // possible to unwind and continue rendering at the same priority,
	        // without corrupting internal state?
	        scheduleErrorRecovery(boundary);
	      }
	      return boundary;
	    } else if (firstUncaughtError === null) {
	      // If no boundary is found, we'll need to throw the error
	      firstUncaughtError = error;
	    }
	    return null;
	  }

	  function hasCapturedError(fiber) {
	    // TODO: capturedErrors should store the boundary instance, to avoid needing
	    // to check the alternate.
	    return capturedErrors !== null && (capturedErrors.has(fiber) || fiber.alternate !== null && capturedErrors.has(fiber.alternate));
	  }

	  function isFailedBoundary(fiber) {
	    // TODO: failedBoundaries should store the boundary instance, to avoid
	    // needing to check the alternate.
	    return failedBoundaries !== null && (failedBoundaries.has(fiber) || fiber.alternate !== null && failedBoundaries.has(fiber.alternate));
	  }

	  function commitErrorHandling(effectfulFiber) {
	    var capturedError = void 0;
	    if (capturedErrors !== null) {
	      capturedError = capturedErrors.get(effectfulFiber);
	      capturedErrors['delete'](effectfulFiber);
	      if (capturedError == null) {
	        if (effectfulFiber.alternate !== null) {
	          effectfulFiber = effectfulFiber.alternate;
	          capturedError = capturedErrors.get(effectfulFiber);
	          capturedErrors['delete'](effectfulFiber);
	        }
	      }
	    }

	    !(capturedError != null) ? invariant(false, 'No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	    switch (effectfulFiber.tag) {
	      case ClassComponent:
	        var instance = effectfulFiber.stateNode;

	        var info = {
	          componentStack: capturedError.componentStack
	        };

	        // Allow the boundary to handle the error, usually by scheduling
	        // an update to itself
	        instance.componentDidCatch(capturedError.error, info);
	        return;
	      case HostRoot:
	        if (firstUncaughtError === null) {
	          firstUncaughtError = capturedError.error;
	        }
	        return;
	      default:
	        invariant(false, 'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  function unwindContexts(from, to) {
	    var node = from;
	    while (node !== null) {
	      switch (node.tag) {
	        case ClassComponent:
	          popContextProvider(node);
	          break;
	        case HostComponent:
	          popHostContext(node);
	          break;
	        case HostRoot:
	          popHostContainer(node);
	          break;
	        case HostPortal:
	          popHostContainer(node);
	          break;
	      }
	      if (node === to || node.alternate === to) {
	        stopFailedWorkTimer(node);
	        break;
	      } else {
	        stopWorkTimer(node);
	      }
	      node = node['return'];
	    }
	  }

	  function computeAsyncExpiration() {
	    // Given the current clock time, returns an expiration time. We use rounding
	    // to batch like updates together.
	    // Should complete within ~1000ms. 1200ms max.
	    var currentTime = recalculateCurrentTime();
	    var expirationMs = 1000;
	    var bucketSizeMs = 200;
	    return computeExpirationBucket(currentTime, expirationMs, bucketSizeMs);
	  }

	  function computeExpirationForFiber(fiber) {
	    var expirationTime = void 0;
	    if (expirationContext !== NoWork) {
	      // An explicit expiration context was set;
	      expirationTime = expirationContext;
	    } else if (isWorking) {
	      if (isCommitting) {
	        // Updates that occur during the commit phase should have sync priority
	        // by default.
	        expirationTime = Sync;
	      } else {
	        // Updates during the render phase should expire at the same time as
	        // the work that is being rendered.
	        expirationTime = nextRenderExpirationTime;
	      }
	    } else {
	      // No explicit expiration context was set, and we're not currently
	      // performing work. Calculate a new expiration time.
	      if (useSyncScheduling && !(fiber.internalContextTag & AsyncUpdates)) {
	        // This is a sync update
	        expirationTime = Sync;
	      } else {
	        // This is an async update
	        expirationTime = computeAsyncExpiration();
	      }
	    }
	    return expirationTime;
	  }

	  function scheduleWork(fiber, expirationTime) {
	    return scheduleWorkImpl(fiber, expirationTime, false);
	  }

	  function checkRootNeedsClearing(root, fiber, expirationTime) {
	    if (!isWorking && root === nextRoot && expirationTime < nextRenderExpirationTime) {
	      // Restart the root from the top.
	      if (nextUnitOfWork !== null) {
	        // This is an interruption. (Used for performance tracking.)
	        interruptedBy = fiber;
	      }
	      nextRoot = null;
	      nextUnitOfWork = null;
	      nextRenderExpirationTime = NoWork;
	    }
	  }

	  function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
	    recordScheduleUpdate();

	    {
	      if (!isErrorRecovery && fiber.tag === ClassComponent) {
	        var instance = fiber.stateNode;
	        warnAboutInvalidUpdates(instance);
	      }
	    }

	    var node = fiber;
	    while (node !== null) {
	      // Walk the parent path to the root and update each node's
	      // expiration time.
	      if (node.expirationTime === NoWork || node.expirationTime > expirationTime) {
	        node.expirationTime = expirationTime;
	      }
	      if (node.alternate !== null) {
	        if (node.alternate.expirationTime === NoWork || node.alternate.expirationTime > expirationTime) {
	          node.alternate.expirationTime = expirationTime;
	        }
	      }
	      if (node['return'] === null) {
	        if (node.tag === HostRoot) {
	          var root = node.stateNode;

	          checkRootNeedsClearing(root, fiber, expirationTime);
	          requestWork(root, expirationTime);
	          checkRootNeedsClearing(root, fiber, expirationTime);
	        } else {
	          {
	            if (!isErrorRecovery && fiber.tag === ClassComponent) {
	              warnAboutUpdateOnUnmounted(fiber);
	            }
	          }
	          return;
	        }
	      }
	      node = node['return'];
	    }
	  }

	  function scheduleErrorRecovery(fiber) {
	    scheduleWorkImpl(fiber, Sync, true);
	  }

	  function recalculateCurrentTime() {
	    // Subtract initial time so it fits inside 32bits
	    var ms = now() - startTime;
	    mostRecentCurrentTime = msToExpirationTime(ms);
	    return mostRecentCurrentTime;
	  }

	  function deferredUpdates(fn) {
	    var previousExpirationContext = expirationContext;
	    expirationContext = computeAsyncExpiration();
	    try {
	      return fn();
	    } finally {
	      expirationContext = previousExpirationContext;
	    }
	  }

	  function syncUpdates(fn) {
	    var previousExpirationContext = expirationContext;
	    expirationContext = Sync;
	    try {
	      return fn();
	    } finally {
	      expirationContext = previousExpirationContext;
	    }
	  }

	  // TODO: Everything below this is written as if it has been lifted to the
	  // renderers. I'll do this in a follow-up.

	  // Linked-list of roots
	  var firstScheduledRoot = null;
	  var lastScheduledRoot = null;

	  var callbackExpirationTime = NoWork;
	  var callbackID = -1;
	  var isRendering = false;
	  var nextFlushedRoot = null;
	  var nextFlushedExpirationTime = NoWork;
	  var deadlineDidExpire = false;
	  var hasUnhandledError = false;
	  var unhandledError = null;
	  var deadline = null;

	  var isBatchingUpdates = false;
	  var isUnbatchingUpdates = false;

	  // Use these to prevent an infinite loop of nested updates
	  var NESTED_UPDATE_LIMIT = 1000;
	  var nestedUpdateCount = 0;

	  var timeHeuristicForUnitOfWork = 1;

	  function scheduleCallbackWithExpiration(expirationTime) {
	    if (callbackExpirationTime !== NoWork) {
	      // A callback is already scheduled. Check its expiration time (timeout).
	      if (expirationTime > callbackExpirationTime) {
	        // Existing callback has sufficient timeout. Exit.
	        return;
	      } else {
	        // Existing callback has insufficient timeout. Cancel and schedule a
	        // new one.
	        cancelDeferredCallback(callbackID);
	      }
	      // The request callback timer is already running. Don't start a new one.
	    } else {
	      startRequestCallbackTimer();
	    }

	    // Compute a timeout for the given expiration time.
	    var currentMs = now() - startTime;
	    var expirationMs = expirationTimeToMs(expirationTime);
	    var timeout = expirationMs - currentMs;

	    callbackExpirationTime = expirationTime;
	    callbackID = scheduleDeferredCallback(performAsyncWork, { timeout: timeout });
	  }

	  // requestWork is called by the scheduler whenever a root receives an update.
	  // It's up to the renderer to call renderRoot at some point in the future.
	  function requestWork(root, expirationTime) {
	    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	      invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
	    }

	    // Add the root to the schedule.
	    // Check if this root is already part of the schedule.
	    if (root.nextScheduledRoot === null) {
	      // This root is not already scheduled. Add it.
	      root.remainingExpirationTime = expirationTime;
	      if (lastScheduledRoot === null) {
	        firstScheduledRoot = lastScheduledRoot = root;
	        root.nextScheduledRoot = root;
	      } else {
	        lastScheduledRoot.nextScheduledRoot = root;
	        lastScheduledRoot = root;
	        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
	      }
	    } else {
	      // This root is already scheduled, but its priority may have increased.
	      var remainingExpirationTime = root.remainingExpirationTime;
	      if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {
	        // Update the priority.
	        root.remainingExpirationTime = expirationTime;
	      }
	    }

	    if (isRendering) {
	      // Prevent reentrancy. Remaining work will be scheduled at the end of
	      // the currently rendering batch.
	      return;
	    }

	    if (isBatchingUpdates) {
	      // Flush work at the end of the batch.
	      if (isUnbatchingUpdates) {
	        // ...unless we're inside unbatchedUpdates, in which case we should
	        // flush it now.
	        nextFlushedRoot = root;
	        nextFlushedExpirationTime = Sync;
	        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);
	      }
	      return;
	    }

	    // TODO: Get rid of Sync and use current time?
	    if (expirationTime === Sync) {
	      performWork(Sync, null);
	    } else {
	      scheduleCallbackWithExpiration(expirationTime);
	    }
	  }

	  function findHighestPriorityRoot() {
	    var highestPriorityWork = NoWork;
	    var highestPriorityRoot = null;

	    if (lastScheduledRoot !== null) {
	      var previousScheduledRoot = lastScheduledRoot;
	      var root = firstScheduledRoot;
	      while (root !== null) {
	        var remainingExpirationTime = root.remainingExpirationTime;
	        if (remainingExpirationTime === NoWork) {
	          // This root no longer has work. Remove it from the scheduler.

	          // TODO: This check is redudant, but Flow is confused by the branch
	          // below where we set lastScheduledRoot to null, even though we break
	          // from the loop right after.
	          !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	          if (root === root.nextScheduledRoot) {
	            // This is the only root in the list.
	            root.nextScheduledRoot = null;
	            firstScheduledRoot = lastScheduledRoot = null;
	            break;
	          } else if (root === firstScheduledRoot) {
	            // This is the first root in the list.
	            var next = root.nextScheduledRoot;
	            firstScheduledRoot = next;
	            lastScheduledRoot.nextScheduledRoot = next;
	            root.nextScheduledRoot = null;
	          } else if (root === lastScheduledRoot) {
	            // This is the last root in the list.
	            lastScheduledRoot = previousScheduledRoot;
	            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
	            root.nextScheduledRoot = null;
	            break;
	          } else {
	            previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
	            root.nextScheduledRoot = null;
	          }
	          root = previousScheduledRoot.nextScheduledRoot;
	        } else {
	          if (highestPriorityWork === NoWork || remainingExpirationTime < highestPriorityWork) {
	            // Update the priority, if it's higher
	            highestPriorityWork = remainingExpirationTime;
	            highestPriorityRoot = root;
	          }
	          if (root === lastScheduledRoot) {
	            break;
	          }
	          previousScheduledRoot = root;
	          root = root.nextScheduledRoot;
	        }
	      }
	    }

	    // If the next root is the same as the previous root, this is a nested
	    // update. To prevent an infinite loop, increment the nested update count.
	    var previousFlushedRoot = nextFlushedRoot;
	    if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot) {
	      nestedUpdateCount++;
	    } else {
	      // Reset whenever we switch roots.
	      nestedUpdateCount = 0;
	    }
	    nextFlushedRoot = highestPriorityRoot;
	    nextFlushedExpirationTime = highestPriorityWork;
	  }

	  function performAsyncWork(dl) {
	    performWork(NoWork, dl);
	  }

	  function performWork(minExpirationTime, dl) {
	    deadline = dl;

	    // Keep working on roots until there's no more work, or until the we reach
	    // the deadline.
	    findHighestPriorityRoot();

	    if (enableUserTimingAPI && deadline !== null) {
	      var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();
	      stopRequestCallbackTimer(didExpire);
	    }

	    while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire) {
	      performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);
	      // Find the next highest priority work.
	      findHighestPriorityRoot();
	    }

	    // We're done flushing work. Either we ran out of time in this callback,
	    // or there's no more work left with sufficient priority.

	    // If we're inside a callback, set this to false since we just completed it.
	    if (deadline !== null) {
	      callbackExpirationTime = NoWork;
	      callbackID = -1;
	    }
	    // If there's work left over, schedule a new callback.
	    if (nextFlushedExpirationTime !== NoWork) {
	      scheduleCallbackWithExpiration(nextFlushedExpirationTime);
	    }

	    // Clean-up.
	    deadline = null;
	    deadlineDidExpire = false;
	    nestedUpdateCount = 0;

	    if (hasUnhandledError) {
	      var _error4 = unhandledError;
	      unhandledError = null;
	      hasUnhandledError = false;
	      throw _error4;
	    }
	  }

	  function performWorkOnRoot(root, expirationTime) {
	    !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;

	    isRendering = true;

	    // Check if this is async work or sync/expired work.
	    // TODO: Pass current time as argument to renderRoot, commitRoot
	    if (expirationTime <= recalculateCurrentTime()) {
	      // Flush sync work.
	      var finishedWork = root.finishedWork;
	      if (finishedWork !== null) {
	        // This root is already complete. We can commit it.
	        root.finishedWork = null;
	        root.remainingExpirationTime = commitRoot(finishedWork);
	      } else {
	        root.finishedWork = null;
	        finishedWork = renderRoot(root, expirationTime);
	        if (finishedWork !== null) {
	          // We've completed the root. Commit it.
	          root.remainingExpirationTime = commitRoot(finishedWork);
	        }
	      }
	    } else {
	      // Flush async work.
	      var _finishedWork = root.finishedWork;
	      if (_finishedWork !== null) {
	        // This root is already complete. We can commit it.
	        root.finishedWork = null;
	        root.remainingExpirationTime = commitRoot(_finishedWork);
	      } else {
	        root.finishedWork = null;
	        _finishedWork = renderRoot(root, expirationTime);
	        if (_finishedWork !== null) {
	          // We've completed the root. Check the deadline one more time
	          // before committing.
	          if (!shouldYield()) {
	            // Still time left. Commit the root.
	            root.remainingExpirationTime = commitRoot(_finishedWork);
	          } else {
	            // There's no time left. Mark this root as complete. We'll come
	            // back and commit it later.
	            root.finishedWork = _finishedWork;
	          }
	        }
	      }
	    }

	    isRendering = false;
	  }

	  // When working on async work, the reconciler asks the renderer if it should
	  // yield execution. For DOM, we implement this with requestIdleCallback.
	  function shouldYield() {
	    if (deadline === null) {
	      return false;
	    }
	    if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
	      // Disregard deadline.didTimeout. Only expired work should be flushed
	      // during a timeout. This path is only hit for non-expired work.
	      return false;
	    }
	    deadlineDidExpire = true;
	    return true;
	  }

	  // TODO: Not happy about this hook. Conceptually, renderRoot should return a
	  // tuple of (isReadyForCommit, didError, error)
	  function onUncaughtError(error) {
	    !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
	    // Unschedule this root so we don't work on it again until there's
	    // another update.
	    nextFlushedRoot.remainingExpirationTime = NoWork;
	    if (!hasUnhandledError) {
	      hasUnhandledError = true;
	      unhandledError = error;
	    }
	  }

	  // TODO: Batching should be implemented at the renderer level, not inside
	  // the reconciler.
	  function batchedUpdates(fn, a) {
	    var previousIsBatchingUpdates = isBatchingUpdates;
	    isBatchingUpdates = true;
	    try {
	      return fn(a);
	    } finally {
	      isBatchingUpdates = previousIsBatchingUpdates;
	      if (!isBatchingUpdates && !isRendering) {
	        performWork(Sync, null);
	      }
	    }
	  }

	  // TODO: Batching should be implemented at the renderer level, not inside
	  // the reconciler.
	  function unbatchedUpdates(fn) {
	    if (isBatchingUpdates && !isUnbatchingUpdates) {
	      isUnbatchingUpdates = true;
	      try {
	        return fn();
	      } finally {
	        isUnbatchingUpdates = false;
	      }
	    }
	    return fn();
	  }

	  // TODO: Batching should be implemented at the renderer level, not within
	  // the reconciler.
	  function flushSync(fn) {
	    var previousIsBatchingUpdates = isBatchingUpdates;
	    isBatchingUpdates = true;
	    try {
	      return syncUpdates(fn);
	    } finally {
	      isBatchingUpdates = previousIsBatchingUpdates;
	      !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
	      performWork(Sync, null);
	    }
	  }

	  return {
	    computeAsyncExpiration: computeAsyncExpiration,
	    computeExpirationForFiber: computeExpirationForFiber,
	    scheduleWork: scheduleWork,
	    batchedUpdates: batchedUpdates,
	    unbatchedUpdates: unbatchedUpdates,
	    flushSync: flushSync,
	    deferredUpdates: deferredUpdates
	  };
	};

	{
	  var didWarnAboutNestedUpdates = false;
	}

	// 0 is PROD, 1 is DEV.
	// Might add PROFILE later.


	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);
	  return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;
	}

	var ReactFiberReconciler$1 = function (config) {
	  var getPublicInstance = config.getPublicInstance;

	  var _ReactFiberScheduler = ReactFiberScheduler(config),
	      computeAsyncExpiration = _ReactFiberScheduler.computeAsyncExpiration,
	      computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,
	      scheduleWork = _ReactFiberScheduler.scheduleWork,
	      batchedUpdates = _ReactFiberScheduler.batchedUpdates,
	      unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
	      flushSync = _ReactFiberScheduler.flushSync,
	      deferredUpdates = _ReactFiberScheduler.deferredUpdates;

	  function scheduleTopLevelUpdate(current, element, callback) {
	    {
	      if (ReactDebugCurrentFiber.phase === 'render' && ReactDebugCurrentFiber.current !== null && !didWarnAboutNestedUpdates) {
	        didWarnAboutNestedUpdates = true;
	        warning(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(ReactDebugCurrentFiber.current) || 'Unknown');
	      }
	    }

	    callback = callback === undefined ? null : callback;
	    {
	      warning(callback === null || typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
	    }

	    var expirationTime = void 0;
	    // Check if the top-level element is an async wrapper component. If so,
	    // treat updates to the root as async. This is a bit weird but lets us
	    // avoid a separate `renderAsync` API.
	    if (enableAsyncSubtreeAPI && element != null && element.type != null && element.type.prototype != null && element.type.prototype.unstable_isAsyncReactComponent === true) {
	      expirationTime = computeAsyncExpiration();
	    } else {
	      expirationTime = computeExpirationForFiber(current);
	    }

	    var update = {
	      expirationTime: expirationTime,
	      partialState: { element: element },
	      callback: callback,
	      isReplace: false,
	      isForced: false,
	      nextCallback: null,
	      next: null
	    };
	    insertUpdateIntoFiber(current, update);
	    scheduleWork(current, expirationTime);
	  }

	  function findHostInstance(fiber) {
	    var hostFiber = findCurrentHostFiber(fiber);
	    if (hostFiber === null) {
	      return null;
	    }
	    return hostFiber.stateNode;
	  }

	  return {
	    createContainer: function (containerInfo, hydrate) {
	      return createFiberRoot(containerInfo, hydrate);
	    },
	    updateContainer: function (element, container, parentComponent, callback) {
	      // TODO: If this is a nested container, this won't be the root.
	      var current = container.current;

	      {
	        if (ReactFiberInstrumentation_1.debugTool) {
	          if (current.alternate === null) {
	            ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
	          } else if (element === null) {
	            ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
	          } else {
	            ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
	          }
	        }
	      }

	      var context = getContextForSubtree(parentComponent);
	      if (container.context === null) {
	        container.context = context;
	      } else {
	        container.pendingContext = context;
	      }

	      scheduleTopLevelUpdate(current, element, callback);
	    },


	    batchedUpdates: batchedUpdates,

	    unbatchedUpdates: unbatchedUpdates,

	    deferredUpdates: deferredUpdates,

	    flushSync: flushSync,

	    getPublicRootInstance: function (container) {
	      var containerFiber = container.current;
	      if (!containerFiber.child) {
	        return null;
	      }
	      switch (containerFiber.child.tag) {
	        case HostComponent:
	          return getPublicInstance(containerFiber.child.stateNode);
	        default:
	          return containerFiber.child.stateNode;
	      }
	    },


	    findHostInstance: findHostInstance,

	    findHostInstanceWithNoPortals: function (fiber) {
	      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
	      if (hostFiber === null) {
	        return null;
	      }
	      return hostFiber.stateNode;
	    },
	    injectIntoDevTools: function (devToolsConfig) {
	      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;

	      return injectInternals(_assign({}, devToolsConfig, {
	        findHostInstanceByFiber: function (fiber) {
	          return findHostInstance(fiber);
	        },
	        findFiberByHostInstance: function (instance) {
	          if (!findFiberByHostInstance) {
	            // Might not be implemented by the renderer.
	            return null;
	          }
	          return findFiberByHostInstance(instance);
	        }
	      }));
	    }
	  };
	};

	var ReactFiberReconciler$2 = Object.freeze({
		default: ReactFiberReconciler$1
	});

	var ReactFiberReconciler$3 = ( ReactFiberReconciler$2 && ReactFiberReconciler$1 ) || ReactFiberReconciler$2;

	// TODO: bundle Flow types with the package.



	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.
	var reactReconciler = ReactFiberReconciler$3['default'] ? ReactFiberReconciler$3['default'] : ReactFiberReconciler$3;

	function createPortal$1(children, containerInfo,
	// TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	// TODO: this is special because it gets imported during build.

	var ReactVersion = '16.2.0';

	// a requestAnimationFrame, storing the time for the start of the frame, then
	// scheduling a postMessage which gets scheduled after paint. Within the
	// postMessage handler do as much work as possible until time + frame rate.
	// By separating the idle call into a separate event tick we ensure that
	// layout, paint and other browser work is counted against the available time.
	// The frame rate is dynamically adjusted.

	{
	  if (ExecutionEnvironment.canUseDOM && typeof requestAnimationFrame !== 'function') {
	    warning(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
	  }
	}

	var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

	var now = void 0;
	if (hasNativePerformanceNow) {
	  now = function () {
	    return performance.now();
	  };
	} else {
	  now = function () {
	    return Date.now();
	  };
	}

	// TODO: There's no way to cancel, because Fiber doesn't atm.
	var rIC = void 0;
	var cIC = void 0;

	if (!ExecutionEnvironment.canUseDOM) {
	  rIC = function (frameCallback) {
	    return setTimeout(function () {
	      frameCallback({
	        timeRemaining: function () {
	          return Infinity;
	        }
	      });
	    });
	  };
	  cIC = function (timeoutID) {
	    clearTimeout(timeoutID);
	  };
	} else if (typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {
	  // Polyfill requestIdleCallback and cancelIdleCallback

	  var scheduledRICCallback = null;
	  var isIdleScheduled = false;
	  var timeoutTime = -1;

	  var isAnimationFrameScheduled = false;

	  var frameDeadline = 0;
	  // We start out assuming that we run at 30fps but then the heuristic tracking
	  // will adjust this value to a faster fps if we get more frequent animation
	  // frames.
	  var previousFrameTime = 33;
	  var activeFrameTime = 33;

	  var frameDeadlineObject;
	  if (hasNativePerformanceNow) {
	    frameDeadlineObject = {
	      didTimeout: false,
	      timeRemaining: function () {
	        // We assume that if we have a performance timer that the rAF callback
	        // gets a performance timer value. Not sure if this is always true.
	        var remaining = frameDeadline - performance.now();
	        return remaining > 0 ? remaining : 0;
	      }
	    };
	  } else {
	    frameDeadlineObject = {
	      didTimeout: false,
	      timeRemaining: function () {
	        // Fallback to Date.now()
	        var remaining = frameDeadline - Date.now();
	        return remaining > 0 ? remaining : 0;
	      }
	    };
	  }

	  // We use the postMessage trick to defer idle work until after the repaint.
	  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);
	  var idleTick = function (event) {
	    if (event.source !== window || event.data !== messageKey) {
	      return;
	    }

	    isIdleScheduled = false;

	    var currentTime = now();
	    if (frameDeadline - currentTime <= 0) {
	      // There's no time left in this idle period. Check if the callback has
	      // a timeout and whether it's been exceeded.
	      if (timeoutTime !== -1 && timeoutTime <= currentTime) {
	        // Exceeded the timeout. Invoke the callback even though there's no
	        // time left.
	        frameDeadlineObject.didTimeout = true;
	      } else {
	        // No timeout.
	        if (!isAnimationFrameScheduled) {
	          // Schedule another animation callback so we retry later.
	          isAnimationFrameScheduled = true;
	          requestAnimationFrame(animationTick);
	        }
	        // Exit without invoking the callback.
	        return;
	      }
	    } else {
	      // There's still time left in this idle period.
	      frameDeadlineObject.didTimeout = false;
	    }

	    timeoutTime = -1;
	    var callback = scheduledRICCallback;
	    scheduledRICCallback = null;
	    if (callback !== null) {
	      callback(frameDeadlineObject);
	    }
	  };
	  // Assumes that we have addEventListener in this environment. Might need
	  // something better for old IE.
	  window.addEventListener('message', idleTick, false);

	  var animationTick = function (rafTime) {
	    isAnimationFrameScheduled = false;
	    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;
	    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
	      if (nextFrameTime < 8) {
	        // Defensive coding. We don't support higher frame rates than 120hz.
	        // If we get lower than that, it is probably a bug.
	        nextFrameTime = 8;
	      }
	      // If one frame goes long, then the next one can be short to catch up.
	      // If two frames are short in a row, then that's an indication that we
	      // actually have a higher frame rate than what we're currently optimizing.
	      // We adjust our heuristic dynamically accordingly. For example, if we're
	      // running on 120hz display or 90hz VR display.
	      // Take the max of the two in case one of them was an anomaly due to
	      // missed frame deadlines.
	      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
	    } else {
	      previousFrameTime = nextFrameTime;
	    }
	    frameDeadline = rafTime + activeFrameTime;
	    if (!isIdleScheduled) {
	      isIdleScheduled = true;
	      window.postMessage(messageKey, '*');
	    }
	  };

	  rIC = function (callback, options) {
	    // This assumes that we only schedule one callback at a time because that's
	    // how Fiber uses it.
	    scheduledRICCallback = callback;
	    if (options != null && typeof options.timeout === 'number') {
	      timeoutTime = now() + options.timeout;
	    }
	    if (!isAnimationFrameScheduled) {
	      // If rAF didn't already schedule one, we need to schedule a frame.
	      // TODO: If this rAF doesn't materialize because the browser throttles, we
	      // might want to still have setTimeout trigger rIC as a backup to ensure
	      // that we keep performing work.
	      isAnimationFrameScheduled = true;
	      requestAnimationFrame(animationTick);
	    }
	    return 0;
	  };

	  cIC = function () {
	    scheduledRICCallback = null;
	    isIdleScheduled = false;
	    timeoutTime = -1;
	  };
	} else {
	  rIC = window.requestIdleCallback;
	  cIC = window.cancelIdleCallback;
	}

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var lowPriorityWarning = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarning$1 = lowPriorityWarning;

	// isAttributeNameSafe() is currently duplicated in DOMMarkupOperations.
	// TODO: Find a better place for this.
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  {
	    warning(false, 'Invalid attribute name: `%s`', attributeName);
	  }
	  return false;
	}

	// shouldIgnoreValue() is currently duplicated in DOMMarkupOperations.
	// TODO: Find a better place for this.
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	/**
	 * Operations for dealing with DOM properties.
	 */





	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected) {
	  {
	    var propertyInfo = getPropertyInfo(name);
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod || propertyInfo.mustUseProperty) {
	        return node[propertyInfo.propertyName];
	      } else {
	        var attributeName = propertyInfo.attributeName;

	        var stringValue = null;

	        if (propertyInfo.hasOverloadedBooleanValue) {
	          if (node.hasAttribute(attributeName)) {
	            var value = node.getAttribute(attributeName);
	            if (value === '') {
	              return true;
	            }
	            if (shouldIgnoreValue(propertyInfo, expected)) {
	              return value;
	            }
	            if (value === '' + expected) {
	              return expected;
	            }
	            return value;
	          }
	        } else if (node.hasAttribute(attributeName)) {
	          if (shouldIgnoreValue(propertyInfo, expected)) {
	            // We had an attribute but shouldn't have had one, so read it
	            // for the error message.
	            return node.getAttribute(attributeName);
	          }
	          if (propertyInfo.hasBooleanValue) {
	            // If this was a boolean, it doesn't matter what the value is
	            // the fact that we have it is the same as the expected.
	            return expected;
	          }
	          // Even if this property uses a namespace we use getAttribute
	          // because we assume its namespaced name is the same as our config.
	          // To use getAttributeNS we need the local name which we don't have
	          // in our config atm.
	          stringValue = node.getAttribute(attributeName);
	        }

	        if (shouldIgnoreValue(propertyInfo, expected)) {
	          return stringValue === null ? expected : stringValue;
	        } else if (stringValue === '' + expected) {
	          return expected;
	        } else {
	          return stringValue;
	        }
	      }
	    }
	  }
	}

	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */
	function getValueForAttribute(node, name, expected) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }
	    var value = node.getAttribute(name);
	    if (value === '' + expected) {
	      return expected;
	    }
	    return value;
	  }
	}

	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */
	function setValueForProperty(node, name, value) {
	  var propertyInfo = getPropertyInfo(name);

	  if (propertyInfo && shouldSetAttribute(name, value)) {
	    var mutationMethod = propertyInfo.mutationMethod;
	    if (mutationMethod) {
	      mutationMethod(node, value);
	    } else if (shouldIgnoreValue(propertyInfo, value)) {
	      deleteValueForProperty(node, name);
	      return;
	    } else if (propertyInfo.mustUseProperty) {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyInfo.propertyName] = value;
	    } else {
	      var attributeName = propertyInfo.attributeName;
	      var namespace = propertyInfo.attributeNamespace;
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      if (namespace) {
	        node.setAttributeNS(namespace, attributeName, '' + value);
	      } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        node.setAttribute(attributeName, '');
	      } else {
	        node.setAttribute(attributeName, '' + value);
	      }
	    }
	  } else {
	    setValueForAttribute(node, name, shouldSetAttribute(name, value) ? value : null);
	    return;
	  }
	}

	function setValueForAttribute(node, name, value) {
	  if (!isAttributeNameSafe(name)) {
	    return;
	  }
	  if (value == null) {
	    node.removeAttribute(name);
	  } else {
	    node.setAttribute(name, '' + value);
	  }
	}

	/**
	 * Deletes an attributes from a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 */
	function deleteValueForAttribute(node, name) {
	  node.removeAttribute(name);
	}

	/**
	 * Deletes the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 */
	function deleteValueForProperty(node, name) {
	  var propertyInfo = getPropertyInfo(name);
	  if (propertyInfo) {
	    var mutationMethod = propertyInfo.mutationMethod;
	    if (mutationMethod) {
	      mutationMethod(node, undefined);
	    } else if (propertyInfo.mustUseProperty) {
	      var propName = propertyInfo.propertyName;
	      if (propertyInfo.hasBooleanValue) {
	        node[propName] = false;
	      } else {
	        node[propName] = '';
	      }
	    } else {
	      node.removeAttribute(propertyInfo.attributeName);
	    }
	  } else {
	    node.removeAttribute(name);
	  }
	}

	var ReactControlledValuePropTypes = {
	  checkPropTypes: null
	};

	{
	  var hasReadOnlyValue = {
	    button: true,
	    checkbox: true,
	    image: true,
	    hidden: true,
	    radio: true,
	    reset: true,
	    submit: true
	  };

	  var propTypes = {
	    value: function (props, propName, componentName) {
	      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	        return null;
	      }
	      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    },
	    checked: function (props, propName, componentName) {
	      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	        return null;
	      }
	      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  };

	  /**
	   * Provide a linked `value` attribute for controlled forms. You should not use
	   * this outside of the ReactDOM controlled form components.
	   */
	  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {
	    checkPropTypes(propTypes, props, 'prop', tagName, getStack);
	  };
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var getCurrentFiberOwnerName$2 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
	var getCurrentFiberStackAddendum$3 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}

	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */

	function getHostProps(element, props) {
	  var node = element;
	  var value = props.value;
	  var checked = props.checked;

	  var hostProps = _assign({
	    // Make sure we set .type before any other properties (setting .value
	    // before .type means .value is lost in IE11 and below)
	    type: undefined,
	    // Make sure we set .step before .value (setting .value before .step
	    // means .value is rounded on mount, based upon step precision)
	    step: undefined,
	    // Make sure we set .min & .max before .value (to ensure proper order
	    // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	    min: undefined,
	    max: undefined
	  }, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: value != null ? value : node._wrapperState.initialValue,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });

	  return hostProps;
	}

	function initWrapperState(element, props) {
	  {
	    ReactControlledValuePropTypes.checkPropTypes('input', props, getCurrentFiberStackAddendum$3);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);
	      didWarnCheckedDefaultChecked = true;
	    }
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName$2() || 'A component', props.type);
	      didWarnValueDefaultValue = true;
	    }
	  }

	  var defaultValue = props.defaultValue;
	  var node = element;
	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: props.value != null ? props.value : defaultValue,
	    controlled: isControlled(props)
	  };
	}

	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;
	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked);
	  }
	}

	function updateWrapper(element, props) {
	  var node = element;
	  {
	    var controlled = isControlled(props);

	    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	      warning(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());
	      didWarnUncontrolledToControlled = true;
	    }
	    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	      warning(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum$3());
	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);

	  var value = props.value;
	  if (value != null) {
	    if (value === 0 && node.value === '') {
	      node.value = '0';
	      // Note: IE9 reports a number inputs as 'text', so check props instead.
	    } else if (props.type === 'number') {
	      // Simulate `input.valueAsNumber`. IE9 does not support it
	      var valueAsNumber = parseFloat(node.value) || 0;

	      if (
	      // eslint-disable-next-line
	      value != valueAsNumber ||
	      // eslint-disable-next-line
	      value == valueAsNumber && node.value != value) {
	        // Cast `value` to a string to ensure the value is set correctly. While
	        // browsers typically do this as necessary, jsdom doesn't.
	        node.value = '' + value;
	      }
	    } else if (node.value !== '' + value) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      node.value = '' + value;
	    }
	  } else {
	    if (props.value == null && props.defaultValue != null) {
	      // In Chrome, assigning defaultValue to certain input types triggers input validation.
	      // For number inputs, the display value loses trailing decimal points. For email inputs,
	      // Chrome raises "The specified value <x> is not a valid email address".
	      //
	      // Here we check to see if the defaultValue has actually changed, avoiding these problems
	      // when the user is inputting text
	      //
	      // https://github.com/facebook/react/issues/7253
	      if (node.defaultValue !== '' + props.defaultValue) {
	        node.defaultValue = '' + props.defaultValue;
	      }
	    }
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}

	function postMountWrapper(element, props) {
	  var node = element;

	  // Detach value from defaultValue. We won't do anything if we're working on
	  // submit or reset inputs as those values & defaultValues are linked. They
	  // are not resetable nodes so this operation doesn't matter and actually
	  // removes browser-default values (eg "Submit Query") when no value is
	  // provided.

	  switch (props.type) {
	    case 'submit':
	    case 'reset':
	      break;
	    case 'color':
	    case 'date':
	    case 'datetime':
	    case 'datetime-local':
	    case 'month':
	    case 'time':
	    case 'week':
	      // This fixes the no-show issue on iOS Safari and Android Chrome:
	      // https://github.com/facebook/react/issues/7233
	      node.value = '';
	      node.value = node.defaultValue;
	      break;
	    default:
	      node.value = node.value;
	      break;
	  }

	  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.
	  var name = node.name;
	  if (name !== '') {
	    node.name = '';
	  }
	  node.defaultChecked = !node.defaultChecked;
	  node.defaultChecked = !node.defaultChecked;
	  if (name !== '') {
	    node.name = name;
	  }
	}

	function restoreControlledState$1(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
	      !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0;

	      // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set
	      updateValueIfChanged(otherNode);

	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      updateWrapper(otherNode, otherProps);
	    }
	  }
	}

	function flattenChildren(children) {
	  var content = '';

	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  // We can silently skip them because invalid DOM nesting warning
	  // catches these cases in Fiber.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    }
	  });

	  return content;
	}

	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */

	function validateProps(element, props) {
	  // TODO (yungsters): Remove support for `selected` in <option>.
	  {
	    warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
	  }
	}

	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', props.value);
	  }
	}

	function getHostProps$1(element, props) {
	  var hostProps = _assign({ children: undefined }, props);
	  var content = flattenChildren(props.children);

	  if (content) {
	    hostProps.children = content;
	  }

	  return hostProps;
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var getCurrentFiberOwnerName$3 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
	var getCurrentFiberStackAddendum$4 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;


	{
	  var didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerName$3();
	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 */
	function checkSelectPropTypes(props) {
	  ReactControlledValuePropTypes.checkPropTypes('select', props, getCurrentFiberStackAddendum$4);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	    } else if (!props.multiple && isArray) {
	      warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};
	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }
	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }
	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = '' + propValue;
	    var defaultSelected = null;
	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;
	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }
	        return;
	      }
	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }
	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */

	function getHostProps$2(element, props) {
	  return _assign({}, props, {
	    value: undefined
	  });
	}

	function initWrapperState$1(element, props) {
	  var node = element;
	  {
	    checkSelectPropTypes(props);
	  }

	  var value = props.value;
	  node._wrapperState = {
	    initialValue: value != null ? value : props.defaultValue,
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}

	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;
	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}

	function postUpdateWrapper(element, props) {
	  var node = element;
	  // After the initial mount, we control selected-ness manually so don't pass
	  // this value down
	  node._wrapperState.initialValue = undefined;

	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;

	  var value = props.value;
	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}

	function restoreControlledState$2(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var getCurrentFiberStackAddendum$5 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */

	function getHostProps$3(element, props) {
	  var node = element;
	  !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0;

	  // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.
	  var hostProps = _assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: '' + node._wrapperState.initialValue
	  });

	  return hostProps;
	}

	function initWrapperState$2(element, props) {
	  var node = element;
	  {
	    ReactControlledValuePropTypes.checkPropTypes('textarea', props, getCurrentFiberStackAddendum$5);
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value;

	  // Only bother fetching default value if we're going to use it
	  if (initialValue == null) {
	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      {
	        warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }
	      !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: '' + initialValue
	  };
	}

	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = props.value;
	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = '' + value;

	    // To avoid side effects (such as losing text selection), only set value if changed
	    if (newValue !== node.value) {
	      node.value = newValue;
	    }
	    if (props.defaultValue == null) {
	      node.defaultValue = newValue;
	    }
	  }
	  if (props.defaultValue != null) {
	    node.defaultValue = props.defaultValue;
	  }
	}

	function postMountWrapper$3(element, props) {
	  var node = element;
	  // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.
	  var textContent = node.textContent;

	  // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	  if (textContent === node._wrapperState.initialValue) {
	    node.value = textContent;
	  }
	}

	function restoreControlledState$3(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';

	var Namespaces = {
	  html: HTML_NAMESPACE$1,
	  mathml: MATH_NAMESPACE,
	  svg: SVG_NAMESPACE
	};

	// Assumes there is no parent namespace.
	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;
	    case 'math':
	      return MATH_NAMESPACE;
	    default:
	      return HTML_NAMESPACE$1;
	  }
	}

	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }
	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE$1;
	  }
	  // By default, pass namespace below.
	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer = void 0;

	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node

	  if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (node.firstChild) {
	      node.removeChild(node.firstChild);
	    }
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  return ('' + value).trim();
	}

	var warnValidStyle = emptyFunction;

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var warnHyphenatedStyleName = function (name, getStack) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), getStack());
	  };

	  var warnBadVendoredStyleName = function (name, getStack) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), getStack());
	  };

	  var warnStyleValueWithSemicolon = function (name, value, getStack) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    warning(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.%s', name, value.replace(badStyleValueWithSemicolonPattern, ''), getStack());
	  };

	  var warnStyleValueIsNaN = function (name, value, getStack) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;
	    warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, getStack());
	  };

	  var warnStyleValueIsInfinity = function (name, value, getStack) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;
	    warning(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, getStack());
	  };

	  warnValidStyle = function (name, value, getStack) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, getStack);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, getStack);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, getStack);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value, getStack);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value, getStack);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */
	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + hyphenateStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);

	        delimiter = ';';
	      }
	    }
	    return serialized || null;
	  }
	}

	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */
	function setValueForStyles(node, styles, getStack) {
	  var style = node.style;
	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }
	    var isCustomProperty = styleName.indexOf('--') === 0;
	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName], getStack);
	      }
	    }
	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }
	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.

	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);

	var HTML$1 = '__html';

	function assertValidProps(tag, props, getStack) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, getStack()) : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
	  }
	  {
	    warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.%s', getStack());
	  }
	  !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getStack()) : void 0;
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }
	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this whitelist too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;
	    default:
	      return true;
	  }
	}

	var ariaProperties = {
	  'aria-current': 0, // state
	  'aria-details': 0,
	  'aria-disabled': 0, // state
	  'aria-hidden': 0, // state
	  'aria-invalid': 0, // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function getStackAddendum() {
	  var stack = ReactDebugCurrentFrame.getStackAddendum();
	  return stack != null ? stack : '';
	}

	function validateProperty(tagName, name) {
	  if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
	    return true;
	  }

	  if (rARIACamel.test(name)) {
	    var ariaName = 'aria-' + name.slice(4).toLowerCase();
	    var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (correctName == null) {
	      warning(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum());
	      warnedProperties[name] = true;
	      return true;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== correctName) {
	      warning(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum());
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;

	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      warning(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum());
	      warnedProperties[name] = true;
	      return true;
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  var invalidProps = [];

	  for (var key in props) {
	    var isValid = validateProperty(type, key);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }

	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');

	  if (invalidProps.length === 1) {
	    warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
	  } else if (invalidProps.length > 1) {
	    warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }
	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;

	function getStackAddendum$1() {
	  var stack = ReactDebugCurrentFrame.getStackAddendum();
	  return stack != null ? stack : '';
	}

	function validateProperties$1(type, props) {
	  if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	    return;
	  }

	  if (props != null && props.value === null && !didWarnValueNull) {
	    didWarnValueNull = true;
	    if (type === 'select' && props.multiple) {
	      warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.%s', type, getStackAddendum$1());
	    } else {
	      warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum$1());
	    }
	  }
	}

	// When adding attributes to the HTML or SVG whitelist, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  'class': 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  'default': 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  'for': 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',

	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  'in': 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  'typeof': 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	function getStackAddendum$2() {
	  var stack = ReactDebugCurrentFrame.getStackAddendum();
	  return stack != null ? stack : '';
	}

	{
	  var warnedProperties$1 = {};
	  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  var validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
	    if (hasOwnProperty$1.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();
	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      warning(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // We can't rely on the event system being injected on the server.
	    if (canUseEventSystem) {
	      if (registrationNameModules.hasOwnProperty(name)) {
	        return true;
	      }
	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
	      if (registrationName != null) {
	        warning(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum$2());
	        warnedProperties$1[name] = true;
	        return true;
	      }
	      if (EVENT_NAME_REGEX.test(name)) {
	        warning(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum$2());
	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        warning(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.%s', name, getStackAddendum$2());
	      }
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // Let the ARIA attribute hook validate ARIA attributes
	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      warning(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      warning(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      warning(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value, getStackAddendum$2());
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      warning(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum$2());
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var isReserved = isReservedProp(name);

	    // Known attributes should match the casing specified in the property config.
	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];
	      if (standardName !== name) {
	        warning(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum$2());
	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      warning(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum$2());
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && !shouldAttributeAcceptBooleanValue(name)) {
	      if (value) {
	        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.%s', value, name, name, value, name, getStackAddendum$2());
	      } else {
	        warning(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', value, name, name, value, name, name, name, getStackAddendum$2());
	      }
	      warnedProperties$1[name] = true;
	      return true;
	    }

	    // Now that we've validated casing, do not validate
	    // data types for reserved props
	    if (isReserved) {
	      return true;
	    }

	    // Warn when a known attribute is a bad type
	    if (!shouldSetAttribute(name, value)) {
	      warnedProperties$1[name] = true;
	      return false;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, canUseEventSystem) {
	  var unknownProps = [];
	  for (var key in props) {
	    var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }

	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	  if (unknownProps.length === 1) {
	    warning(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
	  } else if (unknownProps.length > 1) {
	    warning(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum$2());
	  }
	};

	function validateProperties$2(type, props, canUseEventSystem) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }
	  warnUnknownProperties(type, props, canUseEventSystem);
	}

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var getCurrentFiberOwnerName$1 = ReactDebugCurrentFiber.getCurrentFiberOwnerName;
	var getCurrentFiberStackAddendum$2 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

	var didWarnInvalidHydration = false;
	var didWarnShadyDOM = false;

	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE = 'style';
	var HTML = '__html';

	var HTML_NAMESPACE = Namespaces.html;


	var getStack = emptyFunction.thatReturns('');

	{
	  getStack = getCurrentFiberStackAddendum$2;

	  var warnedUnknownTags = {
	    // Chrome is the only major browser not shipping <time>. But as of July
	    // 2017 it intends to ship it due to widespread usage. We intentionally
	    // *don't* warn for <time> even if it's unrecognized by Chrome because
	    // it soon will be, and many apps have been using it anyway.
	    time: true,
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true
	  };

	  var validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props, /* canUseEventSystem */true);
	  };

	  // HTML parsing normalizes CR and CRLF to LF.
	  // It also can turn \u0000 into \uFFFD inside attributes.
	  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	  // If we have a mismatch, it might be caused by that.
	  // We will still patch up in this case but not fire the warning.
	  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	  var normalizeMarkupForTextOrAttribute = function (markup) {
	    var markupString = typeof markup === 'string' ? markup : '' + markup;
	    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	  };

	  var warnForTextDifference = function (serverText, clientText) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
	    if (normalizedServerText === normalizedClientText) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warning(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	  };

	  var warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warning(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  var warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });
	    warning(false, 'Extra attributes from the server: %s', names);
	  };

	  var warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      warning(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', registrationName, registrationName, registrationName, getCurrentFiberStackAddendum$2());
	    } else {
	      warning(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener, getCurrentFiberStackAddendum$2());
	    }
	  };

	  // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.
	  var normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	}

	function ensureListeningTo(rootContainerElement, registrationName) {
	  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
	  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
	  listenTo(registrationName, doc);
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = emptyFunction;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }
	    var nextProp = nextProps[propKey];
	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }
	      // Relies on `updateStylesByID` not mutating `styleUpdates`.
	      setValueForStyles(domElement, nextProp, getStack);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML] : undefined;
	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';
	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
	      // Noop
	    } else if (propKey === AUTOFOCUS) {
	      // We polyfill it separately on the client during commit.
	      // We blacklist it here rather than in the property list because we emit it in SSR.
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if (true && typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else if (isCustomComponentTag) {
	      setValueForAttribute(domElement, propKey, nextProp);
	    } else if (nextProp != null) {
	      // If we're updating to null or undefined, we should remove the property
	      // from the DOM node instead of inadvertently setting to a string. This
	      // brings us in line with the same behavior we have on initial render.
	      setValueForProperty(domElement, propKey, nextProp);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];
	    if (propKey === STYLE) {
	      setValueForStyles(domElement, propValue, getStack);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else if (isCustomComponentTag) {
	      if (propValue != null) {
	        setValueForAttribute(domElement, propKey, propValue);
	      } else {
	        deleteValueForAttribute(domElement, propKey);
	      }
	    } else if (propValue != null) {
	      setValueForProperty(domElement, propKey, propValue);
	    } else {
	      // If we're updating to null or undefined, we should remove the property
	      // from the DOM node instead of inadvertently setting to a string. This
	      // brings us in line with the same behavior we have on initial render.
	      deleteValueForProperty(domElement, propKey);
	    }
	  }
	}

	function createElement$1(type, props, rootContainerElement, parentNamespace) {
	  // We create tags in the namespace of their parent container, except HTML
	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement;
	  var namespaceURI = parentNamespace;
	  if (namespaceURI === HTML_NAMESPACE) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }
	  if (namespaceURI === HTML_NAMESPACE) {
	    {
	      var isCustomComponentTag = isCustomComponent(type, props);
	      // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.
	      warning(isCustomComponentTag || type === type.toLowerCase(), '<%s /> is using uppercase HTML. Always use lowercase HTML tags ' + 'in React.', type);
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');
	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.
	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, { is: props.is });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type);
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;
	        warning(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}

	function createTextNode$1(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}

	function setInitialProperties$1(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);
	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
	      warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');
	      didWarnShadyDOM = true;
	    }
	  }

	  // TODO: Make sure that we check isMounted before firing any of these events.
	  var props;
	  switch (tag) {
	    case 'iframe':
	    case 'object':
	      trapBubbledEvent('topLoad', 'load', domElement);
	      props = rawProps;
	      break;
	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          trapBubbledEvent(event, mediaEvents[event], domElement);
	        }
	      }
	      props = rawProps;
	      break;
	    case 'source':
	      trapBubbledEvent('topError', 'error', domElement);
	      props = rawProps;
	      break;
	    case 'img':
	    case 'image':
	      trapBubbledEvent('topError', 'error', domElement);
	      trapBubbledEvent('topLoad', 'load', domElement);
	      props = rawProps;
	      break;
	    case 'form':
	      trapBubbledEvent('topReset', 'reset', domElement);
	      trapBubbledEvent('topSubmit', 'submit', domElement);
	      props = rawProps;
	      break;
	    case 'details':
	      trapBubbledEvent('topToggle', 'toggle', domElement);
	      props = rawProps;
	      break;
	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps);
	      trapBubbledEvent('topInvalid', 'invalid', domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'option':
	      validateProps(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps);
	      break;
	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps);
	      trapBubbledEvent('topInvalid', 'invalid', domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$3(domElement, rawProps);
	      trapBubbledEvent('topInvalid', 'invalid', domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props, getStack);

	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps);
	      break;
	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement, rawProps);
	      break;
	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;
	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;
	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }
	}

	// Calculate the diff between the two objects.
	function diffProperties$1(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;

	  var lastProps;
	  var nextProps;
	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'option':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'select':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    case 'textarea':
	      lastProps = getHostProps$3(domElement, lastRawProps);
	      nextProps = getHostProps$3(domElement, nextRawProps);
	      updatePayload = [];
	      break;
	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;
	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }

	  assertValidProps(tag, nextProps, getStack);

	  var propKey;
	  var styleName;
	  var styleUpdates = null;
	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }
	    if (propKey === STYLE) {
	      var lastStyle = lastProps[propKey];
	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }
	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {
	      // Noop. This is handled by the clear text mechanism.
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
	      // Noop
	    } else if (propKey === AUTOFOCUS) {
	      // Noop. It doesn't work on updates anyway.
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the whitelist in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }
	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;
	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }
	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }
	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }
	            styleUpdates[styleName] = '';
	          }
	        }
	        // Update styles that changed since `lastProp`.
	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }
	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }
	          updatePayload.push(propKey, styleUpdates);
	        }
	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML] : undefined;
	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
	        }
	      } else {
	        // TODO: It might be too late to clear this if we have children
	        // inserted already.
	      }
	    } else if (propKey === CHILDREN) {
	      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {
	      // Noop
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if (true && typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the whitelist during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }
	  if (styleUpdates) {
	    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
	  }
	  return updatePayload;
	}

	// Apply the diff.
	function updateProperties$1(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
	  // Apply the diff.
	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);

	  // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.
	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;
	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;
	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function diffHydratedProperties$1(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
	  {
	    var suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
	    var isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
	      warning(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName$1() || 'A component');
	      didWarnShadyDOM = true;
	    }
	  }

	  // TODO: Make sure that we check isMounted before firing any of these events.
	  switch (tag) {
	    case 'iframe':
	    case 'object':
	      trapBubbledEvent('topLoad', 'load', domElement);
	      break;
	    case 'video':
	    case 'audio':
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          trapBubbledEvent(event, mediaEvents[event], domElement);
	        }
	      }
	      break;
	    case 'source':
	      trapBubbledEvent('topError', 'error', domElement);
	      break;
	    case 'img':
	    case 'image':
	      trapBubbledEvent('topError', 'error', domElement);
	      trapBubbledEvent('topLoad', 'load', domElement);
	      break;
	    case 'form':
	      trapBubbledEvent('topReset', 'reset', domElement);
	      trapBubbledEvent('topSubmit', 'submit', domElement);
	      break;
	    case 'details':
	      trapBubbledEvent('topToggle', 'toggle', domElement);
	      break;
	    case 'input':
	      initWrapperState(domElement, rawProps);
	      trapBubbledEvent('topInvalid', 'invalid', domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'option':
	      validateProps(domElement, rawProps);
	      break;
	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      trapBubbledEvent('topInvalid', 'invalid', domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      trapBubbledEvent('topInvalid', 'invalid', domElement);
	      // For controlled components we always need to ensure we're listening
	      // to onChange. Even if there is no listener.
	      ensureListeningTo(rootContainerElement, 'onChange');
	      break;
	  }

	  assertValidProps(tag, rawProps, getStack);

	  {
	    var extraAttributeNames = new Set();
	    var attributes = domElement.attributes;
	    for (var i = 0; i < attributes.length; i++) {
	      var name = attributes[i].name.toLowerCase();
	      switch (name) {
	        // Built-in SSR attribute is whitelisted
	        case 'data-reactroot':
	          break;
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.
	        case 'value':
	          break;
	        case 'checked':
	          break;
	        case 'selected':
	          break;
	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[i].name);
	      }
	    }
	  }

	  var updatePayload = null;
	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }
	    var nextProp = rawProps[propKey];
	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if (true && !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }
	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if (true && !suppressHydrationWarning) {
	            warnForTextDifference(domElement.textContent, nextProp);
	          }
	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameModules.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if (true && typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }
	        ensureListeningTo(rootContainerElement, propKey);
	      }
	    } else {
	      // Validate that the properties correspond to their expected values.
	      var serverValue;
	      var propertyInfo;
	      if (suppressHydrationWarning) {
	        // Don't bother comparing. We're ignoring all these warnings.
	      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 ||
	      // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {
	        // Noop
	      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var rawHtml = nextProp ? nextProp[HTML] || '' : '';
	        var serverHTML = domElement.innerHTML;
	        var expectedHTML = normalizeHTML(domElement, rawHtml);
	        if (expectedHTML !== serverHTML) {
	          warnForPropDifference(propKey, serverHTML, expectedHTML);
	        }
	      } else if (propKey === STYLE) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames['delete'](propKey);
	        var expectedStyle = createDangerousStringForStyles(nextProp);
	        serverValue = domElement.getAttribute('style');
	        if (expectedStyle !== serverValue) {
	          warnForPropDifference(propKey, serverValue, expectedStyle);
	        }
	      } else if (isCustomComponentTag) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames['delete'](propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (shouldSetAttribute(propKey, nextProp)) {
	        if (propertyInfo = getPropertyInfo(propKey)) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames['delete'](propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp);
	        } else {
	          var ownNamespace = parentNamespace;
	          if (ownNamespace === HTML_NAMESPACE) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }
	          if (ownNamespace === HTML_NAMESPACE) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames['delete'](propKey.toLowerCase());
	          } else {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames['delete'](propKey);
	          }
	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    // $FlowFixMe - Should be inferred as not undefined.
	    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
	      // $FlowFixMe - Should be inferred as not undefined.
	      warnForExtraAttributes(extraAttributeNames);
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps);
	      break;
	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement, rawProps);
	      break;
	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;
	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }
	      break;
	  }

	  return updatePayload;
	}

	function diffHydratedText$1(textNode, text) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}

	function warnForUnmatchedText$1(textNode, text) {
	  {
	    warnForTextDifference(textNode.nodeValue, text);
	  }
	}

	function warnForDeletedHydratableElement$1(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warning(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForDeletedHydratableText$1(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warning(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForInsertedHydratedElement$1(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warning(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}

	function warnForInsertedHydratedText$1(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }
	    if (didWarnInvalidHydration) {
	      return;
	    }
	    didWarnInvalidHydration = true;
	    warning(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}

	function restoreControlledState(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState$1(domElement, props);
	      return;
	    case 'textarea':
	      restoreControlledState$3(domElement, props);
	      return;
	    case 'select':
	      restoreControlledState$2(domElement, props);
	      return;
	  }
	}

	var ReactDOMFiberComponent = Object.freeze({
		createElement: createElement$1,
		createTextNode: createTextNode$1,
		setInitialProperties: setInitialProperties$1,
		diffProperties: diffProperties$1,
		updateProperties: updateProperties$1,
		diffHydratedProperties: diffHydratedProperties$1,
		diffHydratedText: diffHydratedText$1,
		warnForUnmatchedText: warnForUnmatchedText$1,
		warnForDeletedHydratableElement: warnForDeletedHydratableElement$1,
		warnForDeletedHydratableText: warnForDeletedHydratableText$1,
		warnForInsertedHydratedElement: warnForInsertedHydratedElement$1,
		warnForInsertedHydratedText: warnForInsertedHydratedText$1,
		restoreControlledState: restoreControlledState
	});

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var getCurrentFiberStackAddendum$6 = ReactDebugCurrentFiber.getCurrentFiberStackAddendum;

	var validateDOMNesting = emptyFunction;

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    current: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo$1 = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null');
	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;
	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var addendum = getCurrentFiberStackAddendum$6();

	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;
	    if (didWarn[warnKey]) {
	      return;
	    }
	    didWarn[warnKey] = true;

	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';
	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';
	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	      }
	      warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
	    } else {
	      warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
	    }
	  };

	  // TODO: turn this into a named export
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo$1;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	var validateDOMNesting$1 = validateDOMNesting;

	// TODO: direct imports like some-package/src/* are bad. Fix me.
	var createElement = createElement$1;
	var createTextNode = createTextNode$1;
	var setInitialProperties = setInitialProperties$1;
	var diffProperties = diffProperties$1;
	var updateProperties = updateProperties$1;
	var diffHydratedProperties = diffHydratedProperties$1;
	var diffHydratedText = diffHydratedText$1;
	var warnForUnmatchedText = warnForUnmatchedText$1;
	var warnForDeletedHydratableElement = warnForDeletedHydratableElement$1;
	var warnForDeletedHydratableText = warnForDeletedHydratableText$1;
	var warnForInsertedHydratedElement = warnForInsertedHydratedElement$1;
	var warnForInsertedHydratedText = warnForInsertedHydratedText$1;
	var updatedAncestorInfo = validateDOMNesting$1.updatedAncestorInfo;
	var precacheFiberNode = precacheFiberNode$1;
	var updateFiberProps = updateFiberProps$1;


	{
	  var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	  if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    warning(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. http://fb.me/react-polyfills');
	  }
	}

	injection$3.injectFiberControlledHostComponent(ReactDOMFiberComponent);

	var eventsEnabled = null;
	var selectionInformation = null;

	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function shouldHydrateDueToLegacyHeuristic(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
	}

	function shouldAutoFocusHostComponent(type, props) {
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;
	  }
	  return false;
	}

	var DOMRenderer = reactReconciler({
	  getRootHostContext: function (rootContainerInstance) {
	    var type = void 0;
	    var namespace = void 0;
	    var nodeType = rootContainerInstance.nodeType;
	    switch (nodeType) {
	      case DOCUMENT_NODE:
	      case DOCUMENT_FRAGMENT_NODE:
	        {
	          type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	          var root = rootContainerInstance.documentElement;
	          namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	          break;
	        }
	      default:
	        {
	          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	          var ownNamespace = container.namespaceURI || null;
	          type = container.tagName;
	          namespace = getChildNamespace(ownNamespace, type);
	          break;
	        }
	    }
	    {
	      var validatedTag = type.toLowerCase();
	      var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);
	      return { namespace: namespace, ancestorInfo: _ancestorInfo };
	    }
	    return namespace;
	  },
	  getChildHostContext: function (parentHostContext, type) {
	    {
	      var parentHostContextDev = parentHostContext;
	      var _namespace = getChildNamespace(parentHostContextDev.namespace, type);
	      var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);
	      return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };
	    }
	    var parentNamespace = parentHostContext;
	    return getChildNamespace(parentNamespace, type);
	  },
	  getPublicInstance: function (instance) {
	    return instance;
	  },
	  prepareForCommit: function () {
	    eventsEnabled = isEnabled();
	    selectionInformation = getSelectionInformation();
	    setEnabled(false);
	  },
	  resetAfterCommit: function () {
	    restoreSelection(selectionInformation);
	    selectionInformation = null;
	    setEnabled(eventsEnabled);
	    eventsEnabled = null;
	  },
	  createInstance: function (type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	    var parentNamespace = void 0;
	    {
	      // TODO: take namespace into account when validating.
	      var hostContextDev = hostContext;
	      validateDOMNesting$1(type, null, hostContextDev.ancestorInfo);
	      if (typeof props.children === 'string' || typeof props.children === 'number') {
	        var string = '' + props.children;
	        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
	        validateDOMNesting$1(null, string, ownAncestorInfo);
	      }
	      parentNamespace = hostContextDev.namespace;
	    }
	    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	    precacheFiberNode(internalInstanceHandle, domElement);
	    updateFiberProps(domElement, props);
	    return domElement;
	  },
	  appendInitialChild: function (parentInstance, child) {
	    parentInstance.appendChild(child);
	  },
	  finalizeInitialChildren: function (domElement, type, props, rootContainerInstance) {
	    setInitialProperties(domElement, type, props, rootContainerInstance);
	    return shouldAutoFocusHostComponent(type, props);
	  },
	  prepareUpdate: function (domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	    {
	      var hostContextDev = hostContext;
	      if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	        var string = '' + newProps.children;
	        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);
	        validateDOMNesting$1(null, string, ownAncestorInfo);
	      }
	    }
	    return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
	  },
	  shouldSetTextContent: function (type, props) {
	    return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';
	  },
	  shouldDeprioritizeSubtree: function (type, props) {
	    return !!props.hidden;
	  },
	  createTextInstance: function (text, rootContainerInstance, hostContext, internalInstanceHandle) {
	    {
	      var hostContextDev = hostContext;
	      validateDOMNesting$1(null, text, hostContextDev.ancestorInfo);
	    }
	    var textNode = createTextNode(text, rootContainerInstance);
	    precacheFiberNode(internalInstanceHandle, textNode);
	    return textNode;
	  },


	  now: now,

	  mutation: {
	    commitMount: function (domElement, type, newProps, internalInstanceHandle) {
	      domElement.focus();
	    },
	    commitUpdate: function (domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	      // Update the props handle so that we know which props are the ones with
	      // with current event handlers.
	      updateFiberProps(domElement, newProps);
	      // Apply the diff to the DOM node.
	      updateProperties(domElement, updatePayload, type, oldProps, newProps);
	    },
	    resetTextContent: function (domElement) {
	      domElement.textContent = '';
	    },
	    commitTextUpdate: function (textInstance, oldText, newText) {
	      textInstance.nodeValue = newText;
	    },
	    appendChild: function (parentInstance, child) {
	      parentInstance.appendChild(child);
	    },
	    appendChildToContainer: function (container, child) {
	      if (container.nodeType === COMMENT_NODE) {
	        container.parentNode.insertBefore(child, container);
	      } else {
	        container.appendChild(child);
	      }
	    },
	    insertBefore: function (parentInstance, child, beforeChild) {
	      parentInstance.insertBefore(child, beforeChild);
	    },
	    insertInContainerBefore: function (container, child, beforeChild) {
	      if (container.nodeType === COMMENT_NODE) {
	        container.parentNode.insertBefore(child, beforeChild);
	      } else {
	        container.insertBefore(child, beforeChild);
	      }
	    },
	    removeChild: function (parentInstance, child) {
	      parentInstance.removeChild(child);
	    },
	    removeChildFromContainer: function (container, child) {
	      if (container.nodeType === COMMENT_NODE) {
	        container.parentNode.removeChild(child);
	      } else {
	        container.removeChild(child);
	      }
	    }
	  },

	  hydration: {
	    canHydrateInstance: function (instance, type, props) {
	      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	        return null;
	      }
	      // This has now been refined to an element node.
	      return instance;
	    },
	    canHydrateTextInstance: function (instance, text) {
	      if (text === '' || instance.nodeType !== TEXT_NODE) {
	        // Empty strings are not parsed by HTML so there won't be a correct match here.
	        return null;
	      }
	      // This has now been refined to a text node.
	      return instance;
	    },
	    getNextHydratableSibling: function (instance) {
	      var node = instance.nextSibling;
	      // Skip non-hydratable nodes.
	      while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE) {
	        node = node.nextSibling;
	      }
	      return node;
	    },
	    getFirstHydratableChild: function (parentInstance) {
	      var next = parentInstance.firstChild;
	      // Skip non-hydratable nodes.
	      while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE) {
	        next = next.nextSibling;
	      }
	      return next;
	    },
	    hydrateInstance: function (instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	      precacheFiberNode(internalInstanceHandle, instance);
	      // TODO: Possibly defer this until the commit phase where all the events
	      // get attached.
	      updateFiberProps(instance, props);
	      var parentNamespace = void 0;
	      {
	        var hostContextDev = hostContext;
	        parentNamespace = hostContextDev.namespace;
	      }
	      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
	    },
	    hydrateTextInstance: function (textInstance, text, internalInstanceHandle) {
	      precacheFiberNode(internalInstanceHandle, textInstance);
	      return diffHydratedText(textInstance, text);
	    },
	    didNotMatchHydratedContainerTextInstance: function (parentContainer, textInstance, text) {
	      {
	        warnForUnmatchedText(textInstance, text);
	      }
	    },
	    didNotMatchHydratedTextInstance: function (parentType, parentProps, parentInstance, textInstance, text) {
	      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	        warnForUnmatchedText(textInstance, text);
	      }
	    },
	    didNotHydrateContainerInstance: function (parentContainer, instance) {
	      {
	        if (instance.nodeType === 1) {
	          warnForDeletedHydratableElement(parentContainer, instance);
	        } else {
	          warnForDeletedHydratableText(parentContainer, instance);
	        }
	      }
	    },
	    didNotHydrateInstance: function (parentType, parentProps, parentInstance, instance) {
	      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	        if (instance.nodeType === 1) {
	          warnForDeletedHydratableElement(parentInstance, instance);
	        } else {
	          warnForDeletedHydratableText(parentInstance, instance);
	        }
	      }
	    },
	    didNotFindHydratableContainerInstance: function (parentContainer, type, props) {
	      {
	        warnForInsertedHydratedElement(parentContainer, type, props);
	      }
	    },
	    didNotFindHydratableContainerTextInstance: function (parentContainer, text) {
	      {
	        warnForInsertedHydratedText(parentContainer, text);
	      }
	    },
	    didNotFindHydratableInstance: function (parentType, parentProps, parentInstance, type, props) {
	      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	        warnForInsertedHydratedElement(parentInstance, type, props);
	      }
	    },
	    didNotFindHydratableTextInstance: function (parentType, parentProps, parentInstance, text) {
	      if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	        warnForInsertedHydratedText(parentInstance, text);
	      }
	    }
	  },

	  scheduleDeferredCallback: rIC,
	  cancelDeferredCallback: cIC,

	  useSyncScheduling: !enableAsyncSchedulingByDefaultInReactDOM
	});

	injection$4.injectFiberBatchedUpdates(DOMRenderer.batchedUpdates);

	var warnedAboutHydrateAPI = false;

	function renderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;

	  {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(container._reactRootContainer.current);
	      if (hostInstance) {
	        warning(hostInstance.parentNode === container, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

	    warning(!hasNonRootReactChild || isRootRenderedBySomeReact, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');

	    warning(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
	  }

	  var root = container._reactRootContainer;
	  if (!root) {
	    var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
	    // First clear any existing content.
	    if (!shouldHydrate) {
	      var warned = false;
	      var rootSibling = void 0;
	      while (rootSibling = container.lastChild) {
	        {
	          if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
	            warned = true;
	            warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
	          }
	        }
	        container.removeChild(rootSibling);
	      }
	    }
	    {
	      if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
	        warnedAboutHydrateAPI = true;
	        lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
	      }
	    }
	    var newRoot = DOMRenderer.createContainer(container, shouldHydrate);
	    root = container._reactRootContainer = newRoot;
	    // Initial mount should not be batched.
	    DOMRenderer.unbatchedUpdates(function () {
	      DOMRenderer.updateContainer(children, newRoot, parentComponent, callback);
	    });
	  } else {
	    DOMRenderer.updateContainer(children, root, parentComponent, callback);
	  }
	  return DOMRenderer.getPublicRootInstance(root);
	}

	function createPortal(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
	  // TODO: pass ReactDOM portal implementation as third argument
	  return createPortal$1(children, container, null, key);
	}

	function ReactRoot(container, hydrate) {
	  var root = DOMRenderer.createContainer(container, hydrate);
	  this._reactRootContainer = root;
	}
	ReactRoot.prototype.render = function (children, callback) {
	  var root = this._reactRootContainer;
	  DOMRenderer.updateContainer(children, root, null, callback);
	};
	ReactRoot.prototype.unmount = function (callback) {
	  var root = this._reactRootContainer;
	  DOMRenderer.updateContainer(null, root, null, callback);
	};

	var ReactDOM = {
	  createPortal: createPortal,

	  findDOMNode: function (componentOrElement) {
	    {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
	        warning(warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner) || 'A component');
	        owner.stateNode._warnedAboutRefsInRender = true;
	      }
	    }
	    if (componentOrElement == null) {
	      return null;
	    }
	    if (componentOrElement.nodeType === ELEMENT_NODE) {
	      return componentOrElement;
	    }

	    var inst = get(componentOrElement);
	    if (inst) {
	      return DOMRenderer.findHostInstance(inst);
	    }

	    if (typeof componentOrElement.render === 'function') {
	      invariant(false, 'Unable to find node on an unmounted component.');
	    } else {
	      invariant(false, 'Element appears to be neither ReactComponent nor DOMNode. Keys: %s', Object.keys(componentOrElement));
	    }
	  },
	  hydrate: function (element, container, callback) {
	    // TODO: throw or warn if we couldn't hydrate?
	    return renderSubtreeIntoContainer(null, element, container, true, callback);
	  },
	  render: function (element, container, callback) {
	    return renderSubtreeIntoContainer(null, element, container, false, callback);
	  },
	  unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
	    !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
	    return renderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	  },
	  unmountComponentAtNode: function (container) {
	    !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;

	    if (container._reactRootContainer) {
	      {
	        var rootEl = getReactRootElementInContainer(container);
	        var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
	        warning(!renderedByDifferentReact, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
	      }

	      // Unmount should not be batched.
	      DOMRenderer.unbatchedUpdates(function () {
	        renderSubtreeIntoContainer(null, null, container, false, function () {
	          container._reactRootContainer = null;
	        });
	      });
	      // If you call unmountComponentAtNode twice in quick succession, you'll
	      // get `true` twice. That's probably fine?
	      return true;
	    } else {
	      {
	        var _rootEl = getReactRootElementInContainer(container);
	        var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl));

	        // Check if the container itself is a React root node.
	        var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

	        warning(!hasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
	      }

	      return false;
	    }
	  },


	  // Temporary alias since we already shipped React 16 RC with it.
	  // TODO: remove in React 17.
	  unstable_createPortal: createPortal,

	  unstable_batchedUpdates: batchedUpdates,

	  unstable_deferredUpdates: DOMRenderer.deferredUpdates,

	  flushSync: DOMRenderer.flushSync,

	  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
	    // For TapEventPlugin which is popular in open source
	    EventPluginHub: EventPluginHub,
	    // Used by test-utils
	    EventPluginRegistry: EventPluginRegistry,
	    EventPropagators: EventPropagators,
	    ReactControlledComponent: ReactControlledComponent,
	    ReactDOMComponentTree: ReactDOMComponentTree,
	    ReactDOMEventListener: ReactDOMEventListener
	  }
	};

	if (enableCreateRoot) {
	  ReactDOM.createRoot = function createRoot(container, options) {
	    var hydrate = options != null && options.hydrate === true;
	    return new ReactRoot(container, hydrate);
	  };
	}

	var foundDevTools = DOMRenderer.injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType: 1,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && ExecutionEnvironment.canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol;
	      // Don't warn in exotic cases like chrome-extension://.
	      if (/^(https?|file):$/.test(protocol)) {
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}



	var ReactDOM$2 = Object.freeze({
		default: ReactDOM
	});

	var ReactDOM$3 = ( ReactDOM$2 && ReactDOM ) || ReactDOM$2;

	// TODO: decide on the top-level export form.
	// This is hacky but makes it work with both Rollup and Jest.
	var reactDom = ReactDOM$3['default'] ? ReactDOM$3['default'] : ReactDOM$3;

	module.exports = reactDom;
	  })();
	}
	});

	var reactDom = createCommonjsModule(function (module) {

	{
	  module.exports = reactDom_development;
	}
	});

	var keycode = createCommonjsModule(function (module, exports) {
	// Source: http://jsfiddle.net/vWx8V/
	// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

	/**
	 * Conenience method returns corresponding value for given keyName or keyCode.
	 *
	 * @param {Mixed} keyCode {Number} or keyName {String}
	 * @return {Mixed}
	 * @api public
	 */

	exports = module.exports = function(searchInput) {
	  // Keyboard Events
	  if (searchInput && 'object' === typeof searchInput) {
	    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;
	    if (hasKeyCode) searchInput = hasKeyCode;
	  }

	  // Numbers
	  if ('number' === typeof searchInput) return names[searchInput]

	  // Everything else (cast to string)
	  var search = String(searchInput);

	  // check codes
	  var foundNamedKey = codes[search.toLowerCase()];
	  if (foundNamedKey) return foundNamedKey

	  // check aliases
	  var foundNamedKey = aliases[search.toLowerCase()];
	  if (foundNamedKey) return foundNamedKey

	  // weird character?
	  if (search.length === 1) return search.charCodeAt(0)

	  return undefined
	};

	/**
	 * Get by name
	 *
	 *   exports.code['enter'] // => 13
	 */

	var codes = exports.code = exports.codes = {
	  'backspace': 8,
	  'tab': 9,
	  'enter': 13,
	  'shift': 16,
	  'ctrl': 17,
	  'alt': 18,
	  'pause/break': 19,
	  'caps lock': 20,
	  'esc': 27,
	  'space': 32,
	  'page up': 33,
	  'page down': 34,
	  'end': 35,
	  'home': 36,
	  'left': 37,
	  'up': 38,
	  'right': 39,
	  'down': 40,
	  'insert': 45,
	  'delete': 46,
	  'command': 91,
	  'left command': 91,
	  'right command': 93,
	  'numpad *': 106,
	  'numpad +': 107,
	  'numpad -': 109,
	  'numpad .': 110,
	  'numpad /': 111,
	  'num lock': 144,
	  'scroll lock': 145,
	  'my computer': 182,
	  'my calculator': 183,
	  ';': 186,
	  '=': 187,
	  ',': 188,
	  '-': 189,
	  '.': 190,
	  '/': 191,
	  '`': 192,
	  '[': 219,
	  '\\': 220,
	  ']': 221,
	  "'": 222
	};

	// Helper aliases

	var aliases = exports.aliases = {
	  'windows': 91,
	  '⇧': 16,
	  '⌥': 18,
	  '⌃': 17,
	  '⌘': 91,
	  'ctl': 17,
	  'control': 17,
	  'option': 18,
	  'pause': 19,
	  'break': 19,
	  'caps': 20,
	  'return': 13,
	  'escape': 27,
	  'spc': 32,
	  'pgup': 33,
	  'pgdn': 34,
	  'ins': 45,
	  'del': 46,
	  'cmd': 91
	};


	/*!
	 * Programatically add the following
	 */

	// lower case chars
	for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32;

	// numbers
	for (var i = 48; i < 58; i++) codes[i - 48] = i;

	// function keys
	for (i = 1; i < 13; i++) codes['f'+i] = i + 111;

	// numpad keys
	for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96;

	/**
	 * Get by code
	 *
	 *   exports.name[13] // => 'Enter'
	 */

	var names = exports.names = exports.title = {}; // title for backward compat

	// Create reverse mapping
	for (i in codes) names[codes[i]] = i;

	// Add aliases
	for (var alias in aliases) {
	  codes[alias] = aliases[alias];
	}
	});
	var keycode_1 = keycode.code;
	var keycode_2 = keycode.codes;
	var keycode_3 = keycode.aliases;
	var keycode_4 = keycode.names;
	var keycode_5 = keycode.title;

	var ownerDocument_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = ownerDocument;
	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}
	module.exports = exports["default"];
	});

	unwrapExports(ownerDocument_1);

	var ownerWindow_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = ownerWindow;



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function ownerWindow(node) {
	  var doc = (0, _ownerDocument2.default)(node);
	  return doc && doc.defaultView || doc.parentWindow;
	}
	module.exports = exports['default'];
	});

	unwrapExports(ownerWindow_1);

	var inDOM = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	module.exports = exports['default'];
	});

	unwrapExports(inDOM);

	var contains = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _inDOM2 = _interopRequireDefault(inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  // HTML DOM and SVG DOM may have different support levels,
	  // so we need to check on context instead of a document root element.
	  return _inDOM2.default ? function (context, node) {
	    if (context.contains) {
	      return context.contains(node);
	    } else if (context.compareDocumentPosition) {
	      return context === node || !!(context.compareDocumentPosition(node) & 16);
	    } else {
	      return fallback(context, node);
	    }
	  } : fallback;
	}();

	function fallback(context, node) {
	  if (node) do {
	    if (node === context) return true;
	  } while (node = node.parentNode);

	  return false;
	}
	module.exports = exports['default'];
	});

	unwrapExports(contains);

	var keyboardFocus = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.focusKeyPressed = focusKeyPressed;
	exports.detectKeyboardFocus = detectKeyboardFocus;
	exports.listenForFocusKeys = listenForFocusKeys;



	var _keycode2 = _interopRequireDefault(keycode);



	var _warning2 = _interopRequireDefault(browser);



	var _contains2 = _interopRequireDefault(contains);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	//  weak

	var internal = {
	  focusKeyPressed: false
	};

	function focusKeyPressed(pressed) {
	  if (typeof pressed !== 'undefined') {
	    internal.focusKeyPressed = Boolean(pressed);
	  }

	  return internal.focusKeyPressed;
	}

	function detectKeyboardFocus(instance, element, callback) {
	  var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

	  (0, _warning2.default)(instance.keyboardFocusCheckTime, 'Material-UI: missing instance.keyboardFocusCheckTime');
	  (0, _warning2.default)(instance.keyboardFocusMaxCheckTimes, 'Material-UI: missing instance.keyboardFocusMaxCheckTimes');

	  instance.keyboardFocusTimeout = setTimeout(function () {
	    var doc = (0, _ownerDocument2.default)(element);

	    if (focusKeyPressed() && (doc.activeElement === element || (0, _contains2.default)(element, doc.activeElement))) {
	      callback();
	    } else if (attempt < instance.keyboardFocusMaxCheckTimes) {
	      detectKeyboardFocus(instance, element, callback, attempt + 1);
	    }
	  }, instance.keyboardFocusCheckTime);
	}

	var FOCUS_KEYS = ['tab', 'enter', 'space', 'esc', 'up', 'down', 'left', 'right'];

	function isFocusKey(event) {
	  return FOCUS_KEYS.indexOf((0, _keycode2.default)(event)) !== -1;
	}

	var handleKeyUpEvent = function handleKeyUpEvent(event) {
	  if (isFocusKey(event)) {
	    internal.focusKeyPressed = true;
	  }
	};

	function listenForFocusKeys(win) {
	  // The event listener will only be added once per window.
	  // Duplicate event listeners will be ignored by addEventListener.
	  // Also, this logic is client side only, we don't need a teardown.
	  win.addEventListener('keyup', handleKeyUpEvent);
	}
	});

	unwrapExports(keyboardFocus);
	var keyboardFocus_1 = keyboardFocus.focusKeyPressed;
	var keyboardFocus_2 = keyboardFocus.detectKeyboardFocus;
	var keyboardFocus_3 = keyboardFocus.listenForFocusKeys;

	var _createProperty = function (object, index, value) {
	  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));
	  else object[index] = value;
	};

	var ITERATOR$3 = _wks('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR$3]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	} catch (e) { /* empty */ }

	var _iterDetect = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR$3]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR$3] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};

	_export(_export.S + _export.F * !_iterDetect(function (iter) { }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = _toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = core_getIteratorMethod(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = _toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

	var from = _core.Array.from;

	var from$1 = createCommonjsModule(function (module) {
	module.exports = { "default": from, __esModule: true };
	});

	unwrapExports(from$1);

	var toConsumableArray$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _from2 = _interopRequireDefault(from$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};
	});

	unwrapExports(toConsumableArray$1);

	var ChildMapping = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.getChildMapping = getChildMapping;
	exports.mergeChildMappings = mergeChildMappings;



	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && (0, react.isValidElement)(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) react.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}

	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */
	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  }

	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextKeysPending = Object.create(null);

	  var pendingKeys = [];
	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i = void 0;
	  var childMapping = {};
	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }
	    childMapping[nextKey] = getValueForKey(nextKey);
	  }

	  // Finally, add the keys which didn't appear before any key in `next`
	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}
	});

	unwrapExports(ChildMapping);
	var ChildMapping_1 = ChildMapping.getChildMapping;
	var ChildMapping_2 = ChildMapping.mergeChildMappings;

	var TransitionGroup_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _react2 = _interopRequireDefault(react);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var propTypes$$1 = {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   */
	  component: _propTypes2.default.any,
	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   */
	  children: _propTypes2.default.node,

	  /**
	   * A convenience prop that enables or disabled appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: _propTypes2.default.bool,
	  /**
	   * A convenience prop that enables or disabled enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: _propTypes2.default.bool,
	  /**
	    * A convenience prop that enables or disabled exit animations
	    * for all children. Note that specifying this will override any defaults set
	    * on individual children Transitions.
	    */
	  exit: _propTypes2.default.bool,

	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: _propTypes2.default.func
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};

	/**
	 * The `<TransitionGroup>` component manages a set of `<Transition>` components
	 * in a list. Like with the `<Transition>` component, `<TransitionGroup>`, is a
	 * state machine for managing the mounting and unmounting of components over
	 * time.
	 *
	 * Consider the example below using the `Fade` CSS transition from before.
	 * As items are removed or added to the TodoList the `in` prop is toggled
	 * automatically by the `<TransitionGroup>`. You can use _any_ `<Transition>`
	 * component in a `<TransitionGroup>`, not just css.
	 *
	 * ```jsx
	 * import TransitionGroup from 'react-transition-group/TransitionGroup';
	 *
	 * class TodoList extends React.Component {
	 *   constructor(props) {
	 *     super(props)
	 *     this.state = {items: ['hello', 'world', 'click', 'me']}
	 *   }
	 *   handleAdd() {
	 *     const newItems = this.state.items.concat([
	 *       prompt('Enter some text')
	 *     ]);
	 *     this.setState({ items: newItems });
	 *   }
	 *   handleRemove(i) {
	 *     let newItems = this.state.items.slice();
	 *     newItems.splice(i, 1);
	 *     this.setState({items: newItems});
	 *   }
	 *   render() {
	 *     return (
	 *       <div>
	 *         <button onClick={() => this.handleAdd()}>Add Item</button>
	 *         <TransitionGroup>
	 *           {this.state.items.map((item, i) => (
	 *             <FadeTransition key={item}>
	 *               <div>
	 *                 {item}{' '}
	 *                 <button onClick={() => this.handleRemove(i)}>
	 *                   remove
	 *                 </button>
	 *               </div>
	 *             </FadeTransition>
	 *           ))}
	 *         </TransitionGroup>
	 *       </div>
	 *     );
	 *   }
	 * }
	 * ```
	 *
	 * Note that `<TransitionGroup>`  does not define any animation behavior!
	 * Exactly _how_ a list item animates is up to the individual `<Transition>`
	 * components. This means you can mix and match animations across different
	 * list items.
	 */

	var TransitionGroup = function (_React$Component) {
	  _inherits(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    _classCallCheck(this, TransitionGroup);

	    // Initial children should all be entering, dependent on appear
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    _this.handleExited = function (key, node, originalHandler) {
	      var currentChildMapping = (0, ChildMapping.getChildMapping)(_this.props.children);

	      if (key in currentChildMapping) return;

	      if (originalHandler) originalHandler(node);

	      _this.setState(function (state) {
	        var children = _extends({}, state.children);

	        delete children[key];
	        return { children: children };
	      });
	    };

	    _this.state = {
	      children: (0, ChildMapping.getChildMapping)(props.children, function (child) {
	        var onExited = function onExited(node) {
	          _this.handleExited(child.key, node, child.props.onExited);
	        };

	        return (0, react.cloneElement)(child, {
	          onExited: onExited,
	          in: true,
	          appear: _this.getProp(child, 'appear'),
	          enter: _this.getProp(child, 'enter'),
	          exit: _this.getProp(child, 'exit')
	        });
	      })
	    };
	    return _this;
	  }

	  TransitionGroup.prototype.getChildContext = function getChildContext() {
	    return {
	      transitionGroup: { isMounting: !this.appeared }
	    };
	  };
	  // use child config unless explictly set by the Group


	  TransitionGroup.prototype.getProp = function getProp(child, prop) {
	    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.props;

	    return props[prop] != null ? props[prop] : child.props[prop];
	  };

	  TransitionGroup.prototype.componentDidMount = function componentDidMount() {
	    this.appeared = true;
	  };

	  TransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _this2 = this;

	    var prevChildMapping = this.state.children;
	    var nextChildMapping = (0, ChildMapping.getChildMapping)(nextProps.children);

	    var children = (0, ChildMapping.mergeChildMappings)(prevChildMapping, nextChildMapping);

	    Object.keys(children).forEach(function (key) {
	      var child = children[key];

	      if (!(0, react.isValidElement)(child)) return;

	      var onExited = function onExited(node) {
	        _this2.handleExited(child.key, node, child.props.onExited);
	      };

	      var hasPrev = key in prevChildMapping;
	      var hasNext = key in nextChildMapping;

	      var prevChild = prevChildMapping[key];
	      var isLeaving = (0, react.isValidElement)(prevChild) && !prevChild.props.in;

	      // item is new (entering)
	      if (hasNext && (!hasPrev || isLeaving)) {
	        // console.log('entering', key)
	        children[key] = (0, react.cloneElement)(child, {
	          onExited: onExited,
	          in: true,
	          exit: _this2.getProp(child, 'exit', nextProps),
	          enter: _this2.getProp(child, 'enter', nextProps)
	        });
	      }
	      // item is old (exiting)
	      else if (!hasNext && hasPrev && !isLeaving) {
	          // console.log('leaving', key)
	          children[key] = (0, react.cloneElement)(child, { in: false });
	        }
	        // item hasn't changed transition states
	        // copy over the last transition props;
	        else if (hasNext && hasPrev && (0, react.isValidElement)(prevChild)) {
	            // console.log('unchanged', key)
	            children[key] = (0, react.cloneElement)(child, {
	              onExited: onExited,
	              in: prevChild.props.in,
	              exit: _this2.getProp(child, 'exit', nextProps),
	              enter: _this2.getProp(child, 'enter', nextProps)
	            });
	          }
	    });

	    this.setState({ children: children });
	  };

	  TransitionGroup.prototype.render = function render() {
	    var _props = this.props,
	        Component = _props.component,
	        childFactory = _props.childFactory,
	        props = _objectWithoutProperties(_props, ['component', 'childFactory']);

	    var children = this.state.children;


	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    return _react2.default.createElement(
	      Component,
	      props,
	      values(children).map(childFactory)
	    );
	  };

	  return TransitionGroup;
	}(_react2.default.Component);

	TransitionGroup.childContextTypes = {
	  transitionGroup: _propTypes2.default.object.isRequired
	};


	TransitionGroup.propTypes = propTypes$$1;
	TransitionGroup.defaultProps = defaultProps;

	exports.default = TransitionGroup;
	module.exports = exports['default'];
	});

	unwrapExports(TransitionGroup_1);

	var PropTypes = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.classNamesShape = exports.timeoutsShape = undefined;
	exports.transitionTimeout = transitionTimeout;



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function transitionTimeout(transitionType) {
	  var timeoutPropName = 'transition' + transitionType + 'Timeout';
	  var enabledPropName = 'transition' + transitionType;

	  return function (props) {
	    // If the transition is enabled
	    if (props[enabledPropName]) {
	      // If no timeout duration is provided
	      if (props[timeoutPropName] == null) {
	        return new Error(timeoutPropName + ' wasn\'t supplied to CSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');

	        // If the duration isn't a number
	      } else if (typeof props[timeoutPropName] !== 'number') {
	        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
	      }
	    }

	    return null;
	  };
	}

	var timeoutsShape = exports.timeoutsShape = _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({
	  enter: _propTypes2.default.number,
	  exit: _propTypes2.default.number
	}).isRequired]);

	var classNamesShape = exports.classNamesShape = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
	  enter: _propTypes2.default.string,
	  exit: _propTypes2.default.string,
	  active: _propTypes2.default.string
	}), _propTypes2.default.shape({
	  enter: _propTypes2.default.string,
	  enterActive: _propTypes2.default.string,
	  exit: _propTypes2.default.string,
	  exitActive: _propTypes2.default.string
	})]);
	});

	unwrapExports(PropTypes);
	var PropTypes_1 = PropTypes.classNamesShape;
	var PropTypes_2 = PropTypes.timeoutsShape;
	var PropTypes_3 = PropTypes.transitionTimeout;

	var Transition_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = undefined;



	var PropTypes$$1 = _interopRequireWildcard(propTypes);



	var _react2 = _interopRequireDefault(react);



	var _reactDom2 = _interopRequireDefault(reactDom);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var UNMOUNTED = exports.UNMOUNTED = 'unmounted';
	var EXITED = exports.EXITED = 'exited';
	var ENTERING = exports.ENTERING = 'entering';
	var ENTERED = exports.ENTERED = 'entered';
	var EXITING = exports.EXITING = 'exiting';

	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the components.
	 * It's up to you to give meaning and effect to those states. For example we can
	 * add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import Transition from 'react-transition-group/Transition';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 0 },
	 *   entered:  { opacity: 1 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {(state) => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm A fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * As noted the `Transition` component doesn't _do_ anything by itself to its child component.
	 * What it does do is track transition states over time so you can update the
	 * component (such as by adding styles or classes) when it changes states.
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `ENTERING`
	 *  - `ENTERED`
	 *  - `EXITING`
	 *  - `EXITED`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component begins the
	 * "Enter" stage. During this stage, the component will shift from its current transition state,
	 * to `'entering'` for the duration of the transition and then to the `'entered'` stage once
	 * it's complete. Let's take the following example:
	 *
	 * ```jsx
	 * state= { in: false };
	 *
	 * toggleEnterState = () => {
	 *   this.setState({ in: true });
	 * }
	 *
	 * render() {
	 *   return (
	 *     <div>
	 *       <Transition in={this.state.in} timeout={500} />
	 *       <button onClick={this.toggleEnterState}>Click to Enter</button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state and
	 * stay there for 500ms (the value of `timeout`) when finally switches to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from `'exiting'` to `'exited'`.
	 */

	var Transition = function (_React$Component) {
	  _inherits(Transition, _React$Component);

	  function Transition(props, context) {
	    _classCallCheck(this, Transition);

	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

	    var parentGroup = context.transitionGroup;
	    // In the context of a TransitionGroup all enters are really appears
	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;

	    var initialStatus = void 0;
	    _this.nextStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.nextStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }

	    _this.state = { status: initialStatus };

	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.prototype.getChildContext = function getChildContext() {
	    return { transitionGroup: null }; // allows for nested Transitions
	  };

	  Transition.prototype.componentDidMount = function componentDidMount() {
	    this.updateStatus(true);
	  };

	  Transition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var _ref = this.pendingState || this.state,
	        status = _ref.status;

	    if (nextProps.in) {
	      if (status === UNMOUNTED) {
	        this.setState({ status: EXITED });
	      }
	      if (status !== ENTERING && status !== ENTERED) {
	        this.nextStatus = ENTERING;
	      }
	    } else {
	      if (status === ENTERING || status === ENTERED) {
	        this.nextStatus = EXITING;
	      }
	    }
	  };

	  Transition.prototype.componentDidUpdate = function componentDidUpdate() {
	    this.updateStatus();
	  };

	  Transition.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  Transition.prototype.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;

	    var exit = void 0,
	        enter = void 0,
	        appear = void 0;

	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter;
	      appear = timeout.appear;
	    }
	    return { exit: exit, enter: enter, appear: appear };
	  };

	  Transition.prototype.updateStatus = function updateStatus() {
	    var mounting = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var nextStatus = this.nextStatus;

	    if (nextStatus !== null) {
	      this.nextStatus = null;
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();
	      var node = _reactDom2.default.findDOMNode(this);

	      if (nextStatus === ENTERING) {
	        this.performEnter(node, mounting);
	      } else {
	        this.performExit(node);
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({ status: UNMOUNTED });
	    }
	  };

	  Transition.prototype.performEnter = function performEnter(node, mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;

	    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;

	    var timeouts = this.getTimeouts();

	    // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set
	    if (!mounting && !enter) {
	      this.safeSetState({ status: ENTERED }, function () {
	        _this2.props.onEntered(node);
	      });
	      return;
	    }

	    this.props.onEnter(node, appearing);

	    this.safeSetState({ status: ENTERING }, function () {
	      _this2.props.onEntering(node, appearing);

	      // FIXME: appear timeout?
	      _this2.onTransitionEnd(node, timeouts.enter, function () {
	        _this2.safeSetState({ status: ENTERED }, function () {
	          _this2.props.onEntered(node, appearing);
	        });
	      });
	    });
	  };

	  Transition.prototype.performExit = function performExit(node) {
	    var _this3 = this;

	    var exit = this.props.exit;

	    var timeouts = this.getTimeouts();

	    // no exit animation skip right to EXITED
	    if (!exit) {
	      this.safeSetState({ status: EXITED }, function () {
	        _this3.props.onExited(node);
	      });
	      return;
	    }
	    this.props.onExit(node);

	    this.safeSetState({ status: EXITING }, function () {
	      _this3.props.onExiting(node);

	      _this3.onTransitionEnd(node, timeouts.exit, function () {
	        _this3.safeSetState({ status: EXITED }, function () {
	          _this3.props.onExited(node);
	        });
	      });
	    });
	  };

	  Transition.prototype.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  Transition.prototype.safeSetState = function safeSetState(nextState, callback) {
	    var _this4 = this;

	    // We need to track pending updates for instances where a cWRP fires quickly
	    // after cDM and before the state flushes, which would double trigger a
	    // transition
	    this.pendingState = nextState;

	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, function () {
	      _this4.pendingState = null;
	      callback();
	    });
	  };

	  Transition.prototype.setNextCallback = function setNextCallback(callback) {
	    var _this5 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this5.nextCallback = null;

	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  Transition.prototype.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
	    this.setNextCallback(handler);

	    if (node) {
	      if (this.props.addEndListener) {
	        this.props.addEndListener(node, this.nextCallback);
	      }
	      if (timeout != null) {
	        setTimeout(this.nextCallback, timeout);
	      }
	    } else {
	      setTimeout(this.nextCallback, 0);
	    }
	  };

	  Transition.prototype.render = function render() {
	    var status = this.state.status;
	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _props = this.props,
	        children = _props.children,
	        childProps = _objectWithoutProperties(_props, ['children']);
	    // filter props for Transtition


	    delete childProps.in;
	    delete childProps.mountOnEnter;
	    delete childProps.unmountOnExit;
	    delete childProps.appear;
	    delete childProps.enter;
	    delete childProps.exit;
	    delete childProps.timeout;
	    delete childProps.addEndListener;
	    delete childProps.onEnter;
	    delete childProps.onEntering;
	    delete childProps.onEntered;
	    delete childProps.onExit;
	    delete childProps.onExiting;
	    delete childProps.onExited;

	    if (typeof children === 'function') {
	      return children(status, childProps);
	    }

	    var child = _react2.default.Children.only(children);
	    return _react2.default.cloneElement(child, childProps);
	  };

	  return Transition;
	}(_react2.default.Component);

	Transition.contextTypes = {
	  transitionGroup: PropTypes$$1.object
	};
	Transition.childContextTypes = {
	  transitionGroup: function transitionGroup() {}
	};


	Transition.propTypes = {
	  /**
	   * A `function` child can be used instead of a React element.
	   * This function is called with the current transition status
	   * ('entering', 'entered', 'exiting', 'exited', 'unmounted'), which can used
	   * to apply context specific props to a component.
	   *
	   * ```jsx
	   * <Transition timeout={150}>
	   *   {(status) => (
	   *     <MyComponent className={`fade fade-${status}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: PropTypes$$1.oneOfType([PropTypes$$1.func.isRequired, PropTypes$$1.element.isRequired]).isRequired,

	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: PropTypes$$1.bool,

	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: PropTypes$$1.bool,

	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: PropTypes$$1.bool,

	  /**
	   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
	   * If you want to transition on the first mount set `appear` to `true`, and the
	   * component will transition in as soon as the `<Transition>` mounts.
	   *
	   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
	   */
	  appear: PropTypes$$1.bool,

	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: PropTypes$$1.bool,

	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: PropTypes$$1.bool,

	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEventListener` is provided
	   *
	   * You may specify a single timeout for all transitions like: `timeout={500}`,
	   * or individually like:
	   *
	   * ```jsx
	   * timeout={{
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * @type {number | { enter?: number, exit?: number }}
	   */
	  timeout: function timeout(props) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var pt = PropTypes.timeoutsShape;
	    if (!props.addEndListener) pt = pt.isRequired;
	    return pt.apply(undefined, [props].concat(args));
	  },

	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. **Note:** Timeouts are still used as a fallback if provided.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: PropTypes$$1.func,

	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: PropTypes$$1.func,

	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes$$1.func,

	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: PropTypes$$1.func,

	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: PropTypes$$1.func,

	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: PropTypes$$1.func,

	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: PropTypes$$1.func
	};

	// Name the function so it is clearer in the documentation
	function noop() {}

	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,

	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,

	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};

	Transition.UNMOUNTED = 0;
	Transition.EXITED = 1;
	Transition.ENTERING = 2;
	Transition.ENTERED = 3;
	Transition.EXITING = 4;

	exports.default = Transition;
	});

	unwrapExports(Transition_1);
	var Transition_2 = Transition_1.EXITING;
	var Transition_3 = Transition_1.ENTERED;
	var Transition_4 = Transition_1.ENTERING;
	var Transition_5 = Transition_1.EXITED;
	var Transition_6 = Transition_1.UNMOUNTED;

	var Ripple_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _Transition2 = _interopRequireDefault(Transition_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @ignore - internal component.
	 */
	var Ripple = function (_React$Component) {
	  (0, _inherits3.default)(Ripple, _React$Component);

	  function Ripple() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Ripple);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Ripple.__proto__ || (0, _getPrototypeOf2.default)(Ripple)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      visible: false,
	      leaving: false
	    }, _this.handleEnter = function () {
	      _this.setState({
	        visible: true
	      });
	    }, _this.handleExit = function () {
	      _this.setState({
	        leaving: true
	      });
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Ripple, [{
	    key: 'render',
	    value: function render() {
	      var _classNames, _classNames2;

	      var _props = this.props,
	          classes = _props.classes,
	          classNameProp = _props.className,
	          pulsate = _props.pulsate,
	          rippleX = _props.rippleX,
	          rippleY = _props.rippleY,
	          rippleSize = _props.rippleSize,
	          other = (0, _objectWithoutProperties3.default)(_props, ['classes', 'className', 'pulsate', 'rippleX', 'rippleY', 'rippleSize']);
	      var _state = this.state,
	          visible = _state.visible,
	          leaving = _state.leaving;


	      var rippleClassName = (0, _classnames2.default)(classes.ripple, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.rippleVisible, visible), (0, _defineProperty3.default)(_classNames, classes.ripplePulsate, pulsate), _classNames), classNameProp);

	      var rippleStyles = {
	        width: rippleSize,
	        height: rippleSize,
	        top: -(rippleSize / 2) + rippleY,
	        left: -(rippleSize / 2) + rippleX
	      };

	      var childClassName = (0, _classnames2.default)(classes.child, (_classNames2 = {}, (0, _defineProperty3.default)(_classNames2, classes.childLeaving, leaving), (0, _defineProperty3.default)(_classNames2, classes.childPulsate, pulsate), _classNames2));

	      return _react2.default.createElement(
	        _Transition2.default,
	        (0, _extends3.default)({ onEnter: this.handleEnter, onExit: this.handleExit }, other),
	        _react2.default.createElement(
	          'span',
	          { className: rippleClassName, style: rippleStyles },
	          _react2.default.createElement('span', { className: childClassName })
	        )
	      );
	    }
	  }]);
	  return Ripple;
	}(_react2.default.Component);

	Ripple.propTypes = {
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
	   */
	  pulsate: _propTypes2.default.bool,
	  /**
	   * Diameter of the ripple.
	   */
	  rippleSize: _propTypes2.default.number,
	  /**
	   * Horizontal position of the ripple center.
	   */
	  rippleX: _propTypes2.default.number,
	  /**
	   * Vertical position of the ripple center.
	   */
	  rippleY: _propTypes2.default.number
	};

	Ripple.defaultProps = {
	  pulsate: false
	};

	exports.default = Ripple;
	});

	unwrapExports(Ripple_1);

	var TouchRipple_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = exports.DELAY_RIPPLE = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _toConsumableArray3 = _interopRequireDefault(toConsumableArray$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _reactDom2 = _interopRequireDefault(reactDom);



	var _TransitionGroup2 = _interopRequireDefault(TransitionGroup_1);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _Ripple2 = _interopRequireDefault(Ripple_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var DURATION = 550;
	var DELAY_RIPPLE = exports.DELAY_RIPPLE = 80;

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      display: 'block',
	      position: 'absolute',
	      overflow: 'hidden',
	      borderRadius: 'inherit',
	      width: '100%',
	      height: '100%',
	      left: 0,
	      top: 0,
	      pointerEvents: 'none',
	      zIndex: 0
	    },
	    ripple: {
	      width: 50,
	      height: 50,
	      left: 0,
	      top: 0,
	      opacity: 0,
	      position: 'absolute'
	    },
	    rippleVisible: {
	      opacity: 0.3,
	      transform: 'scale(1)',
	      animation: 'mui-ripple-enter ' + DURATION + 'ms ' + theme.transitions.easing.easeInOut
	    },
	    ripplePulsate: {
	      animationDuration: theme.transitions.duration.shorter + 'ms'
	    },
	    child: {
	      opacity: 1,
	      display: 'block',
	      width: '100%',
	      height: '100%',
	      borderRadius: '50%',
	      background: 'currentColor'
	    },
	    childLeaving: {
	      opacity: 0,
	      animation: 'mui-ripple-exit ' + DURATION + 'ms ' + theme.transitions.easing.easeInOut
	    },
	    childPulsate: {
	      position: 'absolute',
	      left: 0,
	      top: 0,
	      animation: 'mui-ripple-pulsate 2500ms ' + theme.transitions.easing.easeInOut + ' 200ms infinite'
	    },
	    '@keyframes mui-ripple-enter': {
	      '0%': {
	        transform: 'scale(0)',
	        opacity: 0.1
	      },
	      '100%': {
	        transform: 'scale(1)',
	        opacity: 0.3
	      }
	    },
	    '@keyframes mui-ripple-exit': {
	      '0%': {
	        opacity: 1
	      },
	      '100%': {
	        opacity: 0
	      }
	    },
	    '@keyframes mui-ripple-pulsate': {
	      '0%': {
	        transform: 'scale(1)'
	      },
	      '50%': {
	        transform: 'scale(0.92)'
	      },
	      '100%': {
	        transform: 'scale(1)'
	      }
	    }
	  };
	};

	/**
	 * @ignore - internal component.
	 */

	var TouchRipple = function (_React$Component) {
	  (0, _inherits3.default)(TouchRipple, _React$Component);

	  function TouchRipple() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, TouchRipple);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TouchRipple.__proto__ || (0, _getPrototypeOf2.default)(TouchRipple)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      nextKey: 0,
	      ripples: []
	    }, _this.ignoringMouseDown = false, _this.startTimer = null, _this.startTimerCommit = null, _this.pulsate = function () {
	      _this.start({}, { pulsate: true });
	    }, _this.start = function () {
	      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	      var cb = arguments[2];
	      var _options$pulsate = options.pulsate,
	          pulsate = _options$pulsate === undefined ? false : _options$pulsate,
	          _options$center = options.center,
	          center = _options$center === undefined ? _this.props.center || options.pulsate : _options$center,
	          _options$fakeElement = options.fakeElement,
	          fakeElement = _options$fakeElement === undefined ? false : _options$fakeElement;


	      if (event.type === 'mousedown' && _this.ignoringMouseDown) {
	        _this.ignoringMouseDown = false;
	        return;
	      }

	      if (event.type === 'touchstart') {
	        _this.ignoringMouseDown = true;
	      }

	      var element = fakeElement ? null : _reactDom2.default.findDOMNode(_this);
	      var rect = element ? element.getBoundingClientRect() : {
	        width: 0,
	        height: 0,
	        left: 0,
	        top: 0
	      };

	      // Get the size of the ripple
	      var rippleX = void 0;
	      var rippleY = void 0;
	      var rippleSize = void 0;

	      if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
	        rippleX = Math.round(rect.width / 2);
	        rippleY = Math.round(rect.height / 2);
	      } else {
	        var clientX = event.clientX ? event.clientX : event.touches[0].clientX;
	        var clientY = event.clientY ? event.clientY : event.touches[0].clientY;
	        rippleX = Math.round(clientX - rect.left);
	        rippleY = Math.round(clientY - rect.top);
	      }

	      if (center) {
	        rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3);

	        // For some reason the animation is broken on Mobile Chrome if the size if even.
	        if (rippleSize % 2 === 0) {
	          rippleSize += 1;
	        }
	      } else {
	        var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
	        var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
	        rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
	      }

	      // Touche devices
	      if (event.touches) {
	        // Prepare the ripple effect.
	        _this.startTimerCommit = function () {
	          _this.startCommit({ pulsate: pulsate, rippleX: rippleX, rippleY: rippleY, rippleSize: rippleSize, cb: cb });
	        };
	        // Deplay the execution of the ripple effect.
	        _this.startTimer = setTimeout(function () {
	          _this.startTimerCommit();
	          _this.startTimerCommit = null;
	        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
	      } else {
	        _this.startCommit({ pulsate: pulsate, rippleX: rippleX, rippleY: rippleY, rippleSize: rippleSize, cb: cb });
	      }
	    }, _this.startCommit = function (params) {
	      var pulsate = params.pulsate,
	          rippleX = params.rippleX,
	          rippleY = params.rippleY,
	          rippleSize = params.rippleSize,
	          cb = params.cb;

	      var ripples = _this.state.ripples;

	      // Add a ripple to the ripples array.
	      ripples = [].concat((0, _toConsumableArray3.default)(ripples), [_react2.default.createElement(_Ripple2.default, {
	        key: _this.state.nextKey,
	        classes: _this.props.classes,
	        timeout: {
	          exit: DURATION,
	          enter: DURATION
	        },
	        pulsate: pulsate,
	        rippleX: rippleX,
	        rippleY: rippleY,
	        rippleSize: rippleSize
	      })]);

	      _this.setState({
	        nextKey: _this.state.nextKey + 1,
	        ripples: ripples
	      }, cb);
	    }, _this.stop = function (event, cb) {
	      clearTimeout(_this.startTimer);
	      var ripples = _this.state.ripples;

	      // The touch interaction occures to quickly.
	      // We still want to show ripple effect.

	      if (event.type === 'touchend' && _this.startTimerCommit) {
	        event.persist();
	        _this.startTimerCommit();
	        _this.startTimerCommit = null;
	        _this.startTimer = setTimeout(function () {
	          _this.stop(event, cb);
	        }, 0);
	        return;
	      }

	      _this.startTimerCommit = null;

	      if (ripples && ripples.length) {
	        _this.setState({
	          ripples: ripples.slice(1)
	        }, cb);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(TouchRipple, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.startTimer);
	    }

	    // Used to filter out mouse emulated events on mobile.

	    // We use a timer in order to only show the ripples for touch "click" like events.
	    // We don't want to display the ripple for touch scroll events.

	    // This is the hook called once the previous timeout is ready.

	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          center = _props.center,
	          classes = _props.classes,
	          className = _props.className,
	          other = (0, _objectWithoutProperties3.default)(_props, ['center', 'classes', 'className']);


	      return _react2.default.createElement(
	        _TransitionGroup2.default,
	        (0, _extends3.default)({
	          component: 'span',
	          enter: true,
	          exit: true,
	          className: (0, _classnames2.default)(classes.root, className)
	        }, other),
	        this.state.ripples
	      );
	    }
	  }]);
	  return TouchRipple;
	}(_react2.default.Component);

	TouchRipple.propTypes = {
	  /**
	   * If `true`, the ripple starts at the center of the component
	   * rather than at the point of interaction.
	   */
	  center: _propTypes2.default.bool,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string
	};

	TouchRipple.defaultProps = {
	  center: false
	};

	exports.default = (0, _withStyles2.default)(styles, { flip: false, name: 'MuiTouchRipple' })(TouchRipple);
	});

	unwrapExports(TouchRipple_1);
	var TouchRipple_2 = TouchRipple_1.styles;
	var TouchRipple_3 = TouchRipple_1.DELAY_RIPPLE;

	var createRippleHandler_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function createRippleHandler(instance, eventName, action, cb) {
	  return function handleEvent(event) {
	    if (cb) {
	      cb.call(instance, event);
	    }

	    if (event.defaultPrevented) {
	      return false;
	    }

	    if (instance.ripple) {
	      instance.ripple[action](event);
	    }

	    if (instance.props && typeof instance.props['on' + eventName] === 'function') {
	      instance.props['on' + eventName](event);
	    }

	    return true;
	  };
	}

	exports.default = createRippleHandler;
	});

	unwrapExports(createRippleHandler_1);

	var ButtonBase_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _classnames2 = _interopRequireDefault(classnames);



	var _keycode2 = _interopRequireDefault(keycode);



	var _ownerWindow2 = _interopRequireDefault(ownerWindow_1);



	var _withStyles2 = _interopRequireDefault(withStyles_1);





	var _TouchRipple2 = _interopRequireDefault(TouchRipple_1);



	var _createRippleHandler2 = _interopRequireDefault(createRippleHandler_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = {
	  root: {
	    display: 'inline-flex',
	    alignItems: 'center',
	    justifyContent: 'center',
	    position: 'relative',
	    // Remove grey highlight
	    WebkitTapHighlightColor: 'transparent',
	    backgroundColor: 'transparent', // Reset default value
	    outline: 'none',
	    border: 0,
	    margin: 0, // Remove the margin in Safari
	    borderRadius: 0,
	    padding: 0, // Remove the padding in Firefox
	    cursor: 'pointer',
	    userSelect: 'none',
	    verticalAlign: 'middle',
	    '-moz-appearance': 'none', // Reset
	    '-webkit-appearance': 'none', // Reset
	    textDecoration: 'none',
	    // So we take precedent over the style of a native <a /> element.
	    color: 'inherit',
	    '&::-moz-focus-inner': {
	      borderStyle: 'none' // Remove Firefox dotted outline.
	    }
	  },
	  disabled: {
	    pointerEvents: 'none', // Disable link interactions
	    cursor: 'default'
	  },
	  keyboardFocused: {}
	};

	/**
	 * `ButtonBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating a button.
	 * It contains a load of style reset and some focus/ripple logic.
	 */

	var ButtonBase = function (_React$Component) {
	  (0, _inherits3.default)(ButtonBase, _React$Component);

	  function ButtonBase() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, ButtonBase);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ButtonBase.__proto__ || (0, _getPrototypeOf2.default)(ButtonBase)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      keyboardFocused: false
	    }, _this.onKeyboardFocusHandler = function (event) {
	      _this.keyDown = false;
	      _this.setState({ keyboardFocused: true });

	      if (_this.props.onKeyboardFocus) {
	        _this.props.onKeyboardFocus(event);
	      }
	    }, _this.onRippleRef = function (node) {
	      _this.ripple = node;
	    }, _this.ripple = null, _this.keyDown = false, _this.button = null, _this.keyboardFocusTimeout = null, _this.keyboardFocusCheckTime = 50, _this.keyboardFocusMaxCheckTimes = 5, _this.handleKeyDown = function (event) {
	      var _this$props = _this.props,
	          component = _this$props.component,
	          focusRipple = _this$props.focusRipple,
	          onKeyDown = _this$props.onKeyDown,
	          onClick = _this$props.onClick;

	      var key = (0, _keycode2.default)(event);

	      // Check if key is already down to avoid repeats being counted as multiple activations
	      if (focusRipple && !_this.keyDown && _this.state.keyboardFocused && _this.ripple && key === 'space') {
	        _this.keyDown = true;
	        event.persist();
	        _this.ripple.stop(event, function () {
	          _this.ripple.start(event);
	        });
	      }

	      if (onKeyDown) {
	        onKeyDown(event);
	      }

	      // Keyboard accessibility for non interactive elements
	      if (event.target === event.currentTarget && component && component !== 'button' && (key === 'space' || key === 'enter')) {
	        event.preventDefault();
	        if (onClick) {
	          onClick(event);
	        }
	      }
	    }, _this.handleKeyUp = function (event) {
	      if (_this.props.focusRipple && (0, _keycode2.default)(event) === 'space' && _this.ripple && _this.state.keyboardFocused) {
	        _this.keyDown = false;
	        event.persist();
	        _this.ripple.stop(event, function () {
	          return _this.ripple.pulsate(event);
	        });
	      }
	      if (_this.props.onKeyUp) {
	        _this.props.onKeyUp(event);
	      }
	    }, _this.handleMouseDown = (0, _createRippleHandler2.default)(_this, 'MouseDown', 'start', function () {
	      clearTimeout(_this.keyboardFocusTimeout);
	      (0, keyboardFocus.focusKeyPressed)(false);
	      if (_this.state.keyboardFocused) {
	        _this.setState({ keyboardFocused: false });
	      }
	    }), _this.handleMouseUp = (0, _createRippleHandler2.default)(_this, 'MouseUp', 'stop'), _this.handleMouseLeave = (0, _createRippleHandler2.default)(_this, 'MouseLeave', 'stop', function (event) {
	      if (_this.state.keyboardFocused) {
	        event.preventDefault();
	      }
	    }), _this.handleTouchStart = (0, _createRippleHandler2.default)(_this, 'TouchStart', 'start'), _this.handleTouchEnd = (0, _createRippleHandler2.default)(_this, 'TouchEnd', 'stop'), _this.handleTouchMove = (0, _createRippleHandler2.default)(_this, 'TouchEnd', 'stop'), _this.handleBlur = (0, _createRippleHandler2.default)(_this, 'Blur', 'stop', function () {
	      clearTimeout(_this.keyboardFocusTimeout);
	      (0, keyboardFocus.focusKeyPressed)(false);
	      _this.setState({ keyboardFocused: false });
	    }), _this.handleFocus = function (event) {
	      if (_this.props.disabled) {
	        return;
	      }

	      // Fix for https://github.com/facebook/react/issues/7769
	      if (!_this.button) {
	        _this.button = event.currentTarget;
	      }

	      event.persist();
	      (0, keyboardFocus.detectKeyboardFocus)(_this, _this.button, function () {
	        _this.onKeyboardFocusHandler(event);
	      });

	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(ButtonBase, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.button = (0, reactDom.findDOMNode)(this);
	      (0, keyboardFocus.listenForFocusKeys)((0, _ownerWindow2.default)(this.button));
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // The blur won't fire when the disabled state is set on a focused input.
	      // We need to book keep the focused state manually.
	      if (!this.props.disabled && nextProps.disabled && this.state.keyboardFocused) {
	        this.setState({
	          keyboardFocused: false
	        });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.props.focusRipple && !this.props.disableRipple && !prevState.keyboardFocused && this.state.keyboardFocused) {
	        this.ripple.pulsate();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.button = null;
	      clearTimeout(this.keyboardFocusTimeout);
	    } // Used to help track keyboard activation keyDown

	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames;

	      var _props = this.props,
	          buttonRef = _props.buttonRef,
	          centerRipple = _props.centerRipple,
	          children = _props.children,
	          classes = _props.classes,
	          classNameProp = _props.className,
	          component = _props.component,
	          disabled = _props.disabled,
	          disableRipple = _props.disableRipple,
	          focusRipple = _props.focusRipple,
	          onBlur = _props.onBlur,
	          onFocus = _props.onFocus,
	          onKeyboardFocus = _props.onKeyboardFocus,
	          onKeyDown = _props.onKeyDown,
	          onKeyUp = _props.onKeyUp,
	          onMouseDown = _props.onMouseDown,
	          onMouseLeave = _props.onMouseLeave,
	          onMouseUp = _props.onMouseUp,
	          onTouchEnd = _props.onTouchEnd,
	          onTouchMove = _props.onTouchMove,
	          onTouchStart = _props.onTouchStart,
	          tabIndex = _props.tabIndex,
	          TouchRippleProps = _props.TouchRippleProps,
	          type = _props.type,
	          other = (0, _objectWithoutProperties3.default)(_props, ['buttonRef', 'centerRipple', 'children', 'classes', 'className', 'component', 'disabled', 'disableRipple', 'focusRipple', 'onBlur', 'onFocus', 'onKeyboardFocus', 'onKeyDown', 'onKeyUp', 'onMouseDown', 'onMouseLeave', 'onMouseUp', 'onTouchEnd', 'onTouchMove', 'onTouchStart', 'tabIndex', 'TouchRippleProps', 'type']);


	      var className = (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.disabled, disabled), (0, _defineProperty3.default)(_classNames, classes.keyboardFocused, this.state.keyboardFocused), _classNames), classNameProp);

	      var buttonProps = {};

	      var ComponentProp = component;

	      if (!ComponentProp) {
	        if (other.href) {
	          ComponentProp = 'a';
	        } else {
	          ComponentProp = 'button';
	        }
	      }

	      if (ComponentProp === 'button') {
	        buttonProps.type = type || 'button';
	        buttonProps.disabled = disabled;
	      } else {
	        buttonProps.role = 'button';
	      }

	      return _react2.default.createElement(
	        ComponentProp,
	        (0, _extends3.default)({
	          onBlur: this.handleBlur,
	          onFocus: this.handleFocus,
	          onKeyDown: this.handleKeyDown,
	          onKeyUp: this.handleKeyUp,
	          onMouseDown: this.handleMouseDown,
	          onMouseLeave: this.handleMouseLeave,
	          onMouseUp: this.handleMouseUp,
	          onTouchEnd: this.handleTouchEnd,
	          onTouchMove: this.handleTouchMove,
	          onTouchStart: this.handleTouchStart,
	          tabIndex: disabled ? '-1' : tabIndex,
	          className: className,
	          ref: buttonRef
	        }, buttonProps, other),
	        children,
	        !disableRipple && !disabled ? _react2.default.createElement(_TouchRipple2.default, (0, _extends3.default)({ innerRef: this.onRippleRef, center: centerRipple }, TouchRippleProps)) : null
	      );
	    }
	  }]);
	  return ButtonBase;
	}(_react2.default.Component);

	ButtonBase.propTypes = {
	  /**
	   * Use that property to pass a ref callback to the native button component.
	   */
	  buttonRef: _propTypes2.default.func,
	  /**
	   * If `true`, the ripples will be centered.
	   * They won't start at the cursor interaction position.
	   */
	  centerRipple: _propTypes2.default.bool,
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   * The default value is a `button`.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If `true`, the base button will be disabled.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, the ripple effect will be disabled.
	   */
	  disableRipple: _propTypes2.default.bool,
	  /**
	   * If `true`, the base button will have a keyboard focus ripple.
	   * `disableRipple` must also be `false`.
	   */
	  focusRipple: _propTypes2.default.bool,
	  /**
	   * @ignore
	   */
	  onBlur: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onClick: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onFocus: _propTypes2.default.func,
	  /**
	   * Callback fired when the component is focused with a keyboard.
	   * We trigger a `onFocus` callback too.
	   */
	  onKeyboardFocus: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onKeyDown: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onKeyUp: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onMouseDown: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onMouseLeave: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onMouseUp: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onTouchEnd: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onTouchMove: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onTouchStart: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  role: _propTypes2.default.string,
	  /**
	   * @ignore
	   */
	  tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  /**
	   * Properties applied to the `TouchRipple` element.
	   */
	  TouchRippleProps: _propTypes2.default.object,
	  /**
	   * @ignore
	   */
	  type: _propTypes2.default.string
	};

	ButtonBase.defaultProps = {
	  centerRipple: false,
	  disableRipple: false,
	  focusRipple: false,
	  tabIndex: '0',
	  type: 'button'
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiButtonBase' })(ButtonBase);
	});

	unwrapExports(ButtonBase_1);
	var ButtonBase_2 = ButtonBase_1.styles;

	var ButtonBase$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(ButtonBase_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	var ButtonBase$2 = unwrapExports(ButtonBase$1);

	var Button_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _extends3 = _interopRequireDefault(_extends$6);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);





	var _ButtonBase2 = _interopRequireDefault(ButtonBase$1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: (0, _extends3.default)({}, theme.typography.button, {
	      lineHeight: '1.4em', // Improve readability for multiline button.
	      boxSizing: 'border-box',
	      minWidth: theme.spacing.unit * 11,
	      minHeight: 36,
	      padding: theme.spacing.unit + 'px ' + theme.spacing.unit * 2 + 'px',
	      borderRadius: 2,
	      color: theme.palette.text.primary,
	      transition: theme.transitions.create(['background-color', 'box-shadow'], {
	        duration: theme.transitions.duration.short
	      }),
	      '&:hover': {
	        textDecoration: 'none',
	        // Reset on mouse devices
	        backgroundColor: (0, colorManipulator.fade)(theme.palette.text.primary, 0.12),
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        },
	        '&$disabled': {
	          backgroundColor: 'transparent'
	        }
	      }
	    }),
	    label: {
	      width: '100%',
	      display: 'inherit',
	      alignItems: 'inherit',
	      justifyContent: 'inherit'
	    },
	    flatPrimary: {
	      color: theme.palette.primary.main,
	      '&:hover': {
	        backgroundColor: (0, colorManipulator.fade)(theme.palette.primary.main, 0.12),
	        // Reset on mouse devices
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      }
	    },
	    flatSecondary: {
	      color: theme.palette.secondary.main,
	      '&:hover': {
	        backgroundColor: (0, colorManipulator.fade)(theme.palette.secondary.main, 0.12),
	        // Reset on mouse devices
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      }
	    },
	    colorInherit: {
	      color: 'inherit'
	    },
	    raised: {
	      color: theme.palette.getContrastText(theme.palette.grey[300]),
	      backgroundColor: theme.palette.grey[300],
	      boxShadow: theme.shadows[2],
	      '&$keyboardFocused': {
	        boxShadow: theme.shadows[6]
	      },
	      '&:active': {
	        boxShadow: theme.shadows[8]
	      },
	      '&$disabled': {
	        boxShadow: theme.shadows[0],
	        backgroundColor: theme.palette.action.disabledBackground
	      },
	      '&:hover': {
	        backgroundColor: theme.palette.grey.A100,
	        // Reset on mouse devices
	        '@media (hover: none)': {
	          backgroundColor: theme.palette.grey[300]
	        },
	        '&$disabled': {
	          backgroundColor: theme.palette.action.disabledBackground
	        }
	      }
	    },
	    keyboardFocused: {},
	    raisedPrimary: {
	      color: theme.palette.primary.contrastText,
	      backgroundColor: theme.palette.primary.main,
	      '&:hover': {
	        backgroundColor: theme.palette.primary.dark,
	        // Reset on mouse devices
	        '@media (hover: none)': {
	          backgroundColor: theme.palette.primary.main
	        }
	      }
	    },
	    raisedSecondary: {
	      color: theme.palette.secondary.contrastText,
	      backgroundColor: theme.palette.secondary.main,
	      '&:hover': {
	        backgroundColor: theme.palette.secondary.dark,
	        // Reset on mouse devices
	        '@media (hover: none)': {
	          backgroundColor: theme.palette.secondary.main
	        }
	      }
	    },
	    disabled: {
	      color: theme.palette.action.disabled
	    },
	    fab: {
	      borderRadius: '50%',
	      padding: 0,
	      minWidth: 0,
	      width: 56,
	      fontSize: 24,
	      height: 56,
	      boxShadow: theme.shadows[6],
	      '&:active': {
	        boxShadow: theme.shadows[12]
	      }
	    },
	    mini: {
	      width: 40,
	      height: 40
	    },
	    sizeSmall: {
	      padding: theme.spacing.unit - 1 + 'px ' + theme.spacing.unit + 'px',
	      minWidth: theme.spacing.unit * 8,
	      minHeight: 32,
	      fontSize: theme.typography.pxToRem(theme.typography.fontSize - 1)
	    },
	    sizeLarge: {
	      padding: theme.spacing.unit + 'px ' + theme.spacing.unit * 3 + 'px',
	      minWidth: theme.spacing.unit * 14,
	      minHeight: 40,
	      fontSize: theme.typography.pxToRem(theme.typography.fontSize + 1)
	    },
	    fullWidth: {
	      width: '100%'
	    }
	  };
	}; // @inheritedComponent ButtonBase

	function Button(props) {
	  var _classNames;

	  var children = props.children,
	      classes = props.classes,
	      classNameProp = props.className,
	      color = props.color,
	      disabled = props.disabled,
	      disableFocusRipple = props.disableFocusRipple,
	      fullWidth = props.fullWidth,
	      mini = props.mini,
	      size = props.size,
	      variant = props.variant,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className', 'color', 'disabled', 'disableFocusRipple', 'fullWidth', 'mini', 'size', 'variant']);


	  var fab = variant === 'fab';
	  var raised = variant === 'raised';
	  var flat = !raised && !fab;
	  var className = (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.raised, raised || fab), (0, _defineProperty3.default)(_classNames, classes.fab, fab), (0, _defineProperty3.default)(_classNames, classes.mini, fab && mini), (0, _defineProperty3.default)(_classNames, classes.colorInherit, color === 'inherit'), (0, _defineProperty3.default)(_classNames, classes.flatPrimary, flat && color === 'primary'), (0, _defineProperty3.default)(_classNames, classes.flatSecondary, flat && color === 'secondary'), (0, _defineProperty3.default)(_classNames, classes.raisedPrimary, !flat && color === 'primary'), (0, _defineProperty3.default)(_classNames, classes.raisedSecondary, !flat && color === 'secondary'), (0, _defineProperty3.default)(_classNames, classes['size' + (0, helpers.capitalize)(size)], size !== 'medium'), (0, _defineProperty3.default)(_classNames, classes.disabled, disabled), (0, _defineProperty3.default)(_classNames, classes.fullWidth, fullWidth), _classNames), classNameProp);

	  return _react2.default.createElement(
	    _ButtonBase2.default,
	    (0, _extends3.default)({
	      className: className,
	      disabled: disabled,
	      focusRipple: !disableFocusRipple,
	      classes: {
	        keyboardFocused: classes.keyboardFocused
	      }
	    }, other),
	    _react2.default.createElement(
	      'span',
	      { className: classes.label },
	      children
	    )
	  );
	}

	Button.propTypes = {
	  /**
	   * The content of the button.
	   */
	  children: _propTypes2.default.node.isRequired,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: _propTypes2.default.oneOf(['default', 'inherit', 'primary', 'secondary']),
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   * The default value is a `button`.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If `true`, the button will be disabled.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, the  keyboard focus ripple will be disabled.
	   * `disableRipple` must also be true.
	   */
	  disableFocusRipple: _propTypes2.default.bool,
	  /**
	   * If `true`, the ripple effect will be disabled.
	   */
	  disableRipple: _propTypes2.default.bool,
	  /**
	   * If `true`, the button will take up the full width of its container.
	   */
	  fullWidth: _propTypes2.default.bool,
	  /**
	   * The URL to link to when the button is clicked.
	   * If defined, an `a` element will be used as the root node.
	   */
	  href: _propTypes2.default.string,
	  /**
	   * If `true`, and `variant` is `'fab'`, will use mini floating action button styling.
	   */
	  mini: _propTypes2.default.bool,
	  /**
	   * The size of the button.
	   * `small` is equivalent to the dense button styling.
	   */
	  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
	  /**
	   * @ignore
	   */
	  type: _propTypes2.default.string,
	  /**
	   * The type of button.
	   */
	  variant: _propTypes2.default.oneOf(['flat', 'raised', 'fab'])
	};

	Button.defaultProps = {
	  color: 'default',
	  disabled: false,
	  disableFocusRipple: false,
	  disableRipple: false,
	  fullWidth: false,
	  mini: false,
	  size: 'medium',
	  type: 'button',
	  variant: 'flat'
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiButton' })(Button);
	});

	unwrapExports(Button_1);
	var Button_2 = Button_1.styles;

	var Button$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Button_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	var Button$2 = unwrapExports(Button$1);

	var Card_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _Paper2 = _interopRequireDefault(Paper$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function Card(props) {
	  var raised = props.raised,
	      other = (0, _objectWithoutProperties3.default)(props, ['raised']);


	  return _react2.default.createElement(_Paper2.default, (0, _extends3.default)({ elevation: raised ? 8 : 2 }, other));
	} // @inheritedComponent Paper

	Card.propTypes = {
	  /**
	   * If `true`, the card will use raised styling.
	   */
	  raised: _propTypes2.default.bool
	};

	Card.defaultProps = {
	  raised: false
	};

	exports.default = Card;
	});

	unwrapExports(Card_1);

	var CardContent_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: theme.mixins.gutters({
	      paddingTop: theme.spacing.unit * 2,
	      paddingBottom: theme.spacing.unit * 2,
	      '&:last-child': {
	        paddingBottom: theme.spacing.unit * 3
	      }
	    })
	  };
	};

	function CardContent(props) {
	  var classes = props.classes,
	      className = props.className,
	      Component = props.component,
	      other = (0, _objectWithoutProperties3.default)(props, ['classes', 'className', 'component']);


	  return _react2.default.createElement(Component, (0, _extends3.default)({ className: (0, _classnames2.default)(classes.root, className) }, other));
	}

	CardContent.propTypes = {
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
	};

	CardContent.defaultProps = {
	  component: 'div'
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiCardContent' })(CardContent);
	});

	unwrapExports(CardContent_1);
	var CardContent_2 = CardContent_1.styles;

	var reactHelpers = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.cloneElementWithClassName = cloneElementWithClassName;
	exports.cloneChildrenWithClassName = cloneChildrenWithClassName;
	exports.isMuiElement = isMuiElement;
	exports.isMuiComponent = isMuiComponent;



	var _react2 = _interopRequireDefault(react);



	var _classnames2 = _interopRequireDefault(classnames);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* eslint-disable import/prefer-default-export */

	function cloneElementWithClassName(child, className) {
	  return _react2.default.cloneElement(child, {
	    className: (0, _classnames2.default)(child.props.className, className)
	  });
	}

	function cloneChildrenWithClassName(children, className) {
	  return _react2.default.Children.map(children, function (child) {
	    return _react2.default.isValidElement(child) && cloneElementWithClassName(child, className);
	  });
	}

	function isMuiElement(element, muiNames) {
	  return _react2.default.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
	}

	function isMuiComponent(element, muiNames) {
	  return muiNames.indexOf(element.muiName) !== -1;
	}
	});

	unwrapExports(reactHelpers);
	var reactHelpers_1 = reactHelpers.cloneElementWithClassName;
	var reactHelpers_2 = reactHelpers.cloneChildrenWithClassName;
	var reactHelpers_3 = reactHelpers.isMuiElement;
	var reactHelpers_4 = reactHelpers.isMuiComponent;

	var CardActions_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: (0, _defineProperty3.default)({
	      display: 'flex',
	      alignItems: 'center',
	      boxSizing: 'border-box',
	      padding: theme.spacing.unit + 'px ' + theme.spacing.unit / 2 + 'px'
	    }, theme.breakpoints.up('sm'), {
	      padding: theme.spacing.unit + 'px ' + theme.spacing.unit * 1.5 + 'px'
	    }),
	    action: {
	      margin: '0 ' + theme.spacing.unit / 2 + 'px'
	    }
	  };
	};

	function CardActions(props) {
	  var disableActionSpacing = props.disableActionSpacing,
	      children = props.children,
	      classes = props.classes,
	      className = props.className,
	      other = (0, _objectWithoutProperties3.default)(props, ['disableActionSpacing', 'children', 'classes', 'className']);


	  return _react2.default.createElement(
	    'div',
	    (0, _extends3.default)({ className: (0, _classnames2.default)(classes.root, className) }, other),
	    disableActionSpacing ? children : (0, reactHelpers.cloneChildrenWithClassName)(children, classes.action)
	  );
	}

	CardActions.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * If `true`, the card actions do not have additional margin.
	   */
	  disableActionSpacing: _propTypes2.default.bool
	};

	CardActions.defaultProps = {
	  disableActionSpacing: false
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiCardActions' })(CardActions);
	});

	unwrapExports(CardActions_1);
	var CardActions_2 = CardActions_1.styles;

	var CardMedia_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _warning2 = _interopRequireDefault(browser);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = {
	  root: {
	    backgroundSize: 'cover',
	    backgroundRepeat: 'no-repeat',
	    backgroundPosition: 'center'
	  },
	  media: {
	    width: '100%'
	  }
	};

	var MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];

	function CardMedia(props) {
	  var classes = props.classes,
	      className = props.className,
	      Component = props.component,
	      image = props.image,
	      src = props.src,
	      style = props.style,
	      other = (0, _objectWithoutProperties3.default)(props, ['classes', 'className', 'component', 'image', 'src', 'style']);


	  (0, _warning2.default)(Boolean(image || src), 'Material-UI: either `image` or `src` property must be specified.');

	  var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;
	  var composedStyle = !isMediaComponent && image ? (0, _extends3.default)({ backgroundImage: 'url(' + image + ')' }, style) : style;

	  return _react2.default.createElement(Component, (0, _extends3.default)({
	    className: (0, _classnames2.default)(classes.root, (0, _defineProperty3.default)({}, classes.media, isMediaComponent), className),
	    style: composedStyle,
	    src: isMediaComponent ? image || src : undefined
	  }, other));
	}

	CardMedia.propTypes = {
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * Component for rendering image.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * Image to be displayed as a background image.
	   * Either `image` or `src` prop must be specified.
	   * Note that caller must specify height otherwise the image will not be visible.
	   */
	  image: _propTypes2.default.string,
	  /**
	   * An alias for `image` property.
	   * Available only with media components.
	   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
	   */
	  src: _propTypes2.default.string,
	  /**
	   * @ignore
	   */
	  style: _propTypes2.default.object
	};

	CardMedia.defaultProps = {
	  component: 'div'
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiCardMedia' })(CardMedia);
	});

	unwrapExports(CardMedia_1);
	var CardMedia_2 = CardMedia_1.styles;

	var Typography_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      display: 'block',
	      margin: 0
	    },
	    display4: theme.typography.display4,
	    display3: theme.typography.display3,
	    display2: theme.typography.display2,
	    display1: theme.typography.display1,
	    headline: theme.typography.headline,
	    title: theme.typography.title,
	    subheading: theme.typography.subheading,
	    body2: theme.typography.body2,
	    body1: theme.typography.body1,
	    caption: theme.typography.caption,
	    button: theme.typography.button,
	    alignLeft: {
	      textAlign: 'left'
	    },
	    alignCenter: {
	      textAlign: 'center'
	    },
	    alignRight: {
	      textAlign: 'right'
	    },
	    alignJustify: {
	      textAlign: 'justify'
	    },
	    noWrap: {
	      overflow: 'hidden',
	      textOverflow: 'ellipsis',
	      whiteSpace: 'nowrap'
	    },
	    gutterBottom: {
	      marginBottom: '0.35em'
	    },
	    paragraph: {
	      marginBottom: theme.spacing.unit * 2
	    },
	    colorInherit: {
	      color: 'inherit'
	    },
	    colorPrimary: {
	      color: theme.palette.primary.main
	    },
	    colorSecondary: {
	      color: theme.palette.secondary.main
	    },
	    colorTextSecondary: {
	      color: theme.palette.text.secondary
	    },
	    colorError: {
	      color: theme.palette.error.main
	    }
	  };
	};

	function Typography(props) {
	  var _classNames;

	  var align = props.align,
	      classes = props.classes,
	      classNameProp = props.className,
	      componentProp = props.component,
	      color = props.color,
	      gutterBottom = props.gutterBottom,
	      headlineMapping = props.headlineMapping,
	      noWrap = props.noWrap,
	      paragraph = props.paragraph,
	      variant = props.variant,
	      other = (0, _objectWithoutProperties3.default)(props, ['align', 'classes', 'className', 'component', 'color', 'gutterBottom', 'headlineMapping', 'noWrap', 'paragraph', 'variant']);


	  var className = (0, _classnames2.default)(classes.root, classes[variant], (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes['color' + (0, helpers.capitalize)(color)], color !== 'default'), (0, _defineProperty3.default)(_classNames, classes.noWrap, noWrap), (0, _defineProperty3.default)(_classNames, classes.gutterBottom, gutterBottom), (0, _defineProperty3.default)(_classNames, classes.paragraph, paragraph), (0, _defineProperty3.default)(_classNames, classes['align' + (0, helpers.capitalize)(align)], align !== 'inherit'), _classNames), classNameProp);

	  var Component = componentProp || (paragraph ? 'p' : headlineMapping[variant]) || 'span';

	  return _react2.default.createElement(Component, (0, _extends3.default)({ className: className }, other));
	}

	Typography.propTypes = {
	  /**
	   * Set the text-align on the component.
	   */
	  align: _propTypes2.default.oneOf(['inherit', 'left', 'center', 'right', 'justify']),
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: _propTypes2.default.oneOf(['inherit', 'primary', 'textSecondary', 'secondary', 'error', 'default']),
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   * By default, it maps the variant to a good default headline component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If `true`, the text will have a bottom margin.
	   */
	  gutterBottom: _propTypes2.default.bool,
	  /**
	   * We are empirically mapping the variant property to a range of different DOM element types.
	   * For instance, h1 to h6. If you wish to change that mapping, you can provide your own.
	   * Alternatively, you can use the `component` property.
	   */
	  headlineMapping: _propTypes2.default.object,
	  /**
	   * If `true`, the text will not wrap, but instead will truncate with an ellipsis.
	   */
	  noWrap: _propTypes2.default.bool,
	  /**
	   * If `true`, the text will have a bottom margin.
	   */
	  paragraph: _propTypes2.default.bool,
	  /**
	   * Applies the theme typography styles.
	   */
	  variant: _propTypes2.default.oneOf(['display4', 'display3', 'display2', 'display1', 'headline', 'title', 'subheading', 'body2', 'body1', 'caption', 'button'])
	};

	Typography.defaultProps = {
	  align: 'inherit',
	  color: 'default',
	  gutterBottom: false,
	  headlineMapping: {
	    display4: 'h1',
	    display3: 'h1',
	    display2: 'h1',
	    display1: 'h1',
	    headline: 'h1',
	    title: 'h2',
	    subheading: 'h3',
	    body2: 'aside',
	    body1: 'p'
	  },
	  noWrap: false,
	  paragraph: false,
	  variant: 'body1'
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiTypography' })(Typography);
	});

	unwrapExports(Typography_1);
	var Typography_2 = Typography_1.styles;

	var Typography$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Typography_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	var Typography$2 = unwrapExports(Typography$1);

	var CardHeader_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _Typography2 = _interopRequireDefault(Typography$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: theme.mixins.gutters({
	      display: 'flex',
	      alignItems: 'center',
	      paddingTop: theme.spacing.unit * 2,
	      paddingBottom: theme.spacing.unit * 2
	    }),
	    avatar: {
	      flex: '0 0 auto',
	      marginRight: theme.spacing.unit * 2
	    },
	    action: {
	      flex: '0 0 auto',
	      alignSelf: 'flex-start',
	      marginTop: theme.spacing.unit * -1,
	      marginRight: theme.spacing.unit * -2
	    },
	    content: {
	      flex: '1 1 auto'
	    },
	    title: {},
	    subheader: {}
	  };
	};

	function CardHeader(props) {
	  var action = props.action,
	      avatar = props.avatar,
	      classes = props.classes,
	      classNameProp = props.className,
	      Component = props.component,
	      subheader = props.subheader,
	      title = props.title,
	      other = (0, _objectWithoutProperties3.default)(props, ['action', 'avatar', 'classes', 'className', 'component', 'subheader', 'title']);


	  return _react2.default.createElement(
	    Component,
	    (0, _extends3.default)({ className: (0, _classnames2.default)(classes.root, classNameProp) }, other),
	    avatar && _react2.default.createElement(
	      'div',
	      { className: classes.avatar },
	      avatar
	    ),
	    _react2.default.createElement(
	      'div',
	      { className: classes.content },
	      _react2.default.createElement(
	        _Typography2.default,
	        {
	          variant: avatar ? 'body2' : 'headline',
	          component: 'span',
	          className: classes.title
	        },
	        title
	      ),
	      subheader && _react2.default.createElement(
	        _Typography2.default,
	        {
	          variant: avatar ? 'body2' : 'body1',
	          component: 'span',
	          color: 'textSecondary',
	          className: classes.subheader
	        },
	        subheader
	      )
	    ),
	    action && _react2.default.createElement(
	      'div',
	      { className: classes.action },
	      action
	    )
	  );
	}

	CardHeader.propTypes = {
	  /**
	   * The action to display in the card header.
	   */
	  action: _propTypes2.default.node,
	  /**
	   * The Avatar for the Card Header.
	   */
	  avatar: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * The content of the component.
	   */
	  subheader: _propTypes2.default.node,
	  /**
	   * The content of the Card Title.
	   */
	  title: _propTypes2.default.node
	};

	CardHeader.defaultProps = {
	  component: 'div'
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiCardHeader' })(CardHeader);
	});

	unwrapExports(CardHeader_1);
	var CardHeader_2 = CardHeader_1.styles;

	var Card$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Card_1).default;
	  }
	});



	Object.defineProperty(exports, 'CardContent', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(CardContent_1).default;
	  }
	});



	Object.defineProperty(exports, 'CardActions', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(CardActions_1).default;
	  }
	});



	Object.defineProperty(exports, 'CardMedia', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(CardMedia_1).default;
	  }
	});



	Object.defineProperty(exports, 'CardHeader', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(CardHeader_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	var Card$2 = unwrapExports(Card$1);
	var Card_1$1 = Card$1.CardActions;
	var Card_2 = Card$1.CardContent;

	var FormGroup_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = {
	  root: {
	    display: 'flex',
	    flexDirection: 'column',
	    flexWrap: 'wrap'
	  },
	  row: {
	    flexDirection: 'row'
	  }
	};

	/**
	 * `FormGroup` wraps controls such as `Checkbox` and `Switch`.
	 * It provides compact row layout.
	 * For the `Radio`, you should be using the `RadioGroup` component instead of this one.
	 */
	function FormGroup(props) {
	  var classes = props.classes,
	      className = props.className,
	      children = props.children,
	      row = props.row,
	      other = (0, _objectWithoutProperties3.default)(props, ['classes', 'className', 'children', 'row']);


	  return _react2.default.createElement(
	    'div',
	    (0, _extends3.default)({
	      className: (0, _classnames2.default)(classes.root, (0, _defineProperty3.default)({}, classes.row, row), className)
	    }, other),
	    children
	  );
	}

	FormGroup.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * Display group of elements in a compact row.
	   */
	  row: _propTypes2.default.bool
	};

	FormGroup.defaultProps = {
	  row: false
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiFormGroup' })(FormGroup);
	});

	unwrapExports(FormGroup_1);
	var FormGroup_2 = FormGroup_1.styles;

	var FormLabel_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      fontFamily: theme.typography.fontFamily,
	      color: theme.palette.text.secondary,
	      fontSize: theme.typography.pxToRem(16),
	      lineHeight: 1,
	      padding: 0
	    },
	    focused: {
	      color: theme.palette.primary[theme.palette.type === 'light' ? 'dark' : 'light']
	    },
	    disabled: {
	      color: theme.palette.text.disabled
	    },
	    error: {
	      color: theme.palette.error.main
	    },
	    asterisk: {},
	    asteriskError: {
	      color: theme.palette.error.main
	    }
	  };
	};

	function FormLabel(props, context) {
	  var _classNames;

	  var children = props.children,
	      classes = props.classes,
	      classNameProp = props.className,
	      Component = props.component,
	      disabledProp = props.disabled,
	      errorProp = props.error,
	      focusedProp = props.focused,
	      requiredProp = props.required,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className', 'component', 'disabled', 'error', 'focused', 'required']);
	  var muiFormControl = context.muiFormControl;


	  var required = requiredProp;
	  var focused = focusedProp;
	  var disabled = disabledProp;
	  var error = errorProp;

	  if (muiFormControl) {
	    if (typeof required === 'undefined') {
	      required = muiFormControl.required;
	    }
	    if (typeof focused === 'undefined') {
	      focused = muiFormControl.focused;
	    }
	    if (typeof disabled === 'undefined') {
	      disabled = muiFormControl.disabled;
	    }
	    if (typeof error === 'undefined') {
	      error = muiFormControl.error;
	    }
	  }

	  var className = (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.focused, focused), (0, _defineProperty3.default)(_classNames, classes.disabled, disabled), (0, _defineProperty3.default)(_classNames, classes.error, error), _classNames), classNameProp);

	  return _react2.default.createElement(
	    Component,
	    (0, _extends3.default)({ className: className }, other),
	    children,
	    required && _react2.default.createElement(
	      'span',
	      {
	        className: (0, _classnames2.default)(classes.asterisk, (0, _defineProperty3.default)({}, classes.asteriskError, error))
	      },
	      '\u2009*'
	    )
	  );
	}

	FormLabel.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If `true`, the label should be displayed in a disabled state.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, the label should be displayed in an error state.
	   */
	  error: _propTypes2.default.bool,
	  /**
	   * If `true`, the input of this label is focused (used by `FormGroup` components).
	   */
	  focused: _propTypes2.default.bool,
	  /**
	   * If `true`, the label will indicate that the input is required.
	   */
	  required: _propTypes2.default.bool
	};

	FormLabel.defaultProps = {
	  component: 'label'
	};

	FormLabel.contextTypes = {
	  muiFormControl: _propTypes2.default.object
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiFormLabel' })(FormLabel);
	});

	unwrapExports(FormLabel_1);
	var FormLabel_2 = FormLabel_1.styles;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return _root.Date.now();
	};

	var now_1 = now;

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol_1(value)) {
	    return NAN;
	  }
	  if (isObject_1(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject_1(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	var toNumber_1 = toNumber;

	/** Error message constants. */
	var FUNC_ERROR_TEXT$1 = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$1);
	  }
	  wait = toNumber_1(wait) || 0;
	  if (isObject_1(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber_1(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        timeWaiting = wait - timeSinceLastCall;

	    return maxing
	      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	      : timeWaiting;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now_1();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now_1());
	  }

	  function debounced() {
	    var time = now_1(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	var debounce_1 = debounce;

	var supports = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.passiveOption = undefined;



	var _defineProperty2 = _interopRequireDefault(defineProperty$3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function defineProperty(object, property, attr) {
	  return (0, _defineProperty2.default)(object, property, attr);
	}

	// Passive options
	// Inspired by https://github.com/Modernizr/Modernizr/blob/master/feature-detects/dom/passiveeventlisteners.js
	var passiveOption = exports.passiveOption = function () {
	  var cache = null;

	  return function () {
	    if (cache !== null) {
	      return cache;
	    }

	    var supportsPassiveOption = false;

	    try {
	      window.addEventListener('test', null, defineProperty({}, 'passive', {
	        get: function get() {
	          supportsPassiveOption = true;
	        }
	      }));
	    } catch (err) {
	      //
	    }

	    cache = supportsPassiveOption;

	    return supportsPassiveOption;
	  }();
	}();

	exports.default = {};
	});

	unwrapExports(supports);
	var supports_1 = supports.passiveOption;

	var lib$8 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _typeof3 = _interopRequireDefault(_typeof_1);



	var _keys2 = _interopRequireDefault(keys$1);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _assign2 = _interopRequireDefault(assign$1);

	exports.withOptions = withOptions;



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _shallowEqual2 = _interopRequireDefault(shallowEqual_1);



	var _warning2 = _interopRequireDefault(browser);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultEventOptions = {
	  capture: false,
	  passive: false
	};

	function mergeDefaultEventOptions(options) {
	  return (0, _assign2.default)({}, defaultEventOptions, options);
	}

	function getEventListenerArgs(eventName, callback, options) {
	  var args = [eventName, callback];
	  args.push(supports.passiveOption ? options : options.capture);
	  return args;
	}

	function on(target, eventName, callback, options) {
	  // eslint-disable-next-line prefer-spread
	  target.addEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
	}

	function off(target, eventName, callback, options) {
	  // eslint-disable-next-line prefer-spread
	  target.removeEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
	}

	function forEachListener(props, iteratee) {
	  var children = props.children,
	      target = props.target,
	      eventProps = (0, _objectWithoutProperties3.default)(props, ['children', 'target']);


	  (0, _keys2.default)(eventProps).forEach(function (name) {
	    if (name.substring(0, 2) !== 'on') {
	      return;
	    }

	    var prop = eventProps[name];
	    var type = typeof prop === 'undefined' ? 'undefined' : (0, _typeof3.default)(prop);
	    var isObject = type === 'object';
	    var isFunction = type === 'function';

	    if (!isObject && !isFunction) {
	      return;
	    }

	    var capture = name.substr(-7).toLowerCase() === 'capture';
	    var eventName = name.substring(2).toLowerCase();
	    eventName = capture ? eventName.substring(0, eventName.length - 7) : eventName;

	    if (isObject) {
	      iteratee(eventName, prop.handler, prop.options);
	    } else {
	      iteratee(eventName, prop, mergeDefaultEventOptions({ capture: capture }));
	    }
	  });
	}

	function withOptions(handler, options) {
	  (0, _warning2.default)(options, 'react-event-listener: should be specified options in withOptions.');

	  return {
	    handler: handler,
	    options: mergeDefaultEventOptions(options)
	  };
	}

	var EventListener = function (_React$Component) {
	  (0, _inherits3.default)(EventListener, _React$Component);

	  function EventListener() {
	    (0, _classCallCheck3.default)(this, EventListener);
	    return (0, _possibleConstructorReturn3.default)(this, (EventListener.__proto__ || (0, _getPrototypeOf2.default)(EventListener)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(EventListener, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.addListeners();
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate() {
	      this.removeListeners();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.addListeners();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.removeListeners();
	    }
	  }, {
	    key: 'addListeners',
	    value: function addListeners() {
	      this.applyListeners(on);
	    }
	  }, {
	    key: 'removeListeners',
	    value: function removeListeners() {
	      this.applyListeners(off);
	    }
	  }, {
	    key: 'applyListeners',
	    value: function applyListeners(onOrOff) {
	      var target = this.props.target;


	      if (target) {
	        var element = target;

	        if (typeof target === 'string') {
	          element = window[target];
	        }

	        forEachListener(this.props, onOrOff.bind(null, element));
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children || null;
	    }
	  }]);
	  return EventListener;
	}(_react2.default.Component);

	EventListener.propTypes = {
	  /**
	   * You can provide a single child too.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * The DOM target to listen to.
	   */
	  target: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]).isRequired
	};

	exports.default = EventListener;
	});

	unwrapExports(lib$8);
	var lib_1$2 = lib$8.withOptions;

	var Textarea_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _debounce2 = _interopRequireDefault(debounce_1);



	var _reactEventListener2 = _interopRequireDefault(lib$8);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var ROWS_HEIGHT = 19;

	var styles = exports.styles = {
	  root: {
	    position: 'relative', // because the shadow has position: 'absolute',
	    width: '100%'
	  },
	  textarea: {
	    width: '100%',
	    height: '100%',
	    resize: 'none',
	    font: 'inherit',
	    padding: 0,
	    cursor: 'inherit',
	    boxSizing: 'border-box',
	    lineHeight: 'inherit',
	    border: 'none',
	    outline: 'none',
	    background: 'transparent'
	  },
	  shadow: {
	    resize: 'none',
	    // Overflow also needed to here to remove the extra row
	    // added to textareas in Firefox.
	    overflow: 'hidden',
	    // Visibility needed to hide the extra text area on ipads
	    visibility: 'hidden',
	    position: 'absolute',
	    height: 'auto',
	    whiteSpace: 'pre-wrap'
	  }
	};

	/**
	 * @ignore - internal component.
	 */

	var Textarea = function (_React$Component) {
	  (0, _inherits3.default)(Textarea, _React$Component);

	  function Textarea(props, context) {
	    (0, _classCallCheck3.default)(this, Textarea);

	    // <Input> expects the components it renders to respond to 'value'
	    // so that it can check whether they are dirty
	    var _this = (0, _possibleConstructorReturn3.default)(this, (Textarea.__proto__ || (0, _getPrototypeOf2.default)(Textarea)).call(this, props, context));

	    _this.state = {
	      height: null
	    };
	    _this.shadow = null;
	    _this.singlelineShadow = null;
	    _this.input = null;
	    _this.value = null;
	    _this.handleResize = (0, _debounce2.default)(function () {
	      _this.syncHeightWithShadow();
	    }, 166);

	    _this.handleRefInput = function (node) {
	      _this.input = node;
	      if (_this.props.textareaRef) {
	        _this.props.textareaRef(node);
	      }
	    };

	    _this.handleRefSinglelineShadow = function (node) {
	      _this.singlelineShadow = node;
	    };

	    _this.handleRefShadow = function (node) {
	      _this.shadow = node;
	    };

	    _this.handleChange = function (event) {
	      _this.value = event.target.value;

	      if (typeof _this.props.value === 'undefined' && _this.shadow) {
	        // The component is not controlled, we need to update the shallow value.
	        _this.shadow.value = _this.value;
	        _this.syncHeightWithShadow();
	      }

	      if (_this.props.onChange) {
	        _this.props.onChange(event);
	      }
	    };

	    _this.value = props.value || props.defaultValue || '';
	    _this.state = {
	      height: Number(props.rows) * ROWS_HEIGHT
	    };
	    return _this;
	  }

	  (0, _createClass3.default)(Textarea, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.syncHeightWithShadow();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.syncHeightWithShadow();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.handleResize.cancel();
	    }
	  }, {
	    key: 'syncHeightWithShadow',
	    // Corresponds to 10 frames at 60 Hz.

	    value: function syncHeightWithShadow() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;

	      if (!this.shadow || !this.singlelineShadow) {
	        return;
	      }

	      // The component is controlled, we need to update the shallow value.
	      if (typeof this.props.value !== 'undefined') {
	        this.shadow.value = props.value == null ? '' : String(props.value);
	      }

	      var lineHeight = this.singlelineShadow.scrollHeight;
	      var newHeight = this.shadow.scrollHeight;

	      // Guarding for jsdom, where scrollHeight isn't present.
	      // See https://github.com/tmpvar/jsdom/issues/1013
	      if (newHeight === undefined) {
	        return;
	      }

	      if (Number(props.rowsMax) >= Number(props.rows)) {
	        newHeight = Math.min(Number(props.rowsMax) * lineHeight, newHeight);
	      }

	      newHeight = Math.max(newHeight, lineHeight);

	      if (this.state.height !== newHeight) {
	        this.setState({
	          height: newHeight
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          classes = _props.classes,
	          className = _props.className,
	          defaultValue = _props.defaultValue,
	          onChange = _props.onChange,
	          rows = _props.rows,
	          rowsMax = _props.rowsMax,
	          textareaRef = _props.textareaRef,
	          value = _props.value,
	          other = (0, _objectWithoutProperties3.default)(_props, ['classes', 'className', 'defaultValue', 'onChange', 'rows', 'rowsMax', 'textareaRef', 'value']);


	      return _react2.default.createElement(
	        'div',
	        { className: classes.root, style: { height: this.state.height } },
	        _react2.default.createElement(_reactEventListener2.default, { target: 'window', onResize: this.handleResize }),
	        _react2.default.createElement('textarea', {
	          ref: this.handleRefSinglelineShadow,
	          className: (0, _classnames2.default)(classes.shadow, classes.textarea),
	          tabIndex: -1,
	          rows: '1',
	          readOnly: true,
	          'aria-hidden': 'true',
	          value: ''
	        }),
	        _react2.default.createElement('textarea', {
	          ref: this.handleRefShadow,
	          className: (0, _classnames2.default)(classes.shadow, classes.textarea),
	          tabIndex: -1,
	          rows: rows,
	          'aria-hidden': 'true',
	          readOnly: true,
	          defaultValue: defaultValue,
	          value: value
	        }),
	        _react2.default.createElement('textarea', (0, _extends3.default)({
	          rows: rows,
	          className: (0, _classnames2.default)(classes.textarea, className),
	          defaultValue: defaultValue,
	          value: value,
	          onChange: this.handleChange,
	          ref: this.handleRefInput
	        }, other))
	      );
	    }
	  }]);
	  return Textarea;
	}(_react2.default.Component);

	Textarea.propTypes = {
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * @ignore
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  /**
	   * @ignore
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * @ignore
	   */
	  onChange: _propTypes2.default.func,
	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  rowsMax: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  /**
	   * Use that property to pass a ref callback to the native textarea element.
	   */
	  textareaRef: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
	};

	Textarea.defaultProps = {
	  rows: 1
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiTextarea' })(Textarea);
	});

	unwrapExports(Textarea_1);
	var Textarea_2 = Textarea_1.styles;

	var Input_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);

	exports.hasValue = hasValue;
	exports.isDirty = isDirty;
	exports.isAdornedStart = isAdornedStart;



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _Textarea2 = _interopRequireDefault(Textarea_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Supports determination of isControlled().
	// Controlled input accepts its current value as a prop.
	//
	// @see https://facebook.github.io/react/docs/forms.html#controlled-components
	// @param value
	// @returns {boolean} true if string (including '') or number (including zero)
	function hasValue(value) {
	  return value != null && !(Array.isArray(value) && value.length === 0);
	}

	// Determine if field is dirty (a.k.a. filled).
	//
	// Response determines if label is presented above field or as placeholder.
	//
	// @param obj
	// @param SSR
	// @returns {boolean} False when not present or empty string.
	//                    True when any number or string with length.
	function isDirty(obj) {
	  var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
	}

	// Determine if an Input is adorned on start.
	// It's corresponding to the left with LTR.
	//
	// @param obj
	// @returns {boolean} False when no adornments.
	//                    True when adorned at the start.
	function isAdornedStart(obj) {
	  return obj.startAdornment;
	}

	var styles = exports.styles = function styles(theme) {
	  var light = theme.palette.type === 'light';
	  var placeholder = {
	    color: 'currentColor',
	    opacity: light ? 0.42 : 0.5,
	    transition: theme.transitions.create('opacity', {
	      duration: theme.transitions.duration.shorter
	    })
	  };
	  var placeholderHidden = {
	    opacity: 0
	  };
	  var placeholderVisible = {
	    opacity: light ? 0.42 : 0.5
	  };
	  var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';

	  return {
	    root: {
	      // Mimics the default input display property used by browsers for an input.
	      display: 'inline-flex',
	      position: 'relative',
	      fontFamily: theme.typography.fontFamily,
	      color: light ? 'rgba(0, 0, 0, 0.87)' : theme.palette.common.white,
	      fontSize: theme.typography.pxToRem(16),
	      lineHeight: '1.1875em' // Reset (19px), match the native input line-height
	    },
	    formControl: {
	      'label + &': {
	        marginTop: theme.spacing.unit * 2
	      }
	    },
	    focused: {},
	    disabled: {
	      color: theme.palette.text.disabled
	    },
	    underline: {
	      '&:after': {
	        backgroundColor: theme.palette.primary[light ? 'dark' : 'light'],
	        left: 0,
	        bottom: 0,
	        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	        content: '""',
	        height: 2,
	        position: 'absolute',
	        right: 0,
	        transform: 'scaleX(0)',
	        transition: theme.transitions.create('transform', {
	          duration: theme.transitions.duration.shorter,
	          easing: theme.transitions.easing.easeOut
	        }),
	        pointerEvents: 'none' // Transparent to the hover style.
	      },
	      '&$focused:after': {
	        transform: 'scaleX(1)'
	      },
	      '&:before': {
	        backgroundColor: bottomLineColor,
	        left: 0,
	        bottom: 0,
	        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	        content: '""',
	        height: 1,
	        position: 'absolute',
	        right: 0,
	        transition: theme.transitions.create('background-color', {
	          duration: theme.transitions.duration.shorter
	        }),
	        pointerEvents: 'none' // Transparent to the hover style.
	      },
	      '&:hover:not($disabled):before': {
	        backgroundColor: theme.palette.text.primary,
	        height: 2
	      },
	      '&$disabled:before': {
	        background: 'transparent',
	        backgroundImage: 'linear-gradient(to right, ' + bottomLineColor + ' 33%, transparent 0%)',
	        backgroundPosition: 'left top',
	        backgroundRepeat: 'repeat-x',
	        backgroundSize: '5px 1px'
	      }
	    },
	    error: {
	      '&:after': {
	        backgroundColor: theme.palette.error.main,
	        transform: 'scaleX(1)' // error is always underlined in red
	      }
	    },
	    multiline: {
	      padding: theme.spacing.unit - 2 + 'px 0 ' + (theme.spacing.unit - 1) + 'px'
	    },
	    fullWidth: {
	      width: '100%'
	    },
	    input: {
	      font: 'inherit',
	      color: 'currentColor',
	      padding: theme.spacing.unit - 2 + 'px 0 ' + (theme.spacing.unit - 1) + 'px',
	      border: 0,
	      boxSizing: 'content-box',
	      verticalAlign: 'middle',
	      background: 'none',
	      margin: 0, // Reset for Safari
	      // Remove grey highlight
	      WebkitTapHighlightColor: 'transparent',
	      display: 'block',
	      // Make the flex item shrink with Firefox
	      minWidth: 0,
	      width: '100%',
	      '&::-webkit-input-placeholder': placeholder,
	      '&::-moz-placeholder': placeholder, // Firefox 19+
	      '&:-ms-input-placeholder': placeholder, // IE 11
	      '&::-ms-input-placeholder': placeholder, // Edge
	      '&:focus': {
	        outline: 0
	      },
	      // Reset Firefox invalid required input style
	      '&:invalid': {
	        boxShadow: 'none'
	      },
	      '&::-webkit-search-decoration': {
	        // Remove the padding when type=search.
	        '-webkit-appearance': 'none'
	      },
	      // Show and hide the placeholder logic
	      'label[data-shrink=false] + $formControl &': {
	        '&::-webkit-input-placeholder': placeholderHidden,
	        '&::-moz-placeholder': placeholderHidden, // Firefox 19+
	        '&:-ms-input-placeholder': placeholderHidden, // IE 11
	        '&::-ms-input-placeholder': placeholderHidden, // Edge
	        '&:focus::-webkit-input-placeholder': placeholderVisible,
	        '&:focus::-moz-placeholder': placeholderVisible, // Firefox 19+
	        '&:focus:-ms-input-placeholder': placeholderVisible, // IE 11
	        '&:focus::-ms-input-placeholder': placeholderVisible // Edge
	      }
	    },
	    inputMarginDense: {
	      paddingTop: theme.spacing.unit / 2 - 1
	    },
	    inputDisabled: {
	      opacity: 1 // Reset iOS opacity
	    },
	    inputMultiline: {
	      resize: 'none',
	      padding: 0
	    },
	    inputType: {
	      // type="date" or type="time", etc. have specific styles we need to reset.
	      height: '1.1875em' // Reset (19px), match the native input line-height
	    },
	    inputTypeSearch: {
	      // Improve type search style.
	      '-moz-appearance': 'textfield',
	      '-webkit-appearance': 'textfield'
	    }
	  };
	};

	function formControlState(props, context) {
	  var disabled = props.disabled;
	  var error = props.error;
	  var margin = props.margin;

	  if (context && context.muiFormControl) {
	    if (typeof disabled === 'undefined') {
	      disabled = context.muiFormControl.disabled;
	    }

	    if (typeof error === 'undefined') {
	      error = context.muiFormControl.error;
	    }

	    if (typeof margin === 'undefined') {
	      margin = context.muiFormControl.margin;
	    }
	  }

	  return {
	    disabled: disabled,
	    error: error,
	    margin: margin
	  };
	}

	var Input = function (_React$Component) {
	  (0, _inherits3.default)(Input, _React$Component);

	  function Input(props, context) {
	    (0, _classCallCheck3.default)(this, Input);

	    var _this = (0, _possibleConstructorReturn3.default)(this, (Input.__proto__ || (0, _getPrototypeOf2.default)(Input)).call(this, props, context));

	    _this.state = {
	      focused: false
	    };
	    _this.input = null;

	    _this.handleFocus = function (event) {
	      // Fix an bug with IE11 where the focus/blur events are triggered
	      // while the input is disabled.
	      if (formControlState(_this.props, _this.context).disabled) {
	        event.stopPropagation();
	        return;
	      }

	      _this.setState({ focused: true });
	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }
	    };

	    _this.handleBlur = function (event) {
	      _this.setState({ focused: false });
	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }
	    };

	    _this.handleChange = function (event) {
	      if (!_this.isControlled) {
	        _this.checkDirty(_this.input);
	      }

	      // Perform in the willUpdate
	      if (_this.props.onChange) {
	        _this.props.onChange(event);
	      }
	    };

	    _this.handleRefInput = function (node) {
	      _this.input = node;

	      if (_this.props.inputRef) {
	        _this.props.inputRef(node);
	      } else if (_this.props.inputProps && _this.props.inputProps.ref) {
	        _this.props.inputProps.ref(node);
	      }
	    };

	    _this.isControlled = props.value != null;
	    if (_this.isControlled) {
	      _this.checkDirty(props);
	    }
	    return _this;
	  }

	  (0, _createClass3.default)(Input, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      // We are consuming the parent muiFormControl context.
	      // We don't want a child to consume it a second time.
	      return {
	        muiFormControl: null
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (!this.isControlled) {
	        this.checkDirty(this.input);
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps, nextContext) {
	      // The blur won't fire when the disabled state is set on a focused input.
	      // We need to book keep the focused state manually.
	      if (!formControlState(this.props, this.context).disabled && formControlState(nextProps, nextContext).disabled) {
	        this.setState({
	          focused: false
	        });
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState, nextContext) {
	      if (this.isControlled) {
	        this.checkDirty(nextProps);
	      } // else performed in the onChange

	      // Book keep the focused state.
	      if (!formControlState(this.props, this.context).disabled && formControlState(nextProps, nextContext).disabled) {
	        var muiFormControl = this.context.muiFormControl;

	        if (muiFormControl && muiFormControl.onBlur) {
	          muiFormControl.onBlur();
	        }
	      }
	    }

	    // Holds the input reference

	  }, {
	    key: 'checkDirty',
	    value: function checkDirty(obj) {
	      var muiFormControl = this.context.muiFormControl;


	      if (isDirty(obj)) {
	        if (muiFormControl && muiFormControl.onDirty) {
	          muiFormControl.onDirty();
	        }
	        if (this.props.onDirty) {
	          this.props.onDirty();
	        }
	        return;
	      }

	      if (muiFormControl && muiFormControl.onClean) {
	        muiFormControl.onClean();
	      }
	      if (this.props.onClean) {
	        this.props.onClean();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames, _classNames2;

	      var _props = this.props,
	          autoComplete = _props.autoComplete,
	          autoFocus = _props.autoFocus,
	          classes = _props.classes,
	          classNameProp = _props.className,
	          defaultValue = _props.defaultValue,
	          disabledProp = _props.disabled,
	          disableUnderline = _props.disableUnderline,
	          endAdornment = _props.endAdornment,
	          errorProp = _props.error,
	          fullWidth = _props.fullWidth,
	          id = _props.id,
	          inputComponent = _props.inputComponent,
	          _props$inputProps = _props.inputProps;
	      _props$inputProps = _props$inputProps === undefined ? {} : _props$inputProps;
	      var inputPropsClassName = _props$inputProps.className,
	          inputPropsProp = (0, _objectWithoutProperties3.default)(_props$inputProps, ['className']),
	          inputRef = _props.inputRef,
	          marginProp = _props.margin,
	          multiline = _props.multiline,
	          name = _props.name,
	          onBlur = _props.onBlur,
	          onChange = _props.onChange,
	          onClean = _props.onClean,
	          onDirty = _props.onDirty,
	          onFocus = _props.onFocus,
	          onKeyDown = _props.onKeyDown,
	          onKeyUp = _props.onKeyUp,
	          placeholder = _props.placeholder,
	          readOnly = _props.readOnly,
	          rows = _props.rows,
	          rowsMax = _props.rowsMax,
	          startAdornment = _props.startAdornment,
	          type = _props.type,
	          value = _props.value,
	          other = (0, _objectWithoutProperties3.default)(_props, ['autoComplete', 'autoFocus', 'classes', 'className', 'defaultValue', 'disabled', 'disableUnderline', 'endAdornment', 'error', 'fullWidth', 'id', 'inputComponent', 'inputProps', 'inputRef', 'margin', 'multiline', 'name', 'onBlur', 'onChange', 'onClean', 'onDirty', 'onFocus', 'onKeyDown', 'onKeyUp', 'placeholder', 'readOnly', 'rows', 'rowsMax', 'startAdornment', 'type', 'value']);
	      var muiFormControl = this.context.muiFormControl;

	      var _formControlState = formControlState(this.props, this.context),
	          disabled = _formControlState.disabled,
	          error = _formControlState.error,
	          margin = _formControlState.margin;

	      var className = (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.disabled, disabled), (0, _defineProperty3.default)(_classNames, classes.error, error), (0, _defineProperty3.default)(_classNames, classes.fullWidth, fullWidth), (0, _defineProperty3.default)(_classNames, classes.focused, this.state.focused), (0, _defineProperty3.default)(_classNames, classes.formControl, muiFormControl), (0, _defineProperty3.default)(_classNames, classes.multiline, multiline), (0, _defineProperty3.default)(_classNames, classes.underline, !disableUnderline), _classNames), classNameProp);

	      var inputClassName = (0, _classnames2.default)(classes.input, (_classNames2 = {}, (0, _defineProperty3.default)(_classNames2, classes.inputDisabled, disabled), (0, _defineProperty3.default)(_classNames2, classes.inputType, type !== 'text'), (0, _defineProperty3.default)(_classNames2, classes.inputTypeSearch, type === 'search'), (0, _defineProperty3.default)(_classNames2, classes.inputMultiline, multiline), (0, _defineProperty3.default)(_classNames2, classes.inputMarginDense, margin === 'dense'), _classNames2), inputPropsClassName);

	      var required = muiFormControl && muiFormControl.required === true;

	      var InputComponent = 'input';
	      var inputProps = (0, _extends3.default)({}, inputPropsProp, {
	        ref: this.handleRefInput
	      });

	      if (inputComponent) {
	        InputComponent = inputComponent;
	        inputProps = (0, _extends3.default)({
	          // Rename ref to inputRef as we don't know the
	          // provided `inputComponent` structure.
	          inputRef: this.handleRefInput
	        }, inputProps, {
	          ref: null
	        });
	      } else if (multiline) {
	        if (rows && !rowsMax) {
	          InputComponent = 'textarea';
	        } else {
	          inputProps = (0, _extends3.default)({
	            rowsMax: rowsMax,
	            textareaRef: this.handleRefInput
	          }, inputProps, {
	            ref: null
	          });
	          InputComponent = _Textarea2.default;
	        }
	      }

	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({ className: className }, other),
	        startAdornment,
	        _react2.default.createElement(InputComponent, (0, _extends3.default)({
	          'aria-invalid': error,
	          'aria-required': required,
	          autoComplete: autoComplete,
	          autoFocus: autoFocus,
	          className: inputClassName,
	          defaultValue: defaultValue,
	          disabled: disabled,
	          id: id,
	          name: name,
	          onBlur: this.handleBlur,
	          onChange: this.handleChange,
	          onFocus: this.handleFocus,
	          onKeyDown: onKeyDown,
	          onKeyUp: onKeyUp,
	          placeholder: placeholder,
	          readOnly: readOnly,
	          required: required ? true : undefined,
	          rows: rows,
	          type: type,
	          value: value
	        }, inputProps)),
	        endAdornment
	      );
	    }
	  }]);
	  return Input;
	}(_react2.default.Component);

	Input.propTypes = {
	  /**
	   * This property helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it here:
	   * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
	   */
	  autoComplete: _propTypes2.default.string,
	  /**
	   * If `true`, the input will be focused during the first mount.
	   */
	  autoFocus: _propTypes2.default.bool,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * The CSS class name of the wrapper element.
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The default input value, useful when not controlling the component.
	   */
	  defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  /**
	   * If `true`, the input will be disabled.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, the input will not have an underline.
	   */
	  disableUnderline: _propTypes2.default.bool,
	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: _propTypes2.default.node,
	  /**
	   * If `true`, the input will indicate an error. This is normally obtained via context from
	   * FormControl.
	   */
	  error: _propTypes2.default.bool,
	  /**
	   * If `true`, the input will take up the full width of its container.
	   */
	  fullWidth: _propTypes2.default.bool,
	  /**
	   * The id of the `input` element.
	   */
	  id: _propTypes2.default.string,
	  /**
	   * The component used for the native input.
	   * Either a string to use a DOM element or a component.
	   */
	  inputComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * Properties applied to the `input` element.
	   */
	  inputProps: _propTypes2.default.object,
	  /**
	   * Use that property to pass a ref callback to the native input component.
	   */
	  inputRef: _propTypes2.default.func,
	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: _propTypes2.default.oneOf(['dense', 'none']),
	  /**
	   * If `true`, a textarea element will be rendered.
	   */
	  multiline: _propTypes2.default.bool,
	  /**
	   * Name attribute of the `input` element.
	   */
	  name: _propTypes2.default.string,
	  /**
	   * @ignore
	   */
	  onBlur: _propTypes2.default.func,
	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {object} event The event source of the callback
	   */
	  onChange: _propTypes2.default.func,
	  /**
	   * TODO
	   */
	  onClean: _propTypes2.default.func,
	  /**
	   * TODO
	   */
	  onDirty: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onFocus: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onKeyDown: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onKeyUp: _propTypes2.default.func,
	  /**
	   * The short hint displayed in the input before the user enters a value.
	   */
	  placeholder: _propTypes2.default.string,
	  /**
	   * @ignore
	   */
	  readOnly: _propTypes2.default.bool,
	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  rowsMax: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: _propTypes2.default.node,
	  /**
	   * Type of the input element. It should be a valid HTML5 input type.
	   */
	  type: _propTypes2.default.string,
	  /**
	   * The input value, required for a controlled component.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))])
	};

	Input.muiName = 'Input';

	Input.defaultProps = {
	  disableUnderline: false,
	  fullWidth: false,
	  multiline: false,
	  type: 'text'
	};

	Input.contextTypes = {
	  muiFormControl: _propTypes2.default.object
	};

	Input.childContextTypes = {
	  muiFormControl: _propTypes2.default.object
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiInput' })(Input);
	});

	unwrapExports(Input_1);
	var Input_2 = Input_1.styles;
	var Input_3 = Input_1.hasValue;
	var Input_4 = Input_1.isDirty;
	var Input_5 = Input_1.isAdornedStart;

	var FormControl_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);







	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      display: 'inline-flex',
	      flexDirection: 'column',
	      position: 'relative',
	      // Reset fieldset default style
	      minWidth: 0,
	      padding: 0,
	      margin: 0,
	      border: 0
	    },
	    marginNormal: {
	      marginTop: theme.spacing.unit * 2,
	      marginBottom: theme.spacing.unit
	    },
	    marginDense: {
	      marginTop: theme.spacing.unit,
	      marginBottom: theme.spacing.unit / 2
	    },
	    fullWidth: {
	      width: '100%'
	    }
	  };
	};

	/**
	 * Provides context such as dirty/focused/error/required for form inputs.
	 * Relying on the context provides high flexibilty and ensures that the state always stay
	 * consitent across the children of the `FormControl`.
	 * This context is used by the following components:
	 *  - FormLabel
	 *  - FormHelperText
	 *  - Input
	 *  - InputLabel
	 */

	var FormControl = function (_React$Component) {
	  (0, _inherits3.default)(FormControl, _React$Component);

	  function FormControl(props, context) {
	    (0, _classCallCheck3.default)(this, FormControl);

	    // We need to iterate through the children and find the Input in order
	    // to fully support server side rendering.
	    var _this = (0, _possibleConstructorReturn3.default)(this, (FormControl.__proto__ || (0, _getPrototypeOf2.default)(FormControl)).call(this, props, context));

	    _this.state = {
	      adornedStart: false,
	      dirty: false,
	      focused: false
	    };

	    _this.handleFocus = function (event) {
	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }
	      _this.setState(function (state) {
	        return !state.focused ? { focused: true } : null;
	      });
	    };

	    _this.handleBlur = function (event) {
	      // The event might be undefined.
	      // For instance, a child component might call this hook
	      // when an input is disabled but still having the focus.
	      if (_this.props.onBlur && event) {
	        _this.props.onBlur(event);
	      }
	      _this.setState(function (state) {
	        return state.focused ? { focused: false } : null;
	      });
	    };

	    _this.handleDirty = function () {
	      if (!_this.state.dirty) {
	        _this.setState({ dirty: true });
	      }
	    };

	    _this.handleClean = function () {
	      if (_this.state.dirty) {
	        _this.setState({ dirty: false });
	      }
	    };

	    var children = _this.props.children;

	    if (children) {
	      _react2.default.Children.forEach(children, function (child) {
	        if (!(0, reactHelpers.isMuiElement)(child, ['Input', 'Select'])) {
	          return;
	        }

	        if ((0, Input_1.isDirty)(child.props, true)) {
	          _this.state.dirty = true;
	        }

	        var input = (0, reactHelpers.isMuiElement)(child, ['Select']) ? child.props.input : child;

	        if (input && (0, Input_1.isAdornedStart)(input.props)) {
	          _this.state.adornedStart = true;
	        }
	      });
	    }
	    return _this;
	  }

	  (0, _createClass3.default)(FormControl, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var _props = this.props,
	          disabled = _props.disabled,
	          error = _props.error,
	          required = _props.required,
	          margin = _props.margin;
	      var _state = this.state,
	          adornedStart = _state.adornedStart,
	          dirty = _state.dirty,
	          focused = _state.focused;


	      return {
	        muiFormControl: {
	          adornedStart: adornedStart,
	          dirty: dirty,
	          disabled: disabled,
	          error: error,
	          focused: focused,
	          margin: margin,
	          required: required,
	          onDirty: this.handleDirty,
	          onClean: this.handleClean,
	          onFocus: this.handleFocus,
	          onBlur: this.handleBlur
	        }
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames;

	      var _props2 = this.props,
	          classes = _props2.classes,
	          className = _props2.className,
	          Component = _props2.component,
	          disabled = _props2.disabled,
	          error = _props2.error,
	          fullWidth = _props2.fullWidth,
	          margin = _props2.margin,
	          required = _props2.required,
	          other = (0, _objectWithoutProperties3.default)(_props2, ['classes', 'className', 'component', 'disabled', 'error', 'fullWidth', 'margin', 'required']);


	      return _react2.default.createElement(Component, (0, _extends3.default)({
	        className: (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes['margin' + (0, helpers.capitalize)(margin)], margin !== 'none'), (0, _defineProperty3.default)(_classNames, classes.fullWidth, fullWidth), _classNames), className)
	      }, other, {
	        onFocus: this.handleFocus,
	        onBlur: this.handleBlur
	      }));
	    }
	  }]);
	  return FormControl;
	}(_react2.default.Component);

	FormControl.propTypes = {
	  /**
	   * The contents of the form control.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If `true`, the label, input and helper text should be displayed in a disabled state.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, the label should be displayed in an error state.
	   */
	  error: _propTypes2.default.bool,
	  /**
	   * If `true`, the component will take up the full width of its container.
	   */
	  fullWidth: _propTypes2.default.bool,
	  /**
	   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
	   */
	  margin: _propTypes2.default.oneOf(['none', 'dense', 'normal']),
	  /**
	   * @ignore
	   */
	  onBlur: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onFocus: _propTypes2.default.func,
	  /**
	   * If `true`, the label will indicate that the input is required.
	   */
	  required: _propTypes2.default.bool
	};

	FormControl.defaultProps = {
	  component: 'div',
	  disabled: false,
	  error: false,
	  fullWidth: false,
	  margin: 'none',
	  required: false
	};

	FormControl.childContextTypes = {
	  muiFormControl: _propTypes2.default.object
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiFormControl' })(FormControl);
	});

	unwrapExports(FormControl_1);
	var FormControl_2 = FormControl_1.styles;

	var FormHelperText_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      color: theme.palette.text.secondary,
	      fontFamily: theme.typography.fontFamily,
	      fontSize: theme.typography.pxToRem(12),
	      textAlign: 'left',
	      marginTop: theme.spacing.unit,
	      lineHeight: '1em',
	      minHeight: '1em',
	      margin: 0
	    },
	    error: {
	      color: theme.palette.error.main
	    },
	    disabled: {
	      color: theme.palette.text.disabled
	    },
	    marginDense: {
	      marginTop: theme.spacing.unit / 2
	    }
	  };
	};

	function FormHelperText(props, context) {
	  var _classNames;

	  var classes = props.classes,
	      classNameProp = props.className,
	      disabledProp = props.disabled,
	      errorProp = props.error,
	      marginProp = props.margin,
	      Component = props.component,
	      other = (0, _objectWithoutProperties3.default)(props, ['classes', 'className', 'disabled', 'error', 'margin', 'component']);
	  var muiFormControl = context.muiFormControl;


	  var disabled = disabledProp;
	  var error = errorProp;
	  var margin = marginProp;

	  if (muiFormControl) {
	    if (typeof disabled === 'undefined') {
	      disabled = muiFormControl.disabled;
	    }

	    if (typeof error === 'undefined') {
	      error = muiFormControl.error;
	    }

	    if (typeof margin === 'undefined') {
	      margin = muiFormControl.margin;
	    }
	  }

	  var className = (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.disabled, disabled), (0, _defineProperty3.default)(_classNames, classes.error, error), (0, _defineProperty3.default)(_classNames, classes.marginDense, margin === 'dense'), _classNames), classNameProp);

	  return _react2.default.createElement(Component, (0, _extends3.default)({ className: className }, other));
	}

	FormHelperText.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If `true`, the helper text should be displayed in a disabled state.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, helper text should be displayed in an error state.
	   */
	  error: _propTypes2.default.bool,
	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: _propTypes2.default.oneOf(['dense'])
	};

	FormHelperText.defaultProps = {
	  component: 'p'
	};

	FormHelperText.contextTypes = {
	  muiFormControl: _propTypes2.default.object
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiFormHelperText' })(FormHelperText);
	});

	unwrapExports(FormHelperText_1);
	var FormHelperText_2 = FormHelperText_1.styles;

	var FormControlLabel_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _Typography2 = _interopRequireDefault(Typography$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      display: 'inline-flex',
	      alignItems: 'center',
	      cursor: 'pointer',
	      // For correct alignment with the text.
	      verticalAlign: 'middle',
	      // Remove grey highlight
	      WebkitTapHighlightColor: 'transparent',
	      marginLeft: -14,
	      marginRight: theme.spacing.unit * 2 // used for row presentation of radio/checkbox
	    },
	    disabled: {
	      color: theme.palette.text.disabled,
	      cursor: 'default'
	    },
	    label: {}
	  };
	};

	/**
	 * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.
	 * Use this component if you want to display an extra label.
	 */
	/* eslint-disable jsx-a11y/label-has-for */

	function FormControlLabel(props, context) {
	  var checked = props.checked,
	      classes = props.classes,
	      classNameProp = props.className,
	      control = props.control,
	      disabledProp = props.disabled,
	      inputRef = props.inputRef,
	      label = props.label,
	      name = props.name,
	      onChange = props.onChange,
	      value = props.value,
	      other = (0, _objectWithoutProperties3.default)(props, ['checked', 'classes', 'className', 'control', 'disabled', 'inputRef', 'label', 'name', 'onChange', 'value']);
	  var muiFormControl = context.muiFormControl;

	  var disabled = disabledProp;

	  if (typeof control.props.disabled !== 'undefined') {
	    if (typeof disabled === 'undefined') {
	      disabled = control.props.disabled;
	    }
	  }

	  if (muiFormControl) {
	    if (typeof disabled === 'undefined') {
	      disabled = muiFormControl.disabled;
	    }
	  }

	  var className = (0, _classnames2.default)(classes.root, (0, _defineProperty3.default)({}, classes.disabled, disabled), classNameProp);

	  return _react2.default.createElement(
	    'label',
	    (0, _extends3.default)({ className: className }, other),
	    _react2.default.cloneElement(control, {
	      disabled: disabled,
	      checked: typeof control.props.checked === 'undefined' ? checked : control.props.checked,
	      name: control.props.name || name,
	      onChange: control.props.onChange || onChange,
	      value: control.props.value || value,
	      inputRef: control.props.inputRef || inputRef
	    }),
	    _react2.default.createElement(
	      _Typography2.default,
	      { component: 'span', className: classes.label },
	      label
	    )
	  );
	}

	FormControlLabel.propTypes = {
	  /**
	   * If `true`, the component appears selected.
	   */
	  checked: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.string]),
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.
	   */
	  control: _propTypes2.default.element,
	  /**
	   * If `true`, the control will be disabled.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * Use that property to pass a ref callback to the native input component.
	   */
	  inputRef: _propTypes2.default.func,
	  /**
	   * The text to be used in an enclosing label element.
	   */
	  label: _propTypes2.default.node,
	  /*
	   * @ignore
	   */
	  name: _propTypes2.default.string,
	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {object} event The event source of the callback
	   * @param {boolean} checked The `checked` value of the switch
	   */
	  onChange: _propTypes2.default.func,
	  /**
	   * The value of the component.
	   */
	  value: _propTypes2.default.string
	};

	FormControlLabel.contextTypes = {
	  muiFormControl: _propTypes2.default.object
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiFormControlLabel' })(FormControlLabel);
	});

	unwrapExports(FormControlLabel_1);
	var FormControlLabel_2 = FormControlLabel_1.styles;

	var Form = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'FormGroup', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(FormGroup_1).default;
	  }
	});



	Object.defineProperty(exports, 'FormLabel', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(FormLabel_1).default;
	  }
	});



	Object.defineProperty(exports, 'FormControl', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(FormControl_1).default;
	  }
	});



	Object.defineProperty(exports, 'FormHelperText', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(FormHelperText_1).default;
	  }
	});



	Object.defineProperty(exports, 'FormControlLabel', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(FormControlLabel_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(Form);
	var Form_1 = Form.FormControl;
	var Form_2 = Form.FormHelperText;

	const ImageButton = (_ref) => {
	  let { src, imgProps } = _ref,
	      other = objectWithoutProperties(_ref, ['src', 'imgProps']);
	  return react.createElement(
	    ButtonBase$2,
	    _extends$5({ focusRipple: true }, other),
	    react.createElement('img', _extends$5({ src: src }, imgProps))
	  );
	};

	ImageButton.propTypes = {
	  src: propTypes.string.isRequired,
	  imgProps: propTypes.object
	};

	var InputAdornment_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _Typography2 = _interopRequireDefault(Typography$1);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      display: 'flex',
	      maxHeight: '2em',
	      alignItems: 'center'
	    },
	    positionStart: {
	      marginRight: theme.spacing.unit
	    },
	    positionEnd: {
	      marginLeft: theme.spacing.unit
	    }
	  };
	};

	function InputAdornment(props) {
	  var _classNames;

	  var children = props.children,
	      Component = props.component,
	      classes = props.classes,
	      className = props.className,
	      disableTypography = props.disableTypography,
	      position = props.position,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'component', 'classes', 'className', 'disableTypography', 'position']);


	  return _react2.default.createElement(
	    Component,
	    (0, _extends3.default)({
	      className: (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.positionStart, position === 'start'), (0, _defineProperty3.default)(_classNames, classes.positionEnd, position === 'end'), _classNames), className)
	    }, other),
	    typeof children === 'string' && !disableTypography ? _react2.default.createElement(
	      _Typography2.default,
	      { color: 'textSecondary' },
	      children
	    ) : children
	  );
	}

	InputAdornment.propTypes = {
	  /**
	   * The content of the component, normally an `IconButton` or string.
	   */
	  children: _propTypes2.default.node.isRequired,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If children is a string then disable wrapping in a Typography component.
	   */
	  disableTypography: _propTypes2.default.bool,
	  /**
	   * The position this adornment should appear relative to the `Input`.
	   */
	  position: _propTypes2.default.oneOf(['start', 'end'])
	};

	InputAdornment.defaultProps = {
	  component: 'div',
	  disableTypography: false
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiInputAdornment' })(InputAdornment);
	});

	unwrapExports(InputAdornment_1);
	var InputAdornment_2 = InputAdornment_1.styles;

	var InputLabel_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      transformOrigin: 'top left'
	    },
	    formControl: {
	      position: 'absolute',
	      left: 0,
	      top: 0,
	      // slight alteration to spec spacing to match visual spec result
	      transform: 'translate(0, ' + theme.spacing.unit * 3 + 'px) scale(1)'
	    },
	    marginDense: {
	      // Compensation for the `Input.inputDense` style.
	      transform: 'translate(0, ' + (theme.spacing.unit * 2.5 + 1) + 'px) scale(1)'
	    },
	    shrink: {
	      transform: 'translate(0, 1.5px) scale(0.75)',
	      transformOrigin: 'top left'
	    },
	    animated: {
	      transition: theme.transitions.create('transform', {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      })
	    },
	    disabled: {
	      color: theme.palette.text.disabled
	    }
	  };
	}; // @inheritedComponent FormLabel

	function InputLabel(props, context) {
	  var _classNames;

	  var children = props.children,
	      classes = props.classes,
	      classNameProp = props.className,
	      disableAnimation = props.disableAnimation,
	      disabled = props.disabled,
	      FormControlClasses = props.FormControlClasses,
	      marginProp = props.margin,
	      shrinkProp = props.shrink,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className', 'disableAnimation', 'disabled', 'FormControlClasses', 'margin', 'shrink']);
	  var muiFormControl = context.muiFormControl;

	  var shrink = shrinkProp;

	  if (typeof shrink === 'undefined' && muiFormControl) {
	    shrink = muiFormControl.dirty || muiFormControl.focused || muiFormControl.adornedStart;
	  }

	  var margin = marginProp;
	  if (typeof margin === 'undefined' && muiFormControl) {
	    margin = muiFormControl.margin;
	  }

	  var className = (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.formControl, muiFormControl), (0, _defineProperty3.default)(_classNames, classes.animated, !disableAnimation), (0, _defineProperty3.default)(_classNames, classes.shrink, shrink), (0, _defineProperty3.default)(_classNames, classes.disabled, disabled), (0, _defineProperty3.default)(_classNames, classes.marginDense, margin === 'dense'), _classNames), classNameProp);

	  return _react2.default.createElement(
	    Form.FormLabel,
	    (0, _extends3.default)({ 'data-shrink': shrink, className: className, classes: FormControlClasses }, other),
	    children
	  );
	}

	InputLabel.propTypes = {
	  /**
	   * The contents of the `InputLabel`.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * If `true`, the transition animation is disabled.
	   */
	  disableAnimation: _propTypes2.default.bool,
	  /**
	   * If `true`, apply disabled class.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, the label will be displayed in an error state.
	   */
	  error: _propTypes2.default.bool,
	  /**
	   * If `true`, the input of this label is focused.
	   */
	  focused: _propTypes2.default.bool,
	  /**
	   * `classes` property applied to the `FormControl` element.
	   */
	  FormControlClasses: _propTypes2.default.object,
	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: _propTypes2.default.oneOf(['dense']),
	  /**
	   * if `true`, the label will indicate that the input is required.
	   */
	  required: _propTypes2.default.bool,
	  /**
	   * If `true`, the label is shrunk.
	   */
	  shrink: _propTypes2.default.bool
	};

	InputLabel.defaultProps = {
	  disabled: false,
	  disableAnimation: false
	};

	InputLabel.contextTypes = {
	  muiFormControl: _propTypes2.default.object
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiInputLabel' })(InputLabel);
	});

	unwrapExports(InputLabel_1);
	var InputLabel_2 = InputLabel_1.styles;

	var Input$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Input_1).default;
	  }
	});



	Object.defineProperty(exports, 'InputAdornment', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(InputAdornment_1).default;
	  }
	});



	Object.defineProperty(exports, 'InputLabel', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(InputLabel_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(Input$1);
	var Input_1$1 = Input$1.InputLabel;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant$2 = function(condition, format, a, b, c, d, e, f) {
	  {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	var browser$1 = invariant$2;

	function isAbsolute(pathname) {
	  return pathname.charAt(0) === '/';
	}

	// About 1.5x faster than the two-arg version of Array#splice()
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }

	  list.pop();
	}

	// This implementation is based heavily on node's url.parse
	function resolvePathname(to) {
	  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	  var toParts = to && to.split('/') || [];
	  var fromParts = from && from.split('/') || [];

	  var isToAbs = to && isAbsolute(to);
	  var isFromAbs = from && isAbsolute(from);
	  var mustEndAbs = isToAbs || isFromAbs;

	  if (to && isAbsolute(to)) {
	    // to is absolute
	    fromParts = toParts;
	  } else if (toParts.length) {
	    // to is relative, drop the filename
	    fromParts.pop();
	    fromParts = fromParts.concat(toParts);
	  }

	  if (!fromParts.length) return '/';

	  var hasTrailingSlash = void 0;
	  if (fromParts.length) {
	    var last = fromParts[fromParts.length - 1];
	    hasTrailingSlash = last === '.' || last === '..' || last === '';
	  } else {
	    hasTrailingSlash = false;
	  }

	  var up = 0;
	  for (var i = fromParts.length; i >= 0; i--) {
	    var part = fromParts[i];

	    if (part === '.') {
	      spliceOne(fromParts, i);
	    } else if (part === '..') {
	      spliceOne(fromParts, i);
	      up++;
	    } else if (up) {
	      spliceOne(fromParts, i);
	      up--;
	    }
	  }

	  if (!mustEndAbs) for (; up--; up) {
	    fromParts.unshift('..');
	  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

	  var result = fromParts.join('/');

	  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

	  return result;
	}

	var resolvePathname$1 = /*#__PURE__*/Object.freeze({
		default: resolvePathname
	});

	var _typeof$5 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function valueEqual(a, b) {
	  if (a === b) return true;

	  if (a == null || b == null) return false;

	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return valueEqual(item, b[index]);
	    });
	  }

	  var aType = typeof a === 'undefined' ? 'undefined' : _typeof$5(a);
	  var bType = typeof b === 'undefined' ? 'undefined' : _typeof$5(b);

	  if (aType !== bType) return false;

	  if (aType === 'object') {
	    var aValue = a.valueOf();
	    var bValue = b.valueOf();

	    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

	    var aKeys = Object.keys(a);
	    var bKeys = Object.keys(b);

	    if (aKeys.length !== bKeys.length) return false;

	    return aKeys.every(function (key) {
	      return valueEqual(a[key], b[key]);
	    });
	  }

	  return false;
	}

	var valueEqual$1 = /*#__PURE__*/Object.freeze({
		default: valueEqual
	});

	var PathUtils = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};

	var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path.substr(1) : path;
	};

	var hasBasename = exports.hasBasename = function hasBasename(path, prefix) {
	  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
	};

	var stripBasename = exports.stripBasename = function stripBasename(path, prefix) {
	  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
	};

	var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
	  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
	};

	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }

	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};

	var createPath = exports.createPath = function createPath(location) {
	  var pathname = location.pathname,
	      search = location.search,
	      hash = location.hash;


	  var path = pathname || '/';

	  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

	  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

	  return path;
	};
	});

	unwrapExports(PathUtils);
	var PathUtils_1 = PathUtils.addLeadingSlash;
	var PathUtils_2 = PathUtils.stripLeadingSlash;
	var PathUtils_3 = PathUtils.hasBasename;
	var PathUtils_4 = PathUtils.stripBasename;
	var PathUtils_5 = PathUtils.stripTrailingSlash;
	var PathUtils_6 = PathUtils.parsePath;
	var PathUtils_7 = PathUtils.createPath;

	var _resolvePathname = ( resolvePathname$1 && resolvePathname ) || resolvePathname$1;

	var _valueEqual = ( valueEqual$1 && valueEqual ) || valueEqual$1;

	var LocationUtils = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.locationsAreEqual = exports.createLocation = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _resolvePathname2 = _interopRequireDefault(_resolvePathname);



	var _valueEqual2 = _interopRequireDefault(_valueEqual);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
	  var location = void 0;
	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = (0, PathUtils.parsePath)(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends({}, path);

	    if (location.pathname === undefined) location.pathname = '';

	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }

	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }

	    if (state !== undefined && location.state === undefined) location.state = state;
	  }

	  try {
	    location.pathname = decodeURI(location.pathname);
	  } catch (e) {
	    if (e instanceof URIError) {
	      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
	    } else {
	      throw e;
	    }
	  }

	  if (key) location.key = key;

	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
	    }
	  } else {
	    // When there is no prior location and pathname is empty, set it to /
	    if (!location.pathname) {
	      location.pathname = '/';
	    }
	  }

	  return location;
	};

	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
	};
	});

	unwrapExports(LocationUtils);
	var LocationUtils_1 = LocationUtils.locationsAreEqual;
	var LocationUtils_2 = LocationUtils.createLocation;

	var createTransitionManager_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _warning2 = _interopRequireDefault(browser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var createTransitionManager = function createTransitionManager() {
	  var prompt = null;

	  var setPrompt = function setPrompt(nextPrompt) {
	    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');

	    prompt = nextPrompt;

	    return function () {
	      if (prompt === nextPrompt) prompt = null;
	    };
	  };

	  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
	    // TODO: If another transition starts while we're still confirming
	    // the previous one, we may end up in a weird state. Figure out the
	    // best way to handle this.
	    if (prompt != null) {
	      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

	      if (typeof result === 'string') {
	        if (typeof getUserConfirmation === 'function') {
	          getUserConfirmation(result, callback);
	        } else {
	          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');

	          callback(true);
	        }
	      } else {
	        // Return false from a transition hook to cancel the transition.
	        callback(result !== false);
	      }
	    } else {
	      callback(true);
	    }
	  };

	  var listeners = [];

	  var appendListener = function appendListener(fn) {
	    var isActive = true;

	    var listener = function listener() {
	      if (isActive) fn.apply(undefined, arguments);
	    };

	    listeners.push(listener);

	    return function () {
	      isActive = false;
	      listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };

	  var notifyListeners = function notifyListeners() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    listeners.forEach(function (listener) {
	      return listener.apply(undefined, args);
	    });
	  };

	  return {
	    setPrompt: setPrompt,
	    confirmTransitionTo: confirmTransitionTo,
	    appendListener: appendListener,
	    notifyListeners: notifyListeners
	  };
	};

	exports.default = createTransitionManager;
	});

	unwrapExports(createTransitionManager_1);

	var DOMUtils = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};

	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};

	var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert

	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;

	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

	  return window.history && 'pushState' in window.history;
	};

	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};

	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};

	/**
	 * Returns true if a given popstate event is an extraneous WebKit event.
	 * Accounts for the fact that Chrome on iOS fires real popstate events
	 * containing undefined state when pressing the back button.
	 */
	var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
	  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
	};
	});

	unwrapExports(DOMUtils);
	var DOMUtils_1 = DOMUtils.canUseDOM;
	var DOMUtils_2 = DOMUtils.addEventListener;
	var DOMUtils_3 = DOMUtils.removeEventListener;
	var DOMUtils_4 = DOMUtils.getConfirmation;
	var DOMUtils_5 = DOMUtils.supportsHistory;
	var DOMUtils_6 = DOMUtils.supportsPopStateOnHashChange;
	var DOMUtils_7 = DOMUtils.supportsGoWithoutReloadUsingHash;
	var DOMUtils_8 = DOMUtils.isExtraneousPopstateEvent;

	var createBrowserHistory_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _warning2 = _interopRequireDefault(browser);



	var _invariant2 = _interopRequireDefault(browser$1);







	var _createTransitionManager2 = _interopRequireDefault(createTransitionManager_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';

	var getHistoryState = function getHistoryState() {
	  try {
	    return window.history.state || {};
	  } catch (e) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    return {};
	  }
	};

	/**
	 * Creates a history object that uses the HTML5 history API including
	 * pushState, replaceState, and the popstate event.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  (0, _invariant2.default)(DOMUtils.canUseDOM, 'Browser history needs a DOM');

	  var globalHistory = window.history;
	  var canUseHistory = (0, DOMUtils.supportsHistory)();
	  var needsHashChangeListener = !(0, DOMUtils.supportsPopStateOnHashChange)();

	  var _props$forceRefresh = props.forceRefresh,
	      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
	      _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

	  var basename = props.basename ? (0, PathUtils.stripTrailingSlash)((0, PathUtils.addLeadingSlash)(props.basename)) : '';

	  var getDOMLocation = function getDOMLocation(historyState) {
	    var _ref = historyState || {},
	        key = _ref.key,
	        state = _ref.state;

	    var _window$location = window.location,
	        pathname = _window$location.pathname,
	        search = _window$location.search,
	        hash = _window$location.hash;


	    var path = pathname + search + hash;

	    (0, _warning2.default)(!basename || (0, PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

	    if (basename) path = (0, PathUtils.stripBasename)(path, basename);

	    return (0, LocationUtils.createLocation)(path, state, key);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };

	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var handlePopState = function handlePopState(event) {
	    // Ignore extraneous popstate events in WebKit.
	    if ((0, DOMUtils.isExtraneousPopstateEvent)(event)) return;

	    handlePop(getDOMLocation(event.state));
	  };

	  var handleHashChange = function handleHashChange() {
	    handlePop(getDOMLocation(getHistoryState()));
	  };

	  var forceNextPop = false;

	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';

	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };

	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;

	    // TODO: We could probably make this more reliable by
	    // keeping a list of keys we've seen in sessionStorage.
	    // Instead, we just default to 0 for keys we don't know.

	    var toIndex = allKeys.indexOf(toLocation.key);

	    if (toIndex === -1) toIndex = 0;

	    var fromIndex = allKeys.indexOf(fromLocation.key);

	    if (fromIndex === -1) fromIndex = 0;

	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };

	  var initialLocation = getDOMLocation(getHistoryState());
	  var allKeys = [initialLocation.key];

	  // Public interface

	  var createHref = function createHref(location) {
	    return basename + (0, PathUtils.createPath)(location);
	  };

	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;


	      if (canUseHistory) {
	        globalHistory.pushState({ key: key, state: state }, null, href);

	        if (forceRefresh) {
	          window.location.href = href;
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

	          nextKeys.push(location.key);
	          allKeys = nextKeys;

	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');

	        window.location.href = href;
	      }
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;


	      if (canUseHistory) {
	        globalHistory.replaceState({ key: key, state: state }, null, href);

	        if (forceRefresh) {
	          window.location.replace(href);
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);

	          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');

	        window.location.replace(href);
	      }
	    });
	  };

	  var go = function go(n) {
	    globalHistory.go(n);
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var listenerCount = 0;

	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1) {
	      (0, DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

	      if (needsHashChangeListener) (0, DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

	      if (needsHashChangeListener) (0, DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };

	  var isBlocked = false;

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  };

	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);

	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createBrowserHistory;
	});

	var createHistory = unwrapExports(createBrowserHistory_1);

	var _extends$8 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for putting history on context.
	 */

	var Router = function (_React$Component) {
	  _inherits(Router, _React$Component);

	  function Router() {
	    var _temp, _this, _ret;

	    _classCallCheck(this, Router);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props.history.location.pathname)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  Router.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends$8({}, this.context.router, {
	        history: this.props.history,
	        route: {
	          location: this.props.history.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Router.prototype.computeMatch = function computeMatch(pathname) {
	    return {
	      path: '/',
	      url: '/',
	      params: {},
	      isExact: pathname === '/'
	    };
	  };

	  Router.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;

	    var _props = this.props,
	        children = _props.children,
	        history = _props.history;


	    browser$1(children == null || react.Children.count(children) === 1, 'A <Router> may have only one child element');

	    // Do this here so we can setState when a <Redirect> changes the
	    // location in componentWillMount. This happens e.g. when doing
	    // server rendering using a <StaticRouter>.
	    this.unlisten = history.listen(function () {
	      _this2.setState({
	        match: _this2.computeMatch(history.location.pathname)
	      });
	    });
	  };

	  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    browser(this.props.history === nextProps.history, 'You cannot change <Router history>');
	  };

	  Router.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unlisten();
	  };

	  Router.prototype.render = function render() {
	    var children = this.props.children;

	    return children ? react.Children.only(children) : null;
	  };

	  return Router;
	}(react.Component);

	Router.propTypes = {
	  history: propTypes.object.isRequired,
	  children: propTypes.node
	};
	Router.contextTypes = {
	  router: propTypes.object
	};
	Router.childContextTypes = {
	  router: propTypes.object.isRequired
	};

	// Written in this round about way for babel-transform-imports

	function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses HTML5 history.
	 */

	var BrowserRouter = function (_React$Component) {
	  _inherits$1(BrowserRouter, _React$Component);

	  function BrowserRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck$1(this, BrowserRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$1(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = createHistory(_this.props), _temp), _possibleConstructorReturn$1(_this, _ret);
	  }

	  BrowserRouter.prototype.componentWillMount = function componentWillMount() {
	    browser(!this.props.history, '<BrowserRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { BrowserRouter as Router }`.');
	  };

	  BrowserRouter.prototype.render = function render() {
	    return react.createElement(Router, { history: this.history, children: this.props.children });
	  };

	  return BrowserRouter;
	}(react.Component);

	BrowserRouter.propTypes = {
	  basename: propTypes.string,
	  forceRefresh: propTypes.bool,
	  getUserConfirmation: propTypes.func,
	  keyLength: propTypes.number,
	  children: propTypes.node
	};

	var createHashHistory_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _warning2 = _interopRequireDefault(browser);



	var _invariant2 = _interopRequireDefault(browser$1);







	var _createTransitionManager2 = _interopRequireDefault(createTransitionManager_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HashChangeEvent = 'hashchange';

	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!/' + (0, PathUtils.stripLeadingSlash)(path);
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substr(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: PathUtils.stripLeadingSlash,
	    decodePath: PathUtils.addLeadingSlash
	  },
	  slash: {
	    encodePath: PathUtils.addLeadingSlash,
	    decodePath: PathUtils.addLeadingSlash
	  }
	};

	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};

	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};

	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');

	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};

	var createHashHistory = function createHashHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  (0, _invariant2.default)(DOMUtils.canUseDOM, 'Hash history needs a DOM');

	  var globalHistory = window.history;
	  var canGoWithoutReload = (0, DOMUtils.supportsGoWithoutReloadUsingHash)();

	  var _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$hashType = props.hashType,
	      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;

	  var basename = props.basename ? (0, PathUtils.stripTrailingSlash)((0, PathUtils.addLeadingSlash)(props.basename)) : '';

	  var _HashPathCoders$hashT = HashPathCoders[hashType],
	      encodePath = _HashPathCoders$hashT.encodePath,
	      decodePath = _HashPathCoders$hashT.decodePath;


	  var getDOMLocation = function getDOMLocation() {
	    var path = decodePath(getHashPath());

	    (0, _warning2.default)(!basename || (0, PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

	    if (basename) path = (0, PathUtils.stripBasename)(path, basename);

	    return (0, LocationUtils.createLocation)(path);
	  };

	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = globalHistory.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var forceNextPop = false;
	  var ignorePath = null;

	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = encodePath(path);

	    if (path !== encodedPath) {
	      // Ensure we always have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var location = getDOMLocation();
	      var prevLocation = history.location;

	      if (!forceNextPop && (0, LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.

	      if (ignorePath === (0, PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.

	      ignorePath = null;

	      handlePop(location);
	    }
	  };

	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';

	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };

	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;

	    // TODO: We could probably make this more reliable by
	    // keeping a list of paths we've seen in sessionStorage.
	    // Instead, we just default to 0 for paths we don't know.

	    var toIndex = allPaths.lastIndexOf((0, PathUtils.createPath)(toLocation));

	    if (toIndex === -1) toIndex = 0;

	    var fromIndex = allPaths.lastIndexOf((0, PathUtils.createPath)(fromLocation));

	    if (fromIndex === -1) fromIndex = 0;

	    var delta = toIndex - fromIndex;

	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };

	  // Ensure the hash is encoded properly before doing anything else.
	  var path = getHashPath();
	  var encodedPath = encodePath(path);

	  if (path !== encodedPath) replaceHashPath(encodedPath);

	  var initialLocation = getDOMLocation();
	  var allPaths = [(0, PathUtils.createPath)(initialLocation)];

	  // Public interface

	  var createHref = function createHref(location) {
	    return '#' + encodePath(basename + (0, PathUtils.createPath)(location));
	  };

	  var push = function push(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, LocationUtils.createLocation)(path, undefined, undefined, history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var path = (0, PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a PUSH, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        pushHashPath(encodedPath);

	        var prevIndex = allPaths.lastIndexOf((0, PathUtils.createPath)(history.location));
	        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

	        nextPaths.push(path);
	        allPaths = nextPaths;

	        setState({ action: action, location: location });
	      } else {
	        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');

	        setState();
	      }
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, LocationUtils.createLocation)(path, undefined, undefined, history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var path = (0, PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;

	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        replaceHashPath(encodedPath);
	      }

	      var prevIndex = allPaths.indexOf((0, PathUtils.createPath)(history.location));

	      if (prevIndex !== -1) allPaths[prevIndex] = path;

	      setState({ action: action, location: location });
	    });
	  };

	  var go = function go(n) {
	    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');

	    globalHistory.go(n);
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var listenerCount = 0;

	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;

	    if (listenerCount === 1) {
	      (0, DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };

	  var isBlocked = false;

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	    var unblock = transitionManager.setPrompt(prompt);

	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }

	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }

	      return unblock();
	    };
	  };

	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);

	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };

	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createHashHistory;
	});

	var createHistory$1 = unwrapExports(createHashHistory_1);

	function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$2(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that uses window.location.hash.
	 */

	var HashRouter = function (_React$Component) {
	  _inherits$2(HashRouter, _React$Component);

	  function HashRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck$2(this, HashRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$2(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = createHistory$1(_this.props), _temp), _possibleConstructorReturn$2(_this, _ret);
	  }

	  HashRouter.prototype.componentWillMount = function componentWillMount() {
	    browser(!this.props.history, '<HashRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { HashRouter as Router }`.');
	  };

	  HashRouter.prototype.render = function render() {
	    return react.createElement(Router, { history: this.history, children: this.props.children });
	  };

	  return HashRouter;
	}(react.Component);

	HashRouter.propTypes = {
	  basename: propTypes.string,
	  getUserConfirmation: propTypes.func,
	  hashType: propTypes.oneOf(['hashbang', 'noslash', 'slash']),
	  children: propTypes.node
	};

	var _extends$9 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties$1(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$3(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$3(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isModifiedEvent = function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	};

	/**
	 * The public API for rendering a history-aware <a>.
	 */

	var Link = function (_React$Component) {
	  _inherits$3(Link, _React$Component);

	  function Link() {
	    var _temp, _this, _ret;

	    _classCallCheck$3(this, Link);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$3(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
	      if (_this.props.onClick) _this.props.onClick(event);

	      if (!event.defaultPrevented && // onClick prevented default
	      event.button === 0 && // ignore right clicks
	      !_this.props.target && // let browser handle "target=_blank" etc.
	      !isModifiedEvent(event) // ignore clicks with modifier keys
	      ) {
	          event.preventDefault();

	          var history = _this.context.router.history;
	          var _this$props = _this.props,
	              replace = _this$props.replace,
	              to = _this$props.to;


	          if (replace) {
	            history.replace(to);
	          } else {
	            history.push(to);
	          }
	        }
	    }, _temp), _possibleConstructorReturn$3(_this, _ret);
	  }

	  Link.prototype.render = function render() {
	    var _props = this.props,
	        replace = _props.replace,
	        to = _props.to,
	        innerRef = _props.innerRef,
	        props = _objectWithoutProperties$1(_props, ['replace', 'to', 'innerRef']); // eslint-disable-line no-unused-vars

	    browser$1(this.context.router, 'You should not use <Link> outside a <Router>');

	    var href = this.context.router.history.createHref(typeof to === 'string' ? { pathname: to } : to);

	    return react.createElement('a', _extends$9({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));
	  };

	  return Link;
	}(react.Component);

	Link.propTypes = {
	  onClick: propTypes.func,
	  target: propTypes.string,
	  replace: propTypes.bool,
	  to: propTypes.oneOfType([propTypes.string, propTypes.object]).isRequired,
	  innerRef: propTypes.oneOfType([propTypes.string, propTypes.func])
	};
	Link.defaultProps = {
	  replace: false
	};
	Link.contextTypes = {
	  router: propTypes.shape({
	    history: propTypes.shape({
	      push: propTypes.func.isRequired,
	      replace: propTypes.func.isRequired,
	      createHref: propTypes.func.isRequired
	    }).isRequired
	  }).isRequired
	};

	var createMemoryHistory_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };



	var _warning2 = _interopRequireDefault(browser);







	var _createTransitionManager2 = _interopRequireDefault(createTransitionManager_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var clamp = function clamp(n, lowerBound, upperBound) {
	  return Math.min(Math.max(n, lowerBound), upperBound);
	};

	/**
	 * Creates a history object that stores locations in memory.
	 */
	var createMemoryHistory = function createMemoryHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var getUserConfirmation = props.getUserConfirmation,
	      _props$initialEntries = props.initialEntries,
	      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
	      _props$initialIndex = props.initialIndex,
	      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


	  var transitionManager = (0, _createTransitionManager2.default)();

	  var setState = function setState(nextState) {
	    _extends(history, nextState);

	    history.length = history.entries.length;

	    transitionManager.notifyListeners(history.location, history.action);
	  };

	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };

	  var index = clamp(initialIndex, 0, initialEntries.length - 1);
	  var entries = initialEntries.map(function (entry) {
	    return typeof entry === 'string' ? (0, LocationUtils.createLocation)(entry, undefined, createKey()) : (0, LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
	  });

	  // Public interface

	  var createHref = PathUtils.createPath;

	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'PUSH';
	    var location = (0, LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      var prevIndex = history.index;
	      var nextIndex = prevIndex + 1;

	      var nextEntries = history.entries.slice(0);
	      if (nextEntries.length > nextIndex) {
	        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
	      } else {
	        nextEntries.push(location);
	      }

	      setState({
	        action: action,
	        location: location,
	        index: nextIndex,
	        entries: nextEntries
	      });
	    });
	  };

	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

	    var action = 'REPLACE';
	    var location = (0, LocationUtils.createLocation)(path, state, createKey(), history.location);

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;

	      history.entries[history.index] = location;

	      setState({ action: action, location: location });
	    });
	  };

	  var go = function go(n) {
	    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);

	    var action = 'POP';
	    var location = history.entries[nextIndex];

	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (ok) {
	        setState({
	          action: action,
	          location: location,
	          index: nextIndex
	        });
	      } else {
	        // Mimic the behavior of DOM histories by
	        // causing a render after a cancelled POP.
	        setState();
	      }
	    });
	  };

	  var goBack = function goBack() {
	    return go(-1);
	  };

	  var goForward = function goForward() {
	    return go(1);
	  };

	  var canGo = function canGo(n) {
	    var nextIndex = history.index + n;
	    return nextIndex >= 0 && nextIndex < history.entries.length;
	  };

	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    return transitionManager.setPrompt(prompt);
	  };

	  var listen = function listen(listener) {
	    return transitionManager.appendListener(listener);
	  };

	  var history = {
	    length: entries.length,
	    action: 'POP',
	    location: entries[index],
	    index: index,
	    entries: entries,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    canGo: canGo,
	    block: block,
	    listen: listen
	  };

	  return history;
	};

	exports.default = createMemoryHistory;
	});

	var createHistory$2 = unwrapExports(createMemoryHistory_1);

	function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$4(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$4(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for a <Router> that stores location in memory.
	 */

	var MemoryRouter = function (_React$Component) {
	  _inherits$4(MemoryRouter, _React$Component);

	  function MemoryRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck$4(this, MemoryRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$4(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = createHistory$2(_this.props), _temp), _possibleConstructorReturn$4(_this, _ret);
	  }

	  MemoryRouter.prototype.componentWillMount = function componentWillMount() {
	    browser(!this.props.history, '<MemoryRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { MemoryRouter as Router }`.');
	  };

	  MemoryRouter.prototype.render = function render() {
	    return react.createElement(Router, { history: this.history, children: this.props.children });
	  };

	  return MemoryRouter;
	}(react.Component);

	MemoryRouter.propTypes = {
	  initialEntries: propTypes.array,
	  initialIndex: propTypes.number,
	  getUserConfirmation: propTypes.func,
	  keyLength: propTypes.number,
	  children: propTypes.node
	};

	// Written in this round about way for babel-transform-imports

	var isarray = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

	/**
	 * Expose `pathToRegexp`.
	 */
	var pathToRegexp_1 = pathToRegexp;
	var parse_1 = parse;
	var compile_1 = compile;
	var tokensToFunction_1 = tokensToFunction;
	var tokensToRegExp_1 = tokensToRegExp;

	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g');

	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse (str, options) {
	  var tokens = [];
	  var key = 0;
	  var index = 0;
	  var path = '';
	  var defaultDelimiter = options && options.delimiter || '/';
	  var res;

	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0];
	    var escaped = res[1];
	    var offset = res.index;
	    path += str.slice(index, offset);
	    index = offset + m.length;

	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1];
	      continue
	    }

	    var next = str[index];
	    var prefix = res[2];
	    var name = res[3];
	    var capture = res[4];
	    var group = res[5];
	    var modifier = res[6];
	    var asterisk = res[7];

	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path);
	      path = '';
	    }

	    var partial = prefix != null && next != null && next !== prefix;
	    var repeat = modifier === '+' || modifier === '*';
	    var optional = modifier === '?' || modifier === '*';
	    var delimiter = res[2] || defaultDelimiter;
	    var pattern = capture || group;

	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    });
	  }

	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index);
	  }

	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path);
	  }

	  return tokens
	}

	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse(str, options))
	}

	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}

	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length);

	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
	    }
	  }

	  return function (obj, opts) {
	    var path = '';
	    var data = obj || {};
	    var options = opts || {};
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];

	      if (typeof token === 'string') {
	        path += token;

	        continue
	      }

	      var value = data[token.name];
	      var segment;

	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix;
	          }

	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }

	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }

	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }

	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j]);

	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }

	          path += (j === 0 ? token.prefix : token.delimiter) + segment;
	        }

	        continue
	      }

	      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }

	      path += token.prefix + segment;
	    }

	    return path
	  }
	}

	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}

	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}

	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys;
	  return re
	}

	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}

	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g);

	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      });
	    }
	  }

	  return attachKeys(path, keys)
	}

	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = [];

	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source);
	  }

	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

	  return attachKeys(regexp, keys)
	}

	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options)
	}

	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options);
	    keys = [];
	  }

	  options = options || {};

	  var strict = options.strict;
	  var end = options.end !== false;
	  var route = '';

	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i];

	    if (typeof token === 'string') {
	      route += escapeString(token);
	    } else {
	      var prefix = escapeString(token.prefix);
	      var capture = '(?:' + token.pattern + ')';

	      keys.push(token);

	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*';
	      }

	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?';
	        } else {
	          capture = prefix + '(' + capture + ')?';
	        }
	      } else {
	        capture = prefix + '(' + capture + ')';
	      }

	      route += capture;
	    }
	  }

	  var delimiter = escapeString(options.delimiter || '/');
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
	  }

	  if (end) {
	    route += '$';
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
	  }

	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}

	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options);
	    keys = [];
	  }

	  options = options || {};

	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }

	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }

	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}
	pathToRegexp_1.parse = parse_1;
	pathToRegexp_1.compile = compile_1;
	pathToRegexp_1.tokensToFunction = tokensToFunction_1;
	pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;

	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;

	var compilePath = function compilePath(pattern, options) {
	  var cacheKey = '' + options.end + options.strict + options.sensitive;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

	  if (cache[pattern]) return cache[pattern];

	  var keys = [];
	  var re = pathToRegexp_1(pattern, keys, options);
	  var compiledPattern = { re: re, keys: keys };

	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledPattern;
	    cacheCount++;
	  }

	  return compiledPattern;
	};

	/**
	 * Public API for matching a URL pathname to a path pattern.
	 */
	var matchPath = function matchPath(pathname) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  if (typeof options === 'string') options = { path: options };

	  var _options = options,
	      _options$path = _options.path,
	      path = _options$path === undefined ? '/' : _options$path,
	      _options$exact = _options.exact,
	      exact = _options$exact === undefined ? false : _options$exact,
	      _options$strict = _options.strict,
	      strict = _options$strict === undefined ? false : _options$strict,
	      _options$sensitive = _options.sensitive,
	      sensitive = _options$sensitive === undefined ? false : _options$sensitive;

	  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),
	      re = _compilePath.re,
	      keys = _compilePath.keys;

	  var match = re.exec(pathname);

	  if (!match) return null;

	  var url = match[0],
	      values = match.slice(1);

	  var isExact = pathname === url;

	  if (exact && !isExact) return null;

	  return {
	    path: path, // the path pattern used to match
	    url: path === '/' && url === '' ? '/' : url, // the matched portion of the URL
	    isExact: isExact, // whether or not we matched exactly
	    params: keys.reduce(function (memo, key, index) {
	      memo[key.name] = values[index];
	      return memo;
	    }, {})
	  };
	};

	var _extends$10 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$5(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$5(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isEmptyChildren = function isEmptyChildren(children) {
	  return react.Children.count(children) === 0;
	};

	/**
	 * The public API for matching a single path and rendering.
	 */

	var Route = function (_React$Component) {
	  _inherits$5(Route, _React$Component);

	  function Route() {
	    var _temp, _this, _ret;

	    _classCallCheck$5(this, Route);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$5(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props, _this.context.router)
	    }, _temp), _possibleConstructorReturn$5(_this, _ret);
	  }

	  Route.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends$10({}, this.context.router, {
	        route: {
	          location: this.props.location || this.context.router.route.location,
	          match: this.state.match
	        }
	      })
	    };
	  };

	  Route.prototype.computeMatch = function computeMatch(_ref, router) {
	    var computedMatch = _ref.computedMatch,
	        location = _ref.location,
	        path = _ref.path,
	        strict = _ref.strict,
	        exact = _ref.exact,
	        sensitive = _ref.sensitive;

	    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

	    browser$1(router, 'You should not use <Route> or withRouter() outside a <Router>');

	    var route = router.route;

	    var pathname = (location || route.location).pathname;

	    return path ? matchPath(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }) : route.match;
	  };

	  Route.prototype.componentWillMount = function componentWillMount() {
	    browser(!(this.props.component && this.props.render), 'You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored');

	    browser(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), 'You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored');

	    browser(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), 'You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored');
	  };

	  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
	    browser(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    browser(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');

	    this.setState({
	      match: this.computeMatch(nextProps, nextContext.router)
	    });
	  };

	  Route.prototype.render = function render() {
	    var match = this.state.match;
	    var _props = this.props,
	        children = _props.children,
	        component = _props.component,
	        render = _props.render;
	    var _context$router = this.context.router,
	        history = _context$router.history,
	        route = _context$router.route,
	        staticContext = _context$router.staticContext;

	    var location = this.props.location || route.location;
	    var props = { match: match, location: location, history: history, staticContext: staticContext };

	    return component ? // component prop gets first priority, only called if there's a match
	    match ? react.createElement(component, props) : null : render ? // render prop is next, only called if there's a match
	    match ? render(props) : null : children ? // children come last, always called
	    typeof children === 'function' ? children(props) : !isEmptyChildren(children) ? react.Children.only(children) : null : null;
	  };

	  return Route;
	}(react.Component);

	Route.propTypes = {
	  computedMatch: propTypes.object, // private, from <Switch>
	  path: propTypes.string,
	  exact: propTypes.bool,
	  strict: propTypes.bool,
	  sensitive: propTypes.bool,
	  component: propTypes.func,
	  render: propTypes.func,
	  children: propTypes.oneOfType([propTypes.func, propTypes.node]),
	  location: propTypes.object
	};
	Route.contextTypes = {
	  router: propTypes.shape({
	    history: propTypes.object.isRequired,
	    route: propTypes.object.isRequired,
	    staticContext: propTypes.object
	  })
	};
	Route.childContextTypes = {
	  router: propTypes.object.isRequired
	};

	// Written in this round about way for babel-transform-imports

	var _extends$11 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof$6 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function _objectWithoutProperties$2(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */
	var NavLink = function NavLink(_ref) {
	  var to = _ref.to,
	      exact = _ref.exact,
	      strict = _ref.strict,
	      location = _ref.location,
	      activeClassName = _ref.activeClassName,
	      className = _ref.className,
	      activeStyle = _ref.activeStyle,
	      style = _ref.style,
	      getIsActive = _ref.isActive,
	      ariaCurrent = _ref.ariaCurrent,
	      rest = _objectWithoutProperties$2(_ref, ['to', 'exact', 'strict', 'location', 'activeClassName', 'className', 'activeStyle', 'style', 'isActive', 'ariaCurrent']);

	  return react.createElement(Route, {
	    path: (typeof to === 'undefined' ? 'undefined' : _typeof$6(to)) === 'object' ? to.pathname : to,
	    exact: exact,
	    strict: strict,
	    location: location,
	    children: function children(_ref2) {
	      var location = _ref2.location,
	          match = _ref2.match;

	      var isActive = !!(getIsActive ? getIsActive(match, location) : match);

	      return react.createElement(Link, _extends$11({
	        to: to,
	        className: isActive ? [className, activeClassName].filter(function (i) {
	          return i;
	        }).join(' ') : className,
	        style: isActive ? _extends$11({}, style, activeStyle) : style,
	        'aria-current': isActive && ariaCurrent
	      }, rest));
	    }
	  });
	};

	NavLink.propTypes = {
	  to: Link.propTypes.to,
	  exact: propTypes.bool,
	  strict: propTypes.bool,
	  location: propTypes.object,
	  activeClassName: propTypes.string,
	  className: propTypes.string,
	  activeStyle: propTypes.object,
	  style: propTypes.object,
	  isActive: propTypes.func,
	  ariaCurrent: propTypes.oneOf(['page', 'step', 'location', 'true'])
	};

	NavLink.defaultProps = {
	  activeClassName: 'active',
	  ariaCurrent: 'true'
	};

	function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$6(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$6(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for prompting the user before navigating away
	 * from a screen with a component.
	 */

	var Prompt = function (_React$Component) {
	  _inherits$6(Prompt, _React$Component);

	  function Prompt() {
	    _classCallCheck$6(this, Prompt);

	    return _possibleConstructorReturn$6(this, _React$Component.apply(this, arguments));
	  }

	  Prompt.prototype.enable = function enable(message) {
	    if (this.unblock) this.unblock();

	    this.unblock = this.context.router.history.block(message);
	  };

	  Prompt.prototype.disable = function disable() {
	    if (this.unblock) {
	      this.unblock();
	      this.unblock = null;
	    }
	  };

	  Prompt.prototype.componentWillMount = function componentWillMount() {
	    browser$1(this.context.router, 'You should not use <Prompt> outside a <Router>');

	    if (this.props.when) this.enable(this.props.message);
	  };

	  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.when) {
	      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
	    } else {
	      this.disable();
	    }
	  };

	  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.disable();
	  };

	  Prompt.prototype.render = function render() {
	    return null;
	  };

	  return Prompt;
	}(react.Component);

	Prompt.propTypes = {
	  when: propTypes.bool,
	  message: propTypes.oneOfType([propTypes.func, propTypes.string]).isRequired
	};
	Prompt.defaultProps = {
	  when: true
	};
	Prompt.contextTypes = {
	  router: propTypes.shape({
	    history: propTypes.shape({
	      block: propTypes.func.isRequired
	    }).isRequired
	  }).isRequired
	};

	// Written in this round about way for babel-transform-imports

	var parsePath = function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';

	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }

	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }

	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};

	var _extends$12 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var createLocation = function createLocation(path, state, key, currentLocation) {
	  var location = void 0;
	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = parsePath(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends$12({}, path);

	    if (location.pathname === undefined) location.pathname = '';

	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }

	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }

	    if (state !== undefined && location.state === undefined) location.state = state;
	  }

	  try {
	    location.pathname = decodeURI(location.pathname);
	  } catch (e) {
	    if (e instanceof URIError) {
	      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
	    } else {
	      throw e;
	    }
	  }

	  if (key) location.key = key;

	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);
	    }
	  } else {
	    // When there is no prior location and pathname is empty, set it to /
	    if (!location.pathname) {
	      location.pathname = '/';
	    }
	  }

	  return location;
	};

	var locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);
	};

	var canUseDOM$1 = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$7(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$7(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for updating the location programmatically
	 * with a component.
	 */

	var Redirect = function (_React$Component) {
	  _inherits$7(Redirect, _React$Component);

	  function Redirect() {
	    _classCallCheck$7(this, Redirect);

	    return _possibleConstructorReturn$7(this, _React$Component.apply(this, arguments));
	  }

	  Redirect.prototype.isStatic = function isStatic() {
	    return this.context.router && this.context.router.staticContext;
	  };

	  Redirect.prototype.componentWillMount = function componentWillMount() {
	    browser$1(this.context.router, 'You should not use <Redirect> outside a <Router>');

	    if (this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidMount = function componentDidMount() {
	    if (!this.isStatic()) this.perform();
	  };

	  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var prevTo = createLocation(prevProps.to);
	    var nextTo = createLocation(this.props.to);

	    if (locationsAreEqual(prevTo, nextTo)) {
	      browser(false, 'You tried to redirect to the same route you\'re currently on: ' + ('"' + nextTo.pathname + nextTo.search + '"'));
	      return;
	    }

	    this.perform();
	  };

	  Redirect.prototype.perform = function perform() {
	    var history = this.context.router.history;
	    var _props = this.props,
	        push = _props.push,
	        to = _props.to;


	    if (push) {
	      history.push(to);
	    } else {
	      history.replace(to);
	    }
	  };

	  Redirect.prototype.render = function render() {
	    return null;
	  };

	  return Redirect;
	}(react.Component);

	Redirect.propTypes = {
	  push: propTypes.bool,
	  from: propTypes.string,
	  to: propTypes.oneOfType([propTypes.string, propTypes.object]).isRequired
	};
	Redirect.defaultProps = {
	  push: false
	};
	Redirect.contextTypes = {
	  router: propTypes.shape({
	    history: propTypes.shape({
	      push: propTypes.func.isRequired,
	      replace: propTypes.func.isRequired
	    }).isRequired,
	    staticContext: propTypes.object
	  }).isRequired
	};

	// Written in this round about way for babel-transform-imports

	var _extends$16 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties$3(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$8(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$8(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var normalizeLocation = function normalizeLocation(object) {
	  var _object$pathname = object.pathname,
	      pathname = _object$pathname === undefined ? '/' : _object$pathname,
	      _object$search = object.search,
	      search = _object$search === undefined ? '' : _object$search,
	      _object$hash = object.hash,
	      hash = _object$hash === undefined ? '' : _object$hash;


	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};

	var addBasename = function addBasename(basename, location) {
	  if (!basename) return location;

	  return _extends$16({}, location, {
	    pathname: PathUtils_1(basename) + location.pathname
	  });
	};

	var stripBasename$1 = function stripBasename(basename, location) {
	  if (!basename) return location;

	  var base = PathUtils_1(basename);

	  if (location.pathname.indexOf(base) !== 0) return location;

	  return _extends$16({}, location, {
	    pathname: location.pathname.substr(base.length)
	  });
	};

	var createLocation$1 = function createLocation(location) {
	  return typeof location === 'string' ? PathUtils_6(location) : normalizeLocation(location);
	};

	var createURL = function createURL(location) {
	  return typeof location === 'string' ? location : PathUtils_7(location);
	};

	var staticHandler = function staticHandler(methodName) {
	  return function () {
	    browser$1(false, 'You cannot %s with <StaticRouter>', methodName);
	  };
	};

	var noop = function noop() {};

	/**
	 * The public top-level API for a "static" <Router>, so-called because it
	 * can't actually change the current location. Instead, it just records
	 * location changes in a context object. Useful mainly in testing and
	 * server-rendering scenarios.
	 */

	var StaticRouter = function (_React$Component) {
	  _inherits$8(StaticRouter, _React$Component);

	  function StaticRouter() {
	    var _temp, _this, _ret;

	    _classCallCheck$8(this, StaticRouter);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$8(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
	      return PathUtils_1(_this.props.basename + createURL(path));
	    }, _this.handlePush = function (location) {
	      var _this$props = _this.props,
	          basename = _this$props.basename,
	          context = _this$props.context;

	      context.action = 'PUSH';
	      context.location = addBasename(basename, createLocation$1(location));
	      context.url = createURL(context.location);
	    }, _this.handleReplace = function (location) {
	      var _this$props2 = _this.props,
	          basename = _this$props2.basename,
	          context = _this$props2.context;

	      context.action = 'REPLACE';
	      context.location = addBasename(basename, createLocation$1(location));
	      context.url = createURL(context.location);
	    }, _this.handleListen = function () {
	      return noop;
	    }, _this.handleBlock = function () {
	      return noop;
	    }, _temp), _possibleConstructorReturn$8(_this, _ret);
	  }

	  StaticRouter.prototype.getChildContext = function getChildContext() {
	    return {
	      router: {
	        staticContext: this.props.context
	      }
	    };
	  };

	  StaticRouter.prototype.componentWillMount = function componentWillMount() {
	    browser(!this.props.history, '<StaticRouter> ignores the history prop. To use a custom history, ' + 'use `import { Router }` instead of `import { StaticRouter as Router }`.');
	  };

	  StaticRouter.prototype.render = function render() {
	    var _props = this.props,
	        basename = _props.basename,
	        context = _props.context,
	        location = _props.location,
	        props = _objectWithoutProperties$3(_props, ['basename', 'context', 'location']);

	    var history = {
	      createHref: this.createHref,
	      action: 'POP',
	      location: stripBasename$1(basename, createLocation$1(location)),
	      push: this.handlePush,
	      replace: this.handleReplace,
	      go: staticHandler('go'),
	      goBack: staticHandler('goBack'),
	      goForward: staticHandler('goForward'),
	      listen: this.handleListen,
	      block: this.handleBlock
	    };

	    return react.createElement(Router, _extends$16({}, props, { history: history }));
	  };

	  return StaticRouter;
	}(react.Component);

	StaticRouter.propTypes = {
	  basename: propTypes.string,
	  context: propTypes.object.isRequired,
	  location: propTypes.oneOfType([propTypes.string, propTypes.object])
	};
	StaticRouter.defaultProps = {
	  basename: '',
	  location: '/'
	};
	StaticRouter.childContextTypes = {
	  router: propTypes.object.isRequired
	};

	// Written in this round about way for babel-transform-imports

	function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$9(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$9(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * The public API for rendering the first <Route> that matches.
	 */

	var Switch = function (_React$Component) {
	  _inherits$9(Switch, _React$Component);

	  function Switch() {
	    _classCallCheck$9(this, Switch);

	    return _possibleConstructorReturn$9(this, _React$Component.apply(this, arguments));
	  }

	  Switch.prototype.componentWillMount = function componentWillMount() {
	    browser$1(this.context.router, 'You should not use <Switch> outside a <Router>');
	  };

	  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    browser(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

	    browser(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
	  };

	  Switch.prototype.render = function render() {
	    var route = this.context.router.route;
	    var children = this.props.children;

	    var location = this.props.location || route.location;

	    var match = void 0,
	        child = void 0;
	    react.Children.forEach(children, function (element) {
	      if (!react.isValidElement(element)) return;

	      var _element$props = element.props,
	          pathProp = _element$props.path,
	          exact = _element$props.exact,
	          strict = _element$props.strict,
	          sensitive = _element$props.sensitive,
	          from = _element$props.from;

	      var path = pathProp || from;

	      if (match == null) {
	        child = element;
	        match = path ? matchPath(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }) : route.match;
	      }
	    });

	    return match ? react.cloneElement(child, { location: location, computedMatch: match }) : null;
	  };

	  return Switch;
	}(react.Component);

	Switch.contextTypes = {
	  router: propTypes.shape({
	    route: propTypes.object.isRequired
	  }).isRequired
	};
	Switch.propTypes = {
	  children: propTypes.node,
	  location: propTypes.object
	};

	// Written in this round about way for babel-transform-imports

	// Written in this round about way for babel-transform-imports

	var hoistNonReactStatics$1 = createCommonjsModule(function (module, exports) {
	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	(function (global, factory) {
	    module.exports = factory();
	}(commonjsGlobal, (function () {
	    
	    var REACT_STATICS = {
	        childContextTypes: true,
	        contextTypes: true,
	        defaultProps: true,
	        displayName: true,
	        getDefaultProps: true,
	        getDerivedStateFromProps: true,
	        mixins: true,
	        propTypes: true,
	        type: true
	    };
	    
	    var KNOWN_STATICS = {
	        name: true,
	        length: true,
	        prototype: true,
	        caller: true,
	        callee: true,
	        arguments: true,
	        arity: true
	    };
	    
	    var defineProperty = Object.defineProperty;
	    var getOwnPropertyNames = Object.getOwnPropertyNames;
	    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	    var getPrototypeOf = Object.getPrototypeOf;
	    var objectPrototype = getPrototypeOf && getPrototypeOf(Object);
	    
	    return function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	        if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	            
	            if (objectPrototype) {
	                var inheritedComponent = getPrototypeOf(sourceComponent);
	                if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	                }
	            }
	            
	            var keys = getOwnPropertyNames(sourceComponent);
	            
	            if (getOwnPropertySymbols) {
	                keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	            }
	            
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
	                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
	                    try { // Avoid failures from read-only properties
	                        defineProperty(targetComponent, key, descriptor);
	                    } catch (e) {}
	                }
	            }
	            
	            return targetComponent;
	        }
	        
	        return targetComponent;
	    };
	})));
	});

	// Written in this round about way for babel-transform-imports

	function createBroadcast (initialState) {
	  var listeners = {};
	  var id = 1;
	  var _state = initialState;

	  function getState () {
	    return _state
	  }

	  function setState (state) {
	    _state = state;
	    var keys = Object.keys(listeners);
	    var i = 0;
	    var len = keys.length;
	    for (; i < len; i++) {
	      // if a listener gets unsubscribed during setState we just skip it
	      if (listeners[keys[i]]) { listeners[keys[i]](state); }
	    }
	  }

	  // subscribe to changes and return the subscriptionId
	  function subscribe (listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('listener must be a function.')
	    }
	    var currentId = id;
	    listeners[currentId] = listener;
	    id += 1;
	    return currentId
	  }

	  // remove subscription by removing the listener function
	  function unsubscribe (id) {
	    listeners[id] = undefined;
	  }

	  return { getState: getState, setState: setState, subscribe: subscribe, unsubscribe: unsubscribe }
	}

	var brcast_es = /*#__PURE__*/Object.freeze({
		default: createBroadcast
	});

	var exactProp_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.specialProperty = undefined;



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _keys2 = _interopRequireDefault(keys$1);



	var _extends4 = _interopRequireDefault(_extends$6);

	exports.default = exactProp;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// This module is based on https://github.com/airbnb/prop-types-exact repository.
	// However, in order to reduce the number of dependencies and to remove some extra safe checks
	// the module was forked.

	var specialProperty = exports.specialProperty = 'exact-prop: \u200B';

	function exactProp(propTypes, componentNameInError) {
	  return (0, _extends4.default)({}, propTypes, (0, _defineProperty3.default)({}, specialProperty, function (props) {
	    var unknownProps = (0, _keys2.default)(props).filter(function (prop) {
	      return !propTypes.hasOwnProperty(prop);
	    });
	    if (unknownProps.length > 0) {
	      return new TypeError(componentNameInError + ': unknown props found: ' + unknownProps.join(', ') + '. Please remove the unknown properties.');
	    }
	    return null;
	  }));
	}
	});

	unwrapExports(exactProp_1);
	var exactProp_2 = exactProp_1.specialProperty;

	var _brcast = ( brcast_es && createBroadcast ) || brcast_es;

	var MuiThemeProvider_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _warning2 = _interopRequireDefault(browser);



	var _brcast2 = _interopRequireDefault(_brcast);



	var _themeListener2 = _interopRequireDefault(themeListener_1);



	var _exactProp2 = _interopRequireDefault(exactProp_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * This component takes a `theme` property.
	 * It makes the `theme` available down the React tree thanks to React context.
	 * This component should preferably be used at **the root of your component tree**.
	 */
	var MuiThemeProvider = function (_React$Component) {
	  (0, _inherits3.default)(MuiThemeProvider, _React$Component);

	  function MuiThemeProvider(props, context) {
	    (0, _classCallCheck3.default)(this, MuiThemeProvider);

	    // Get the outer theme from the context, can be null
	    var _this = (0, _possibleConstructorReturn3.default)(this, (MuiThemeProvider.__proto__ || (0, _getPrototypeOf2.default)(MuiThemeProvider)).call(this, props, context));

	    _this.broadcast = (0, _brcast2.default)();
	    _this.unsubscribeId = null;
	    _this.outerTheme = null;
	    _this.outerTheme = _themeListener2.default.initial(context);
	    // Propagate the theme so it can be accessed by the children
	    _this.broadcast.setState(_this.mergeOuterLocalTheme(_this.props.theme));
	    return _this;
	  }

	  (0, _createClass3.default)(MuiThemeProvider, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      var _ref;

	      var _props = this.props,
	          sheetsManager = _props.sheetsManager,
	          disableStylesGeneration = _props.disableStylesGeneration;

	      var muiThemeProviderOptions = this.context.muiThemeProviderOptions || {};

	      if (sheetsManager !== undefined) {
	        muiThemeProviderOptions.sheetsManager = sheetsManager;
	      }

	      if (disableStylesGeneration !== undefined) {
	        muiThemeProviderOptions.disableStylesGeneration = disableStylesGeneration;
	      }

	      return _ref = {}, (0, _defineProperty3.default)(_ref, themeListener_1.CHANNEL, this.broadcast), (0, _defineProperty3.default)(_ref, 'muiThemeProviderOptions', muiThemeProviderOptions), _ref;
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;

	      // Subscribe on the outer theme, if present
	      this.unsubscribeId = _themeListener2.default.subscribe(this.context, function (outerTheme) {
	        _this2.outerTheme = outerTheme;
	        // Forward the parent theme update to the children
	        _this2.broadcast.setState(_this2.mergeOuterLocalTheme(_this2.props.theme));
	      });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      // Propagate a local theme update
	      if (this.props.theme !== nextProps.theme) {
	        this.broadcast.setState(this.mergeOuterLocalTheme(nextProps.theme));
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.unsubscribeId !== null) {
	        _themeListener2.default.unsubscribe(this.context, this.unsubscribeId);
	      }
	    }
	    // We are not using the React state in order to avoid unnecessary rerender.

	  }, {
	    key: 'mergeOuterLocalTheme',


	    // Simple merge between the outer theme and the local theme
	    value: function mergeOuterLocalTheme(localTheme) {
	      // To support composition of theme.
	      if (typeof localTheme === 'function') {
	        (0, _warning2.default)(this.outerTheme, ['Material-UI: you are providing a theme function property ' + 'to the MuiThemeProvider component:', '<MuiThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
	        return localTheme(this.outerTheme);
	      }

	      if (!this.outerTheme) {
	        return localTheme;
	      }

	      return (0, _extends3.default)({}, this.outerTheme, localTheme);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);
	  return MuiThemeProvider;
	}(_react2.default.Component);

	MuiThemeProvider.propTypes = {
	  /**
	   * You can only provide a single element with react@15, a node with react@16.
	   */
	  children: _propTypes2.default.node.isRequired,
	  /**
	   * You can disable the generation of the styles with this option.
	   * It can be useful when traversing the React tree outside of the HTML
	   * rendering step on the server.
	   * Let's say you are using react-apollo to extract all
	   * the queries made by the interface server side.
	   * You can significantly speed up the traversal with this property.
	   */
	  disableStylesGeneration: _propTypes2.default.bool,
	  /**
	   * The sheetsManager is used to deduplicate style sheet injection in the page.
	   * It's deduplicating using the (theme, styles) couple.
	   * On the server, you should provide a new instance for each request.
	   */
	  sheetsManager: _propTypes2.default.object,
	  /**
	   * A theme object.
	   */
	  theme: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]).isRequired
	};

	MuiThemeProvider.propTypes = (0, _exactProp2.default)(MuiThemeProvider.propTypes, 'MuiThemeProvider');

	MuiThemeProvider.childContextTypes = (0, _extends3.default)({}, _themeListener2.default.contextTypes, {
	  muiThemeProviderOptions: _propTypes2.default.object
	});

	MuiThemeProvider.contextTypes = (0, _extends3.default)({}, _themeListener2.default.contextTypes, {
	  muiThemeProviderOptions: _propTypes2.default.object
	});

	exports.default = MuiThemeProvider;
	});

	unwrapExports(MuiThemeProvider_1);

	var withTheme_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _hoistNonReactStatics2 = _interopRequireDefault(hoistNonReactStatics);



	var _wrapDisplayName2 = _interopRequireDefault(wrapDisplayName_1);



	var _createMuiTheme2 = _interopRequireDefault(createMuiTheme_1);



	var _themeListener2 = _interopRequireDefault(themeListener_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var defaultTheme = void 0;

	function getDefaultTheme() {
	  if (defaultTheme) {
	    return defaultTheme;
	  }

	  defaultTheme = (0, _createMuiTheme2.default)();
	  return defaultTheme;
	}

	// Provide the theme object as a property to the input component.
	var withTheme = function withTheme() {
	  return function (Component) {
	    var WithTheme = function (_React$Component) {
	      (0, _inherits3.default)(WithTheme, _React$Component);

	      function WithTheme(props, context) {
	        (0, _classCallCheck3.default)(this, WithTheme);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (WithTheme.__proto__ || (0, _getPrototypeOf2.default)(WithTheme)).call(this, props, context));

	        _this.state = {};
	        _this.unsubscribeId = null;

	        _this.state = {
	          // We use || as the function call is lazy evaluated.
	          theme: _themeListener2.default.initial(context) || getDefaultTheme()
	        };
	        return _this;
	      }

	      (0, _createClass3.default)(WithTheme, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	          var _this2 = this;

	          this.unsubscribeId = _themeListener2.default.subscribe(this.context, function (theme) {
	            _this2.setState({ theme: theme });
	          });
	        }
	      }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	          if (this.unsubscribeId !== null) {
	            _themeListener2.default.unsubscribe(this.context, this.unsubscribeId);
	          }
	        }
	      }, {
	        key: 'render',
	        value: function render() {
	          return _react2.default.createElement(Component, (0, _extends3.default)({ theme: this.state.theme }, this.props));
	        }
	      }]);
	      return WithTheme;
	    }(_react2.default.Component);

	    WithTheme.contextTypes = _themeListener2.default.contextTypes;

	    {
	      WithTheme.displayName = (0, _wrapDisplayName2.default)(Component, 'WithTheme');
	    }

	    (0, _hoistNonReactStatics2.default)(WithTheme, Component);

	    {
	      // Exposed for test purposes.
	      WithTheme.Naked = Component;
	    }

	    return WithTheme;
	  };
	};

	exports.default = withTheme;
	});

	unwrapExports(withTheme_1);

	var styles = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'createGenerateClassName', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(createGenerateClassName_1).default;
	  }
	});



	Object.defineProperty(exports, 'createMuiTheme', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(createMuiTheme_1).default;
	  }
	});



	Object.defineProperty(exports, 'jssPreset', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(jssPreset_1).default;
	  }
	});



	Object.defineProperty(exports, 'MuiThemeProvider', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(MuiThemeProvider_1).default;
	  }
	});



	Object.defineProperty(exports, 'withStyles', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(withStyles_1).default;
	  }
	});



	Object.defineProperty(exports, 'withTheme', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(withTheme_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(styles);
	var styles_1 = styles.MuiThemeProvider;
	var styles_2 = styles.createMuiTheme;
	var styles_3 = styles.withStyles;

	const styles$1 = {
	  link: {
	    textDecoration: 'none',
	    '&:focus, &:hover, &:visited, &:link, &:active': {
	      textDecoration: 'none'
	    }
	  }
	};

	const Link$1 = (_ref) => {
	  let { classes, children } = _ref,
	      other = objectWithoutProperties(_ref, ['classes', 'children']);
	  return react.createElement(
	    Link,
	    _extends$5({ className: classes.link }, other),
	    children
	  );
	};

	Link$1.propTypes = {
	  classes: propTypes.object.isRequired,
	  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]).isRequired
	};

	const enhanced = styles_3(styles$1)(Link$1);

	var Table_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      display: 'table',
	      fontFamily: theme.typography.fontFamily,
	      width: '100%',
	      borderCollapse: 'collapse',
	      borderSpacing: 0,
	      overflow: 'hidden'
	    }
	  };
	};

	var Table = function (_React$Component) {
	  (0, _inherits3.default)(Table, _React$Component);

	  function Table() {
	    (0, _classCallCheck3.default)(this, Table);
	    return (0, _possibleConstructorReturn3.default)(this, (Table.__proto__ || (0, _getPrototypeOf2.default)(Table)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(Table, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      // eslint-disable-line class-methods-use-this
	      return {
	        table: {}
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          classes = _props.classes,
	          classNameProp = _props.className,
	          Component = _props.component,
	          other = (0, _objectWithoutProperties3.default)(_props, ['classes', 'className', 'component']);


	      return _react2.default.createElement(Component, (0, _extends3.default)({ className: (0, _classnames2.default)(classes.root, classNameProp) }, other));
	    }
	  }]);
	  return Table;
	}(_react2.default.Component);

	Table.propTypes = {
	  /**
	   * The content of the table, normally `TableHeader` and `TableBody`.
	   */
	  children: _propTypes2.default.node.isRequired,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
	};

	Table.defaultProps = {
	  component: 'table'
	};

	Table.childContextTypes = {
	  table: _propTypes2.default.object
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiTable' })(Table);
	});

	unwrapExports(Table_1);
	var Table_2 = Table_1.styles;

	var TableBody_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = {
	  root: {
	    display: 'table-row-group'
	  }
	};

	var TableBody = function (_React$Component) {
	  (0, _inherits3.default)(TableBody, _React$Component);

	  function TableBody() {
	    (0, _classCallCheck3.default)(this, TableBody);
	    return (0, _possibleConstructorReturn3.default)(this, (TableBody.__proto__ || (0, _getPrototypeOf2.default)(TableBody)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(TableBody, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      // eslint-disable-line class-methods-use-this
	      return {
	        table: {
	          body: true
	        }
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          classes = _props.classes,
	          classNameProp = _props.className,
	          Component = _props.component,
	          other = (0, _objectWithoutProperties3.default)(_props, ['classes', 'className', 'component']);


	      return _react2.default.createElement(Component, (0, _extends3.default)({ className: (0, _classnames2.default)(classes.root, classNameProp) }, other));
	    }
	  }]);
	  return TableBody;
	}(_react2.default.Component);

	TableBody.propTypes = {
	  /**
	   * The content of the component, normally `TableRow`.
	   */
	  children: _propTypes2.default.node.isRequired,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
	};

	TableBody.defaultProps = {
	  component: 'tbody'
	};

	TableBody.childContextTypes = {
	  table: _propTypes2.default.object
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiTableBody' })(TableBody);
	});

	unwrapExports(TableBody_1);

	var TableCell_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);





	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      display: 'table-cell',
	      verticalAlign: 'inherit',
	      // Workaround for a rendering bug with spanned columns in Chrome 62.0.
	      // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
	      borderBottom: '1px solid\n    ' + (theme.palette.type === 'light' ? (0, colorManipulator.lighten)((0, colorManipulator.fade)(theme.palette.divider, 1), 0.88) : (0, colorManipulator.darken)((0, colorManipulator.fade)(theme.palette.divider, 1), 0.8)),
	      textAlign: 'left',
	      padding: theme.spacing.unit / 2 + 'px ' + theme.spacing.unit * 7 + 'px ' + theme.spacing.unit / 2 + 'px ' + theme.spacing.unit * 3 + 'px',
	      '&:last-child': {
	        paddingRight: theme.spacing.unit * 3
	      }
	    },
	    head: {
	      color: theme.palette.text.secondary,
	      fontSize: theme.typography.pxToRem(12),
	      fontWeight: theme.typography.fontWeightMedium,
	      position: 'relative' // Workaround for Tooltip positioning issue.
	    },
	    body: {
	      fontSize: theme.typography.pxToRem(13),
	      color: theme.palette.text.primary
	    },
	    footer: {
	      borderBottom: 0,
	      color: theme.palette.text.secondary,
	      fontSize: theme.typography.pxToRem(12)
	    },
	    numeric: {
	      textAlign: 'right',
	      flexDirection: 'row-reverse' // can be dynamically inherited at runtime by contents
	    },
	    paddingDense: {
	      paddingRight: theme.spacing.unit * 3
	    },
	    paddingCheckbox: {
	      padding: '0 12px'
	    },
	    paddingNone: {
	      padding: 0,
	      '&:last-child': {
	        padding: 0
	      }
	    }
	  };
	};

	function TableCell(props, context) {
	  var _classNames;

	  var children = props.children,
	      classes = props.classes,
	      classNameProp = props.className,
	      component = props.component,
	      sortDirection = props.sortDirection,
	      numeric = props.numeric,
	      padding = props.padding,
	      scopeProp = props.scope,
	      variant = props.variant,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className', 'component', 'sortDirection', 'numeric', 'padding', 'scope', 'variant']);
	  var table = context.table;

	  var Component = void 0;
	  if (component) {
	    Component = component;
	  } else {
	    Component = table && table.head ? 'th' : 'td';
	  }

	  var scope = scopeProp;
	  if (!scope && table && table.head) {
	    scope = 'col';
	  }

	  var className = (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.head, variant ? variant === 'head' : table && table.head), (0, _defineProperty3.default)(_classNames, classes.body, variant ? variant === 'body' : table && table.body), (0, _defineProperty3.default)(_classNames, classes.footer, variant ? variant === 'footer' : table && table.footer), (0, _defineProperty3.default)(_classNames, classes.numeric, numeric), (0, _defineProperty3.default)(_classNames, classes['padding' + (0, helpers.capitalize)(padding)], padding !== 'default'), _classNames), classNameProp);

	  var ariaSort = null;
	  if (sortDirection) {
	    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
	  }

	  return _react2.default.createElement(
	    Component,
	    (0, _extends3.default)({ className: className, 'aria-sort': ariaSort, scope: scope }, other),
	    children
	  );
	}

	TableCell.propTypes = {
	  /**
	   * The table cell contents.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If `true`, content will align to the right.
	   */
	  numeric: _propTypes2.default.bool,
	  /**
	   * Sets the padding applied to the cell.
	   */
	  padding: _propTypes2.default.oneOf(['default', 'checkbox', 'dense', 'none']),
	  /**
	   * Set scope attribute.
	   */
	  scope: _propTypes2.default.string,
	  /**
	   * Set aria-sort direction.
	   */
	  sortDirection: _propTypes2.default.oneOf(['asc', 'desc', false]),
	  /**
	   * Specify the cell type.
	   * By default, the TableHead, TableBody or TableFooter parent component set the value.
	   */
	  variant: _propTypes2.default.oneOf(['head', 'body', 'footer'])
	};

	TableCell.defaultProps = {
	  numeric: false,
	  padding: 'default'
	};

	TableCell.contextTypes = {
	  table: _propTypes2.default.object.isRequired
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiTableCell' })(TableCell);
	});

	unwrapExports(TableCell_1);
	var TableCell_2 = TableCell_1.styles;

	var TableFooter_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var TableFooter = function (_React$Component) {
	  (0, _inherits3.default)(TableFooter, _React$Component);

	  function TableFooter() {
	    (0, _classCallCheck3.default)(this, TableFooter);
	    return (0, _possibleConstructorReturn3.default)(this, (TableFooter.__proto__ || (0, _getPrototypeOf2.default)(TableFooter)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(TableFooter, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      // eslint-disable-line class-methods-use-this
	      return {
	        table: {
	          footer: true
	        }
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          Component = _props.component,
	          other = (0, _objectWithoutProperties3.default)(_props, ['component']);


	      return _react2.default.createElement(Component, other);
	    }
	  }]);
	  return TableFooter;
	}(_react2.default.Component);

	TableFooter.propTypes = {
	  /**
	   * The content of the component, normally `TableRow`.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
	};

	TableFooter.defaultProps = {
	  component: 'tfoot'
	};

	TableFooter.childContextTypes = {
	  table: _propTypes2.default.object
	};

	exports.default = TableFooter;
	});

	unwrapExports(TableFooter_1);

	var TableHead_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = {
	  root: {
	    display: 'table-header-group'
	  }
	};

	var TableHead = function (_React$Component) {
	  (0, _inherits3.default)(TableHead, _React$Component);

	  function TableHead() {
	    (0, _classCallCheck3.default)(this, TableHead);
	    return (0, _possibleConstructorReturn3.default)(this, (TableHead.__proto__ || (0, _getPrototypeOf2.default)(TableHead)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(TableHead, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      // eslint-disable-line class-methods-use-this
	      return {
	        table: {
	          head: true
	        }
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          classes = _props.classes,
	          classNameProp = _props.className,
	          Component = _props.component,
	          other = (0, _objectWithoutProperties3.default)(_props, ['classes', 'className', 'component']);


	      return _react2.default.createElement(Component, (0, _extends3.default)({ className: (0, _classnames2.default)(classes.root, classNameProp) }, other));
	    }
	  }]);
	  return TableHead;
	}(_react2.default.Component);

	TableHead.propTypes = {
	  /**
	   * The content of the component, normally `TableRow`.
	   */
	  children: _propTypes2.default.node.isRequired,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func])
	};

	TableHead.defaultProps = {
	  component: 'thead'
	};

	TableHead.childContextTypes = {
	  table: _propTypes2.default.object
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiTableHead' })(TableHead);
	});

	unwrapExports(TableHead_1);

	var scrollbarSize = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (recalc) {
	  if (!size && size !== 0 || recalc) {
	    if (_inDOM2.default) {
	      var scrollDiv = document.createElement('div');

	      scrollDiv.style.position = 'absolute';
	      scrollDiv.style.top = '-9999px';
	      scrollDiv.style.width = '50px';
	      scrollDiv.style.height = '50px';
	      scrollDiv.style.overflow = 'scroll';

	      document.body.appendChild(scrollDiv);
	      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	      document.body.removeChild(scrollDiv);
	    }
	  }

	  return size;
	};



	var _inDOM2 = _interopRequireDefault(inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var size = void 0;

	module.exports = exports['default'];
	});

	unwrapExports(scrollbarSize);

	var activeElement_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = activeElement;



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function activeElement() {
	  var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _ownerDocument2.default)();

	  try {
	    return doc.activeElement;
	  } catch (e) {/* ie throws if no active element */}
	}
	module.exports = exports['default'];
	});

	unwrapExports(activeElement_1);

	var RefHolder_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @ignore - internal component.
	 *
	 * Internal helper component to allow attaching a ref to a
	 * child element that may not accept refs (functional component).
	 */
	var RefHolder = function (_React$Component) {
	  (0, _inherits3.default)(RefHolder, _React$Component);

	  function RefHolder() {
	    (0, _classCallCheck3.default)(this, RefHolder);
	    return (0, _possibleConstructorReturn3.default)(this, (RefHolder.__proto__ || (0, _getPrototypeOf2.default)(RefHolder)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(RefHolder, [{
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);
	  return RefHolder;
	}(_react2.default.Component);

	RefHolder.propTypes = {
	  children: _propTypes2.default.node
	};

	exports.default = RefHolder;
	});

	unwrapExports(RefHolder_1);

	var Portal_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _reactDom2 = _interopRequireDefault(reactDom);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);



	var _exactProp2 = _interopRequireDefault(exactProp_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getContainer(container, defaultContainer) {
	  container = typeof container === 'function' ? container() : container;
	  return _reactDom2.default.findDOMNode(container) || defaultContainer;
	}

	function getOwnerDocument(element) {
	  return (0, _ownerDocument2.default)(_reactDom2.default.findDOMNode(element));
	}

	/**
	 * This component shares many concepts with
	 * [react-overlays](https://react-bootstrap.github.io/react-overlays/#portals)
	 * But has been forked in order to fix some bugs, reduce the number of dependencies
	 * and take the control of our destiny.
	 */

	var Portal = function (_React$Component) {
	  (0, _inherits3.default)(Portal, _React$Component);

	  function Portal() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Portal);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Portal.__proto__ || (0, _getPrototypeOf2.default)(Portal)).call.apply(_ref, [this].concat(args))), _this), _this.getMountNode = function () {
	      return _this.mountNode;
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Portal, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.setContainer(this.props.container);
	      this.forceUpdate(this.props.onRendered);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.container !== this.props.container) {
	        this.setContainer(nextProps.container);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.mountNode = null;
	    }
	  }, {
	    key: 'setContainer',
	    value: function setContainer(container) {
	      this.mountNode = getContainer(container, getOwnerDocument(this).body);
	    }

	    /**
	     * @public
	     */

	  }, {
	    key: 'render',
	    value: function render() {
	      var children = this.props.children;


	      return this.mountNode ? _reactDom2.default.createPortal(children, this.mountNode) : null;
	    }
	  }]);
	  return Portal;
	}(_react2.default.Component);

	Portal.propTypes = {
	  /**
	   * The children to render into the `container`.
	   */
	  children: _propTypes2.default.node.isRequired,
	  /**
	   * A node, component instance, or function that returns either.
	   * The `container` will have the portal children appended to it.
	   * By default, it's using the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
	  /**
	   * Callback fired once the children has been mounted into the `container`.
	   */
	  onRendered: _propTypes2.default.func
	};

	Portal.propTypes = (0, _exactProp2.default)(Portal.propTypes, 'Portal');

	exports.default = Portal;
	});

	unwrapExports(Portal_1);

	var LegacyPortal_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _reactDom2 = _interopRequireDefault(reactDom);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);



	var _exactProp2 = _interopRequireDefault(exactProp_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getContainer(container, defaultContainer) {
	  container = typeof container === 'function' ? container() : container;
	  return _reactDom2.default.findDOMNode(container) || defaultContainer;
	}

	function getOwnerDocument(element) {
	  return (0, _ownerDocument2.default)(_reactDom2.default.findDOMNode(element));
	}

	/**
	 * @ignore - internal component.
	 *
	 * This module will soon be gone. We should drop it as soon as react@15.x support stop.
	 */

	var LegacyPortal = function (_React$Component) {
	  (0, _inherits3.default)(LegacyPortal, _React$Component);

	  function LegacyPortal() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, LegacyPortal);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = LegacyPortal.__proto__ || (0, _getPrototypeOf2.default)(LegacyPortal)).call.apply(_ref, [this].concat(args))), _this), _this.getMountNode = function () {
	      return _this.mountNode;
	    }, _this.mountOverlayTarget = function () {
	      if (!_this.overlayTarget) {
	        _this.overlayTarget = document.createElement('div');
	        _this.mountNode = getContainer(_this.props.container, getOwnerDocument(_this).body);
	        _this.mountNode.appendChild(_this.overlayTarget);
	      }
	    }, _this.unmountOverlayTarget = function () {
	      if (_this.overlayTarget) {
	        _this.mountNode.removeChild(_this.overlayTarget);
	        _this.overlayTarget = null;
	      }
	      _this.mountNode = null;
	    }, _this.unrenderOverlay = function () {
	      if (_this.overlayTarget) {
	        _reactDom2.default.unmountComponentAtNode(_this.overlayTarget);
	        _this.overlayInstance = null;
	      }
	    }, _this.renderOverlay = function () {
	      var overlay = _this.props.children;
	      _this.mountOverlayTarget();
	      var initialRender = !_this.overlayInstance;
	      _this.overlayInstance = _reactDom2.default.unstable_renderSubtreeIntoContainer(_this, overlay, _this.overlayTarget, function () {
	        if (initialRender && _this.props.onRendered) {
	          _this.props.onRendered();
	        }
	      });
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(LegacyPortal, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.mounted = true;
	      this.renderOverlay();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.overlayTarget && nextProps.container !== this.props.container) {
	        this.mountNode.removeChild(this.overlayTarget);
	        this.mountNode = getContainer(nextProps.container, getOwnerDocument(this).body);
	        this.mountNode.appendChild(this.overlayTarget);
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.renderOverlay();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.mounted = false;
	      this.unrenderOverlay();
	      this.unmountOverlayTarget();
	    }

	    /**
	     * @public
	     */

	  }, {
	    key: 'render',
	    value: function render() {
	      return null;
	    }
	  }]);
	  return LegacyPortal;
	}(_react2.default.Component);

	LegacyPortal.propTypes = {
	  children: _propTypes2.default.element.isRequired,
	  container: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
	  onRendered: _propTypes2.default.func
	};

	LegacyPortal.propTypes = (0, _exactProp2.default)(LegacyPortal.propTypes, 'LegacyPortal');

	exports.default = LegacyPortal;
	});

	unwrapExports(LegacyPortal_1);

	var Portal$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _reactDom2 = _interopRequireDefault(reactDom);



	var _Portal2 = _interopRequireDefault(Portal_1);



	var _LegacyPortal2 = _interopRequireDefault(LegacyPortal_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _reactDom2.default.createPortal ? _Portal2.default : _LegacyPortal2.default;
	});

	unwrapExports(Portal$1);

	var addEventListener$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (node, event, handler, capture) {
	  node.addEventListener(event, handler, capture);
	  return {
	    remove: function remove() {
	      node.removeEventListener(event, handler, capture);
	    }
	  };
	};
	});

	unwrapExports(addEventListener$1);

	var camelize_1$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = camelize;
	var rHyphen = /-(.)/g;

	function camelize(string) {
	  return string.replace(rHyphen, function (_, chr) {
	    return chr.toUpperCase();
	  });
	}
	module.exports = exports["default"];
	});

	unwrapExports(camelize_1$2);

	var camelizeStyle = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = camelizeStyleName;



	var _camelize2 = _interopRequireDefault(camelize_1$2);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var msPattern = /^-ms-/; /**
	                          * Copyright 2014-2015, Facebook, Inc.
	                          * All rights reserved.
	                          * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
	                          */
	function camelizeStyleName(string) {
	  return (0, _camelize2.default)(string.replace(msPattern, 'ms-'));
	}
	module.exports = exports['default'];
	});

	unwrapExports(camelizeStyle);

	var hyphenate_1$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = hyphenate;

	var rUpper = /([A-Z])/g;

	function hyphenate(string) {
	  return string.replace(rUpper, '-$1').toLowerCase();
	}
	module.exports = exports['default'];
	});

	unwrapExports(hyphenate_1$1);

	var hyphenateStyle = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = hyphenateStyleName;



	var _hyphenate2 = _interopRequireDefault(hyphenate_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var msPattern = /^ms-/; /**
	                         * Copyright 2013-2014, Facebook, Inc.
	                         * All rights reserved.
	                         * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
	                         */

	function hyphenateStyleName(string) {
	  return (0, _hyphenate2.default)(string).replace(msPattern, '-ms-');
	}
	module.exports = exports['default'];
	});

	unwrapExports(hyphenateStyle);

	var getComputedStyle = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = _getComputedStyle;



	var _camelizeStyle2 = _interopRequireDefault(camelizeStyle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var rposition = /^(top|right|bottom|left)$/;
	var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;

	function _getComputedStyle(node) {
	  if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
	  var doc = node.ownerDocument;

	  return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : {
	    //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
	    getPropertyValue: function getPropertyValue(prop) {
	      var style = node.style;

	      prop = (0, _camelizeStyle2.default)(prop);

	      if (prop == 'float') prop = 'styleFloat';

	      var current = node.currentStyle[prop] || null;

	      if (current == null && style && style[prop]) current = style[prop];

	      if (rnumnonpx.test(current) && !rposition.test(prop)) {
	        // Remember the original values
	        var left = style.left;
	        var runStyle = node.runtimeStyle;
	        var rsLeft = runStyle && runStyle.left;

	        // Put in the new values to get a computed value out
	        if (rsLeft) runStyle.left = node.currentStyle.left;

	        style.left = prop === 'fontSize' ? '1em' : current;
	        current = style.pixelLeft + 'px';

	        // Revert the changed values
	        style.left = left;
	        if (rsLeft) runStyle.left = rsLeft;
	      }

	      return current;
	    }
	  };
	}
	module.exports = exports['default'];
	});

	unwrapExports(getComputedStyle);

	var removeStyle_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = removeStyle;
	function removeStyle(node, key) {
	  return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
	}
	module.exports = exports['default'];
	});

	unwrapExports(removeStyle_1);

	var properties = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.animationEnd = exports.animationDelay = exports.animationTiming = exports.animationDuration = exports.animationName = exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = undefined;



	var _inDOM2 = _interopRequireDefault(inDOM);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var transform = 'transform';
	var prefix = void 0,
	    transitionEnd = void 0,
	    animationEnd = void 0;
	var transitionProperty = void 0,
	    transitionDuration = void 0,
	    transitionTiming = void 0,
	    transitionDelay = void 0;
	var animationName = void 0,
	    animationDuration = void 0,
	    animationTiming = void 0,
	    animationDelay = void 0;

	if (_inDOM2.default) {
	  var _getTransitionPropert = getTransitionProperties();

	  prefix = _getTransitionPropert.prefix;
	  exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;
	  exports.animationEnd = animationEnd = _getTransitionPropert.animationEnd;


	  exports.transform = transform = prefix + '-' + transform;
	  exports.transitionProperty = transitionProperty = prefix + '-transition-property';
	  exports.transitionDuration = transitionDuration = prefix + '-transition-duration';
	  exports.transitionDelay = transitionDelay = prefix + '-transition-delay';
	  exports.transitionTiming = transitionTiming = prefix + '-transition-timing-function';

	  exports.animationName = animationName = prefix + '-animation-name';
	  exports.animationDuration = animationDuration = prefix + '-animation-duration';
	  exports.animationTiming = animationTiming = prefix + '-animation-delay';
	  exports.animationDelay = animationDelay = prefix + '-animation-timing-function';
	}

	exports.transform = transform;
	exports.transitionProperty = transitionProperty;
	exports.transitionTiming = transitionTiming;
	exports.transitionDelay = transitionDelay;
	exports.transitionDuration = transitionDuration;
	exports.transitionEnd = transitionEnd;
	exports.animationName = animationName;
	exports.animationDuration = animationDuration;
	exports.animationTiming = animationTiming;
	exports.animationDelay = animationDelay;
	exports.animationEnd = animationEnd;
	exports.default = {
	  transform: transform,
	  end: transitionEnd,
	  property: transitionProperty,
	  timing: transitionTiming,
	  delay: transitionDelay,
	  duration: transitionDuration
	};


	function getTransitionProperties() {
	  var style = document.createElement('div').style;

	  var vendorMap = {
	    O: function O(e) {
	      return 'o' + e.toLowerCase();
	    },
	    Moz: function Moz(e) {
	      return e.toLowerCase();
	    },
	    Webkit: function Webkit(e) {
	      return 'webkit' + e;
	    },
	    ms: function ms(e) {
	      return 'MS' + e;
	    }
	  };

	  var vendors = Object.keys(vendorMap);

	  var transitionEnd = void 0,
	      animationEnd = void 0;
	  var prefix = '';

	  for (var i = 0; i < vendors.length; i++) {
	    var vendor = vendors[i];

	    if (vendor + 'TransitionProperty' in style) {
	      prefix = '-' + vendor.toLowerCase();
	      transitionEnd = vendorMap[vendor]('TransitionEnd');
	      animationEnd = vendorMap[vendor]('AnimationEnd');
	      break;
	    }
	  }

	  if (!transitionEnd && 'transitionProperty' in style) transitionEnd = 'transitionend';

	  if (!animationEnd && 'animationName' in style) animationEnd = 'animationend';

	  style = null;

	  return { animationEnd: animationEnd, transitionEnd: transitionEnd, prefix: prefix };
	}
	});

	unwrapExports(properties);
	var properties_1 = properties.animationEnd;
	var properties_2 = properties.animationDelay;
	var properties_3 = properties.animationTiming;
	var properties_4 = properties.animationDuration;
	var properties_5 = properties.animationName;
	var properties_6 = properties.transitionEnd;
	var properties_7 = properties.transitionDuration;
	var properties_8 = properties.transitionDelay;
	var properties_9 = properties.transitionTiming;
	var properties_10 = properties.transitionProperty;
	var properties_11 = properties.transform;

	var isTransform_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isTransform;
	var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;

	function isTransform(property) {
	  return !!(property && supportedTransforms.test(property));
	}
	module.exports = exports["default"];
	});

	unwrapExports(isTransform_1);

	var style_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = style;



	var _camelizeStyle2 = _interopRequireDefault(camelizeStyle);



	var _hyphenateStyle2 = _interopRequireDefault(hyphenateStyle);



	var _getComputedStyle3 = _interopRequireDefault(getComputedStyle);



	var _removeStyle2 = _interopRequireDefault(removeStyle_1);





	var _isTransform2 = _interopRequireDefault(isTransform_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function style(node, property, value) {
	  var css = '';
	  var transforms = '';
	  var props = property;

	  if (typeof property === 'string') {
	    if (value === undefined) {
	      return node.style[(0, _camelizeStyle2.default)(property)] || (0, _getComputedStyle3.default)(node).getPropertyValue((0, _hyphenateStyle2.default)(property));
	    } else {
	      (props = {})[property] = value;
	    }
	  }

	  Object.keys(props).forEach(function (key) {
	    var value = props[key];
	    if (!value && value !== 0) {
	      (0, _removeStyle2.default)(node, (0, _hyphenateStyle2.default)(key));
	    } else if ((0, _isTransform2.default)(key)) {
	      transforms += key + '(' + value + ') ';
	    } else {
	      css += (0, _hyphenateStyle2.default)(key) + ': ' + value + ';';
	    }
	  });

	  if (transforms) {
	    css += properties.transform + ': ' + transforms + ';';
	  }

	  node.style.cssText += ';' + css;
	}
	module.exports = exports['default'];
	});

	unwrapExports(style_1);

	var isWindow = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = getWindow;
	function getWindow(node) {
	  return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
	}
	module.exports = exports["default"];
	});

	unwrapExports(isWindow);

	var isOverflowing_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.isBody = isBody;
	exports.default = isOverflowing;



	var _isWindow2 = _interopRequireDefault(isWindow);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);



	var _ownerWindow2 = _interopRequireDefault(ownerWindow_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isBody(node) {
	  return node && node.tagName.toLowerCase() === 'body';
	}

	// Do we have a scroll bar?
	function isOverflowing(container) {
	  var doc = (0, _ownerDocument2.default)(container);
	  var win = (0, _ownerWindow2.default)(doc);

	  /* istanbul ignore next */
	  if (!(0, _isWindow2.default)(doc) && !isBody(container)) {
	    return container.scrollHeight > container.clientHeight;
	  }

	  // Takes in account potential non zero margin on the body.
	  var style = win.getComputedStyle(doc.body);
	  var marginLeft = parseInt(style.getPropertyValue('margin-left'), 10);
	  var marginRight = parseInt(style.getPropertyValue('margin-right'), 10);

	  return marginLeft + doc.body.clientWidth + marginRight < win.innerWidth;
	}
	});

	unwrapExports(isOverflowing_1);
	var isOverflowing_2 = isOverflowing_1.isBody;

	var manageAriaHidden = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ariaHidden = ariaHidden;
	exports.hideSiblings = hideSiblings;
	exports.showSiblings = showSiblings;
	var BLACKLIST = ['template', 'script', 'style'];

	function isHidable(node) {
	  return node.nodeType === 1 && BLACKLIST.indexOf(node.tagName.toLowerCase()) === -1;
	}

	function siblings(container, mount, callback) {
	  mount = [].concat(mount); // eslint-disable-line no-param-reassign
	  [].forEach.call(container.children, function (node) {
	    if (mount.indexOf(node) === -1 && isHidable(node)) {
	      callback(node);
	    }
	  });
	}

	function ariaHidden(show, node) {
	  if (!node) {
	    return;
	  }
	  if (show) {
	    node.setAttribute('aria-hidden', 'true');
	  } else {
	    node.removeAttribute('aria-hidden');
	  }
	}

	function hideSiblings(container, mountNode) {
	  siblings(container, mountNode, function (node) {
	    return ariaHidden(true, node);
	  });
	}

	function showSiblings(container, mountNode) {
	  siblings(container, mountNode, function (node) {
	    return ariaHidden(false, node);
	  });
	}
	});

	unwrapExports(manageAriaHidden);
	var manageAriaHidden_1 = manageAriaHidden.ariaHidden;
	var manageAriaHidden_2 = manageAriaHidden.hideSiblings;
	var manageAriaHidden_3 = manageAriaHidden.showSiblings;

	var ModalManager_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _keys2 = _interopRequireDefault(keys$1);



	var _style2 = _interopRequireDefault(style_1);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);



	var _scrollbarSize2 = _interopRequireDefault(scrollbarSize);



	var _isOverflowing2 = _interopRequireDefault(isOverflowing_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function findIndexOf(data, callback) {
	  var idx = -1;
	  data.some(function (item, index) {
	    if (callback(item)) {
	      idx = index;
	      return true;
	    }
	    return false;
	  });
	  return idx;
	}

	function findContainer(data, modal) {
	  return findIndexOf(data, function (item) {
	    return item.modals.indexOf(modal) !== -1;
	  });
	}

	function getPaddingRight(node) {
	  return parseInt((0, _style2.default)(node, 'paddingRight') || 0, 10);
	}

	function setContainerStyle(data, container) {
	  var style = { overflow: 'hidden' };

	  // We are only interested in the actual `style` here because we will override it.
	  data.style = {
	    overflow: container.style.overflow,
	    paddingRight: container.style.paddingRight
	  };

	  if (data.overflowing) {
	    var scrollbarSize$$1 = (0, _scrollbarSize2.default)();

	    // Use computed style, here to get the real padding to add our scrollbar width.
	    style.paddingRight = getPaddingRight(container) + scrollbarSize$$1 + 'px';

	    // .mui-fixed is a global helper.
	    var fixedNodes = (0, _ownerDocument2.default)(container).querySelectorAll('.mui-fixed');
	    for (var i = 0; i < fixedNodes.length; i += 1) {
	      var paddingRight = getPaddingRight(fixedNodes[i]);
	      data.prevPaddings.push(paddingRight);
	      fixedNodes[i].style.paddingRight = paddingRight + scrollbarSize$$1 + 'px';
	    }
	  }

	  (0, _keys2.default)(style).forEach(function (key) {
	    container.style[key] = style[key];
	  });
	}

	function removeContainerStyle(data, container) {
	  (0, _keys2.default)(data.style).forEach(function (key) {
	    container.style[key] = data.style[key];
	  });

	  var fixedNodes = (0, _ownerDocument2.default)(container).querySelectorAll('.mui-fixed');
	  for (var i = 0; i < fixedNodes.length; i += 1) {
	    fixedNodes[i].style.paddingRight = data.prevPaddings[i] + 'px';
	  }
	}
	/**
	 * @ignore - do not document.
	 *
	 * Proper state managment for containers and the modals in those containers.
	 * Simplified, but inspired by react-overlay's ModalManager class
	 * Used by the Modal to ensure proper styling of containers.
	 */

	var ModalManager = function () {
	  function ModalManager() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref$hideSiblingNodes = _ref.hideSiblingNodes,
	        hideSiblingNodes = _ref$hideSiblingNodes === undefined ? true : _ref$hideSiblingNodes,
	        _ref$handleContainerO = _ref.handleContainerOverflow,
	        handleContainerOverflow = _ref$handleContainerO === undefined ? true : _ref$handleContainerO;

	    (0, _classCallCheck3.default)(this, ModalManager);

	    this.hideSiblingNodes = hideSiblingNodes;
	    this.handleContainerOverflow = handleContainerOverflow;
	    // this.modals[modalIdx] = modal
	    this.modals = [];
	    // this.containers[containerIdx] = container
	    this.containers = [];
	    // this.data[containerIdx] = {
	    //   modals: [],
	    // }
	    this.data = [];
	  }

	  (0, _createClass3.default)(ModalManager, [{
	    key: 'add',
	    value: function add(modal, container) {
	      var modalIdx = this.modals.indexOf(modal);
	      var containerIdx = this.containers.indexOf(container);

	      if (modalIdx !== -1) {
	        return modalIdx;
	      }

	      modalIdx = this.modals.length;
	      this.modals.push(modal);

	      if (this.hideSiblingNodes) {
	        (0, manageAriaHidden.hideSiblings)(container, modal.mountNode);
	      }

	      if (containerIdx !== -1) {
	        this.data[containerIdx].modals.push(modal);
	        return modalIdx;
	      }

	      var data = {
	        modals: [modal],
	        overflowing: (0, _isOverflowing2.default)(container),
	        prevPaddings: []
	      };

	      if (this.handleContainerOverflow) {
	        setContainerStyle(data, container);
	      }

	      this.containers.push(container);
	      this.data.push(data);

	      return modalIdx;
	    }
	  }, {
	    key: 'remove',
	    value: function remove(modal) {
	      var modalIdx = this.modals.indexOf(modal);

	      if (modalIdx === -1) {
	        return modalIdx;
	      }

	      var containerIdx = findContainer(this.data, modal);
	      var data = this.data[containerIdx];
	      var container = this.containers[containerIdx];

	      data.modals.splice(data.modals.indexOf(modal), 1);
	      this.modals.splice(modalIdx, 1);

	      // If that was the last modal in a container, clean up the container.
	      if (data.modals.length === 0) {
	        if (this.handleContainerOverflow) {
	          removeContainerStyle(data, container);
	        }

	        if (this.hideSiblingNodes) {
	          (0, manageAriaHidden.showSiblings)(container, modal.mountNode);
	        }
	        this.containers.splice(containerIdx, 1);
	        this.data.splice(containerIdx, 1);
	      } else if (this.hideSiblingNodes) {
	        // Otherwise make sure the next top modal is visible to a SR.
	        (0, manageAriaHidden.ariaHidden)(false, data.modals[data.modals.length - 1].mountNode);
	      }

	      return modalIdx;
	    }
	  }, {
	    key: 'isTopModal',
	    value: function isTopModal(modal) {
	      return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
	    }
	  }]);
	  return ModalManager;
	}();

	exports.default = ModalManager;
	});

	unwrapExports(ModalManager_1);

	var utils = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.getTransitionProps = getTransitionProps;
	var reflow = exports.reflow = function reflow(node) {
	  return node.scrollTop;
	};

	function getTransitionProps(props, options) {
	  var timeout = props.timeout,
	      _props$style = props.style,
	      style = _props$style === undefined ? {} : _props$style;


	  return {
	    duration: style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode],
	    delay: style.transitionDelay
	  };
	}
	});

	unwrapExports(utils);
	var utils_1 = utils.getTransitionProps;
	var utils_2 = utils.reflow;

	var Fade_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _Transition2 = _interopRequireDefault(Transition_1);





	var _withTheme2 = _interopRequireDefault(withTheme_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// @inheritedComponent Transition

	var styles = {
	  entering: {
	    opacity: 1
	  },
	  entered: {
	    opacity: 1
	  }
	};

	/**
	 * The Fade transition is used by the [Modal](/demos/modals) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	var Fade = function (_React$Component) {
	  (0, _inherits3.default)(Fade, _React$Component);

	  function Fade() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Fade);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Fade.__proto__ || (0, _getPrototypeOf2.default)(Fade)).call.apply(_ref, [this].concat(args))), _this), _this.handleEnter = function (node) {
	      var theme = _this.props.theme;

	      (0, utils.reflow)(node); // So the animation always start from the start.

	      var _getTransitionProps = (0, utils.getTransitionProps)(_this.props, {
	        mode: 'enter'
	      }),
	          transitionDuration = _getTransitionProps.duration,
	          delay = _getTransitionProps.delay;

	      node.style.transition = theme.transitions.create('opacity', {
	        duration: transitionDuration,
	        delay: delay
	      });
	      node.style.webkitTransition = theme.transitions.create('opacity', {
	        duration: transitionDuration,
	        delay: delay
	      });

	      if (_this.props.onEnter) {
	        _this.props.onEnter(node);
	      }
	    }, _this.handleExit = function (node) {
	      var theme = _this.props.theme;

	      var _getTransitionProps2 = (0, utils.getTransitionProps)(_this.props, {
	        mode: 'exit'
	      }),
	          transitionDuration = _getTransitionProps2.duration,
	          delay = _getTransitionProps2.delay;

	      node.style.transition = theme.transitions.create('opacity', {
	        duration: transitionDuration,
	        delay: delay
	      });
	      node.style.webkitTransition = theme.transitions.create('opacity', {
	        duration: transitionDuration,
	        delay: delay
	      });

	      if (_this.props.onExit) {
	        _this.props.onExit(node);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Fade, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          onEnter = _props.onEnter,
	          onExit = _props.onExit,
	          styleProp = _props.style,
	          theme = _props.theme,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'onEnter', 'onExit', 'style', 'theme']);


	      var style = (0, _extends3.default)({}, styleProp, _react2.default.isValidElement(children) ? children.props.style : {});

	      return _react2.default.createElement(
	        _Transition2.default,
	        (0, _extends3.default)({ appear: true, onEnter: this.handleEnter, onExit: this.handleExit }, other),
	        function (state, childProps) {
	          return _react2.default.cloneElement(children, (0, _extends3.default)({
	            style: (0, _extends3.default)({
	              opacity: 0
	            }, styles[state], style)
	          }, childProps));
	        }
	      );
	    }
	  }]);
	  return Fade;
	}(_react2.default.Component);

	Fade.propTypes = {
	  /**
	   * A single child content element.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),
	  /**
	   * If `true`, the component will transition in.
	   */
	  in: _propTypes2.default.bool,
	  /**
	   * @ignore
	   */
	  onEnter: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onEntering: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onExit: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  style: _propTypes2.default.object,
	  /**
	   * @ignore
	   */
	  theme: _propTypes2.default.object.isRequired,
	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   */
	  timeout: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({ enter: _propTypes2.default.number, exit: _propTypes2.default.number })])
	};

	Fade.defaultProps = {
	  timeout: {
	    enter: transitions.duration.enteringScreen,
	    exit: transitions.duration.leavingScreen
	  }
	};

	exports.default = (0, _withTheme2.default)()(Fade);
	});

	unwrapExports(Fade_1);

	var Backdrop_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _Fade2 = _interopRequireDefault(Fade_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = {
	  root: {
	    zIndex: -1,
	    width: '100%',
	    height: '100%',
	    position: 'fixed',
	    top: 0,
	    left: 0,
	    // Remove grey highlight
	    WebkitTapHighlightColor: 'transparent',
	    willChange: 'opacity',
	    backgroundColor: 'rgba(0, 0, 0, 0.5)'
	  },
	  invisible: {
	    backgroundColor: 'transparent'
	  }
	};

	function Backdrop(props) {
	  var classes = props.classes,
	      invisible = props.invisible,
	      open = props.open,
	      transitionDuration = props.transitionDuration,
	      other = (0, _objectWithoutProperties3.default)(props, ['classes', 'invisible', 'open', 'transitionDuration']);


	  var className = (0, _classnames2.default)(classes.root, (0, _defineProperty3.default)({}, classes.invisible, invisible));

	  return _react2.default.createElement(
	    _Fade2.default,
	    (0, _extends3.default)({ appear: true, 'in': open, timeout: transitionDuration }, other),
	    _react2.default.createElement('div', { className: className, 'aria-hidden': 'true' })
	  );
	}

	Backdrop.propTypes = {
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * If `true`, the backdrop is invisible.
	   * It can be used when rendering a popover or a custom select component.
	   */
	  invisible: _propTypes2.default.bool,
	  /**
	   * If `true`, the backdrop is open.
	   */
	  open: _propTypes2.default.bool.isRequired,
	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   */
	  transitionDuration: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({ enter: _propTypes2.default.number, exit: _propTypes2.default.number })])
	};

	Backdrop.defaultProps = {
	  invisible: false
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiBackdrop' })(Backdrop);
	});

	unwrapExports(Backdrop_1);
	var Backdrop_2 = Backdrop_1.styles;

	var Modal_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _reactDom2 = _interopRequireDefault(reactDom);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _warning2 = _interopRequireDefault(browser);



	var _keycode2 = _interopRequireDefault(keycode);



	var _activeElement2 = _interopRequireDefault(activeElement_1);



	var _contains2 = _interopRequireDefault(contains);



	var _inDOM2 = _interopRequireDefault(inDOM);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);



	var _RefHolder2 = _interopRequireDefault(RefHolder_1);



	var _Portal2 = _interopRequireDefault(Portal$1);



	var _addEventListener2 = _interopRequireDefault(addEventListener$1);





	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _ModalManager2 = _interopRequireDefault(ModalManager_1);



	var _Backdrop2 = _interopRequireDefault(Backdrop_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getContainer(container, defaultContainer) {
	  container = typeof container === 'function' ? container() : container;
	  return _reactDom2.default.findDOMNode(container) || defaultContainer;
	} // @inheritedComponent Portal

	function getHasTransition(props) {
	  return props.children ? props.children.props.hasOwnProperty('in') : false;
	}

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      display: 'flex',
	      width: '100%',
	      height: '100%',
	      position: 'fixed',
	      zIndex: theme.zIndex.modal,
	      top: 0,
	      left: 0
	    },
	    hidden: {
	      visibility: 'hidden'
	    }
	  };
	};

	var Modal = function (_React$Component) {
	  (0, _inherits3.default)(Modal, _React$Component);

	  function Modal(props, context) {
	    (0, _classCallCheck3.default)(this, Modal);

	    var _this = (0, _possibleConstructorReturn3.default)(this, (Modal.__proto__ || (0, _getPrototypeOf2.default)(Modal)).call(this, props, context));

	    _this.dialog = null;
	    _this.mounted = false;
	    _this.mountNode = null;

	    _this.handleRendered = function () {
	      _this.autoFocus();

	      if (_this.props.onRendered) {
	        _this.props.onRendered();
	      }
	    };

	    _this.handleOpen = function () {
	      var doc = (0, _ownerDocument2.default)(_this.mountNode);
	      var container = getContainer(_this.props.container, doc.body);

	      _this.props.manager.add(_this, container);
	      _this.onDocumentKeydownListener = (0, _addEventListener2.default)(doc, 'keydown', _this.handleDocumentKeyDown);
	      _this.onFocusinListener = (0, _addEventListener2.default)(doc, 'focus', _this.enforceFocus, true);
	    };

	    _this.handleClose = function () {
	      _this.props.manager.remove(_this);
	      _this.onDocumentKeydownListener.remove();
	      _this.onFocusinListener.remove();
	      _this.restoreLastFocus();
	    };

	    _this.handleExited = function () {
	      _this.setState({ exited: true });
	      _this.handleClose();
	    };

	    _this.handleBackdropClick = function (event) {
	      if (event.target !== event.currentTarget) {
	        return;
	      }

	      if (_this.props.onBackdropClick) {
	        _this.props.onBackdropClick(event);
	      }

	      if (!_this.props.disableBackdropClick && _this.props.onClose) {
	        _this.props.onClose(event, 'backdropClick');
	      }
	    };

	    _this.handleDocumentKeyDown = function (event) {
	      if (!_this.isTopModal() || (0, _keycode2.default)(event) !== 'esc') {
	        return;
	      }

	      if (_this.props.onEscapeKeyDown) {
	        _this.props.onEscapeKeyDown(event);
	      }

	      if (!_this.props.disableEscapeKeyDown && _this.props.onClose) {
	        _this.props.onClose(event, 'escapeKeyDown');
	      }
	    };

	    _this.checkForFocus = function () {
	      if (_inDOM2.default) {
	        _this.lastFocus = (0, _activeElement2.default)();
	      }
	    };

	    _this.enforceFocus = function () {
	      if (_this.props.disableEnforceFocus || !_this.mounted || !_this.isTopModal()) {
	        return;
	      }

	      var dialogElement = _this.getDialogElement();
	      var currentActiveElement = (0, _activeElement2.default)((0, _ownerDocument2.default)(_this.mountNode));

	      if (dialogElement && !(0, _contains2.default)(dialogElement, currentActiveElement)) {
	        dialogElement.focus();
	      }
	    };

	    _this.state = {
	      exited: !_this.props.open
	    };
	    return _this;
	  }

	  (0, _createClass3.default)(Modal, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.mounted = true;
	      if (this.props.open) {
	        this.handleOpen();
	      }
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.open) {
	        this.setState({ exited: false });
	      } else if (!getHasTransition(nextProps)) {
	        // Otherwise let handleExited take care of marking exited.
	        this.setState({ exited: true });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps) {
	      if (!prevProps.open && this.props.open) {
	        this.checkForFocus();
	      }

	      if (prevProps.open && !this.props.open && !getHasTransition(this.props)) {
	        // Otherwise handleExited will call this.
	        this.handleClose();
	      } else if (!prevProps.open && this.props.open) {
	        this.handleOpen();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.mounted = false;

	      if (this.props.open || getHasTransition(this.props) && !this.state.exited) {
	        this.handleClose();
	      }
	    }
	  }, {
	    key: 'getDialogElement',
	    value: function getDialogElement() {
	      return _reactDom2.default.findDOMNode(this.dialog);
	    }
	  }, {
	    key: 'autoFocus',
	    value: function autoFocus() {
	      if (this.props.disableAutoFocus) {
	        return;
	      }

	      var dialogElement = this.getDialogElement();
	      var currentActiveElement = (0, _activeElement2.default)((0, _ownerDocument2.default)(this.mountNode));

	      if (dialogElement && !(0, _contains2.default)(dialogElement, currentActiveElement)) {
	        this.lastFocus = currentActiveElement;

	        if (!dialogElement.hasAttribute('tabIndex')) {
	          (0, _warning2.default)(false, ['Material-UI: the modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
	          dialogElement.setAttribute('tabIndex', -1);
	        }

	        dialogElement.focus();
	      }
	    }
	  }, {
	    key: 'restoreLastFocus',
	    value: function restoreLastFocus() {
	      if (this.props.disableRestoreFocus) {
	        return;
	      }

	      if (this.lastFocus) {
	        this.lastFocus.focus();
	        this.lastFocus = null;
	      }
	    }
	  }, {
	    key: 'isTopModal',
	    value: function isTopModal() {
	      return this.props.manager.isTopModal(this);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          BackdropComponent = _props.BackdropComponent,
	          BackdropProps = _props.BackdropProps,
	          children = _props.children,
	          classes = _props.classes,
	          className = _props.className,
	          container = _props.container,
	          disableAutoFocus = _props.disableAutoFocus,
	          disableBackdropClick = _props.disableBackdropClick,
	          disableEnforceFocus = _props.disableEnforceFocus,
	          disableEscapeKeyDown = _props.disableEscapeKeyDown,
	          disableRestoreFocus = _props.disableRestoreFocus,
	          hideBackdrop = _props.hideBackdrop,
	          keepMounted = _props.keepMounted,
	          onBackdropClick = _props.onBackdropClick,
	          onClose = _props.onClose,
	          onEscapeKeyDown = _props.onEscapeKeyDown,
	          onRendered = _props.onRendered,
	          open = _props.open,
	          manager = _props.manager,
	          other = (0, _objectWithoutProperties3.default)(_props, ['BackdropComponent', 'BackdropProps', 'children', 'classes', 'className', 'container', 'disableAutoFocus', 'disableBackdropClick', 'disableEnforceFocus', 'disableEscapeKeyDown', 'disableRestoreFocus', 'hideBackdrop', 'keepMounted', 'onBackdropClick', 'onClose', 'onEscapeKeyDown', 'onRendered', 'open', 'manager']);
	      var exited = this.state.exited;

	      var hasTransition = getHasTransition(this.props);
	      var childProps = {};

	      if (!keepMounted && !open && (!hasTransition || exited)) {
	        return null;
	      }

	      // It's a Transition like component
	      if (hasTransition) {
	        childProps.onExited = (0, helpers.createChainedFunction)(this.handleExited, children.props.onExited);
	      }

	      if (children.props.role === undefined) {
	        childProps.role = children.props.role || 'document';
	      }

	      if (children.props.tabIndex === undefined) {
	        childProps.tabIndex = children.props.tabIndex || '-1';
	      }

	      return _react2.default.createElement(
	        _Portal2.default,
	        {
	          ref: function ref(node) {
	            _this2.mountNode = node ? node.getMountNode() : node;
	          },
	          container: container,
	          onRendered: this.handleRendered
	        },
	        _react2.default.createElement(
	          'div',
	          (0, _extends3.default)({
	            className: (0, _classnames2.default)(classes.root, className, (0, _defineProperty3.default)({}, classes.hidden, exited))
	          }, other),
	          hideBackdrop ? null : _react2.default.createElement(BackdropComponent, (0, _extends3.default)({ open: open, onClick: this.handleBackdropClick }, BackdropProps)),
	          _react2.default.createElement(
	            _RefHolder2.default,
	            {
	              ref: function ref(node) {
	                _this2.dialog = node;
	              }
	            },
	            _react2.default.cloneElement(children, childProps)
	          )
	        )
	      );
	    }
	  }]);
	  return Modal;
	}(_react2.default.Component);

	Modal.propTypes = {
	  /**
	   * A backdrop component. Useful for custom backdrop rendering.
	   */
	  BackdropComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * Properties applied to the `Backdrop` element.
	   */
	  BackdropProps: _propTypes2.default.object,
	  /**
	   * A single child content element.
	   */
	  children: _propTypes2.default.element,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * A node, component instance, or function that returns either.
	   * The `container` will have the portal children appended to it.
	   */
	  container: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
	  /**
	   * If `true`, the modal will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   */
	  disableAutoFocus: _propTypes2.default.bool,
	  /**
	   * If `true`, clicking the backdrop will not fire any callback.
	   */
	  disableBackdropClick: _propTypes2.default.bool,
	  /**
	   * If `true`, the modal will not prevent focus from leaving the modal while open.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   */
	  disableEnforceFocus: _propTypes2.default.bool,
	  /**
	   * If `true`, hitting escape will not fire any callback.
	   */
	  disableEscapeKeyDown: _propTypes2.default.bool,
	  /**
	   * If `true`, the modal will not restore focus to previously focused element once
	   * modal is hidden.
	   */
	  disableRestoreFocus: _propTypes2.default.bool,
	  /**
	   * If `true`, the backdrop is not rendered.
	   */
	  hideBackdrop: _propTypes2.default.bool,
	  /**
	   * Always keep the children in the DOM.
	   * This property can be useful in SEO situation or
	   * when you want to maximize the responsiveness of the Modal.
	   */
	  keepMounted: _propTypes2.default.bool,
	  /**
	   * A modal manager used to track and manage the state of open
	   * Modals. Useful when customizing how modals interact within a container.
	   */
	  manager: _propTypes2.default.object,
	  /**
	   * Callback fired when the backdrop is clicked.
	   */
	  onBackdropClick: _propTypes2.default.func,
	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   *
	   * @param {object} event The event source of the callback
	   * @param {string} reason Can be:`"escapeKeyDown"`, `"backdropClick"`
	   */
	  onClose: _propTypes2.default.func,
	  /**
	   * Callback fired when the escape key is pressed,
	   * `disableEscapeKeyDown` is false and the modal is in focus.
	   */
	  onEscapeKeyDown: _propTypes2.default.func,
	  /**
	   * Callback fired once the children has been mounted into the `container`.
	   * It signals that the `open={true}` property took effect.
	   */
	  onRendered: _propTypes2.default.func,
	  /**
	   * If `true`, the modal is open.
	   */
	  open: _propTypes2.default.bool.isRequired
	};

	Modal.defaultProps = {
	  disableAutoFocus: false,
	  disableBackdropClick: false,
	  disableEnforceFocus: false,
	  disableEscapeKeyDown: false,
	  disableRestoreFocus: false,
	  hideBackdrop: false,
	  keepMounted: false,
	  // Modals don't open on the server so this won't conflict with concurrent requests.
	  manager: new _ModalManager2.default(),
	  BackdropComponent: _Backdrop2.default
	};

	exports.default = (0, _withStyles2.default)(styles, { flip: false, name: 'MuiModal' })(Modal);
	});

	unwrapExports(Modal_1);
	var Modal_2 = Modal_1.styles;

	var Modal$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Modal_1).default;
	  }
	});



	Object.defineProperty(exports, 'Backdrop', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Backdrop_1).default;
	  }
	});



	Object.defineProperty(exports, 'ModalManager', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(ModalManager_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(Modal$1);

	var Grow_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _Transition2 = _interopRequireDefault(Transition_1);



	var _withTheme2 = _interopRequireDefault(withTheme_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getScale(value) {
	  return 'scale(' + value + ', ' + Math.pow(value, 2) + ')';
	} // @inheritedComponent Transition

	var styles = {
	  entering: {
	    opacity: 1,
	    transform: getScale(1)
	  },
	  entered: {
	    opacity: 1,
	    transform: getScale(1)
	  }
	};

	/**
	 * The Grow transition is used by the [Popover](/demos/popovers) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	var Grow = function (_React$Component) {
	  (0, _inherits3.default)(Grow, _React$Component);

	  function Grow() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Grow);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Grow.__proto__ || (0, _getPrototypeOf2.default)(Grow)).call.apply(_ref, [this].concat(args))), _this), _this.autoTimeout = undefined, _this.timer = null, _this.handleEnter = function (node) {
	      var _this$props = _this.props,
	          theme = _this$props.theme,
	          timeout = _this$props.timeout;

	      (0, utils.reflow)(node); // So the animation always start from the start.

	      var _getTransitionProps = (0, utils.getTransitionProps)(_this.props, {
	        mode: 'enter'
	      }),
	          transitionDuration = _getTransitionProps.duration,
	          delay = _getTransitionProps.delay;

	      var duration = 0;
	      if (timeout === 'auto') {
	        duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	        _this.autoTimeout = duration;
	      } else {
	        duration = transitionDuration;
	      }

	      node.style.transition = [theme.transitions.create('opacity', {
	        duration: duration,
	        delay: delay
	      }), theme.transitions.create('transform', {
	        duration: duration * 0.666,
	        delay: delay
	      })].join(',');

	      if (_this.props.onEnter) {
	        _this.props.onEnter(node);
	      }
	    }, _this.handleExit = function (node) {
	      var _this$props2 = _this.props,
	          theme = _this$props2.theme,
	          timeout = _this$props2.timeout;

	      var duration = 0;

	      var _getTransitionProps2 = (0, utils.getTransitionProps)(_this.props, {
	        mode: 'exit'
	      }),
	          transitionDuration = _getTransitionProps2.duration,
	          delay = _getTransitionProps2.delay;

	      if (timeout === 'auto') {
	        duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	        _this.autoTimeout = duration;
	      } else {
	        duration = transitionDuration;
	      }

	      node.style.transition = [theme.transitions.create('opacity', {
	        duration: duration,
	        delay: delay
	      }), theme.transitions.create('transform', {
	        duration: duration * 0.666,
	        delay: delay || duration * 0.333
	      })].join(',');

	      node.style.opacity = '0';
	      node.style.transform = getScale(0.75);

	      if (_this.props.onExit) {
	        _this.props.onExit(node);
	      }
	    }, _this.addEndListener = function (_, next) {
	      if (_this.props.timeout === 'auto') {
	        _this.timer = setTimeout(next, _this.autoTimeout || 0);
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Grow, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.timer);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          onEnter = _props.onEnter,
	          onExit = _props.onExit,
	          styleProp = _props.style,
	          theme = _props.theme,
	          timeout = _props.timeout,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'onEnter', 'onExit', 'style', 'theme', 'timeout']);


	      var style = (0, _extends3.default)({}, styleProp, _react2.default.isValidElement(children) ? children.props.style : {});

	      return _react2.default.createElement(
	        _Transition2.default,
	        (0, _extends3.default)({
	          appear: true,
	          onEnter: this.handleEnter,
	          onExit: this.handleExit,
	          addEndListener: this.addEndListener,
	          timeout: timeout === 'auto' ? null : timeout
	        }, other),
	        function (state, childProps) {
	          return _react2.default.cloneElement(children, (0, _extends3.default)({
	            style: (0, _extends3.default)({
	              opacity: 0,
	              transform: getScale(0.75)
	            }, styles[state], style)
	          }, childProps));
	        }
	      );
	    }
	  }]);
	  return Grow;
	}(_react2.default.Component);

	Grow.propTypes = {
	  /**
	   * A single child content element.
	   */
	  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),
	  /**
	   * If `true`, show the component; triggers the enter or exit animation.
	   */
	  in: _propTypes2.default.bool,
	  /**
	   * @ignore
	   */
	  onEnter: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onEntered: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onEntering: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onExit: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  style: _propTypes2.default.object,
	  /**
	   * @ignore
	   */
	  theme: _propTypes2.default.object.isRequired,
	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   *
	   * Set to 'auto' to automatically calculate transition time based on height.
	   */
	  timeout: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({ enter: _propTypes2.default.number, exit: _propTypes2.default.number }), _propTypes2.default.oneOf(['auto'])])
	};

	Grow.defaultProps = {
	  timeout: 'auto'
	};

	exports.default = (0, _withTheme2.default)()(Grow);
	});

	unwrapExports(Grow_1);

	var Popover_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _reactDom2 = _interopRequireDefault(reactDom);



	var _warning2 = _interopRequireDefault(browser);



	var _contains2 = _interopRequireDefault(contains);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);



	var _ownerWindow2 = _interopRequireDefault(ownerWindow_1);



	var _debounce2 = _interopRequireDefault(debounce_1);



	var _reactEventListener2 = _interopRequireDefault(lib$8);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _Modal2 = _interopRequireDefault(Modal$1);



	var _Grow2 = _interopRequireDefault(Grow_1);



	var _Paper2 = _interopRequireDefault(Paper$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function getOffsetTop(rect, vertical) {
	  var offset = 0;

	  if (typeof vertical === 'number') {
	    offset = vertical;
	  } else if (vertical === 'center') {
	    offset = rect.height / 2;
	  } else if (vertical === 'bottom') {
	    offset = rect.height;
	  }

	  return offset;
	} // @inheritedComponent Modal

	function getOffsetLeft(rect, horizontal) {
	  var offset = 0;

	  if (typeof horizontal === 'number') {
	    offset = horizontal;
	  } else if (horizontal === 'center') {
	    offset = rect.width / 2;
	  } else if (horizontal === 'right') {
	    offset = rect.width;
	  }

	  return offset;
	}

	function getTransformOriginValue(transformOrigin) {
	  return [transformOrigin.horizontal, transformOrigin.vertical].map(function (n) {
	    return typeof n === 'number' ? n + 'px' : n;
	  }).join(' ');
	}

	// Sum the scrollTop between two elements.
	function getScrollParent(parent, child) {
	  var element = child;
	  var scrollTop = 0;

	  while (element && element !== parent) {
	    element = element.parentNode;
	    scrollTop += element.scrollTop;
	  }
	  return scrollTop;
	}

	function getAnchorEl(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}

	var styles = exports.styles = {
	  paper: {
	    position: 'absolute',
	    overflowY: 'auto',
	    overflowX: 'hidden',
	    // So we see the popover when it's empty.
	    // It's most likely on issue on userland.
	    minWidth: 16,
	    minHeight: 16,
	    maxWidth: 'calc(100vw - 32px)',
	    maxHeight: 'calc(100vh - 32px)',
	    '&:focus': {
	      outline: 'none'
	    }
	  }
	};

	var Popover = function (_React$Component) {
	  (0, _inherits3.default)(Popover, _React$Component);

	  function Popover() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Popover);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Popover.__proto__ || (0, _getPrototypeOf2.default)(Popover)).call.apply(_ref, [this].concat(args))), _this), _this.componentWillUnmount = function () {
	      _this.handleResize.cancel();
	    }, _this.setPositioningStyles = function (element) {
	      if (element && element.style) {
	        var positioning = _this.getPositioningStyle(element);
	        element.style.top = positioning.top;
	        element.style.left = positioning.left;
	        element.style.transformOrigin = positioning.transformOrigin;
	      }
	    }, _this.getPositioningStyle = function (element) {
	      var _this$props = _this.props,
	          anchorEl = _this$props.anchorEl,
	          marginThreshold = _this$props.marginThreshold;

	      // Check if the parent has requested anchoring on an inner content node

	      var contentAnchorOffset = _this.getContentAnchorOffset(element);
	      // Get the offset of of the anchoring element
	      var anchorOffset = _this.getAnchorOffset(contentAnchorOffset);

	      var elemRect = {
	        width: element.clientWidth,
	        height: element.clientHeight
	      };
	      // Get the transform origin point on the element itself
	      var transformOrigin = _this.getTransformOrigin(elemRect, contentAnchorOffset);

	      // Calculate element positioning
	      var top = anchorOffset.top - transformOrigin.vertical;
	      var left = anchorOffset.left - transformOrigin.horizontal;
	      var bottom = top + elemRect.height;
	      var right = left + elemRect.width;

	      // Use the parent window of the anchorEl if provided
	      var containerWindow = (0, _ownerWindow2.default)(getAnchorEl(anchorEl));

	      // Window thresholds taking required margin into account
	      var heightThreshold = containerWindow.innerHeight - marginThreshold;
	      var widthThreshold = containerWindow.innerWidth - marginThreshold;

	      // Check if the vertical axis needs shifting
	      if (top < marginThreshold) {
	        var diff = top - marginThreshold;
	        top -= diff;
	        transformOrigin.vertical += diff;
	      } else if (bottom > heightThreshold) {
	        var _diff = bottom - heightThreshold;
	        top -= _diff;
	        transformOrigin.vertical += _diff;
	      }

	      (0, _warning2.default)(elemRect.height < heightThreshold || !elemRect.height || !heightThreshold, ['Material-UI: the popover component is too tall.', 'Some part of it can not be seen on the screen (' + (elemRect.height - heightThreshold) + 'px).', 'Please consider adding a `max-height` to improve the user-experience.'].join('\n'));

	      // Check if the horizontal axis needs shifting
	      if (left < marginThreshold) {
	        var _diff2 = left - marginThreshold;
	        left -= _diff2;
	        transformOrigin.horizontal += _diff2;
	      } else if (right > widthThreshold) {
	        var _diff3 = right - widthThreshold;
	        left -= _diff3;
	        transformOrigin.horizontal += _diff3;
	      }

	      return {
	        top: top + 'px',
	        left: left + 'px',
	        transformOrigin: getTransformOriginValue(transformOrigin)
	      };
	    }, _this.transitionEl = undefined, _this.handleGetOffsetTop = getOffsetTop, _this.handleGetOffsetLeft = getOffsetLeft, _this.handleEnter = function (element) {
	      if (_this.props.onEnter) {
	        _this.props.onEnter(element);
	      }

	      _this.setPositioningStyles(element);
	    }, _this.handleResize = (0, _debounce2.default)(function () {
	      var element = _reactDom2.default.findDOMNode(_this.transitionEl);
	      _this.setPositioningStyles(element);
	    }, 166), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Popover, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.action) {
	        this.props.action({
	          updatePosition: this.handleResize
	        });
	      }
	    }
	  }, {
	    key: 'getAnchorOffset',


	    // Returns the top/left offset of the position
	    // to attach to on the anchor element (or body if none is provided)
	    value: function getAnchorOffset(contentAnchorOffset) {
	      var _props = this.props,
	          anchorEl = _props.anchorEl,
	          anchorOrigin = _props.anchorOrigin,
	          anchorReference = _props.anchorReference,
	          anchorPosition = _props.anchorPosition;


	      if (anchorReference === 'anchorPosition') {
	        return anchorPosition;
	      }

	      // If an anchor element wasn't provided, just use the parent body element of this Popover
	      var anchorElement = getAnchorEl(anchorEl) || (0, _ownerDocument2.default)(_reactDom2.default.findDOMNode(this.transitionEl)).body;
	      var anchorRect = anchorElement.getBoundingClientRect();
	      var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';

	      return {
	        top: anchorRect.top + this.handleGetOffsetTop(anchorRect, anchorVertical),
	        left: anchorRect.left + this.handleGetOffsetLeft(anchorRect, anchorOrigin.horizontal)
	      };
	    }

	    // Returns the vertical offset of inner content to anchor the transform on if provided

	  }, {
	    key: 'getContentAnchorOffset',
	    value: function getContentAnchorOffset(element) {
	      var _props2 = this.props,
	          getContentAnchorEl = _props2.getContentAnchorEl,
	          anchorReference = _props2.anchorReference;

	      var contentAnchorOffset = 0;

	      if (getContentAnchorEl && anchorReference === 'anchorEl') {
	        var contentAnchorEl = getContentAnchorEl(element);

	        if (contentAnchorEl && (0, _contains2.default)(element, contentAnchorEl)) {
	          var scrollTop = getScrollParent(element, contentAnchorEl);
	          contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;
	        }

	        // != the default value
	        (0, _warning2.default)(this.props.anchorOrigin.vertical === 'top', ['Material-UI: you can not change the default `anchorOrigin.vertical` value ', 'when also providing the `getContentAnchorEl` property to the popover component.', 'Only use one of the two properties.', 'Set `getContentAnchorEl` to null or left `anchorOrigin.vertical` unchanged.'].join('\n'));
	      }

	      return contentAnchorOffset;
	    }

	    // Return the base transform origin using the element
	    // and taking the content anchor offset into account if in use

	  }, {
	    key: 'getTransformOrigin',
	    value: function getTransformOrigin(elemRect) {
	      var contentAnchorOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	      var transformOrigin = this.props.transformOrigin;

	      return {
	        vertical: this.handleGetOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,
	        horizontal: this.handleGetOffsetLeft(elemRect, transformOrigin.horizontal)
	      };
	    }
	  }, {
	    key: 'render',
	    // Corresponds to 10 frames at 60 Hz.

	    value: function render() {
	      var _this2 = this;

	      var _props3 = this.props,
	          action = _props3.action,
	          anchorEl = _props3.anchorEl,
	          anchorOrigin = _props3.anchorOrigin,
	          anchorPosition = _props3.anchorPosition,
	          anchorReference = _props3.anchorReference,
	          children = _props3.children,
	          classes = _props3.classes,
	          containerProp = _props3.container,
	          elevation = _props3.elevation,
	          getContentAnchorEl = _props3.getContentAnchorEl,
	          marginThreshold = _props3.marginThreshold,
	          onEnter = _props3.onEnter,
	          onEntered = _props3.onEntered,
	          onEntering = _props3.onEntering,
	          onExit = _props3.onExit,
	          onExited = _props3.onExited,
	          onExiting = _props3.onExiting,
	          open = _props3.open,
	          PaperProps = _props3.PaperProps,
	          role = _props3.role,
	          transformOrigin = _props3.transformOrigin,
	          TransitionProp = _props3.transition,
	          transitionDuration = _props3.transitionDuration,
	          other = (0, _objectWithoutProperties3.default)(_props3, ['action', 'anchorEl', 'anchorOrigin', 'anchorPosition', 'anchorReference', 'children', 'classes', 'container', 'elevation', 'getContentAnchorEl', 'marginThreshold', 'onEnter', 'onEntered', 'onEntering', 'onExit', 'onExited', 'onExiting', 'open', 'PaperProps', 'role', 'transformOrigin', 'transition', 'transitionDuration']);

	      // If the container prop is provided, use that
	      // If the anchorEl prop is provided, use its parent body element as the container
	      // If neither are provided let the Modal take care of choosing the container

	      var container = containerProp || (anchorEl ? (0, _ownerDocument2.default)(getAnchorEl(anchorEl)).body : undefined);

	      var transitionProps = {};
	      // The provided transition might not support the auto timeout value.
	      if (TransitionProp === _Grow2.default) {
	        transitionProps.timeout = transitionDuration;
	      }

	      return _react2.default.createElement(
	        _Modal2.default,
	        (0, _extends3.default)({ container: container, open: open, BackdropProps: { invisible: true } }, other),
	        _react2.default.createElement(
	          TransitionProp,
	          (0, _extends3.default)({
	            appear: true,
	            'in': open,
	            onEnter: this.handleEnter,
	            onEntered: onEntered,
	            onEntering: onEntering,
	            onExit: onExit,
	            onExited: onExited,
	            onExiting: onExiting,
	            role: role,
	            ref: function ref(node) {
	              _this2.transitionEl = node;
	            }
	          }, transitionProps),
	          _react2.default.createElement(
	            _Paper2.default,
	            (0, _extends3.default)({
	              className: classes.paper,

	              elevation: elevation
	            }, PaperProps),
	            _react2.default.createElement(_reactEventListener2.default, { target: 'window', onResize: this.handleResize }),
	            children
	          )
	        )
	      );
	    }
	  }]);
	  return Popover;
	}(_react2.default.Component);

	Popover.propTypes = {
	  /**
	   * This is callback property. It's called by the component on mount.
	   * This is useful when you want to trigger an action programmatically.
	   * It currently only supports updatePosition() action.
	   *
	   * @param {object} actions This object contains all posible actions
	   * that can be triggered programmatically.
	   */
	  action: _propTypes2.default.func,
	  /**
	   * This is the DOM element, or a function that returns the DOM element,
	   * that may be used to set the position of the popover.
	   */
	  anchorEl: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
	  /**
	   * This is the point on the anchor where the popover's
	   * `anchorEl` will attach to. This is not used when the
	   * anchorReference is 'anchorPosition'.
	   *
	   * Options:
	   * vertical: [top, center, bottom];
	   * horizontal: [left, center, right].
	   */
	  anchorOrigin: _propTypes2.default.shape({
	    horizontal: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['left', 'center', 'right'])]),
	    vertical: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['top', 'center', 'bottom'])])
	  }),
	  /**
	   * This is the position that may be used
	   * to set the position of the popover.
	   * The coordinates are relative to
	   * the application's client area.
	   */
	  anchorPosition: _propTypes2.default.shape({
	    top: _propTypes2.default.number,
	    left: _propTypes2.default.number
	  }),
	  /*
	   * This determines which anchor prop to refer to to set
	   * the position of the popover.
	   */
	  anchorReference: _propTypes2.default.oneOf(['anchorEl', 'anchorPosition']),
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * A node, component instance, or function that returns either.
	   * The `container` will passed to the Modal component.
	   * By default, it's using the body of the anchorEl's top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
	  /**
	   * The elevation of the popover.
	   */
	  elevation: _propTypes2.default.number,
	  /**
	   * This function is called in order to retrieve the content anchor element.
	   * It's the opposite of the `anchorEl` property.
	   * The content anchor element should be an element inside the popover.
	   * It's used to correctly scroll and set the position of the popover.
	   * The positioning strategy tries to make the content anchor element just above the
	   * anchor element.
	   */
	  getContentAnchorEl: _propTypes2.default.func,
	  /**
	   * Specifies how close to the edge of the window the popover can appear.
	   */
	  marginThreshold: _propTypes2.default.number,
	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onClose: _propTypes2.default.func,
	  /**
	   * Callback fired before the component is entering.
	   */
	  onEnter: _propTypes2.default.func,
	  /**
	   * Callback fired when the component has entered.
	   */
	  onEntered: _propTypes2.default.func,
	  /**
	   * Callback fired when the component is entering.
	   */
	  onEntering: _propTypes2.default.func,
	  /**
	   * Callback fired before the component is exiting.
	   */
	  onExit: _propTypes2.default.func,
	  /**
	   * Callback fired when the component has exited.
	   */
	  onExited: _propTypes2.default.func,
	  /**
	   * Callback fired when the component is exiting.
	   */
	  onExiting: _propTypes2.default.func,
	  /**
	   * If `true`, the popover is visible.
	   */
	  open: _propTypes2.default.bool.isRequired,
	  /**
	   * Properties applied to the `Paper` element.
	   */
	  PaperProps: _propTypes2.default.object,
	  /**
	   * @ignore
	   */
	  role: _propTypes2.default.string,
	  /**
	   * This is the point on the popover which
	   * will attach to the anchor's origin.
	   *
	   * Options:
	   * vertical: [top, center, bottom, x(px)];
	   * horizontal: [left, center, right, x(px)].
	   */
	  transformOrigin: _propTypes2.default.shape({
	    horizontal: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['left', 'center', 'right'])]),
	    vertical: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['top', 'center', 'bottom'])])
	  }),
	  /**
	   * Transition component.
	   */
	  transition: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * Set to 'auto' to automatically calculate transition time based on height.
	   */
	  transitionDuration: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({ enter: _propTypes2.default.number, exit: _propTypes2.default.number }), _propTypes2.default.oneOf(['auto'])])
	};

	Popover.defaultProps = {
	  anchorReference: 'anchorEl',
	  anchorOrigin: {
	    vertical: 'top',
	    horizontal: 'left'
	  },
	  elevation: 8,
	  marginThreshold: 16,
	  transformOrigin: {
	    vertical: 'top',
	    horizontal: 'left'
	  },
	  transition: _Grow2.default,
	  transitionDuration: 'auto'
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiPopover' })(Popover);
	});

	unwrapExports(Popover_1);
	var Popover_2 = Popover_1.styles;

	var Popover$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Popover_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(Popover$1);

	var List_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      listStyle: 'none',
	      margin: 0,
	      padding: 0,
	      position: 'relative'
	    },
	    padding: {
	      paddingTop: theme.spacing.unit,
	      paddingBottom: theme.spacing.unit
	    },
	    dense: {
	      paddingTop: theme.spacing.unit / 2,
	      paddingBottom: theme.spacing.unit / 2
	    },
	    subheader: {
	      paddingTop: 0
	    }
	  };
	};

	var List = function (_React$Component) {
	  (0, _inherits3.default)(List, _React$Component);

	  function List() {
	    (0, _classCallCheck3.default)(this, List);
	    return (0, _possibleConstructorReturn3.default)(this, (List.__proto__ || (0, _getPrototypeOf2.default)(List)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(List, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        dense: this.props.dense
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames;

	      var _props = this.props,
	          children = _props.children,
	          classes = _props.classes,
	          classNameProp = _props.className,
	          Component = _props.component,
	          dense = _props.dense,
	          disablePadding = _props.disablePadding,
	          subheader = _props.subheader,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'classes', 'className', 'component', 'dense', 'disablePadding', 'subheader']);

	      var className = (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.dense, dense && !disablePadding), (0, _defineProperty3.default)(_classNames, classes.padding, !disablePadding), (0, _defineProperty3.default)(_classNames, classes.subheader, subheader), _classNames), classNameProp);

	      return _react2.default.createElement(
	        Component,
	        (0, _extends3.default)({ className: className }, other),
	        subheader,
	        children
	      );
	    }
	  }]);
	  return List;
	}(_react2.default.Component);

	List.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input will be used for
	   * the list and list items. The property is available to descendant components as the
	   * `dense` context.
	   */
	  dense: _propTypes2.default.bool,
	  /**
	   * If `true`, vertical padding will be removed from the list.
	   */
	  disablePadding: _propTypes2.default.bool,
	  /**
	   * The content of the subheader, normally `ListSubheader`.
	   */
	  subheader: _propTypes2.default.node
	};

	List.defaultProps = {
	  component: 'ul',
	  dense: false,
	  disablePadding: false
	};

	List.childContextTypes = {
	  dense: _propTypes2.default.bool
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiList' })(List);
	});

	unwrapExports(List_1);
	var List_2 = List_1.styles;

	var ListItem_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _ButtonBase2 = _interopRequireDefault(ButtonBase$1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      display: 'flex',
	      justifyContent: 'flex-start',
	      alignItems: 'center',
	      position: 'relative',
	      textDecoration: 'none',
	      width: '100%',
	      boxSizing: 'border-box',
	      textAlign: 'left'
	    },
	    container: {
	      position: 'relative'
	    },
	    keyboardFocused: {
	      backgroundColor: theme.palette.action.hover
	    },
	    default: {
	      paddingTop: 12,
	      paddingBottom: 12
	    },
	    dense: {
	      paddingTop: theme.spacing.unit,
	      paddingBottom: theme.spacing.unit
	    },
	    disabled: {
	      opacity: 0.5
	    },
	    divider: {
	      borderBottom: '1px solid ' + theme.palette.divider,
	      backgroundClip: 'padding-box'
	    },
	    gutters: theme.mixins.gutters(),
	    button: {
	      transition: theme.transitions.create('background-color', {
	        duration: theme.transitions.duration.shortest
	      }),
	      '&:hover': {
	        textDecoration: 'none',
	        backgroundColor: theme.palette.action.hover,
	        // Reset on mouse devices
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      }
	    },
	    secondaryAction: {
	      // Add some space to avoid collision as `ListItemSecondaryAction`
	      // is absolutely positionned.
	      paddingRight: theme.spacing.unit * 4
	    }
	  };
	};

	var ListItem = function (_React$Component) {
	  (0, _inherits3.default)(ListItem, _React$Component);

	  function ListItem() {
	    (0, _classCallCheck3.default)(this, ListItem);
	    return (0, _possibleConstructorReturn3.default)(this, (ListItem.__proto__ || (0, _getPrototypeOf2.default)(ListItem)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(ListItem, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        dense: this.props.dense || this.context.dense || false
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _classNames;

	      var _props = this.props,
	          button = _props.button,
	          childrenProp = _props.children,
	          classes = _props.classes,
	          classNameProp = _props.className,
	          componentProp = _props.component,
	          ContainerComponent = _props.ContainerComponent,
	          _props$ContainerProps = _props.ContainerProps;
	      _props$ContainerProps = _props$ContainerProps === undefined ? {} : _props$ContainerProps;
	      var ContainerClassName = _props$ContainerProps.className,
	          ContainerProps = (0, _objectWithoutProperties3.default)(_props$ContainerProps, ['className']),
	          dense = _props.dense,
	          disabled = _props.disabled,
	          disableGutters = _props.disableGutters,
	          divider = _props.divider,
	          other = (0, _objectWithoutProperties3.default)(_props, ['button', 'children', 'classes', 'className', 'component', 'ContainerComponent', 'ContainerProps', 'dense', 'disabled', 'disableGutters', 'divider']);


	      var isDense = dense || this.context.dense || false;
	      var children = _react2.default.Children.toArray(childrenProp);
	      var hasAvatar = children.some(function (value) {
	        return (0, reactHelpers.isMuiElement)(value, ['ListItemAvatar']);
	      });
	      var hasSecondaryAction = children.length && (0, reactHelpers.isMuiElement)(children[children.length - 1], ['ListItemSecondaryAction']);

	      var className = (0, _classnames2.default)(classes.root, isDense || hasAvatar ? classes.dense : classes.default, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.gutters, !disableGutters), (0, _defineProperty3.default)(_classNames, classes.divider, divider), (0, _defineProperty3.default)(_classNames, classes.disabled, disabled), (0, _defineProperty3.default)(_classNames, classes.button, button), (0, _defineProperty3.default)(_classNames, classes.secondaryAction, hasSecondaryAction), _classNames), classNameProp);

	      var componentProps = (0, _extends3.default)({ className: className, disabled: disabled }, other);
	      var Component = componentProp || 'li';

	      if (button) {
	        componentProps.component = componentProp || 'div';
	        componentProps.classes = {
	          keyboardFocused: classes.keyboardFocused
	        };
	        Component = _ButtonBase2.default;
	      }

	      if (hasSecondaryAction) {
	        // Use div by default.
	        Component = !componentProps.component && !componentProp ? 'div' : Component;

	        // Avoid nesting of li > li.
	        if (ContainerComponent === 'li') {
	          if (Component === 'li') {
	            Component = 'div';
	          } else if (componentProps.component === 'li') {
	            componentProps.component = 'div';
	          }
	        }

	        return _react2.default.createElement(
	          ContainerComponent,
	          (0, _extends3.default)({
	            className: (0, _classnames2.default)(classes.container, ContainerClassName)
	          }, ContainerProps),
	          _react2.default.createElement(
	            Component,
	            componentProps,
	            children
	          ),
	          children.pop()
	        );
	      }

	      return _react2.default.createElement(
	        Component,
	        componentProps,
	        children
	      );
	    }
	  }]);
	  return ListItem;
	}(_react2.default.Component);

	ListItem.propTypes = {
	  /**
	   * If `true`, the list item will be a button (using `ButtonBase`).
	   */
	  button: _propTypes2.default.bool,
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * The container component. Useful when a `ListItemSecondaryAction` is rendered.
	   */
	  ContainerComponent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * Properties applied to the container element when the component
	   * is used to display a `ListItemSecondaryAction`.
	   */
	  ContainerProps: _propTypes2.default.object,
	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.
	   */
	  dense: _propTypes2.default.bool,
	  /**
	   * @ignore
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, the left and right padding is removed.
	   */
	  disableGutters: _propTypes2.default.bool,
	  /**
	   * If `true`, a 1px light border is added to the bottom of the list item.
	   */
	  divider: _propTypes2.default.bool
	};

	ListItem.defaultProps = {
	  button: false,
	  ContainerComponent: 'li',
	  dense: false,
	  disabled: false,
	  disableGutters: false,
	  divider: false
	};

	ListItem.contextTypes = {
	  dense: _propTypes2.default.bool
	};

	ListItem.childContextTypes = {
	  dense: _propTypes2.default.bool
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiListItem' })(ListItem);
	});

	unwrapExports(ListItem_1);
	var ListItem_2 = ListItem_1.styles;

	var ListItemAvatar_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _warning2 = _interopRequireDefault(browser);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      width: 36,
	      height: 36,
	      fontSize: theme.typography.pxToRem(18),
	      marginRight: 4
	    },
	    icon: {
	      width: 20,
	      height: 20,
	      fontSize: theme.typography.pxToRem(20)
	    }
	  };
	};

	/**
	 * It's a simple wrapper to apply the `dense` mode styles to `Avatar`.
	 */
	function ListItemAvatar(props, context) {
	  var children = props.children,
	      classes = props.classes,
	      classNameProp = props.className,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className']);


	  if (context.dense === undefined) {
	    (0, _warning2.default)(false, 'Material-UI: <ListItemAvatar> is a simple wrapper to apply the dense styles\n      to <Avatar>. You do not need it unless you are controlling the <List> dense property.');
	    return props.children;
	  }

	  return _react2.default.cloneElement(children, (0, _extends3.default)({
	    className: (0, _classnames2.default)((0, _defineProperty3.default)({}, classes.root, context.dense), classNameProp, children.props.className),
	    childrenClassName: (0, _classnames2.default)((0, _defineProperty3.default)({}, classes.icon, context.dense), children.props.childrenClassName)
	  }, other));
	}

	ListItemAvatar.propTypes = {
	  /**
	   * The content of the component, normally `Avatar`.
	   */
	  children: _propTypes2.default.element.isRequired,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string
	};

	ListItemAvatar.contextTypes = {
	  dense: _propTypes2.default.bool
	};

	ListItemAvatar.muiName = 'ListItemAvatar';

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiListItemAvatar' })(ListItemAvatar);
	});

	unwrapExports(ListItemAvatar_1);
	var ListItemAvatar_2 = ListItemAvatar_1.styles;

	var ListItemText_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _Typography2 = _interopRequireDefault(Typography$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      flex: '1 1 auto',
	      minWidth: 0,
	      padding: '0 ' + theme.spacing.unit * 2 + 'px',
	      '&:first-child': {
	        paddingLeft: 0
	      }
	    },
	    inset: {
	      '&:first-child': {
	        paddingLeft: theme.spacing.unit * 7
	      }
	    },
	    dense: {
	      fontSize: theme.typography.pxToRem(13)
	    },
	    primary: {
	      '&$textDense': {
	        fontSize: 'inherit'
	      }
	    },
	    secondary: {
	      '&$textDense': {
	        fontSize: 'inherit'
	      }
	    },
	    textDense: {}
	  };
	};

	function ListItemText(props, context) {
	  var _classNames3;

	  var children = props.children,
	      classes = props.classes,
	      classNameProp = props.className,
	      disableTypography = props.disableTypography,
	      inset = props.inset,
	      primaryProp = props.primary,
	      secondaryProp = props.secondary,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className', 'disableTypography', 'inset', 'primary', 'secondary']);
	  var dense = context.dense;


	  var primary = primaryProp || children;
	  if (primary && !disableTypography) {
	    primary = _react2.default.createElement(
	      _Typography2.default,
	      {
	        variant: 'subheading',
	        className: (0, _classnames2.default)(classes.primary, (0, _defineProperty3.default)({}, classes.textDense, dense))
	      },
	      primary
	    );
	  }

	  var secondary = secondaryProp;
	  if (secondary && !disableTypography) {
	    secondary = _react2.default.createElement(
	      _Typography2.default,
	      {
	        variant: 'body1',
	        className: (0, _classnames2.default)(classes.secondary, (0, _defineProperty3.default)({}, classes.textDense, dense)),
	        color: 'textSecondary'
	      },
	      secondary
	    );
	  }

	  return _react2.default.createElement(
	    'div',
	    (0, _extends3.default)({
	      className: (0, _classnames2.default)(classes.root, (_classNames3 = {}, (0, _defineProperty3.default)(_classNames3, classes.dense, dense), (0, _defineProperty3.default)(_classNames3, classes.inset, inset), _classNames3), classNameProp)
	    }, other),
	    primary,
	    secondary
	  );
	}

	ListItemText.propTypes = {
	  /**
	   * Alias for the `primary` property.
	   */
	  children: _propTypes2.default.element,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * If `true`, the children won't be wrapped by a typography component.
	   * For instance, that can be useful to can render an h4 instead of a
	   */
	  disableTypography: _propTypes2.default.bool,
	  /**
	   * If `true`, the children will be indented.
	   * This should be used if there is no left avatar or left icon.
	   */
	  inset: _propTypes2.default.bool,
	  primary: _propTypes2.default.node,
	  secondary: _propTypes2.default.node
	};

	ListItemText.defaultProps = {
	  disableTypography: false,
	  inset: false
	};

	ListItemText.contextTypes = {
	  dense: _propTypes2.default.bool
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiListItemText' })(ListItemText);
	});

	unwrapExports(ListItemText_1);
	var ListItemText_2 = ListItemText_1.styles;

	var ListItemIcon_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      height: 24,
	      marginRight: theme.spacing.unit * 2,
	      width: 24,
	      color: theme.palette.action.active,
	      flexShrink: 0
	    }
	  };
	};

	/**
	 * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.
	 */
	function ListItemIcon(props) {
	  var children = props.children,
	      classes = props.classes,
	      classNameProp = props.className,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className']);


	  return _react2.default.cloneElement(children, (0, _extends3.default)({
	    className: (0, _classnames2.default)(classes.root, classNameProp, children.props.className)
	  }, other));
	}

	ListItemIcon.propTypes = {
	  /**
	   * The content of the component, normally `Icon`, `SvgIcon`,
	   * or a `material-ui-icons` SVG icon element.
	   */
	  children: _propTypes2.default.element.isRequired,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiListItemIcon' })(ListItemIcon);
	});

	unwrapExports(ListItemIcon_1);
	var ListItemIcon_2 = ListItemIcon_1.styles;

	var ListItemSecondaryAction_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      position: 'absolute',
	      right: 4,
	      top: '50%',
	      marginTop: -theme.spacing.unit * 3
	    }
	  };
	};

	function ListItemSecondaryAction(props) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className']);


	  return _react2.default.createElement(
	    'div',
	    (0, _extends3.default)({ className: (0, _classnames2.default)(classes.root, className) }, other),
	    children
	  );
	}

	ListItemSecondaryAction.propTypes = {
	  /**
	   * The content of the component, normally an `IconButton` or selection control.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string
	};

	ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiListItemSecondaryAction' })(ListItemSecondaryAction);
	});

	unwrapExports(ListItemSecondaryAction_1);
	var ListItemSecondaryAction_2 = ListItemSecondaryAction_1.styles;

	var ListSubheader_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: theme.mixins.gutters({
	      boxSizing: 'border-box',
	      lineHeight: '48px',
	      listStyle: 'none',
	      color: theme.palette.text.secondary,
	      fontFamily: theme.typography.fontFamily,
	      fontWeight: theme.typography.fontWeightMedium,
	      fontSize: theme.typography.pxToRem(theme.typography.fontSize)
	    }),
	    colorPrimary: {
	      color: theme.palette.primary.main
	    },
	    colorInherit: {
	      color: 'inherit'
	    },
	    inset: {
	      paddingLeft: theme.spacing.unit * 9
	    },
	    sticky: {
	      position: 'sticky',
	      top: 0,
	      zIndex: 1,
	      backgroundColor: 'inherit'
	    }
	  };
	};

	function ListSubheader(props) {
	  var _classNames;

	  var classes = props.classes,
	      className = props.className,
	      color = props.color,
	      Component = props.component,
	      disableSticky = props.disableSticky,
	      inset = props.inset,
	      other = (0, _objectWithoutProperties3.default)(props, ['classes', 'className', 'color', 'component', 'disableSticky', 'inset']);


	  return _react2.default.createElement(Component, (0, _extends3.default)({
	    className: (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes['color' + (0, helpers.capitalize)(color)], color !== 'default'), (0, _defineProperty3.default)(_classNames, classes.inset, inset), (0, _defineProperty3.default)(_classNames, classes.sticky, !disableSticky), _classNames), className)
	  }, other));
	}

	ListSubheader.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: _propTypes2.default.oneOf(['default', 'primary', 'inherit']),
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If `true`, the List Subheader will not stick to the top during scroll.
	   */
	  disableSticky: _propTypes2.default.bool,
	  /**
	   * If `true`, the List Subheader will be indented.
	   */
	  inset: _propTypes2.default.bool
	};

	ListSubheader.defaultProps = {
	  color: 'default',
	  component: 'li',
	  disableSticky: false,
	  inset: false
	};

	ListSubheader.muiName = 'ListSubheader';

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiListSubheader' })(ListSubheader);
	});

	unwrapExports(ListSubheader_1);
	var ListSubheader_2 = ListSubheader_1.styles;

	var List$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(List_1).default;
	  }
	});



	Object.defineProperty(exports, 'ListItem', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(ListItem_1).default;
	  }
	});



	Object.defineProperty(exports, 'ListItemAvatar', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(ListItemAvatar_1).default;
	  }
	});



	Object.defineProperty(exports, 'ListItemText', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(ListItemText_1).default;
	  }
	});



	Object.defineProperty(exports, 'ListItemIcon', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(ListItemIcon_1).default;
	  }
	});



	Object.defineProperty(exports, 'ListItemSecondaryAction', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(ListItemSecondaryAction_1).default;
	  }
	});



	Object.defineProperty(exports, 'ListSubheader', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(ListSubheader_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(List$1);

	var MenuList_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _toConsumableArray3 = _interopRequireDefault(toConsumableArray$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _keycode2 = _interopRequireDefault(keycode);



	var _contains2 = _interopRequireDefault(contains);



	var _activeElement2 = _interopRequireDefault(activeElement_1);



	var _ownerDocument2 = _interopRequireDefault(ownerDocument_1);



	var _List2 = _interopRequireDefault(List$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// @inheritedComponent List

	var MenuList = function (_React$Component) {
	  (0, _inherits3.default)(MenuList, _React$Component);

	  function MenuList() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, MenuList);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MenuList.__proto__ || (0, _getPrototypeOf2.default)(MenuList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      currentTabIndex: undefined
	    }, _this.list = undefined, _this.selectedItem = undefined, _this.blurTimer = undefined, _this.handleBlur = function (event) {
	      _this.blurTimer = setTimeout(function () {
	        if (_this.list) {
	          var list = (0, reactDom.findDOMNode)(_this.list);
	          var currentFocus = (0, _activeElement2.default)((0, _ownerDocument2.default)(list));
	          if (!(0, _contains2.default)(list, currentFocus)) {
	            _this.resetTabIndex();
	          }
	        }
	      }, 30);

	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }
	    }, _this.handleKeyDown = function (event) {
	      var list = (0, reactDom.findDOMNode)(_this.list);
	      var key = (0, _keycode2.default)(event);
	      var currentFocus = (0, _activeElement2.default)((0, _ownerDocument2.default)(list));

	      if ((key === 'up' || key === 'down') && (!currentFocus || currentFocus && !(0, _contains2.default)(list, currentFocus))) {
	        if (_this.selectedItem) {
	          (0, reactDom.findDOMNode)(_this.selectedItem).focus();
	        } else {
	          list.firstChild.focus();
	        }
	      } else if (key === 'down') {
	        event.preventDefault();
	        if (currentFocus.nextElementSibling) {
	          currentFocus.nextElementSibling.focus();
	        }
	      } else if (key === 'up') {
	        event.preventDefault();
	        if (currentFocus.previousElementSibling) {
	          currentFocus.previousElementSibling.focus();
	        }
	      }

	      if (_this.props.onKeyDown) {
	        _this.props.onKeyDown(event, key);
	      }
	    }, _this.handleItemFocus = function (event) {
	      var list = (0, reactDom.findDOMNode)(_this.list);
	      if (list) {
	        for (var i = 0; i < list.children.length; i += 1) {
	          if (list.children[i] === event.currentTarget) {
	            _this.setTabIndex(i);
	            break;
	          }
	        }
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(MenuList, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.resetTabIndex();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.blurTimer);
	    }
	  }, {
	    key: 'setTabIndex',
	    value: function setTabIndex(index) {
	      this.setState({ currentTabIndex: index });
	    }
	  }, {
	    key: 'focus',
	    value: function focus() {
	      var currentTabIndex = this.state.currentTabIndex;

	      var list = (0, reactDom.findDOMNode)(this.list);
	      if (!list || !list.children || !list.firstChild) {
	        return;
	      }

	      if (currentTabIndex && currentTabIndex >= 0) {
	        list.children[currentTabIndex].focus();
	      } else {
	        list.firstChild.focus();
	      }
	    }
	  }, {
	    key: 'resetTabIndex',
	    value: function resetTabIndex() {
	      var list = (0, reactDom.findDOMNode)(this.list);
	      var currentFocus = (0, _activeElement2.default)((0, _ownerDocument2.default)(list));
	      var items = [].concat((0, _toConsumableArray3.default)(list.children));
	      var currentFocusIndex = items.indexOf(currentFocus);

	      if (currentFocusIndex !== -1) {
	        return this.setTabIndex(currentFocusIndex);
	      }

	      if (this.selectedItem) {
	        return this.setTabIndex(items.indexOf((0, reactDom.findDOMNode)(this.selectedItem)));
	      }

	      return this.setTabIndex(0);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          onBlur = _props.onBlur,
	          onKeyDown = _props.onKeyDown,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'className', 'onBlur', 'onKeyDown']);


	      return _react2.default.createElement(
	        _List2.default,
	        (0, _extends3.default)({
	          role: 'menu',
	          ref: function ref(node) {
	            _this2.list = node;
	          },
	          className: className,
	          onKeyDown: this.handleKeyDown,
	          onBlur: this.handleBlur
	        }, other),
	        _react2.default.Children.map(children, function (child, index) {
	          if (!_react2.default.isValidElement(child)) {
	            return null;
	          }

	          return _react2.default.cloneElement(child, {
	            tabIndex: index === _this2.state.currentTabIndex ? 0 : -1,
	            ref: child.props.selected ? function (node) {
	              _this2.selectedItem = node;
	            } : undefined,
	            onFocus: _this2.handleItemFocus
	          });
	        })
	      );
	    }
	  }]);
	  return MenuList;
	}(_react2.default.Component);

	MenuList.propTypes = {
	  /**
	   * MenuList contents, normally `MenuItem`s.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * @ignore
	   */
	  onBlur: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onKeyDown: _propTypes2.default.func
	};

	exports.default = MenuList;
	});

	unwrapExports(MenuList_1);

	var Menu_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _scrollbarSize2 = _interopRequireDefault(scrollbarSize);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _Popover2 = _interopRequireDefault(Popover$1);



	var _MenuList2 = _interopRequireDefault(MenuList_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var RTL_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'right'
	}; // @inheritedComponent Popover

	var LTR_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'left'
	};

	var styles = exports.styles = {
	  paper: {
	    // specZ: The maximum height of a simple menu should be one or more rows less than the view
	    // height. This ensures a tappable area outside of the simple menu with which to dismiss
	    // the menu.
	    maxHeight: 'calc(100vh - 96px)',
	    // Add iOS momentum scrolling.
	    WebkitOverflowScrolling: 'touch'
	  }
	};

	var Menu = function (_React$Component) {
	  (0, _inherits3.default)(Menu, _React$Component);

	  function Menu() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, Menu);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Menu.__proto__ || (0, _getPrototypeOf2.default)(Menu)).call.apply(_ref, [this].concat(args))), _this), _this.getContentAnchorEl = function () {
	      if (!_this.menuList || !_this.menuList.selectedItem) {
	        return (0, reactDom.findDOMNode)(_this.menuList).firstChild;
	      }

	      return (0, reactDom.findDOMNode)(_this.menuList.selectedItem);
	    }, _this.menuList = undefined, _this.focus = function () {
	      if (_this.menuList && _this.menuList.selectedItem) {
	        (0, reactDom.findDOMNode)(_this.menuList.selectedItem).focus();
	        return;
	      }

	      var menuList = (0, reactDom.findDOMNode)(_this.menuList);
	      if (menuList && menuList.firstChild) {
	        menuList.firstChild.focus();
	      }
	    }, _this.handleEnter = function (element) {
	      var theme = _this.props.theme;

	      var menuList = (0, reactDom.findDOMNode)(_this.menuList);

	      // Focus so the scroll computation of the Popover works as expected.
	      _this.focus();

	      // Let's ignore that piece of logic if users are already overriding the width
	      // of the menu.
	      if (menuList && element.clientHeight < menuList.clientHeight && !menuList.style.width) {
	        var size = (0, _scrollbarSize2.default)() + 'px';
	        menuList.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = size;
	        menuList.style.width = 'calc(100% + ' + size + ')';
	      }

	      if (_this.props.onEnter) {
	        _this.props.onEnter(element);
	      }
	    }, _this.handleListKeyDown = function (event, key) {
	      if (key === 'tab') {
	        event.preventDefault();

	        if (_this.props.onClose) {
	          _this.props.onClose(event);
	        }
	      }
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(Menu, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.open) {
	        this.focus();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          children = _props.children,
	          classes = _props.classes,
	          MenuListProps = _props.MenuListProps,
	          onEnter = _props.onEnter,
	          _props$PaperProps = _props.PaperProps,
	          PaperProps = _props$PaperProps === undefined ? {} : _props$PaperProps,
	          PopoverClasses = _props.PopoverClasses,
	          theme = _props.theme,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'classes', 'MenuListProps', 'onEnter', 'PaperProps', 'PopoverClasses', 'theme']);


	      return _react2.default.createElement(
	        _Popover2.default,
	        (0, _extends3.default)({
	          getContentAnchorEl: this.getContentAnchorEl,
	          classes: PopoverClasses,
	          onEnter: this.handleEnter,
	          anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
	          transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
	          PaperProps: (0, _extends3.default)({}, PaperProps, {
	            classes: (0, _extends3.default)({}, PaperProps.classes, {
	              root: classes.paper
	            })
	          })
	        }, other),
	        _react2.default.createElement(
	          _MenuList2.default,
	          (0, _extends3.default)({
	            role: 'menu',
	            onKeyDown: this.handleListKeyDown
	          }, MenuListProps, {
	            ref: function ref(node) {
	              _this2.menuList = node;
	            }
	          }),
	          children
	        )
	      );
	    }
	  }]);
	  return Menu;
	}(_react2.default.Component);

	Menu.propTypes = {
	  /**
	   * The DOM element used to set the position of the menu.
	   */
	  anchorEl: _propTypes2.default.object,
	  /**
	   * Menu contents, normally `MenuItem`s.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * Properties applied to the `MenuList` element.
	   */
	  MenuListProps: _propTypes2.default.object,
	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback
	   */
	  onClose: _propTypes2.default.func,
	  /**
	   * Callback fired before the Menu enters.
	   */
	  onEnter: _propTypes2.default.func,
	  /**
	   * Callback fired when the Menu has entered.
	   */
	  onEntered: _propTypes2.default.func,
	  /**
	   * Callback fired when the Menu is entering.
	   */
	  onEntering: _propTypes2.default.func,
	  /**
	   * Callback fired before the Menu exits.
	   */
	  onExit: _propTypes2.default.func,
	  /**
	   * Callback fired when the Menu has exited.
	   */
	  onExited: _propTypes2.default.func,
	  /**
	   * Callback fired when the Menu is exiting.
	   */
	  onExiting: _propTypes2.default.func,
	  /**
	   * If `true`, the menu is visible.
	   */
	  open: _propTypes2.default.bool.isRequired,
	  /**
	   * @ignore
	   */
	  PaperProps: _propTypes2.default.object,
	  /**
	   * `classes` property applied to the `Popover` element.
	   */
	  PopoverClasses: _propTypes2.default.object,
	  /**
	   * @ignore
	   */
	  theme: _propTypes2.default.object.isRequired,
	  /**
	   * The length of the transition in `ms`, or 'auto'
	   */
	  transitionDuration: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.shape({ enter: _propTypes2.default.number, exit: _propTypes2.default.number }), _propTypes2.default.oneOf(['auto'])])
	};

	Menu.defaultProps = {
	  transitionDuration: 'auto'
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiMenu', withTheme: true })(Menu);
	});

	unwrapExports(Menu_1);
	var Menu_2 = Menu_1.styles;

	var MenuItem_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _extends3 = _interopRequireDefault(_extends$6);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _ListItem2 = _interopRequireDefault(ListItem_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: (0, _extends3.default)({}, theme.typography.subheading, {
	      height: theme.spacing.unit * 3,
	      boxSizing: 'content-box',
	      width: 'auto',
	      overflow: 'hidden',
	      textOverflow: 'ellipsis',
	      whiteSpace: 'nowrap',
	      paddingLeft: theme.spacing.unit * 2,
	      paddingRight: theme.spacing.unit * 2,
	      '&$selected': {
	        backgroundColor: theme.palette.action.selected
	      }
	    }),
	    selected: {}
	  };
	}; // @inheritedComponent ListItem

	function MenuItem(props) {
	  var classes = props.classes,
	      className = props.className,
	      component = props.component,
	      selected = props.selected,
	      role = props.role,
	      other = (0, _objectWithoutProperties3.default)(props, ['classes', 'className', 'component', 'selected', 'role']);


	  return _react2.default.createElement(_ListItem2.default, (0, _extends3.default)({
	    button: true,
	    role: role,
	    tabIndex: -1,
	    className: (0, _classnames2.default)(classes.root, (0, _defineProperty3.default)({}, classes.selected, selected), className),
	    component: component
	  }, other));
	}

	MenuItem.propTypes = {
	  /**
	   * Menu item contents.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * @ignore
	   */
	  role: _propTypes2.default.string,
	  /**
	   * Use to apply selected styling.
	   */
	  selected: _propTypes2.default.bool
	};

	MenuItem.defaultProps = {
	  component: 'li',
	  role: 'menuitem',
	  selected: false
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiMenuItem' })(MenuItem);
	});

	unwrapExports(MenuItem_1);
	var MenuItem_2 = MenuItem_1.styles;

	var Menu$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Menu_1).default;
	  }
	});



	Object.defineProperty(exports, 'MenuList', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(MenuList_1).default;
	  }
	});



	Object.defineProperty(exports, 'MenuItem', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(MenuItem_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(Menu$1);

	var setStatic_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	var setStatic = function setStatic(key, value) {
	  return function (BaseComponent) {
	    /* eslint-disable no-param-reassign */
	    BaseComponent[key] = value;
	    /* eslint-enable no-param-reassign */
	    return BaseComponent;
	  };
	};

	exports.default = setStatic;
	});

	unwrapExports(setStatic_1);

	var setDisplayName_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _setStatic2 = _interopRequireDefault(setStatic_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var setDisplayName = function setDisplayName(displayName) {
	  return (0, _setStatic2.default)('displayName', displayName);
	};

	exports.default = setDisplayName;
	});

	unwrapExports(setDisplayName_1);

	var shouldUpdate_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;





	var _setDisplayName2 = _interopRequireDefault(setDisplayName_1);



	var _wrapDisplayName2 = _interopRequireDefault(wrapDisplayName_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var shouldUpdate = function shouldUpdate(test) {
	  return function (BaseComponent) {
	    var factory = (0, react.createFactory)(BaseComponent);

	    var ShouldUpdate = function (_Component) {
	      _inherits(ShouldUpdate, _Component);

	      function ShouldUpdate() {
	        _classCallCheck(this, ShouldUpdate);

	        return _possibleConstructorReturn(this, _Component.apply(this, arguments));
	      }

	      ShouldUpdate.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
	        return test(this.props, nextProps);
	      };

	      ShouldUpdate.prototype.render = function render() {
	        return factory(this.props);
	      };

	      return ShouldUpdate;
	    }(react.Component);

	    {
	      return (0, _setDisplayName2.default)((0, _wrapDisplayName2.default)(BaseComponent, 'shouldUpdate'))(ShouldUpdate);
	    }
	    return ShouldUpdate;
	  };
	};

	exports.default = shouldUpdate;
	});

	unwrapExports(shouldUpdate_1);

	var shallowEqual$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _shallowEqual2 = _interopRequireDefault(shallowEqual_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _shallowEqual2.default;
	});

	unwrapExports(shallowEqual$1);

	var pure_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _shouldUpdate2 = _interopRequireDefault(shouldUpdate_1);



	var _shallowEqual2 = _interopRequireDefault(shallowEqual$1);



	var _setDisplayName2 = _interopRequireDefault(setDisplayName_1);



	var _wrapDisplayName2 = _interopRequireDefault(wrapDisplayName_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var pure = function pure(BaseComponent) {
	  var hoc = (0, _shouldUpdate2.default)(function (props, nextProps) {
	    return !(0, _shallowEqual2.default)(props, nextProps);
	  });

	  {
	    return (0, _setDisplayName2.default)((0, _wrapDisplayName2.default)(BaseComponent, 'pure'))(hoc(BaseComponent));
	  }

	  return hoc(BaseComponent);
	};

	exports.default = pure;
	});

	unwrapExports(pure_1);

	var SvgIcon_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      userSelect: 'none',
	      fontSize: 24,
	      width: '1em',
	      height: '1em',
	      display: 'inline-block',
	      fill: 'currentColor',
	      flexShrink: 0,
	      transition: theme.transitions.create('fill', {
	        duration: theme.transitions.duration.shorter
	      })
	    },
	    colorPrimary: {
	      color: theme.palette.primary.main
	    },
	    colorSecondary: {
	      color: theme.palette.secondary.main
	    },
	    colorAction: {
	      color: theme.palette.action.active
	    },
	    colorDisabled: {
	      color: theme.palette.action.disabled
	    },
	    colorError: {
	      color: theme.palette.error.main
	    }
	  };
	};

	function SvgIcon(props) {
	  var children = props.children,
	      classes = props.classes,
	      classNameProp = props.className,
	      color = props.color,
	      nativeColor = props.nativeColor,
	      titleAccess = props.titleAccess,
	      viewBox = props.viewBox,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className', 'color', 'nativeColor', 'titleAccess', 'viewBox']);


	  var className = (0, _classnames2.default)(classes.root, (0, _defineProperty3.default)({}, classes['color' + (0, helpers.capitalize)(color)], color !== 'inherit'), classNameProp);

	  return _react2.default.createElement(
	    'svg',
	    (0, _extends3.default)({
	      className: className,
	      focusable: 'false',
	      viewBox: viewBox,
	      color: nativeColor,
	      'aria-hidden': titleAccess ? 'false' : 'true'
	    }, other),
	    titleAccess ? _react2.default.createElement(
	      'title',
	      null,
	      titleAccess
	    ) : null,
	    children
	  );
	}

	SvgIcon.propTypes = {
	  /**
	   * Node passed into the SVG element.
	   */
	  children: _propTypes2.default.node.isRequired,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * You can use the `nativeColor` property to apply a color attribute to the SVG element.
	   */
	  color: _propTypes2.default.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),
	  /**
	   * Applies a color attribute to the SVG element.
	   */
	  nativeColor: _propTypes2.default.string,
	  /**
	   * Provides a human-readable title for the element that contains it.
	   * https://www.w3.org/TR/SVG-access/#Equivalent
	   */
	  titleAccess: _propTypes2.default.string,
	  /**
	   * Allows you to redefine what the coordinates without units mean inside an SVG element.
	   * For example, if the SVG element is 500 (width) by 200 (height),
	   * and you pass viewBox="0 0 50 20",
	   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
	   * to bottom right (50,20) and each unit will be worth 10px.
	   */
	  viewBox: _propTypes2.default.string
	};

	SvgIcon.defaultProps = {
	  color: 'inherit',
	  viewBox: '0 0 24 24'
	};

	SvgIcon.muiName = 'SvgIcon';

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiSvgIcon' })(SvgIcon);
	});

	unwrapExports(SvgIcon_1);
	var SvgIcon_2 = SvgIcon_1.styles;

	var SvgIcon$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(SvgIcon_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(SvgIcon$1);

	var ArrowDropDown_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(react);



	var _pure2 = _interopRequireDefault(pure_1);



	var _SvgIcon2 = _interopRequireDefault(SvgIcon$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @ignore - internal component.
	 */
	var _ref = _react2.default.createElement('path', { d: 'M7 10l5 5 5-5z' });

	var ArrowDropDown = function ArrowDropDown(props) {
	  return _react2.default.createElement(
	    _SvgIcon2.default,
	    props,
	    _ref
	  );
	};

	ArrowDropDown = (0, _pure2.default)(ArrowDropDown);
	ArrowDropDown.muiName = 'SvgIcon';

	exports.default = ArrowDropDown;
	});

	unwrapExports(ArrowDropDown_1);

	var SelectInput_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _extends3 = _interopRequireDefault(_extends$6);



	var _toConsumableArray3 = _interopRequireDefault(toConsumableArray$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _keycode2 = _interopRequireDefault(keycode);



	var _warning2 = _interopRequireDefault(browser);



	var _ArrowDropDown2 = _interopRequireDefault(ArrowDropDown_1);



	var _Menu2 = _interopRequireDefault(Menu_1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @ignore - internal component.
	 */
	var SelectInput = function (_React$Component) {
	  (0, _inherits3.default)(SelectInput, _React$Component);

	  function SelectInput() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, SelectInput);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = SelectInput.__proto__ || (0, _getPrototypeOf2.default)(SelectInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      open: false
	    }, _this.ignoreNextBlur = false, _this.displayNode = null, _this.isControlled = _this.props.open !== undefined, _this.update = _this.isControlled ? function (_ref2) {
	      var event = _ref2.event,
	          open = _ref2.open;

	      if (open) {
	        _this.props.onOpen(event);
	      } else {
	        _this.props.onClose(event);
	      }
	    } : function (_ref3) {
	      var open = _ref3.open;
	      return _this.setState({ open: open });
	    }, _this.handleClick = function (event) {
	      // Opening the menu is going to blur the. It will be focused back when closed.
	      _this.ignoreNextBlur = true;
	      _this.update({
	        open: true,
	        event: event
	      });
	    }, _this.handleClose = function (event) {
	      _this.update({
	        open: false,
	        event: event
	      });
	    }, _this.handleItemClick = function (child) {
	      return function (event) {
	        if (!_this.props.multiple) {
	          _this.update({
	            open: false,
	            event: event
	          });
	        }

	        var _this$props = _this.props,
	            onChange = _this$props.onChange,
	            name = _this$props.name;


	        if (onChange) {
	          var value = void 0;
	          var target = void 0;

	          if (event.target) {
	            target = event.target;
	          }

	          if (_this.props.multiple) {
	            value = Array.isArray(_this.props.value) ? [].concat((0, _toConsumableArray3.default)(_this.props.value)) : [];
	            var itemIndex = value.indexOf(child.props.value);
	            if (itemIndex === -1) {
	              value.push(child.props.value);
	            } else {
	              value.splice(itemIndex, 1);
	            }
	          } else {
	            value = child.props.value;
	          }

	          event.persist();
	          event.target = (0, _extends3.default)({}, target, { value: value, name: name });

	          onChange(event, child);
	        }
	      };
	    }, _this.handleBlur = function (event) {
	      if (_this.ignoreNextBlur === true) {
	        // The parent components are relying on the bubbling of the event.
	        event.stopPropagation();
	        _this.ignoreNextBlur = false;
	        return;
	      }

	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }
	    }, _this.handleKeyDown = function (event) {
	      if (_this.props.readOnly) {
	        return;
	      }

	      if (['space', 'up', 'down'].indexOf((0, _keycode2.default)(event)) !== -1) {
	        event.preventDefault();
	        // Opening the menu is going to blur the. It will be focused back when closed.
	        _this.ignoreNextBlur = true;
	        _this.update({
	          open: true,
	          event: event
	        });
	      }
	    }, _this.handleSelectRef = function (node) {
	      if (!_this.props.inputRef) {
	        return;
	      }

	      _this.props.inputRef({
	        node: node,
	        // By pass the native input as we expose a rich object (array).
	        value: _this.props.value
	      });
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(SelectInput, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.isControlled && this.props.open) {
	        // Focus the display node so the focus is restored on this element once
	        // the menu is closed.
	        this.displayNode.focus();
	        // Rerender with the resolve `displayNode` reference.
	        this.forceUpdate();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          autoWidth = _props.autoWidth,
	          children = _props.children,
	          classes = _props.classes,
	          classNameProp = _props.className,
	          disabled = _props.disabled,
	          displayEmpty = _props.displayEmpty,
	          inputRef = _props.inputRef,
	          _props$MenuProps = _props.MenuProps,
	          MenuProps = _props$MenuProps === undefined ? {} : _props$MenuProps,
	          multiple = _props.multiple,
	          name = _props.name,
	          native = _props.native,
	          onBlur = _props.onBlur,
	          onChange = _props.onChange,
	          onClose = _props.onClose,
	          onFocus = _props.onFocus,
	          onOpen = _props.onOpen,
	          openProp = _props.open,
	          readOnly = _props.readOnly,
	          renderValue = _props.renderValue,
	          SelectDisplayProps = _props.SelectDisplayProps,
	          tabIndexProp = _props.tabIndex,
	          _props$type = _props.type,
	          type = _props$type === undefined ? 'hidden' : _props$type,
	          value = _props.value,
	          other = (0, _objectWithoutProperties3.default)(_props, ['autoWidth', 'children', 'classes', 'className', 'disabled', 'displayEmpty', 'inputRef', 'MenuProps', 'multiple', 'name', 'native', 'onBlur', 'onChange', 'onClose', 'onFocus', 'onOpen', 'open', 'readOnly', 'renderValue', 'SelectDisplayProps', 'tabIndex', 'type', 'value']);

	      var open = this.isControlled && this.displayNode ? openProp : this.state.open;

	      if (native) {
	        (0, _warning2.default)(multiple === false, 'Material-UI: you can not use the `native` and `multiple` properties ' + 'at the same time on a `Select` component.');
	        (0, _warning2.default)(!renderValue, 'Material-UI: the `renderValue` property is not used by the native implementation.');
	        (0, _warning2.default)(!displayEmpty, 'Material-UI: the `displayEmpty` property is not used by the native implementation.');

	        return _react2.default.createElement(
	          'div',
	          { className: classes.root },
	          _react2.default.createElement(
	            'select',
	            (0, _extends3.default)({
	              className: (0, _classnames2.default)(classes.select, (0, _defineProperty3.default)({}, classes.disabled, disabled), classNameProp),
	              name: name,
	              disabled: disabled,
	              onBlur: onBlur,
	              onChange: onChange,
	              onFocus: onFocus,
	              value: value,
	              readOnly: readOnly,
	              ref: inputRef
	            }, other),
	            children
	          ),
	          _react2.default.createElement(_ArrowDropDown2.default, { className: classes.icon })
	        );
	      }

	      if (value === undefined) {
	        throw new Error('Material-UI: the `value` property is required ' + 'when using the `Select` component with `native=false` (default).');
	      }

	      var display = void 0;
	      var displaySingle = '';
	      var displayMultiple = [];
	      var computeDisplay = false;

	      // No need to display any value if the field is empty.
	      if ((0, Input_1.isDirty)(this.props) || displayEmpty) {
	        if (renderValue) {
	          display = renderValue(value);
	        } else {
	          computeDisplay = true;
	        }
	      }

	      var items = _react2.default.Children.map(children, function (child) {
	        if (!_react2.default.isValidElement(child)) {
	          return null;
	        }
	        var selected = void 0;

	        if (multiple) {
	          if (!Array.isArray(value)) {
	            throw new Error('Material-UI: the `value` property must be an array ' + 'when using the `Select` component with `multiple`.');
	          }

	          selected = value.indexOf(child.props.value) !== -1;
	          if (selected && computeDisplay) {
	            displayMultiple.push(child.props.children);
	          }
	        } else {
	          selected = value === child.props.value;
	          if (selected && computeDisplay) {
	            displaySingle = child.props.children;
	          }
	        }

	        return _react2.default.cloneElement(child, {
	          onClick: _this2.handleItemClick(child),
	          role: 'option',
	          selected: selected,
	          value: undefined, // The value is most likely not a valid HTML attribute.
	          'data-value': value // Instead, we provide it as a data attribute.
	        });
	      });

	      if (computeDisplay) {
	        display = multiple ? displayMultiple.join(', ') : displaySingle;
	      }

	      var MenuMinWidth = this.displayNode && !autoWidth ? this.displayNode.clientWidth : undefined;

	      var tabIndex = void 0;
	      if (typeof tabIndexProp !== 'undefined') {
	        tabIndex = tabIndexProp;
	      } else {
	        tabIndex = disabled ? null : 0;
	      }

	      return _react2.default.createElement(
	        'div',
	        { className: classes.root },
	        _react2.default.createElement(
	          'div',
	          (0, _extends3.default)({
	            className: (0, _classnames2.default)(classes.select, classes.selectMenu, (0, _defineProperty3.default)({}, classes.disabled, disabled), classNameProp),
	            ref: function ref(node) {
	              _this2.displayNode = node;
	            },

	            'aria-pressed': open ? 'true' : 'false',
	            tabIndex: tabIndex,
	            role: 'button',
	            'aria-owns': open ? 'menu-' + (name || '') : null,
	            'aria-haspopup': 'true',
	            onKeyDown: this.handleKeyDown,
	            onBlur: this.handleBlur,
	            onClick: disabled || readOnly ? null : this.handleClick,
	            onFocus: onFocus
	          }, SelectDisplayProps),
	          _react2.default.createElement('span', { dangerouslySetInnerHTML: { __html: '&#8203' } }),
	          display
	        ),
	        _react2.default.createElement('input', (0, _extends3.default)({
	          value: Array.isArray(value) ? value.join(',') : value,
	          name: name,
	          readOnly: readOnly,
	          ref: this.handleSelectRef,
	          type: type
	        }, other)),
	        _react2.default.createElement(_ArrowDropDown2.default, { className: classes.icon }),
	        _react2.default.createElement(
	          _Menu2.default,
	          (0, _extends3.default)({
	            id: 'menu-' + (name || ''),
	            anchorEl: this.displayNode,
	            open: open,
	            onClose: this.handleClose
	          }, MenuProps, {
	            MenuListProps: (0, _extends3.default)({
	              role: 'listbox'
	            }, MenuProps.MenuListProps),
	            PaperProps: (0, _extends3.default)({}, MenuProps.PaperProps, {
	              style: (0, _extends3.default)({
	                minWidth: MenuMinWidth
	              }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
	            })
	          }),
	          items
	        )
	      );
	    }
	  }]);
	  return SelectInput;
	}(_react2.default.Component);

	SelectInput.propTypes = {
	  /**
	   * If true, the width of the popover will automatically be set according to the items inside the
	   * menu, otherwise it will be at least the width of the select input.
	   */
	  autoWidth: _propTypes2.default.bool,
	  /**
	   * The option elements to populate the select with.
	   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * The CSS class name of the select element.
	   */
	  className: _propTypes2.default.string,
	  /**
	   * If `true`, the select will be disabled.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, the selected item is displayed even if its value is empty.
	   * You can only use it when the `native` property is `false` (default).
	   */
	  displayEmpty: _propTypes2.default.bool,
	  /**
	   * Use that property to pass a ref callback to the native select element.
	   */
	  inputRef: _propTypes2.default.func,
	  /**
	   * Properties applied to the `Menu` element.
	   */
	  MenuProps: _propTypes2.default.object,
	  /**
	   * If true, `value` must be an array and the menu will support multiple selections.
	   * You can only use it when the `native` property is `false` (default).
	   */
	  multiple: _propTypes2.default.bool,
	  /**
	   * Name attribute of the `select` or hidden `input` element.
	   */
	  name: _propTypes2.default.string,
	  /**
	   * If `true`, the component will be using a native `select` element.
	   */
	  native: _propTypes2.default.bool,
	  /**
	   * @ignore
	   */
	  onBlur: _propTypes2.default.func,
	  /**
	   * Callback function fired when a menu item is selected.
	   *
	   * @param {object} event The event source of the callback
	   * @param {object} child The react element that was selected
	   */
	  onChange: _propTypes2.default.func,
	  /**
	   * Callback fired when the component requests to be closed.
	   * Useful in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback
	   */
	  onClose: _propTypes2.default.func,
	  /**
	   * @ignore
	   */
	  onFocus: _propTypes2.default.func,
	  /**
	   * Callback fired when the component requests to be opened.
	   * Useful in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback
	   */
	  onOpen: _propTypes2.default.func,
	  /**
	   * Control `select` open state.
	   * You can only use it when the `native` property is `false` (default).
	   */
	  open: _propTypes2.default.bool,
	  /**
	   * @ignore
	   */
	  readOnly: _propTypes2.default.bool,
	  /**
	   * Render the selected value.
	   * You can only use it when the `native` property is `false` (default).
	   *
	   * @param {*} value The `value` provided to the component.
	   * @returns {ReactElement}
	   */
	  renderValue: _propTypes2.default.func,
	  /**
	   * Properties applied to the clickable div element.
	   */
	  SelectDisplayProps: _propTypes2.default.object,
	  /**
	   * @ignore
	   */
	  tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	  /**
	   * @ignore
	   */
	  type: _propTypes2.default.string,
	  /**
	   * The input value.
	   * This property is required when the `native` property is `false` (default).
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))])
	};

	exports.default = SelectInput;
	});

	unwrapExports(SelectInput_1);

	var Select_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _SelectInput2 = _interopRequireDefault(SelectInput_1);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _Input2 = _interopRequireDefault(Input$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// Import to enforce the CSS injection order

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      position: 'relative',
	      width: '100%'
	    },
	    select: {
	      '-moz-appearance': 'none', // Reset
	      '-webkit-appearance': 'none', // Reset
	      // When interacting quickly, the text can end up selected.
	      // Native select can't be selected either.
	      userSelect: 'none',
	      paddingRight: theme.spacing.unit * 4,
	      width: 'calc(100% - ' + theme.spacing.unit * 4 + 'px)',
	      minWidth: theme.spacing.unit * 2, // So it doesn't collapse.
	      cursor: 'pointer',
	      '&:focus': {
	        // Show that it's not an text input
	        background: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
	        borderRadius: 0 // Reset Chrome style
	      },
	      // Remove Firefox focus border
	      '&:-moz-focusring': {
	        color: 'transparent',
	        textShadow: '0 0 0 #000'
	      },
	      // Remove IE11 arrow
	      '&::-ms-expand': {
	        display: 'none'
	      }
	    },
	    selectMenu: {
	      width: 'auto', // Fix Safari textOverflow
	      textOverflow: 'ellipsis',
	      whiteSpace: 'nowrap',
	      overflow: 'hidden',
	      minHeight: '1.1875em' // Reset (19px), match the native input line-height
	    },
	    disabled: {
	      cursor: 'default'
	    },
	    icon: {
	      // We use a position absolute over a flexbox in order to forward the pointer events
	      // to the input.
	      position: 'absolute',
	      right: 0,
	      top: 'calc(50% - 12px)', // Center vertically
	      color: theme.palette.action.active,
	      'pointer-events': 'none' // Don't block pointer events on the select under the icon.
	    }
	  };
	}; // @inheritedComponent Input

	function Select(props) {
	  var autoWidth = props.autoWidth,
	      children = props.children,
	      classes = props.classes,
	      displayEmpty = props.displayEmpty,
	      input = props.input,
	      inputProps = props.inputProps,
	      MenuProps = props.MenuProps,
	      multiple = props.multiple,
	      native = props.native,
	      onClose = props.onClose,
	      onOpen = props.onOpen,
	      open = props.open,
	      renderValue = props.renderValue,
	      SelectDisplayProps = props.SelectDisplayProps,
	      other = (0, _objectWithoutProperties3.default)(props, ['autoWidth', 'children', 'classes', 'displayEmpty', 'input', 'inputProps', 'MenuProps', 'multiple', 'native', 'onClose', 'onOpen', 'open', 'renderValue', 'SelectDisplayProps']);


	  return _react2.default.cloneElement(input, (0, _extends3.default)({
	    // Most of the logic is implemented in `SelectInput`.
	    // The `Select` component is a simple API wrapper to expose something better to play with.
	    inputComponent: _SelectInput2.default,
	    inputProps: (0, _extends3.default)({
	      autoWidth: autoWidth,
	      children: children,
	      classes: classes,
	      displayEmpty: displayEmpty,
	      MenuProps: MenuProps,
	      multiple: multiple,
	      native: native,
	      onClose: onClose,
	      onOpen: onOpen,
	      open: open,
	      renderValue: renderValue,
	      SelectDisplayProps: SelectDisplayProps,
	      type: undefined }, inputProps, input ? input.props.inputProps : {})
	  }, other));
	}

	Select.propTypes = {
	  /**
	   * If true, the width of the popover will automatically be set according to the items inside the
	   * menu, otherwise it will be at least the width of the select input.
	   */
	  autoWidth: _propTypes2.default.bool,
	  /**
	   * The option elements to populate the select with.
	   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * If `true`, the selected item is displayed even if its value is empty.
	   * You can only use it when the `native` property is `false` (default).
	   */
	  displayEmpty: _propTypes2.default.bool,
	  /**
	   * An `Input` element; does not have to be a material-ui specific `Input`.
	   */
	  input: _propTypes2.default.element,
	  /**
	   * Properties applied to the `input` element.
	   * When `native` is `true`, the properties are applied on the `select` element.
	   */
	  inputProps: _propTypes2.default.object,
	  /**
	   * Properties applied to the `Menu` element.
	   */
	  MenuProps: _propTypes2.default.object,
	  /**
	   * If true, `value` must be an array and the menu will support multiple selections.
	   * You can only use it when the `native` property is `false` (default).
	   */
	  multiple: _propTypes2.default.bool,
	  /**
	   * If `true`, the component will be using a native `select` element.
	   */
	  native: _propTypes2.default.bool,
	  /**
	   * Callback function fired when a menu item is selected.
	   *
	   * @param {object} event The event source of the callback
	   * @param {object} child The react element that was selected
	   */
	  onChange: _propTypes2.default.func,
	  /**
	   * Callback fired when the component requests to be closed.
	   * Useful in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback
	   */
	  onClose: _propTypes2.default.func,
	  /**
	   * Callback fired when the component requests to be opened.
	   * Useful in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback
	   */
	  onOpen: _propTypes2.default.func,
	  /**
	   * Control `select` open state.
	   * You can only use it when the `native` property is `false` (default).
	   */
	  open: _propTypes2.default.bool,
	  /**
	   * Render the selected value.
	   * You can only use it when the `native` property is `false` (default).
	   *
	   * @param {*} value The `value` provided to the component.
	   * @returns {ReactElement}
	   */
	  renderValue: _propTypes2.default.func,
	  /**
	   * Properties applied to the clickable div element.
	   */
	  SelectDisplayProps: _propTypes2.default.object,
	  /**
	   * The input value.
	   * This property is required when the `native` property is `false` (default).
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))])
	};

	Select.defaultProps = {
	  autoWidth: false,
	  displayEmpty: false,
	  input: _react2.default.createElement(_Input2.default, null),
	  multiple: false,
	  native: false
	};

	Select.muiName = 'Select';

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiSelect' })(Select);
	});

	unwrapExports(Select_1);
	var Select_2 = Select_1.styles;

	var Select$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Select_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(Select$1);

	var Toolbar_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _extends3 = _interopRequireDefault(_extends$6);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: (0, _extends3.default)({}, theme.mixins.toolbar, {
	      position: 'relative',
	      display: 'flex',
	      alignItems: 'center'
	    }),
	    gutters: theme.mixins.gutters()
	  };
	};

	function Toolbar(props) {
	  var children = props.children,
	      classes = props.classes,
	      classNameProp = props.className,
	      disableGutters = props.disableGutters,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className', 'disableGutters']);


	  var className = (0, _classnames2.default)(classes.root, (0, _defineProperty3.default)({}, classes.gutters, !disableGutters), classNameProp);

	  return _react2.default.createElement(
	    'div',
	    (0, _extends3.default)({ className: className }, other),
	    children
	  );
	}

	Toolbar.propTypes = {
	  /**
	   * Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * If `true`, disables gutter padding.
	   */
	  disableGutters: _propTypes2.default.bool
	};

	Toolbar.defaultProps = {
	  disableGutters: false
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiToolbar' })(Toolbar);
	});

	unwrapExports(Toolbar_1);
	var Toolbar_2 = Toolbar_1.styles;

	var Toolbar$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Toolbar_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	var Toolbar$2 = unwrapExports(Toolbar$1);

	var KeyboardArrowLeft_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(react);



	var _pure2 = _interopRequireDefault(pure_1);



	var _SvgIcon2 = _interopRequireDefault(SvgIcon$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @ignore - internal component.
	 */
	var _ref = _react2.default.createElement('path', { d: 'M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z' });

	var KeyboardArrowLeft = function KeyboardArrowLeft(props) {
	  return _react2.default.createElement(
	    _SvgIcon2.default,
	    props,
	    _ref
	  );
	};
	KeyboardArrowLeft = (0, _pure2.default)(KeyboardArrowLeft);
	KeyboardArrowLeft.muiName = 'SvgIcon';

	exports.default = KeyboardArrowLeft;
	});

	unwrapExports(KeyboardArrowLeft_1);

	var KeyboardArrowRight_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(react);



	var _pure2 = _interopRequireDefault(pure_1);



	var _SvgIcon2 = _interopRequireDefault(SvgIcon$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @ignore - internal component.
	 */
	var _ref = _react2.default.createElement('path', { d: 'M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z' });

	var KeyboardArrowRight = function KeyboardArrowRight(props) {
	  return _react2.default.createElement(
	    _SvgIcon2.default,
	    props,
	    _ref
	  );
	};
	KeyboardArrowRight = (0, _pure2.default)(KeyboardArrowRight);
	KeyboardArrowRight.muiName = 'SvgIcon';

	exports.default = KeyboardArrowRight;
	});

	unwrapExports(KeyboardArrowRight_1);

	var IconButton_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _ButtonBase2 = _interopRequireDefault(ButtonBase$1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// @inheritedComponent ButtonBase

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      textAlign: 'center',
	      flex: '0 0 auto',
	      fontSize: theme.typography.pxToRem(24),
	      width: 48,
	      height: 48,
	      padding: 0,
	      borderRadius: '50%',
	      color: theme.palette.action.active,
	      transition: theme.transitions.create('background-color', {
	        duration: theme.transitions.duration.shortest
	      })
	    },
	    colorInherit: {
	      color: 'inherit'
	    },
	    colorPrimary: {
	      color: theme.palette.primary.main
	    },
	    colorSecondary: {
	      color: theme.palette.secondary.main
	    },
	    disabled: {
	      color: theme.palette.action.disabled
	    },
	    label: {
	      width: '100%',
	      display: 'flex',
	      alignItems: 'inherit',
	      justifyContent: 'inherit'
	    }
	  };
	};

	/**
	 * Refer to the [Icons](/style/icons) section of the documentation
	 * regarding the available icon options.
	 */
	function IconButton(props) {
	  var _classNames;

	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      color = props.color,
	      disabled = props.disabled,
	      other = (0, _objectWithoutProperties3.default)(props, ['children', 'classes', 'className', 'color', 'disabled']);


	  return _react2.default.createElement(
	    _ButtonBase2.default,
	    (0, _extends3.default)({
	      className: (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes['color' + (0, helpers.capitalize)(color)], color !== 'default'), (0, _defineProperty3.default)(_classNames, classes.disabled, disabled), _classNames), className),
	      centerRipple: true,
	      focusRipple: true,
	      disabled: disabled
	    }, other),
	    _react2.default.createElement(
	      'span',
	      { className: classes.label },
	      children
	    )
	  );
	}

	IconButton.propTypes = {
	  /**
	   * The icon element.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: _propTypes2.default.oneOf(['default', 'inherit', 'primary', 'secondary']),
	  /**
	   * If `true`, the button will be disabled.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, the ripple will be disabled.
	   */
	  disableRipple: _propTypes2.default.bool
	};

	IconButton.defaultProps = {
	  color: 'default',
	  disabled: false,
	  disableRipple: false
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiIconButton' })(IconButton);
	});

	unwrapExports(IconButton_1);
	var IconButton_2 = IconButton_1.styles;

	var IconButton$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(IconButton_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	unwrapExports(IconButton$1);

	var TablePaginationActions_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _KeyboardArrowLeft2 = _interopRequireDefault(KeyboardArrowLeft_1);



	var _KeyboardArrowRight2 = _interopRequireDefault(KeyboardArrowRight_1);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _IconButton2 = _interopRequireDefault(IconButton$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      flexShrink: 0,
	      color: theme.palette.text.secondary,
	      marginLeft: theme.spacing.unit * 2.5
	    }
	  };
	};

	/**
	 * @ignore - internal component.
	 */

	var _ref2 = _react2.default.createElement(_KeyboardArrowRight2.default, null);

	var _ref3 = _react2.default.createElement(_KeyboardArrowLeft2.default, null);

	var _ref4 = _react2.default.createElement(_KeyboardArrowLeft2.default, null);

	var _ref5 = _react2.default.createElement(_KeyboardArrowRight2.default, null);

	var TablePaginationActions = function (_React$Component) {
	  (0, _inherits3.default)(TablePaginationActions, _React$Component);

	  function TablePaginationActions() {
	    var _ref;

	    var _temp, _this, _ret;

	    (0, _classCallCheck3.default)(this, TablePaginationActions);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = TablePaginationActions.__proto__ || (0, _getPrototypeOf2.default)(TablePaginationActions)).call.apply(_ref, [this].concat(args))), _this), _this.handleBackButtonClick = function (event) {
	      _this.props.onChangePage(event, _this.props.page - 1);
	    }, _this.handleNextButtonClick = function (event) {
	      _this.props.onChangePage(event, _this.props.page + 1);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }

	  (0, _createClass3.default)(TablePaginationActions, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          backIconButtonProps = _props.backIconButtonProps,
	          classes = _props.classes,
	          count = _props.count,
	          nextIconButtonProps = _props.nextIconButtonProps,
	          onChangePage = _props.onChangePage,
	          page = _props.page,
	          rowsPerPage = _props.rowsPerPage,
	          theme = _props.theme,
	          other = (0, _objectWithoutProperties3.default)(_props, ['backIconButtonProps', 'classes', 'count', 'nextIconButtonProps', 'onChangePage', 'page', 'rowsPerPage', 'theme']);


	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({ className: classes.root }, other),
	        _react2.default.createElement(
	          _IconButton2.default,
	          (0, _extends3.default)({
	            onClick: this.handleBackButtonClick,
	            disabled: page === 0
	          }, backIconButtonProps),
	          theme.direction === 'rtl' ? _ref2 : _ref3
	        ),
	        _react2.default.createElement(
	          _IconButton2.default,
	          (0, _extends3.default)({
	            onClick: this.handleNextButtonClick,
	            disabled: page >= Math.ceil(count / rowsPerPage) - 1
	          }, nextIconButtonProps),
	          theme.direction === 'rtl' ? _ref4 : _ref5
	        )
	      );
	    }
	  }]);
	  return TablePaginationActions;
	}(_react2.default.Component);

	TablePaginationActions.propTypes = {
	  /**
	   * Properties applied to the back arrow `IconButton` component.
	   */
	  backIconButtonProps: _propTypes2.default.object,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * The total number of rows.
	   */
	  count: _propTypes2.default.number.isRequired,
	  /**
	   * Properties applied to the next arrow `IconButton` component.
	   */
	  nextIconButtonProps: _propTypes2.default.object,
	  /**
	   * Callback fired when the page is changed.
	   *
	   * @param {object} event The event source of the callback
	   * @param {number} page The page selected
	   */
	  onChangePage: _propTypes2.default.func.isRequired,
	  /**
	   * The zero-based index of the current page.
	   */
	  page: _propTypes2.default.number.isRequired,
	  /**
	   * The number of rows per page.
	   */
	  rowsPerPage: _propTypes2.default.number.isRequired,
	  /**
	   * @ignore
	   */
	  theme: _propTypes2.default.object.isRequired
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiTablePaginationActions', withTheme: true })(TablePaginationActions);
	});

	unwrapExports(TablePaginationActions_1);
	var TablePaginationActions_2 = TablePaginationActions_1.styles;

	var TablePagination_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _Input2 = _interopRequireDefault(Input$1);





	var _Select2 = _interopRequireDefault(Select$1);



	var _TableCell2 = _interopRequireDefault(TableCell_1);



	var _Toolbar2 = _interopRequireDefault(Toolbar$1);



	var _Typography2 = _interopRequireDefault(Typography$1);



	var _TablePaginationActions2 = _interopRequireDefault(TablePaginationActions_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// @inheritedComponent TableCell

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      // Increase the specificity to override TableCell.
	      '&:last-child': {
	        padding: 0
	      }
	    },
	    toolbar: {
	      height: 56,
	      minHeight: 56,
	      paddingRight: 2
	    },
	    spacer: {
	      flex: '1 1 100%'
	    },
	    caption: {
	      flexShrink: 0
	    },
	    input: {
	      fontSize: 'inherit',
	      flexShrink: 0
	    },
	    selectRoot: {
	      marginRight: theme.spacing.unit * 4,
	      marginLeft: theme.spacing.unit,
	      color: theme.palette.text.secondary
	    },
	    select: {
	      paddingLeft: theme.spacing.unit,
	      paddingRight: theme.spacing.unit * 2
	    },
	    selectIcon: {
	      top: 1
	    },
	    actions: {
	      flexShrink: 0,
	      color: theme.palette.text.secondary,
	      marginLeft: theme.spacing.unit * 2.5
	    }
	  };
	};

	/**
	 * A `TableCell` based component for placing inside `TableFooter` for pagination.
	 */

	var TablePagination = function (_React$Component) {
	  (0, _inherits3.default)(TablePagination, _React$Component);

	  function TablePagination() {
	    (0, _classCallCheck3.default)(this, TablePagination);
	    return (0, _possibleConstructorReturn3.default)(this, (TablePagination.__proto__ || (0, _getPrototypeOf2.default)(TablePagination)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(TablePagination, [{
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      var count = nextProps.count,
	          onChangePage = nextProps.onChangePage,
	          rowsPerPage = nextProps.rowsPerPage;

	      var newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
	      if (this.props.page > newLastPage) {
	        onChangePage(null, newLastPage);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          Actions = _props.Actions,
	          backIconButtonProps = _props.backIconButtonProps,
	          classes = _props.classes,
	          colSpanProp = _props.colSpan,
	          Component = _props.component,
	          count = _props.count,
	          labelDisplayedRows = _props.labelDisplayedRows,
	          labelRowsPerPage = _props.labelRowsPerPage,
	          nextIconButtonProps = _props.nextIconButtonProps,
	          onChangePage = _props.onChangePage,
	          onChangeRowsPerPage = _props.onChangeRowsPerPage,
	          page = _props.page,
	          rowsPerPage = _props.rowsPerPage,
	          rowsPerPageOptions = _props.rowsPerPageOptions,
	          other = (0, _objectWithoutProperties3.default)(_props, ['Actions', 'backIconButtonProps', 'classes', 'colSpan', 'component', 'count', 'labelDisplayedRows', 'labelRowsPerPage', 'nextIconButtonProps', 'onChangePage', 'onChangeRowsPerPage', 'page', 'rowsPerPage', 'rowsPerPageOptions']);


	      var colSpan = void 0;

	      if (Component === _TableCell2.default || Component === 'td') {
	        colSpan = colSpanProp || 1000; // col-span over everything
	      }

	      return _react2.default.createElement(
	        Component,
	        (0, _extends3.default)({ className: classes.root, colSpan: colSpan }, other),
	        _react2.default.createElement(
	          _Toolbar2.default,
	          { className: classes.toolbar },
	          _react2.default.createElement('div', { className: classes.spacer }),
	          rowsPerPageOptions.length > 1 && _react2.default.createElement(
	            _Typography2.default,
	            { variant: 'caption', className: classes.caption },
	            labelRowsPerPage
	          ),
	          rowsPerPageOptions.length > 1 && _react2.default.createElement(
	            _Select2.default,
	            {
	              classes: {
	                root: classes.selectRoot,
	                select: classes.select,
	                icon: classes.selectIcon
	              },
	              input: _react2.default.createElement(_Input2.default, { className: classes.input, disableUnderline: true }),
	              value: rowsPerPage,
	              onChange: onChangeRowsPerPage
	            },
	            rowsPerPageOptions.map(function (rowsPerPageOption) {
	              return _react2.default.createElement(
	                Menu$1.MenuItem,
	                { key: rowsPerPageOption, value: rowsPerPageOption },
	                rowsPerPageOption
	              );
	            })
	          ),
	          _react2.default.createElement(
	            _Typography2.default,
	            { variant: 'caption', className: classes.caption },
	            labelDisplayedRows({
	              from: count === 0 ? 0 : page * rowsPerPage + 1,
	              to: Math.min(count, (page + 1) * rowsPerPage),
	              count: count,
	              page: page
	            })
	          ),
	          _react2.default.createElement(Actions, {
	            backIconButtonProps: backIconButtonProps,
	            count: count,
	            nextIconButtonProps: nextIconButtonProps,
	            onChangePage: onChangePage,
	            page: page,
	            rowsPerPage: rowsPerPage
	          })
	        )
	      );
	    }
	  }]);
	  return TablePagination;
	}(_react2.default.Component);

	TablePagination.propTypes = {
	  /**
	   * The component used for displaying the actions.
	   * Either a string to use a DOM element or a component.
	   */
	  Actions: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * Properties applied to the back arrow `IconButton` component.
	   */
	  backIconButtonProps: _propTypes2.default.object,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  colSpan: _propTypes2.default.number,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * The total number of rows.
	   */
	  count: _propTypes2.default.number.isRequired,
	  /**
	   * Useful to customize the displayed rows label.
	   */
	  labelDisplayedRows: _propTypes2.default.func,
	  /**
	   * Useful to customize the rows per page label. Invoked with a `{ from, to, count, page }`
	   * object.
	   */
	  labelRowsPerPage: _propTypes2.default.node,
	  /**
	   * Properties applied to the next arrow `IconButton` component.
	   */
	  nextIconButtonProps: _propTypes2.default.object,
	  /**
	   * Callback fired when the page is changed.
	   *
	   * @param {object} event The event source of the callback
	   * @param {number} page The page selected
	   */
	  onChangePage: _propTypes2.default.func.isRequired,
	  /**
	   * Callback fired when the number of rows per page is changed.
	   *
	   * @param {object} event The event source of the callback
	   */
	  onChangeRowsPerPage: _propTypes2.default.func,
	  /**
	   * The zero-based index of the current page.
	   */
	  page: _propTypes2.default.number.isRequired,
	  /**
	   * The number of rows per page.
	   */
	  rowsPerPage: _propTypes2.default.number.isRequired,
	  /**
	   * Customizes the options of the rows per page select field. If less than two options are
	   * available, no select field will be displayed.
	   */
	  rowsPerPageOptions: _propTypes2.default.array
	};

	TablePagination.defaultProps = {
	  Actions: _TablePaginationActions2.default,
	  component: _TableCell2.default,
	  labelDisplayedRows: function labelDisplayedRows(_ref) {
	    var from = _ref.from,
	        to = _ref.to,
	        count = _ref.count;
	    return from + '-' + to + ' of ' + count;
	  },
	  labelRowsPerPage: 'Rows per page:',
	  rowsPerPageOptions: [5, 10, 25]
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiTablePagination' })(TablePagination);
	});

	unwrapExports(TablePagination_1);
	var TablePagination_2 = TablePagination_1.styles;

	var TableRow_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _withStyles2 = _interopRequireDefault(withStyles_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      color: 'inherit',
	      display: 'table-row',
	      height: 48,
	      verticalAlign: 'middle',
	      '&:focus': {
	        outline: 'none'
	      }
	    },
	    head: {
	      height: 56
	    },
	    footer: {
	      height: 56
	    },
	    selected: {
	      backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.04)' // grey[100]
	      : 'rgba(255, 255, 255, 0.08)'
	    },
	    hover: {
	      '&:hover': {
	        backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.07)' // grey[200]
	        : 'rgba(255, 255, 255, 0.14)'
	      }
	    }
	  };
	};

	/**
	 * Will automatically set dynamic row height
	 * based on the material table element parent (head, body, etc).
	 */
	function TableRow(props, context) {
	  var _classNames;

	  var classes = props.classes,
	      classNameProp = props.className,
	      Component = props.component,
	      hover = props.hover,
	      selected = props.selected,
	      other = (0, _objectWithoutProperties3.default)(props, ['classes', 'className', 'component', 'hover', 'selected']);
	  var table = context.table;


	  var className = (0, _classnames2.default)(classes.root, (_classNames = {}, (0, _defineProperty3.default)(_classNames, classes.head, table && table.head), (0, _defineProperty3.default)(_classNames, classes.footer, table && table.footer), (0, _defineProperty3.default)(_classNames, classes.hover, table && hover), (0, _defineProperty3.default)(_classNames, classes.selected, table && selected), _classNames), classNameProp);

	  return _react2.default.createElement(Component, (0, _extends3.default)({ className: className }, other));
	}

	TableRow.propTypes = {
	  /**
	   * Should be valid `<tr>` children such as `TableCell`.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The component used for the root node.
	   * Either a string to use a DOM element or a component.
	   */
	  component: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	  /**
	   * If `true`, the table row will shade on hover.
	   */
	  hover: _propTypes2.default.bool,
	  /**
	   * If `true`, the table row will have the selected shading.
	   */
	  selected: _propTypes2.default.bool
	};

	TableRow.defaultProps = {
	  component: 'tr',
	  hover: false,
	  selected: false
	};

	TableRow.contextTypes = {
	  table: _propTypes2.default.object
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiTableRow' })(TableRow);
	});

	unwrapExports(TableRow_1);
	var TableRow_2 = TableRow_1.styles;

	var ArrowDownward_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _react2 = _interopRequireDefault(react);



	var _pure2 = _interopRequireDefault(pure_1);



	var _SvgIcon2 = _interopRequireDefault(SvgIcon$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * @ignore - internal component.
	 */
	var _ref = _react2.default.createElement('path', { d: 'M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z' });

	var ArrowDownward = function ArrowDownward(props) {
	  return _react2.default.createElement(
	    _SvgIcon2.default,
	    props,
	    _ref
	  );
	};

	ArrowDownward = (0, _pure2.default)(ArrowDownward);
	ArrowDownward.muiName = 'SvgIcon';

	exports.default = ArrowDownward;
	});

	unwrapExports(ArrowDownward_1);

	var TableSortLabel_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.styles = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _defineProperty3 = _interopRequireDefault(defineProperty$5);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _classnames2 = _interopRequireDefault(classnames);



	var _ArrowDownward2 = _interopRequireDefault(ArrowDownward_1);



	var _withStyles2 = _interopRequireDefault(withStyles_1);



	var _ButtonBase2 = _interopRequireDefault(ButtonBase$1);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles = exports.styles = function styles(theme) {
	  return {
	    root: {
	      cursor: 'pointer',
	      display: 'inline-flex',
	      justifyContent: 'flex-start',
	      flexDirection: 'inherit',
	      alignItems: 'center',
	      '&:hover': {
	        color: theme.palette.text.primary
	      },
	      '&:focus': {
	        color: theme.palette.text.primary
	      }
	    },
	    active: {
	      color: theme.palette.text.primary,
	      '& $icon': {
	        opacity: 1
	      }
	    },
	    icon: {
	      height: 16,
	      marginRight: 4,
	      marginLeft: 4,
	      opacity: 0,
	      transition: theme.transitions.create(['opacity', 'transform'], {
	        duration: theme.transitions.duration.shorter
	      }),
	      userSelect: 'none',
	      width: 16
	    },
	    iconDirectionDesc: {
	      transform: 'rotate(0deg)'
	    },
	    iconDirectionAsc: {
	      transform: 'rotate(180deg)'
	    }
	  };
	};

	/**
	 * A button based label for placing inside `TableCell` for column sorting.
	 */
	// @inheritedComponent ButtonBase

	function TableSortLabel(props) {
	  var active = props.active,
	      classes = props.classes,
	      className = props.className,
	      children = props.children,
	      direction = props.direction,
	      other = (0, _objectWithoutProperties3.default)(props, ['active', 'classes', 'className', 'children', 'direction']);


	  return _react2.default.createElement(
	    _ButtonBase2.default,
	    (0, _extends3.default)({
	      className: (0, _classnames2.default)(classes.root, (0, _defineProperty3.default)({}, classes.active, active), className),
	      component: 'span',
	      disableRipple: true
	    }, other),
	    children,
	    _react2.default.createElement(_ArrowDownward2.default, {
	      className: (0, _classnames2.default)(classes.icon, classes['iconDirection' + (0, helpers.capitalize)(direction)])
	    })
	  );
	}

	TableSortLabel.propTypes = {
	  /**
	   * If `true`, the label will have the active styling (should be true for the sorted column).
	   */
	  active: _propTypes2.default.bool,
	  /**
	   * Label contents, the arrow will be appended automatically.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * Useful to extend the style applied to components.
	   */
	  classes: _propTypes2.default.object.isRequired,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The current sort direction.
	   */
	  direction: _propTypes2.default.oneOf(['asc', 'desc'])
	};

	TableSortLabel.defaultProps = {
	  active: false,
	  direction: 'desc'
	};

	exports.default = (0, _withStyles2.default)(styles, { name: 'MuiTableSortLabel' })(TableSortLabel);
	});

	unwrapExports(TableSortLabel_1);
	var TableSortLabel_2 = TableSortLabel_1.styles;

	var Table$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(Table_1).default;
	  }
	});



	Object.defineProperty(exports, 'TableBody', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(TableBody_1).default;
	  }
	});



	Object.defineProperty(exports, 'TableCell', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(TableCell_1).default;
	  }
	});



	Object.defineProperty(exports, 'TableFooter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(TableFooter_1).default;
	  }
	});



	Object.defineProperty(exports, 'TableHead', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(TableHead_1).default;
	  }
	});



	Object.defineProperty(exports, 'TablePagination', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(TablePagination_1).default;
	  }
	});



	Object.defineProperty(exports, 'TableRow', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(TableRow_1).default;
	  }
	});



	Object.defineProperty(exports, 'TableSortLabel', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(TableSortLabel_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	var Table$2 = unwrapExports(Table$1);
	var Table_1$1 = Table$1.TableBody;
	var Table_2$1 = Table$1.TableRow;
	var Table_3 = Table$1.TableCell;
	var Table_4 = Table$1.TableHead;

	var TextField_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _react2 = _interopRequireDefault(react);



	var _warning2 = _interopRequireDefault(browser);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _Input2 = _interopRequireDefault(Input$1);



	var _FormControl2 = _interopRequireDefault(FormControl_1);



	var _FormHelperText2 = _interopRequireDefault(FormHelperText_1);



	var _Select2 = _interopRequireDefault(Select_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * The `TextField` is a convenience wrapper for the most common cases (80%).
	 * It cannot be all things to all people, otherwise the API would grow out of control.
	 *
	 * ## Advanced Configuration
	 *
	 * It's important to understand that the text field is a simple abstraction
	 * on top of the following components:
	 * - [FormControl](/api/form-control)
	 * - [InputLabel](/api/input-label)
	 * - [Input](/api/input)
	 * - [FormHelperText](/api/form-helper-text)
	 *
	 * If you wish to alter the properties applied to the native input, you can do as follow:
	 *
	 * ```jsx
	 * const inputProps = {
	 *   step: 300,
	 * };
	 *
	 * return <TextField id="time" type="time" inputProps={inputProps} />;
	 * ```
	 *
	 * For advanced cases, please look at the source of TextField by clicking on the
	 * "Edit this page" button above. Consider either:
	 * - using the upper case props for passing values direct to the components.
	 * - using the underlying components directly as shown in the demos.
	 */
	function TextField(props) {
	  var autoComplete = props.autoComplete,
	      autoFocus = props.autoFocus,
	      children = props.children,
	      className = props.className,
	      defaultValue = props.defaultValue,
	      disabled = props.disabled,
	      error = props.error,
	      FormHelperTextProps = props.FormHelperTextProps,
	      fullWidth = props.fullWidth,
	      helperText = props.helperText,
	      id = props.id,
	      InputLabelProps = props.InputLabelProps,
	      inputProps = props.inputProps,
	      InputProps = props.InputProps,
	      inputRef = props.inputRef,
	      label = props.label,
	      multiline = props.multiline,
	      name = props.name,
	      onChange = props.onChange,
	      placeholder = props.placeholder,
	      required = props.required,
	      rows = props.rows,
	      rowsMax = props.rowsMax,
	      select = props.select,
	      SelectProps = props.SelectProps,
	      type = props.type,
	      value = props.value,
	      other = (0, _objectWithoutProperties3.default)(props, ['autoComplete', 'autoFocus', 'children', 'className', 'defaultValue', 'disabled', 'error', 'FormHelperTextProps', 'fullWidth', 'helperText', 'id', 'InputLabelProps', 'inputProps', 'InputProps', 'inputRef', 'label', 'multiline', 'name', 'onChange', 'placeholder', 'required', 'rows', 'rowsMax', 'select', 'SelectProps', 'type', 'value']);


	  (0, _warning2.default)(!select || Boolean(children), 'Material-UI: `children` must be passed when using the `TextField` component with `select`.');

	  var helperTextId = helperText && id ? id + '-helper-text' : undefined;
	  var InputComponent = _react2.default.createElement(_Input2.default, (0, _extends3.default)({
	    autoComplete: autoComplete,
	    autoFocus: autoFocus,
	    defaultValue: defaultValue,
	    disabled: disabled,
	    fullWidth: fullWidth,
	    multiline: multiline,
	    name: name,
	    rows: rows,
	    rowsMax: rowsMax,
	    type: type,
	    value: value,
	    id: id,
	    inputRef: inputRef,
	    onChange: onChange,
	    placeholder: placeholder,
	    inputProps: inputProps
	  }, InputProps));

	  return _react2.default.createElement(
	    _FormControl2.default,
	    (0, _extends3.default)({
	      'aria-describedby': helperTextId,
	      className: className,
	      error: error,
	      fullWidth: fullWidth,
	      required: required
	    }, other),
	    label && _react2.default.createElement(
	      Input$1.InputLabel,
	      (0, _extends3.default)({ htmlFor: id }, InputLabelProps),
	      label
	    ),
	    select ? _react2.default.createElement(
	      _Select2.default,
	      (0, _extends3.default)({ value: value, input: InputComponent }, SelectProps),
	      children
	    ) : InputComponent,
	    helperText && _react2.default.createElement(
	      _FormHelperText2.default,
	      (0, _extends3.default)({ id: helperTextId }, FormHelperTextProps),
	      helperText
	    )
	  );
	} // @inheritedComponent FormControl

	TextField.propTypes = {
	  /**
	   * This property helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it here:
	   * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
	   */
	  autoComplete: _propTypes2.default.string,
	  /**
	   * If `true`, the input will be focused during the first mount.
	   */
	  autoFocus: _propTypes2.default.bool,
	  /**
	   * @ignore
	   */
	  children: _propTypes2.default.node,
	  /**
	   * @ignore
	   */
	  className: _propTypes2.default.string,
	  /**
	   * The default value of the `Input` element.
	   */
	  defaultValue: _propTypes2.default.string,
	  /**
	   * If `true`, the input will be disabled.
	   */
	  disabled: _propTypes2.default.bool,
	  /**
	   * If `true`, the label will be displayed in an error state.
	   */
	  error: _propTypes2.default.bool,
	  /**
	   * Properties applied to the `FormHelperText` element.
	   */
	  FormHelperTextProps: _propTypes2.default.object,
	  /**
	   * If `true`, the input will take up the full width of its container.
	   */
	  fullWidth: _propTypes2.default.bool,
	  /**
	   * The helper text content.
	   */
	  helperText: _propTypes2.default.node,
	  /**
	   * The id of the `input` element.
	   * Use that property to make `label` and `helperText` accessible for screen readers.
	   */
	  id: _propTypes2.default.string,
	  /**
	   * Properties applied to the `InputLabel` element.
	   */
	  InputLabelProps: _propTypes2.default.object,
	  /**
	   * Properties applied to the `Input` element.
	   */
	  InputProps: _propTypes2.default.object,
	  /**
	   * Properties applied to the native `input` element.
	   */
	  inputProps: _propTypes2.default.object,
	  /**
	   * Use that property to pass a ref callback to the native input component.
	   */
	  inputRef: _propTypes2.default.func,
	  /**
	   * The label content.
	   */
	  label: _propTypes2.default.node,
	  /**
	   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
	   */
	  margin: _propTypes2.default.oneOf(['none', 'dense', 'normal']),
	  /**
	   * If `true`, a textarea element will be rendered instead of an input.
	   */
	  multiline: _propTypes2.default.bool,
	  /**
	   * Name attribute of the `input` element.
	   */
	  name: _propTypes2.default.string,
	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {object} event The event source of the callback
	   */
	  onChange: _propTypes2.default.func,
	  /**
	   * The short hint displayed in the input before the user enters a value.
	   */
	  placeholder: _propTypes2.default.string,
	  /**
	   * If `true`, the label is displayed as required.
	   */
	  required: _propTypes2.default.bool,
	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  rowsMax: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	  /**
	   * Render a `Select` element while passing the `Input` element to `Select` as `input` parameter.
	   * If this option is set you must pass the options of the select as children.
	   */
	  select: _propTypes2.default.bool,
	  /**
	   * Properties applied to the `Select` element.
	   */
	  SelectProps: _propTypes2.default.object,
	  /**
	   * Type attribute of the `Input` element. It should be a valid HTML5 input type.
	   */
	  type: _propTypes2.default.string,
	  /**
	   * The value of the `Input` element, required for a controlled component.
	   */
	  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))])
	};

	TextField.defaultProps = {
	  required: false,
	  select: false
	};

	exports.default = TextField;
	});

	unwrapExports(TextField_1);

	var TextField$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(TextField_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	var TextField$2 = unwrapExports(TextField$1);

	var compose_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;
	exports.default = compose;
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }

	  if (funcs.length === 1) {
	    return funcs[0];
	  }

	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}
	});

	var compose$1 = unwrapExports(compose_1);

	var subscriptionShape = propTypes.shape({
	  trySubscribe: propTypes.func.isRequired,
	  tryUnsubscribe: propTypes.func.isRequired,
	  notifyNestedSubs: propTypes.func.isRequired,
	  isSubscribed: propTypes.func.isRequired
	});

	var storeShape = propTypes.shape({
	  subscribe: propTypes.func.isRequired,
	  dispatch: propTypes.func.isRequired,
	  getState: propTypes.func.isRequired
	});

	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning$4(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

	function _classCallCheck$10(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$10(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$10(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var didWarnAboutReceivingStore = false;
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	  didWarnAboutReceivingStore = true;

	  warning$4('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	}

	function createProvider() {
	  var _Provider$childContex;

	  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
	  var subKey = arguments[1];

	  var subscriptionKey = subKey || storeKey + 'Subscription';

	  var Provider = function (_Component) {
	    _inherits$10(Provider, _Component);

	    Provider.prototype.getChildContext = function getChildContext() {
	      var _ref;

	      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
	    };

	    function Provider(props, context) {
	      _classCallCheck$10(this, Provider);

	      var _this = _possibleConstructorReturn$10(this, _Component.call(this, props, context));

	      _this[storeKey] = props.store;
	      return _this;
	    }

	    Provider.prototype.render = function render() {
	      return react_3.only(this.props.children);
	    };

	    return Provider;
	  }(react_1);

	  {
	    Provider.prototype.componentWillReceiveProps = function (nextProps) {
	      if (this[storeKey] !== nextProps.store) {
	        warnAboutReceivingStore();
	      }
	    };
	  }

	  Provider.propTypes = {
	    store: storeShape.isRequired,
	    children: propTypes.element.isRequired
	  };
	  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = storeShape.isRequired, _Provider$childContex[subscriptionKey] = subscriptionShape, _Provider$childContex);

	  return Provider;
	}

	var Provider = createProvider();

	var hoistNonReactStatics$2 = createCommonjsModule(function (module, exports) {
	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	(function (global, factory) {
	    module.exports = factory();
	}(commonjsGlobal, (function () {
	    
	    var REACT_STATICS = {
	        childContextTypes: true,
	        contextTypes: true,
	        defaultProps: true,
	        displayName: true,
	        getDefaultProps: true,
	        getDerivedStateFromProps: true,
	        mixins: true,
	        propTypes: true,
	        type: true
	    };
	    
	    var KNOWN_STATICS = {
	        name: true,
	        length: true,
	        prototype: true,
	        caller: true,
	        callee: true,
	        arguments: true,
	        arity: true
	    };
	    
	    var defineProperty = Object.defineProperty;
	    var getOwnPropertyNames = Object.getOwnPropertyNames;
	    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	    var getPrototypeOf = Object.getPrototypeOf;
	    var objectPrototype = getPrototypeOf && getPrototypeOf(Object);
	    
	    return function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	        if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	            
	            if (objectPrototype) {
	                var inheritedComponent = getPrototypeOf(sourceComponent);
	                if (inheritedComponent && inheritedComponent !== objectPrototype) {
	                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	                }
	            }
	            
	            var keys = getOwnPropertyNames(sourceComponent);
	            
	            if (getOwnPropertySymbols) {
	                keys = keys.concat(getOwnPropertySymbols(sourceComponent));
	            }
	            
	            for (var i = 0; i < keys.length; ++i) {
	                var key = keys[i];
	                if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
	                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
	                    try { // Avoid failures from read-only properties
	                        defineProperty(targetComponent, key, descriptor);
	                    } catch (e) {}
	                }
	            }
	            
	            return targetComponent;
	        }
	        
	        return targetComponent;
	    };
	})));
	});

	function _classCallCheck$11(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// encapsulates the subscription logic for connecting a component to the redux store, as
	// well as nesting subscriptions of descendant components, so that we can ensure the
	// ancestor components re-render before descendants

	var CLEARED = null;
	var nullListeners = {
	  notify: function notify() {}
	};

	function createListenerCollection() {
	  // the current/next pattern is copied from redux's createStore code.
	  // TODO: refactor+expose that code to be reusable here?
	  var current = [];
	  var next = [];

	  return {
	    clear: function clear() {
	      next = CLEARED;
	      current = CLEARED;
	    },
	    notify: function notify() {
	      var listeners = current = next;
	      for (var i = 0; i < listeners.length; i++) {
	        listeners[i]();
	      }
	    },
	    get: function get() {
	      return next;
	    },
	    subscribe: function subscribe(listener) {
	      var isSubscribed = true;
	      if (next === current) next = current.slice();
	      next.push(listener);

	      return function unsubscribe() {
	        if (!isSubscribed || current === CLEARED) return;
	        isSubscribed = false;

	        if (next === current) next = current.slice();
	        next.splice(next.indexOf(listener), 1);
	      };
	    }
	  };
	}

	var Subscription = function () {
	  function Subscription(store, parentSub, onStateChange) {
	    _classCallCheck$11(this, Subscription);

	    this.store = store;
	    this.parentSub = parentSub;
	    this.onStateChange = onStateChange;
	    this.unsubscribe = null;
	    this.listeners = nullListeners;
	  }

	  Subscription.prototype.addNestedSub = function addNestedSub(listener) {
	    this.trySubscribe();
	    return this.listeners.subscribe(listener);
	  };

	  Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {
	    this.listeners.notify();
	  };

	  Subscription.prototype.isSubscribed = function isSubscribed() {
	    return Boolean(this.unsubscribe);
	  };

	  Subscription.prototype.trySubscribe = function trySubscribe() {
	    if (!this.unsubscribe) {
	      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);

	      this.listeners = createListenerCollection();
	    }
	  };

	  Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {
	    if (this.unsubscribe) {
	      this.unsubscribe();
	      this.unsubscribe = null;
	      this.listeners.clear();
	      this.listeners = nullListeners;
	    }
	  };

	  return Subscription;
	}();

	var _extends$18 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck$12(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$11(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$11(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function _objectWithoutProperties$5(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	var hotReloadingVersion = 0;
	var dummyState = {};
	function noop$1() {}
	function makeSelectorStateful(sourceSelector, store) {
	  // wrap the selector in an object that tracks its results between runs.
	  var selector = {
	    run: function runComponentSelector(props) {
	      try {
	        var nextProps = sourceSelector(store.getState(), props);
	        if (nextProps !== selector.props || selector.error) {
	          selector.shouldComponentUpdate = true;
	          selector.props = nextProps;
	          selector.error = null;
	        }
	      } catch (error) {
	        selector.shouldComponentUpdate = true;
	        selector.error = error;
	      }
	    }
	  };

	  return selector;
	}

	function connectAdvanced(
	/*
	  selectorFactory is a func that is responsible for returning the selector function used to
	  compute new props from state, props, and dispatch. For example:
	     export default connectAdvanced((dispatch, options) => (state, props) => ({
	      thing: state.things[props.thingId],
	      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
	    }))(YourComponent)
	   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
	  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
	  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
	   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
	  props. Do not use connectAdvanced directly without memoizing results between calls to your
	  selector, otherwise the Connect component will re-render on every state or props change.
	*/
	selectorFactory) {
	  var _contextTypes, _childContextTypes;

	  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref$getDisplayName = _ref.getDisplayName,
	      getDisplayName = _ref$getDisplayName === undefined ? function (name) {
	    return 'ConnectAdvanced(' + name + ')';
	  } : _ref$getDisplayName,
	      _ref$methodName = _ref.methodName,
	      methodName = _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,
	      _ref$renderCountProp = _ref.renderCountProp,
	      renderCountProp = _ref$renderCountProp === undefined ? undefined : _ref$renderCountProp,
	      _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
	      shouldHandleStateChanges = _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,
	      _ref$storeKey = _ref.storeKey,
	      storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,
	      _ref$withRef = _ref.withRef,
	      withRef = _ref$withRef === undefined ? false : _ref$withRef,
	      connectOptions = _objectWithoutProperties$5(_ref, ['getDisplayName', 'methodName', 'renderCountProp', 'shouldHandleStateChanges', 'storeKey', 'withRef']);

	  var subscriptionKey = storeKey + 'Subscription';
	  var version = hotReloadingVersion++;

	  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = storeShape, _contextTypes[subscriptionKey] = subscriptionShape, _contextTypes);
	  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = subscriptionShape, _childContextTypes);

	  return function wrapWithConnect(WrappedComponent) {
	    browser$1(typeof WrappedComponent == 'function', 'You must pass a component to the function returned by ' + (methodName + '. Instead received ' + JSON.stringify(WrappedComponent)));

	    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';

	    var displayName = getDisplayName(wrappedComponentName);

	    var selectorFactoryOptions = _extends$18({}, connectOptions, {
	      getDisplayName: getDisplayName,
	      methodName: methodName,
	      renderCountProp: renderCountProp,
	      shouldHandleStateChanges: shouldHandleStateChanges,
	      storeKey: storeKey,
	      withRef: withRef,
	      displayName: displayName,
	      wrappedComponentName: wrappedComponentName,
	      WrappedComponent: WrappedComponent
	    });

	    var Connect = function (_Component) {
	      _inherits$11(Connect, _Component);

	      function Connect(props, context) {
	        _classCallCheck$12(this, Connect);

	        var _this = _possibleConstructorReturn$11(this, _Component.call(this, props, context));

	        _this.version = version;
	        _this.state = {};
	        _this.renderCount = 0;
	        _this.store = props[storeKey] || context[storeKey];
	        _this.propsMode = Boolean(props[storeKey]);
	        _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);

	        browser$1(_this.store, 'Could not find "' + storeKey + '" in either the context or props of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + ('or explicitly pass "' + storeKey + '" as a prop to "' + displayName + '".'));

	        _this.initSelector();
	        _this.initSubscription();
	        return _this;
	      }

	      Connect.prototype.getChildContext = function getChildContext() {
	        var _ref2;

	        // If this component received store from props, its subscription should be transparent
	        // to any descendants receiving store+subscription from context; it passes along
	        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows
	        // Connect to control ordering of notifications to flow top-down.
	        var subscription = this.propsMode ? null : this.subscription;
	        return _ref2 = {}, _ref2[subscriptionKey] = subscription || this.context[subscriptionKey], _ref2;
	      };

	      Connect.prototype.componentDidMount = function componentDidMount() {
	        if (!shouldHandleStateChanges) return;

	        // componentWillMount fires during server side rendering, but componentDidMount and
	        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
	        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.
	        // To handle the case where a child component may have triggered a state change by
	        // dispatching an action in its componentWillMount, we have to re-run the select and maybe
	        // re-render.
	        this.subscription.trySubscribe();
	        this.selector.run(this.props);
	        if (this.selector.shouldComponentUpdate) this.forceUpdate();
	      };

	      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        this.selector.run(nextProps);
	      };

	      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	        return this.selector.shouldComponentUpdate;
	      };

	      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	        if (this.subscription) this.subscription.tryUnsubscribe();
	        this.subscription = null;
	        this.notifyNestedSubs = noop$1;
	        this.store = null;
	        this.selector.run = noop$1;
	        this.selector.shouldComponentUpdate = false;
	      };

	      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	        browser$1(withRef, 'To access the wrapped instance, you need to specify ' + ('{ withRef: true } in the options argument of the ' + methodName + '() call.'));
	        return this.wrappedInstance;
	      };

	      Connect.prototype.setWrappedInstance = function setWrappedInstance(ref) {
	        this.wrappedInstance = ref;
	      };

	      Connect.prototype.initSelector = function initSelector() {
	        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
	        this.selector = makeSelectorStateful(sourceSelector, this.store);
	        this.selector.run(this.props);
	      };

	      Connect.prototype.initSubscription = function initSubscription() {
	        if (!shouldHandleStateChanges) return;

	        // parentSub's source should match where store came from: props vs. context. A component
	        // connected to the store via props shouldn't use subscription from context, or vice versa.
	        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
	        this.subscription = new Subscription(this.store, parentSub, this.onStateChange.bind(this));

	        // `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in
	        // the middle of the notification loop, where `this.subscription` will then be null. An
	        // extra null check every change can be avoided by copying the method onto `this` and then
	        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's
	        // listeners logic is changed to not call listeners that have been unsubscribed in the
	        // middle of the notification loop.
	        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
	      };

	      Connect.prototype.onStateChange = function onStateChange() {
	        this.selector.run(this.props);

	        if (!this.selector.shouldComponentUpdate) {
	          this.notifyNestedSubs();
	        } else {
	          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
	          this.setState(dummyState);
	        }
	      };

	      Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
	        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
	        // needs to notify nested subs. Once called, it unimplements itself until further state
	        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does
	        // a boolean check every time avoids an extra method call most of the time, resulting
	        // in some perf boost.
	        this.componentDidUpdate = undefined;
	        this.notifyNestedSubs();
	      };

	      Connect.prototype.isSubscribed = function isSubscribed() {
	        return Boolean(this.subscription) && this.subscription.isSubscribed();
	      };

	      Connect.prototype.addExtraProps = function addExtraProps(props) {
	        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props;
	        // make a shallow copy so that fields added don't leak to the original selector.
	        // this is especially important for 'ref' since that's a reference back to the component
	        // instance. a singleton memoized selector would then be holding a reference to the
	        // instance, preventing the instance from being garbage collected, and that would be bad
	        var withExtras = _extends$18({}, props);
	        if (withRef) withExtras.ref = this.setWrappedInstance;
	        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
	        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
	        return withExtras;
	      };

	      Connect.prototype.render = function render() {
	        var selector = this.selector;
	        selector.shouldComponentUpdate = false;

	        if (selector.error) {
	          throw selector.error;
	        } else {
	          return react_4(WrappedComponent, this.addExtraProps(selector.props));
	        }
	      };

	      return Connect;
	    }(react_1);

	    Connect.WrappedComponent = WrappedComponent;
	    Connect.displayName = displayName;
	    Connect.childContextTypes = childContextTypes;
	    Connect.contextTypes = contextTypes;
	    Connect.propTypes = contextTypes;

	    {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        var _this2 = this;

	        // We are hot reloading!
	        if (this.version !== version) {
	          this.version = version;
	          this.initSelector();

	          // If any connected descendants don't hot reload (and resubscribe in the process), their
	          // listeners will be lost when we unsubscribe. Unfortunately, by copying over all
	          // listeners, this does mean that the old versions of connected descendants will still be
	          // notified of state changes; however, their onStateChange function is a no-op so this
	          // isn't a huge deal.
	          var oldListeners = [];

	          if (this.subscription) {
	            oldListeners = this.subscription.listeners.get();
	            this.subscription.tryUnsubscribe();
	          }
	          this.initSubscription();
	          if (shouldHandleStateChanges) {
	            this.subscription.trySubscribe();
	            oldListeners.forEach(function (listener) {
	              return _this2.subscription.listeners.subscribe(listener);
	            });
	          }
	        }
	      };
	    }

	    return hoistNonReactStatics$2(Connect, WrappedComponent);
	  };
	}

	var hasOwn = Object.prototype.hasOwnProperty;

	function is$2(x, y) {
	  if (x === y) {
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    return x !== x && y !== y;
	  }
	}

	function shallowEqual$3(objA, objB) {
	  if (is$2(objA, objB)) return true;

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) return false;

	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || !is$2(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	function verifyPlainObject(value, displayName, methodName) {
	  if (!isPlainObject(value)) {
	    warning$4(methodName + '() in ' + displayName + ' must return a plain object. Instead received ' + value + '.');
	  }
	}

	function wrapMapToPropsConstant(getConstant) {
	  return function initConstantSelector(dispatch, options) {
	    var constant = getConstant(dispatch, options);

	    function constantSelector() {
	      return constant;
	    }
	    constantSelector.dependsOnOwnProps = false;
	    return constantSelector;
	  };
	}

	// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
	// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
	// whether mapToProps needs to be invoked when props have changed.
	// 
	// A length of one signals that mapToProps does not depend on props from the parent component.
	// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
	// therefore not reporting its length accurately..
	function getDependsOnOwnProps(mapToProps) {
	  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
	}

	// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
	// this function wraps mapToProps in a proxy function which does several things:
	// 
	//  * Detects whether the mapToProps function being called depends on props, which
	//    is used by selectorFactory to decide if it should reinvoke on props changes.
	//    
	//  * On first call, handles mapToProps if returns another function, and treats that
	//    new function as the true mapToProps for subsequent calls.
	//    
	//  * On first call, verifies the first result is a plain object, in order to warn
	//    the developer that their mapToProps function is not returning a valid result.
	//    
	function wrapMapToPropsFunc(mapToProps, methodName) {
	  return function initProxySelector(dispatch, _ref) {
	    var displayName = _ref.displayName;

	    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
	      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
	    };

	    // allow detectFactoryAndVerify to get ownProps
	    proxy.dependsOnOwnProps = true;

	    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
	      proxy.mapToProps = mapToProps;
	      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
	      var props = proxy(stateOrDispatch, ownProps);

	      if (typeof props === 'function') {
	        proxy.mapToProps = props;
	        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
	        props = proxy(stateOrDispatch, ownProps);
	      }

	      verifyPlainObject(props, displayName, methodName);

	      return props;
	    };

	    return proxy;
	  };
	}

	function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
	  return typeof mapDispatchToProps === 'function' ? wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps') : undefined;
	}

	function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
	  return !mapDispatchToProps ? wrapMapToPropsConstant(function (dispatch) {
	    return { dispatch: dispatch };
	  }) : undefined;
	}

	function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
	  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? wrapMapToPropsConstant(function (dispatch) {
	    return bindActionCreators(mapDispatchToProps, dispatch);
	  }) : undefined;
	}

	var defaultMapDispatchToPropsFactories = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];

	function whenMapStateToPropsIsFunction(mapStateToProps) {
	  return typeof mapStateToProps === 'function' ? wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps') : undefined;
	}

	function whenMapStateToPropsIsMissing(mapStateToProps) {
	  return !mapStateToProps ? wrapMapToPropsConstant(function () {
	    return {};
	  }) : undefined;
	}

	var defaultMapStateToPropsFactories = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];

	var _extends$19 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function defaultMergeProps(stateProps, dispatchProps, ownProps) {
	  return _extends$19({}, ownProps, stateProps, dispatchProps);
	}

	function wrapMergePropsFunc(mergeProps) {
	  return function initMergePropsProxy(dispatch, _ref) {
	    var displayName = _ref.displayName,
	        pure = _ref.pure,
	        areMergedPropsEqual = _ref.areMergedPropsEqual;

	    var hasRunOnce = false;
	    var mergedProps = void 0;

	    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
	      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

	      if (hasRunOnce) {
	        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
	      } else {
	        hasRunOnce = true;
	        mergedProps = nextMergedProps;

	        verifyPlainObject(mergedProps, displayName, 'mergeProps');
	      }

	      return mergedProps;
	    };
	  };
	}

	function whenMergePropsIsFunction(mergeProps) {
	  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
	}

	function whenMergePropsIsOmitted(mergeProps) {
	  return !mergeProps ? function () {
	    return defaultMergeProps;
	  } : undefined;
	}

	var defaultMergePropsFactories = [whenMergePropsIsFunction, whenMergePropsIsOmitted];

	function verify(selector, methodName, displayName) {
	  if (!selector) {
	    throw new Error('Unexpected value for ' + methodName + ' in ' + displayName + '.');
	  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
	    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
	      warning$4('The selector for ' + methodName + ' of ' + displayName + ' did not specify a value for dependsOnOwnProps.');
	    }
	  }
	}

	function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
	  verify(mapStateToProps, 'mapStateToProps', displayName);
	  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
	  verify(mergeProps, 'mergeProps', displayName);
	}

	function _objectWithoutProperties$6(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
	  return function impureFinalPropsSelector(state, ownProps) {
	    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
	  };
	}

	function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
	  var areStatesEqual = _ref.areStatesEqual,
	      areOwnPropsEqual = _ref.areOwnPropsEqual,
	      areStatePropsEqual = _ref.areStatePropsEqual;

	  var hasRunAtLeastOnce = false;
	  var state = void 0;
	  var ownProps = void 0;
	  var stateProps = void 0;
	  var dispatchProps = void 0;
	  var mergedProps = void 0;

	  function handleFirstCall(firstState, firstOwnProps) {
	    state = firstState;
	    ownProps = firstOwnProps;
	    stateProps = mapStateToProps(state, ownProps);
	    dispatchProps = mapDispatchToProps(dispatch, ownProps);
	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    hasRunAtLeastOnce = true;
	    return mergedProps;
	  }

	  function handleNewPropsAndNewState() {
	    stateProps = mapStateToProps(state, ownProps);

	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleNewProps() {
	    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);

	    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);

	    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
	    return mergedProps;
	  }

	  function handleNewState() {
	    var nextStateProps = mapStateToProps(state, ownProps);
	    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
	    stateProps = nextStateProps;

	    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);

	    return mergedProps;
	  }

	  function handleSubsequentCalls(nextState, nextOwnProps) {
	    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
	    var stateChanged = !areStatesEqual(nextState, state);
	    state = nextState;
	    ownProps = nextOwnProps;

	    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
	    if (propsChanged) return handleNewProps();
	    if (stateChanged) return handleNewState();
	    return mergedProps;
	  }

	  return function pureFinalPropsSelector(nextState, nextOwnProps) {
	    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
	  };
	}

	// TODO: Add more comments

	// If pure is true, the selector returned by selectorFactory will memoize its results,
	// allowing connectAdvanced's shouldComponentUpdate to return false if final
	// props have not changed. If false, the selector will always return a new
	// object and shouldComponentUpdate will always return true.

	function finalPropsSelectorFactory(dispatch, _ref2) {
	  var initMapStateToProps = _ref2.initMapStateToProps,
	      initMapDispatchToProps = _ref2.initMapDispatchToProps,
	      initMergeProps = _ref2.initMergeProps,
	      options = _objectWithoutProperties$6(_ref2, ['initMapStateToProps', 'initMapDispatchToProps', 'initMergeProps']);

	  var mapStateToProps = initMapStateToProps(dispatch, options);
	  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
	  var mergeProps = initMergeProps(dispatch, options);

	  {
	    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
	  }

	  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;

	  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
	}

	var _extends$20 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _objectWithoutProperties$7(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	/*
	  connect is a facade over connectAdvanced. It turns its args into a compatible
	  selectorFactory, which has the signature:

	    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
	  
	  connect passes its args to connectAdvanced as options, which will in turn pass them to
	  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

	  selectorFactory returns a final props selector from its mapStateToProps,
	  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
	  mergePropsFactories, and pure args.

	  The resulting final props selector is called by the Connect component instance whenever
	  it receives new props or store state.
	 */

	function match(arg, factories, name) {
	  for (var i = factories.length - 1; i >= 0; i--) {
	    var result = factories[i](arg);
	    if (result) return result;
	  }

	  return function (dispatch, options) {
	    throw new Error('Invalid value of type ' + typeof arg + ' for ' + name + ' argument when connecting component ' + options.wrappedComponentName + '.');
	  };
	}

	function strictEqual(a, b) {
	  return a === b;
	}

	// createConnect with default args builds the 'official' connect behavior. Calling it with
	// different options opens up some testing and extensibility scenarios
	function createConnect() {
	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref$connectHOC = _ref.connectHOC,
	      connectHOC = _ref$connectHOC === undefined ? connectAdvanced : _ref$connectHOC,
	      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
	      mapStateToPropsFactories = _ref$mapStateToPropsF === undefined ? defaultMapStateToPropsFactories : _ref$mapStateToPropsF,
	      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
	      mapDispatchToPropsFactories = _ref$mapDispatchToPro === undefined ? defaultMapDispatchToPropsFactories : _ref$mapDispatchToPro,
	      _ref$mergePropsFactor = _ref.mergePropsFactories,
	      mergePropsFactories = _ref$mergePropsFactor === undefined ? defaultMergePropsFactories : _ref$mergePropsFactor,
	      _ref$selectorFactory = _ref.selectorFactory,
	      selectorFactory = _ref$selectorFactory === undefined ? finalPropsSelectorFactory : _ref$selectorFactory;

	  return function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	    var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
	        _ref2$pure = _ref2.pure,
	        pure = _ref2$pure === undefined ? true : _ref2$pure,
	        _ref2$areStatesEqual = _ref2.areStatesEqual,
	        areStatesEqual = _ref2$areStatesEqual === undefined ? strictEqual : _ref2$areStatesEqual,
	        _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
	        areOwnPropsEqual = _ref2$areOwnPropsEqua === undefined ? shallowEqual$3 : _ref2$areOwnPropsEqua,
	        _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
	        areStatePropsEqual = _ref2$areStatePropsEq === undefined ? shallowEqual$3 : _ref2$areStatePropsEq,
	        _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
	        areMergedPropsEqual = _ref2$areMergedPropsE === undefined ? shallowEqual$3 : _ref2$areMergedPropsE,
	        extraOptions = _objectWithoutProperties$7(_ref2, ['pure', 'areStatesEqual', 'areOwnPropsEqual', 'areStatePropsEqual', 'areMergedPropsEqual']);

	    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
	    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
	    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');

	    return connectHOC(selectorFactory, _extends$20({
	      // used in error messages
	      methodName: 'connect',

	      // used to compute Connect's displayName from the wrapped component's displayName.
	      getDisplayName: function getDisplayName(name) {
	        return 'Connect(' + name + ')';
	      },

	      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
	      shouldHandleStateChanges: Boolean(mapStateToProps),

	      // passed through to selectorFactory
	      initMapStateToProps: initMapStateToProps,
	      initMapDispatchToProps: initMapDispatchToProps,
	      initMergeProps: initMergeProps,
	      pure: pure,
	      areStatesEqual: areStatesEqual,
	      areOwnPropsEqual: areOwnPropsEqual,
	      areStatePropsEqual: areStatePropsEqual,
	      areMergedPropsEqual: areMergedPropsEqual

	    }, extraOptions));
	  };
	}

	var connect = createConnect();

	const interval = 1000;

	let hardwareInfoListener = null;
	const requestHardwareInfo = () => {
	  console.log('request hardware info');
	  overwolf.benchmarking.stopRequesting();
	  overwolf.benchmarking.requestHardwareInfo(interval, ({ reason }) => {
	    if (reason === 'Permissions Required') {
	      overwolf.benchmarking.requestPermissions(({ status }) => {
	        if (status === 'success') {
	          requestHardwareInfo();
	        }
	      });
	    }
	  });
	};

	const addHardwareInfoListener = listener => {
	  if (hardwareInfoListener) {
	    console.log('already listens to hardware info');
	    return;
	  }

	  hardwareInfoListener = listener;
	  overwolf.benchmarking.onHardwareInfoReady.addListener(hardwareInfoListener);
	  requestHardwareInfo();
	};

	const removeHardwareInfoListener = () => {
	  console.info('%cStop hardware info listener', 'color: blue');
	  overwolf.benchmarking.onHardwareInfoReady.removeListener(hardwareInfoListener);
	  hardwareInfoListener = null;
	  overwolf.benchmarking.stopRequesting();
	};

	const trackHardwareInfo = () => {
	  return dispatch => {
	    const hardwareInfoListener = hardwareInfo => {
	      console.log(hardwareInfo);
	      dispatch({
	        type: RECEIVE_HARDWARE_INFO,
	        data: hardwareInfo
	      });
	    };

	    addHardwareInfoListener(hardwareInfoListener);
	  };
	};

	const stopTrackingHardwareInfo = () => {
	  return dispatch => {
	    removeHardwareInfoListener();
	    dispatch({
	      type: STOP_TRACKING_HARDWARE_INFO
	    });
	  };
	};

	const callOverwolfWithPromise = (method, ...params) => {
	  return new Promise((resolve, reject) => {
	    const handleResult = result => {
	      if (result.status === 'success') return resolve(result);
	      return reject(result);
	    };

	    console.log(method, params);
	    if (params) {
	      method(...params, handleResult);
	    } else {
	      method(handleResult);
	    }
	  });
	};

	let processManager = null;
	const getProcessManagerPlugin = () => {
	  return new Promise(async resolve => {
	    if (processManager) return resolve(processManager);
	    const result = await callOverwolfWithPromise(overwolf.extensions.current.getExtraObject, 'process-manager-plugin');
	    processManager = result.object;
	    resolve(result.object);
	  });
	};

	let simpleIoPlugin;
	const getSimpleIoPlugin = () => {
	  return new Promise(async resolve => {
	    if (simpleIoPlugin) return resolve(simpleIoPlugin);
	    const result = await callOverwolfWithPromise(overwolf.extensions.current.getExtraObject, 'simple-io-plugin');
	    simpleIoPlugin = result.object;
	    resolve(result.object);
	  });
	};

	const setMiningAddress = (minerIdentifier, address) => {
	  return dispatch => {
	    dispatch({
	      type: SET_MINING_ADDRESS,
	      data: { address, minerIdentifier }
	    });
	  };
	};

	const selectMiner = minerIdentifier => {
	  return dispatch => {
	    dispatch({
	      type: SELECT_MINER,
	      data: minerIdentifier
	    });
	  };
	};

	const handleDataByIdenfier = {};
	const startMining = minerIdentifier => {
	  return async dispatch => {
	    if (handleDataByIdenfier[minerIdentifier]) return;
	    const processManager = await getProcessManagerPlugin();
	    const { parser, path, args, environmentVariables, storage } = getMiner(minerIdentifier);

	    dispatch({
	      type: START_MINING,
	      data: { minerIdentifier }
	    });

	    handleDataByIdenfier[minerIdentifier] = ({ error, data }) => {
	      const parsed = parser(error || data);
	      if (parsed) {
	        const { timestamp, speed } = parsed;
	        dispatch({
	          type: SET_MINING_SPEED,
	          data: {
	            minerIdentifier,
	            speed
	          }
	        });
	        if (speed) {
	          storage.setItem(timestamp, speed);
	        }
	      }
	    };
	    processManager.onDataReceivedEvent.addListener(handleDataByIdenfier[minerIdentifier]);
	    processManager.launchProcess(path, args, environmentVariables, true, ({ data }) => {
	      dispatch({
	        type: SET_PROCESS_ID,
	        data: {
	          minerIdentifier,
	          processId: data
	        }
	      });
	    });
	  };
	};

	const stopMining = minerIdentifier => {
	  return async (dispatch, getState) => {
	    const processManager = await getProcessManagerPlugin();
	    const state = getState();

	    dispatch({
	      type: STOP_MINING,
	      data: { minerIdentifier }
	    });
	    const processId = state.mining.miners[minerIdentifier].processId;
	    if (processId || handleDataByIdenfier[minerIdentifier]) {
	      processManager.onDataReceivedEvent.removeListener(handleDataByIdenfier[minerIdentifier]);
	      processManager.terminateProcess(processId);
	      delete handleDataByIdenfier[minerIdentifier];
	    }
	  };
	};

	const fetchMetrics = (minerIdentifier, { from = 0, to = Number.MAX_VALUE, steps = 1 }) => {
	  return async dispatch => {
	    const { storage } = getMiner(minerIdentifier);

	    dispatch({
	      type: REQUEST_MINING_METRICS,
	      data: { minerIdentifier, from, to, steps }
	    });

	    storage.keys().then(timestamps => {
	      const timestampsInRange = timestamps.filter(timestamp => timestamp > from && timestamp < to);
	      if (timestampsInRange.length) {
	        storage.getItems(timestampsInRange).then(results => {
	          const itemsInRange = Object.entries(results);

	          dispatch({
	            type: RECEIVE_MINING_METRICS,
	            data: { minerIdentifier, from, to, steps, metrics: itemsInRange }
	          });
	        });
	      } else {
	        dispatch({
	          type: RECEIVE_MINING_METRICS,
	          data: { minerIdentifier, from, to, steps, metrics: [] }
	        });
	      }
	    });
	  };
	};

	const styles$2 = {
	  chart: {
	    height: 'calc(100% - 140px)'
	  }
	};

	class Address extends react_1 {
	  constructor(...args) {
	    var _temp;

	    return _temp = super(...args), this.handleChange = event => {
	      const { setMiningAddress: setMiningAddress$$1, minerIdentifier } = this.props;

	      setMiningAddress$$1(minerIdentifier, event.target.value);
	    }, _temp;
	  }

	  render() {
	    const { address, miner, isMining } = this.props;

	    return react.createElement(TextField$2, {
	      label: 'Payment Address',
	      helperText: `Minimum payment threshold ${miner.minimumPaymentThreshold} ${miner.currency}`,
	      fullWidth: true,
	      margin: 'normal',
	      value: address,
	      disabled: isMining,
	      onChange: this.handleChange
	    });
	  }
	}

	Address.propTypes = {
	  classes: propTypes.object.isRequired,
	  miner: propTypes.object.isRequired,
	  address: propTypes.string.isRequired,
	  minerIdentifier: propTypes.string.isRequired,
	  isMining: propTypes.bool.isRequired,
	  setMiningAddress: propTypes.func.isRequired
	};

	const mapStateToProps = ({ mining: { miners, selectedMinerIdentifier } }) => {
	  return {
	    minerIdentifier: selectedMinerIdentifier,
	    address: miners[selectedMinerIdentifier].address,
	    miner: getMiner(selectedMinerIdentifier),
	    isMining: miners[selectedMinerIdentifier].isMining
	  };
	};

	const mapDispatchToProps = dispatch => {
	  return {
	    setMiningAddress: bindActionCreators(setMiningAddress, dispatch)
	  };
	};

	const enhance = compose$1(styles_3(styles$2), connect(mapStateToProps, mapDispatchToProps))(Address);

	(function () {
	  if (Array.prototype.fill) return;

	  var fill = function (value) {
	    // Steps 1-2.
	    if (this == null) {
	      throw new TypeError("this is null or not defined");
	    }

	    var O = Object(this);

	    // Steps 3-5.
	    var len = O.length >>> 0;

	    // Steps 6-7.
	    var start = arguments[1];
	    var relativeStart = start >> 0;

	    // Step 8.
	    var k = relativeStart < 0 ?
	      Math.max(len + relativeStart, 0) :
	      Math.min(relativeStart, len);

	    // Steps 9-10.
	    var end = arguments[2];
	    var relativeEnd = end === undefined ?
	      len : end >> 0;

	    // Step 11.
	    var last = relativeEnd < 0 ?
	      Math.max(len + relativeEnd, 0) :
	      Math.min(relativeEnd, len);

	    // Step 12.
	    while (k < last) {
	      O[k] = value;
	      k++;
	    }

	    // Step 13.
	    return O;
	  };

	  if (Object.defineProperty) {
	    try {
	      Object.defineProperty(Array.prototype, 'fill', {
	        value: fill,
	        configurable: true,
	        enumerable: false,
	        writable: true
	      });
	    } catch(e) {}
	  }

	  if (!Array.prototype.fill) {
	    Array.prototype.fill = fill;
	  }
	})(undefined);

	var underscore = createCommonjsModule(function (module, exports) {
	//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  {
	    if ('object' !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.8.3';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }

	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = property;

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (typeof undefined === 'function' && undefined.amd) {
	    undefined('underscore', [], function() {
	      return _;
	    });
	  }
	}.call(commonjsGlobal));
	});
	var underscore_1 = underscore._;

	var pi = Math.PI,
	    tau = 2 * pi,
	    epsilon = 1e-6,
	    tauEpsilon = tau - epsilon;

	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath
	  this._ = "";
	}

	function path() {
	  return new Path;
	}

	Path.prototype = path.prototype = {
	  constructor: Path,
	  moveTo: function(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function(x1, y1, x, y) {
	    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
	    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x1,y1).
	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon)) {}

	    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	    // Equivalently, is (x1,y1) coincident with (x2,y2)?
	    // Or, is the radius zero? Line to (x1,y1).
	    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
	      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Otherwise, draw an arc!
	    else {
	      var x20 = x2 - x0,
	          y20 = y2 - y0,
	          l21_2 = x21 * x21 + y21 * y21,
	          l20_2 = x20 * x20 + y20 * y20,
	          l21 = Math.sqrt(l21_2),
	          l01 = Math.sqrt(l01_2),
	          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	          t01 = l / l01,
	          t21 = l / l21;

	      // If the start tangent is not coincident with (x0,y0), line to.
	      if (Math.abs(t01 - 1) > epsilon) {
	        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	      }

	      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	    }
	  },
	  arc: function(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x0,y0).
	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    }

	    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
	      this._ += "L" + x0 + "," + y0;
	    }

	    // Is this arc empty? We’re done.
	    if (!r) return;

	    // Does the angle go the wrong way? Flip the direction.
	    if (da < 0) da = da % tau + tau;

	    // Is this a complete circle? Draw two arcs to complete the circle.
	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    }

	    // Is this arc non-empty? Draw an arc!
	    else if (da > epsilon) {
	      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	    }
	  },
	  rect: function(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
	  },
	  toString: function() {
	    return this._;
	  }
	};

	function constant(x) {
	  return function constant() {
	    return x;
	  };
	}

	var abs = Math.abs;
	var atan2 = Math.atan2;
	var cos = Math.cos;
	var max$1 = Math.max;
	var min$2 = Math.min;
	var sin = Math.sin;
	var sqrt = Math.sqrt;

	var epsilon$1 = 1e-12;
	var pi$1 = Math.PI;
	var halfPi = pi$1 / 2;
	var tau$1 = 2 * pi$1;

	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);
	}

	function asin(x) {
	  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
	}

	function arcInnerRadius(d) {
	  return d.innerRadius;
	}

	function arcOuterRadius(d) {
	  return d.outerRadius;
	}

	function arcStartAngle(d) {
	  return d.startAngle;
	}

	function arcEndAngle(d) {
	  return d.endAngle;
	}

	function arcPadAngle(d) {
	  return d && d.padAngle; // Note: optional!
	}

	function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
	  var x10 = x1 - x0, y10 = y1 - y0,
	      x32 = x3 - x2, y32 = y3 - y2,
	      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
	  return [x0 + t * x10, y0 + t * y10];
	}

	// Compute perpendicular offset line of length rc.
	// http://mathworld.wolfram.com/Circle-LineIntersection.html
	function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
	  var x01 = x0 - x1,
	      y01 = y0 - y1,
	      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
	      ox = lo * y01,
	      oy = -lo * x01,
	      x11 = x0 + ox,
	      y11 = y0 + oy,
	      x10 = x1 + ox,
	      y10 = y1 + oy,
	      x00 = (x11 + x10) / 2,
	      y00 = (y11 + y10) / 2,
	      dx = x10 - x11,
	      dy = y10 - y11,
	      d2 = dx * dx + dy * dy,
	      r = r1 - rc,
	      D = x11 * y10 - x10 * y11,
	      d = (dy < 0 ? -1 : 1) * sqrt(max$1(0, r * r * d2 - D * D)),
	      cx0 = (D * dy - dx * d) / d2,
	      cy0 = (-D * dx - dy * d) / d2,
	      cx1 = (D * dy + dx * d) / d2,
	      cy1 = (-D * dx + dy * d) / d2,
	      dx0 = cx0 - x00,
	      dy0 = cy0 - y00,
	      dx1 = cx1 - x00,
	      dy1 = cy1 - y00;

	  // Pick the closer of the two intersection points.
	  // TODO Is there a faster way to determine which intersection to use?
	  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

	  return {
	    cx: cx0,
	    cy: cy0,
	    x01: -ox,
	    y01: -oy,
	    x11: cx0 * (r1 / r - 1),
	    y11: cy0 * (r1 / r - 1)
	  };
	}

	function arc() {
	  var innerRadius = arcInnerRadius,
	      outerRadius = arcOuterRadius,
	      cornerRadius = constant(0),
	      padRadius = null,
	      startAngle = arcStartAngle,
	      endAngle = arcEndAngle,
	      padAngle = arcPadAngle,
	      context = null;

	  function arc() {
	    var buffer,
	        r,
	        r0 = +innerRadius.apply(this, arguments),
	        r1 = +outerRadius.apply(this, arguments),
	        a0 = startAngle.apply(this, arguments) - halfPi,
	        a1 = endAngle.apply(this, arguments) - halfPi,
	        da = abs(a1 - a0),
	        cw = a1 > a0;

	    if (!context) context = buffer = path();

	    // Ensure that the outer radius is always larger than the inner radius.
	    if (r1 < r0) r = r1, r1 = r0, r0 = r;

	    // Is it a point?
	    if (!(r1 > epsilon$1)) context.moveTo(0, 0);

	    // Or is it a circle or annulus?
	    else if (da > tau$1 - epsilon$1) {
	      context.moveTo(r1 * cos(a0), r1 * sin(a0));
	      context.arc(0, 0, r1, a0, a1, !cw);
	      if (r0 > epsilon$1) {
	        context.moveTo(r0 * cos(a1), r0 * sin(a1));
	        context.arc(0, 0, r0, a1, a0, cw);
	      }
	    }

	    // Or is it a circular or annular sector?
	    else {
	      var a01 = a0,
	          a11 = a1,
	          a00 = a0,
	          a10 = a1,
	          da0 = da,
	          da1 = da,
	          ap = padAngle.apply(this, arguments) / 2,
	          rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
	          rc = min$2(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
	          rc0 = rc,
	          rc1 = rc,
	          t0,
	          t1;

	      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
	      if (rp > epsilon$1) {
	        var p0 = asin(rp / r0 * sin(ap)),
	            p1 = asin(rp / r1 * sin(ap));
	        if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
	        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
	        if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
	        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
	      }

	      var x01 = r1 * cos(a01),
	          y01 = r1 * sin(a01),
	          x10 = r0 * cos(a10),
	          y10 = r0 * sin(a10);

	      // Apply rounded corners?
	      if (rc > epsilon$1) {
	        var x11 = r1 * cos(a11),
	            y11 = r1 * sin(a11),
	            x00 = r0 * cos(a00),
	            y00 = r0 * sin(a00);

	        // Restrict the corner radius according to the sector angle.
	        if (da < pi$1) {
	          var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
	              ax = x01 - oc[0],
	              ay = y01 - oc[1],
	              bx = x11 - oc[0],
	              by = y11 - oc[1],
	              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
	              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = min$2(rc, (r0 - lc) / (kc - 1));
	          rc1 = min$2(rc, (r1 - lc) / (kc + 1));
	        }
	      }

	      // Is the sector collapsed to a line?
	      if (!(da1 > epsilon$1)) context.moveTo(x01, y01);

	      // Does the sector’s outer ring have rounded corners?
	      else if (rc1 > epsilon$1) {
	        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
	        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

	        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

	        // Have the corners merged?
	        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
	          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
	        }
	      }

	      // Or is the outer ring just a circular arc?
	      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

	      // Is there no inner ring, and it’s a circular sector?
	      // Or perhaps it’s an annular sector collapsed due to padding?
	      if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);

	      // Does the sector’s inner ring (or point) have rounded corners?
	      else if (rc0 > epsilon$1) {
	        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
	        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

	        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

	        // Have the corners merged?
	        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
	          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
	        }
	      }

	      // Or is the inner ring just a circular arc?
	      else context.arc(0, 0, r0, a10, a00, cw);
	    }

	    context.closePath();

	    if (buffer) return context = null, buffer + "" || null;
	  }

	  arc.centroid = function() {
	    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
	        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$1 / 2;
	    return [cos(a) * r, sin(a) * r];
	  };

	  arc.innerRadius = function(_) {
	    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
	  };

	  arc.outerRadius = function(_) {
	    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
	  };

	  arc.cornerRadius = function(_) {
	    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
	  };

	  arc.padRadius = function(_) {
	    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
	  };

	  arc.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
	  };

	  arc.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
	  };

	  arc.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
	  };

	  arc.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, arc) : context;
	  };

	  return arc;
	}

	function Linear(context) {
	  this._context = context;
	}

	Linear.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: this._context.lineTo(x, y); break;
	    }
	  }
	};

	function curveLinear(context) {
	  return new Linear(context);
	}

	function x(p) {
	  return p[0];
	}

	function y(p) {
	  return p[1];
	}

	function line() {
	  var x$$1 = x,
	      y$$1 = y,
	      defined = constant(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function line(data) {
	    var i,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer;

	    if (context == null) output = curve(buffer = path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();
	        else output.lineEnd();
	      }
	      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  line.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), line) : x$$1;
	  };

	  line.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), line) : y$$1;
	  };

	  line.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
	  };

	  line.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };

	  line.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };

	  return line;
	}

	function area() {
	  var x0 = x,
	      x1 = null,
	      y0 = constant(0),
	      y1 = y,
	      defined = constant(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function area(data) {
	    var i,
	        j,
	        k,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer,
	        x0z = new Array(n),
	        y0z = new Array(n);

	    if (context == null) output = curve(buffer = path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) {
	          j = i;
	          output.areaStart();
	          output.lineStart();
	        } else {
	          output.lineEnd();
	          output.lineStart();
	          for (k = i - 1; k >= j; --k) {
	            output.point(x0z[k], y0z[k]);
	          }
	          output.lineEnd();
	          output.areaEnd();
	        }
	      }
	      if (defined0) {
	        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
	        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
	      }
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  function arealine() {
	    return line().defined(defined).curve(curve).context(context);
	  }

	  area.x = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
	  };

	  area.x0 = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
	  };

	  area.x1 = function(_) {
	    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
	  };

	  area.y = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
	  };

	  area.y0 = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
	  };

	  area.y1 = function(_) {
	    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
	  };

	  area.lineX0 =
	  area.lineY0 = function() {
	    return arealine().x(x0).y(y0);
	  };

	  area.lineY1 = function() {
	    return arealine().x(x0).y(y1);
	  };

	  area.lineX1 = function() {
	    return arealine().x(x1).y(y0);
	  };

	  area.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
	  };

	  area.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
	  };

	  area.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
	  };

	  return area;
	}

	function descending(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	}

	function identity(d) {
	  return d;
	}

	function pie() {
	  var value = identity,
	      sortValues = descending,
	      sort = null,
	      startAngle = constant(0),
	      endAngle = constant(tau$1),
	      padAngle = constant(0);

	  function pie(data) {
	    var i,
	        n = data.length,
	        j,
	        k,
	        sum = 0,
	        index = new Array(n),
	        arcs = new Array(n),
	        a0 = +startAngle.apply(this, arguments),
	        da = Math.min(tau$1, Math.max(-tau$1, endAngle.apply(this, arguments) - a0)),
	        a1,
	        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
	        pa = p * (da < 0 ? -1 : 1),
	        v;

	    for (i = 0; i < n; ++i) {
	      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
	        sum += v;
	      }
	    }

	    // Optionally sort the arcs by previously-computed values or by data.
	    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
	    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

	    // Compute the arcs! They are stored in the original data's order.
	    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
	      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
	        data: data[j],
	        index: i,
	        value: v,
	        startAngle: a0,
	        endAngle: a1,
	        padAngle: p
	      };
	    }

	    return arcs;
	  }

	  pie.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
	  };

	  pie.sortValues = function(_) {
	    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
	  };

	  pie.sort = function(_) {
	    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
	  };

	  pie.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
	  };

	  pie.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
	  };

	  pie.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
	  };

	  return pie;
	}

	var curveRadialLinear = curveRadial(curveLinear);

	function Radial(curve) {
	  this._curve = curve;
	}

	Radial.prototype = {
	  areaStart: function() {
	    this._curve.areaStart();
	  },
	  areaEnd: function() {
	    this._curve.areaEnd();
	  },
	  lineStart: function() {
	    this._curve.lineStart();
	  },
	  lineEnd: function() {
	    this._curve.lineEnd();
	  },
	  point: function(a, r) {
	    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
	  }
	};

	function curveRadial(curve) {

	  function radial(context) {
	    return new Radial(curve(context));
	  }

	  radial._curve = curve;

	  return radial;
	}

	function lineRadial(l) {
	  var c = l.curve;

	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;

	  l.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };

	  return l;
	}

	function lineRadial$1() {
	  return lineRadial(line().curve(curveRadialLinear));
	}

	function areaRadial() {
	  var a = area().curve(curveRadialLinear),
	      c = a.curve,
	      x0 = a.lineX0,
	      x1 = a.lineX1,
	      y0 = a.lineY0,
	      y1 = a.lineY1;

	  a.angle = a.x, delete a.x;
	  a.startAngle = a.x0, delete a.x0;
	  a.endAngle = a.x1, delete a.x1;
	  a.radius = a.y, delete a.y;
	  a.innerRadius = a.y0, delete a.y0;
	  a.outerRadius = a.y1, delete a.y1;
	  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
	  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
	  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
	  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

	  a.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };

	  return a;
	}

	function pointRadial(x, y) {
	  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
	}

	var slice = Array.prototype.slice;

	function linkSource(d) {
	  return d.source;
	}

	function linkTarget(d) {
	  return d.target;
	}

	function link(curve) {
	  var source = linkSource,
	      target = linkTarget,
	      x$$1 = x,
	      y$$1 = y,
	      context = null;

	  function link() {
	    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
	    if (!context) context = buffer = path();
	    curve(context, +x$$1.apply(this, (argv[0] = s, argv)), +y$$1.apply(this, argv), +x$$1.apply(this, (argv[0] = t, argv)), +y$$1.apply(this, argv));
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  link.source = function(_) {
	    return arguments.length ? (source = _, link) : source;
	  };

	  link.target = function(_) {
	    return arguments.length ? (target = _, link) : target;
	  };

	  link.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), link) : x$$1;
	  };

	  link.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), link) : y$$1;
	  };

	  link.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, link) : context;
	  };

	  return link;
	}

	function curveHorizontal(context, x0, y0, x1, y1) {
	  context.moveTo(x0, y0);
	  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
	}

	function curveVertical(context, x0, y0, x1, y1) {
	  context.moveTo(x0, y0);
	  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
	}

	function curveRadial$1(context, x0, y0, x1, y1) {
	  var p0 = pointRadial(x0, y0),
	      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
	      p2 = pointRadial(x1, y0),
	      p3 = pointRadial(x1, y1);
	  context.moveTo(p0[0], p0[1]);
	  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
	}

	function linkHorizontal() {
	  return link(curveHorizontal);
	}

	function linkVertical() {
	  return link(curveVertical);
	}

	function linkRadial() {
	  var l = link(curveRadial$1);
	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;
	  return l;
	}

	var circle = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / pi$1);
	    context.moveTo(r, 0);
	    context.arc(0, 0, r, 0, tau$1);
	  }
	};

	var cross = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / 5) / 2;
	    context.moveTo(-3 * r, -r);
	    context.lineTo(-r, -r);
	    context.lineTo(-r, -3 * r);
	    context.lineTo(r, -3 * r);
	    context.lineTo(r, -r);
	    context.lineTo(3 * r, -r);
	    context.lineTo(3 * r, r);
	    context.lineTo(r, r);
	    context.lineTo(r, 3 * r);
	    context.lineTo(-r, 3 * r);
	    context.lineTo(-r, r);
	    context.lineTo(-3 * r, r);
	    context.closePath();
	  }
	};

	var tan30 = Math.sqrt(1 / 3),
	    tan30_2 = tan30 * 2;

	var diamond = {
	  draw: function(context, size) {
	    var y = Math.sqrt(size / tan30_2),
	        x = y * tan30;
	    context.moveTo(0, -y);
	    context.lineTo(x, 0);
	    context.lineTo(0, y);
	    context.lineTo(-x, 0);
	    context.closePath();
	  }
	};

	var ka = 0.89081309152928522810,
	    kr = Math.sin(pi$1 / 10) / Math.sin(7 * pi$1 / 10),
	    kx = Math.sin(tau$1 / 10) * kr,
	    ky = -Math.cos(tau$1 / 10) * kr;

	var star = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size * ka),
	        x = kx * r,
	        y = ky * r;
	    context.moveTo(0, -r);
	    context.lineTo(x, y);
	    for (var i = 1; i < 5; ++i) {
	      var a = tau$1 * i / 5,
	          c = Math.cos(a),
	          s = Math.sin(a);
	      context.lineTo(s * r, -c * r);
	      context.lineTo(c * x - s * y, s * x + c * y);
	    }
	    context.closePath();
	  }
	};

	var square = {
	  draw: function(context, size) {
	    var w = Math.sqrt(size),
	        x = -w / 2;
	    context.rect(x, x, w, w);
	  }
	};

	var sqrt3 = Math.sqrt(3);

	var triangle = {
	  draw: function(context, size) {
	    var y = -Math.sqrt(size / (sqrt3 * 3));
	    context.moveTo(0, y * 2);
	    context.lineTo(-sqrt3 * y, -y);
	    context.lineTo(sqrt3 * y, -y);
	    context.closePath();
	  }
	};

	var c = -0.5,
	    s = Math.sqrt(3) / 2,
	    k$1 = 1 / Math.sqrt(12),
	    a = (k$1 / 2 + 1) * 3;

	var wye = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / a),
	        x0 = r / 2,
	        y0 = r * k$1,
	        x1 = x0,
	        y1 = r * k$1 + r,
	        x2 = -x1,
	        y2 = y1;
	    context.moveTo(x0, y0);
	    context.lineTo(x1, y1);
	    context.lineTo(x2, y2);
	    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
	    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
	    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
	    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
	    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
	    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
	    context.closePath();
	  }
	};

	var symbols = [
	  circle,
	  cross,
	  diamond,
	  square,
	  star,
	  triangle,
	  wye
	];

	function symbol$3() {
	  var type = constant(circle),
	      size = constant(64),
	      context = null;

	  function symbol() {
	    var buffer;
	    if (!context) context = buffer = path();
	    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  symbol.type = function(_) {
	    return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
	  };

	  symbol.size = function(_) {
	    return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
	  };

	  symbol.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
	  };

	  return symbol;
	}

	function noop$2() {}

	function point(that, x, y) {
	  that._context.bezierCurveTo(
	    (2 * that._x0 + that._x1) / 3,
	    (2 * that._y0 + that._y1) / 3,
	    (that._x0 + 2 * that._x1) / 3,
	    (that._y0 + 2 * that._y1) / 3,
	    (that._x0 + 4 * that._x1 + x) / 6,
	    (that._y0 + 4 * that._y1 + y) / 6
	  );
	}

	function Basis(context) {
	  this._context = context;
	}

	Basis.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 3: point(this, this._x1, this._y1); // proceed
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	function basis(context) {
	  return new Basis(context);
	}

	function BasisClosed(context) {
	  this._context = context;
	}

	BasisClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x2, this._y2);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
	        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x2, this._y2);
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
	      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
	      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	function basisClosed(context) {
	  return new BasisClosed(context);
	}

	function BasisOpen(context) {
	  this._context = context;
	}

	BasisOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
	      case 3: this._point = 4; // proceed
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	function basisOpen(context) {
	  return new BasisOpen(context);
	}

	function Bundle(context, beta) {
	  this._basis = new Basis(context);
	  this._beta = beta;
	}

	Bundle.prototype = {
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	    this._basis.lineStart();
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        j = x.length - 1;

	    if (j > 0) {
	      var x0 = x[0],
	          y0 = y[0],
	          dx = x[j] - x0,
	          dy = y[j] - y0,
	          i = -1,
	          t;

	      while (++i <= j) {
	        t = i / j;
	        this._basis.point(
	          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
	          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
	        );
	      }
	    }

	    this._x = this._y = null;
	    this._basis.lineEnd();
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	var bundle = (function custom(beta) {

	  function bundle(context) {
	    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
	  }

	  bundle.beta = function(beta) {
	    return custom(+beta);
	  };

	  return bundle;
	})(0.85);

	function point$1(that, x, y) {
	  that._context.bezierCurveTo(
	    that._x1 + that._k * (that._x2 - that._x0),
	    that._y1 + that._k * (that._y2 - that._y0),
	    that._x2 + that._k * (that._x1 - x),
	    that._y2 + that._k * (that._y1 - y),
	    that._x2,
	    that._y2
	  );
	}

	function Cardinal(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	Cardinal.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: point$1(this, this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
	      case 2: this._point = 3; // proceed
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinal = (function custom(tension) {

	  function cardinal(context) {
	    return new Cardinal(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	})(0);

	function CardinalClosed(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	CardinalClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinalClosed = (function custom(tension) {

	  function cardinal$$1(context) {
	    return new CardinalClosed(context, tension);
	  }

	  cardinal$$1.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal$$1;
	})(0);

	function CardinalOpen(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	CardinalOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinalOpen = (function custom(tension) {

	  function cardinal$$1(context) {
	    return new CardinalOpen(context, tension);
	  }

	  cardinal$$1.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal$$1;
	})(0);

	function point$2(that, x, y) {
	  var x1 = that._x1,
	      y1 = that._y1,
	      x2 = that._x2,
	      y2 = that._y2;

	  if (that._l01_a > epsilon$1) {
	    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
	        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
	    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
	    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
	  }

	  if (that._l23_a > epsilon$1) {
	    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
	        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
	    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
	    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
	  }

	  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
	}

	function CatmullRom(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRom.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: this.point(this._x2, this._y2); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; // proceed
	      default: point$2(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRom = (function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	})(0.5);

	function CatmullRomClosed(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRomClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$2(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRomClosed = (function custom(alpha) {

	  function catmullRom$$1(context) {
	    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
	  }

	  catmullRom$$1.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom$$1;
	})(0.5);

	function CatmullRomOpen(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRomOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$2(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRomOpen = (function custom(alpha) {

	  function catmullRom$$1(context) {
	    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
	  }

	  catmullRom$$1.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom$$1;
	})(0.5);

	function LinearClosed(context) {
	  this._context = context;
	}

	LinearClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._point) this._context.closePath();
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    if (this._point) this._context.lineTo(x, y);
	    else this._point = 1, this._context.moveTo(x, y);
	  }
	};

	function linearClosed(context) {
	  return new LinearClosed(context);
	}

	function sign(x) {
	  return x < 0 ? -1 : 1;
	}

	// Calculate the slopes of the tangents (Hermite-type interpolation) based on
	// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
	// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
	// NOV(II), P. 443, 1990.
	function slope3(that, x2, y2) {
	  var h0 = that._x1 - that._x0,
	      h1 = x2 - that._x1,
	      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
	      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
	      p = (s0 * h1 + s1 * h0) / (h0 + h1);
	  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
	}

	// Calculate a one-sided slope.
	function slope2(that, t) {
	  var h = that._x1 - that._x0;
	  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
	}

	// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
	// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
	// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
	function point$3(that, t0, t1) {
	  var x0 = that._x0,
	      y0 = that._y0,
	      x1 = that._x1,
	      y1 = that._y1,
	      dx = (x1 - x0) / 3;
	  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
	}

	function MonotoneX(context) {
	  this._context = context;
	}

	MonotoneX.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 =
	    this._t0 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	      case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    var t1 = NaN;

	    x = +x, y = +y;
	    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
	      default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
	    }

	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	    this._t0 = t1;
	  }
	};

	function MonotoneY(context) {
	  this._context = new ReflectContext(context);
	}

	(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
	  MonotoneX.prototype.point.call(this, y, x);
	};

	function ReflectContext(context) {
	  this._context = context;
	}

	ReflectContext.prototype = {
	  moveTo: function(x, y) { this._context.moveTo(y, x); },
	  closePath: function() { this._context.closePath(); },
	  lineTo: function(x, y) { this._context.lineTo(y, x); },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
	};

	function monotoneX(context) {
	  return new MonotoneX(context);
	}

	function monotoneY(context) {
	  return new MonotoneY(context);
	}

	function Natural(context) {
	  this._context = context;
	}

	Natural.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        n = x.length;

	    if (n) {
	      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
	      if (n === 2) {
	        this._context.lineTo(x[1], y[1]);
	      } else {
	        var px = controlPoints(x),
	            py = controlPoints(y);
	        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
	          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
	        }
	      }
	    }

	    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	    this._x = this._y = null;
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
	function controlPoints(x) {
	  var i,
	      n = x.length - 1,
	      m,
	      a = new Array(n),
	      b = new Array(n),
	      r = new Array(n);
	  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
	  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
	  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
	  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
	  a[n - 1] = r[n - 1] / b[n - 1];
	  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
	  b[n - 1] = (x[n] + a[n - 1]) / 2;
	  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
	  return [a, b];
	}

	function natural(context) {
	  return new Natural(context);
	}

	function Step(context, t) {
	  this._context = context;
	  this._t = t;
	}

	Step.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = this._y = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: {
	        if (this._t <= 0) {
	          this._context.lineTo(this._x, y);
	          this._context.lineTo(x, y);
	        } else {
	          var x1 = this._x * (1 - this._t) + x * this._t;
	          this._context.lineTo(x1, this._y);
	          this._context.lineTo(x1, y);
	        }
	        break;
	      }
	    }
	    this._x = x, this._y = y;
	  }
	};

	function step(context) {
	  return new Step(context, 0.5);
	}

	function stepBefore(context) {
	  return new Step(context, 0);
	}

	function stepAfter(context) {
	  return new Step(context, 1);
	}

	function none(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
	    s0 = s1, s1 = series[order[i]];
	    for (j = 0; j < m; ++j) {
	      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
	    }
	  }
	}

	function none$1(series) {
	  var n = series.length, o = new Array(n);
	  while (--n >= 0) o[n] = n;
	  return o;
	}

	function stackValue(d, key) {
	  return d[key];
	}

	function stack() {
	  var keys = constant([]),
	      order = none$1,
	      offset = none,
	      value = stackValue;

	  function stack(data) {
	    var kz = keys.apply(this, arguments),
	        i,
	        m = data.length,
	        n = kz.length,
	        sz = new Array(n),
	        oz;

	    for (i = 0; i < n; ++i) {
	      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
	        si[j] = sij = [0, +value(data[j], ki, j, data)];
	        sij.data = data[j];
	      }
	      si.key = ki;
	    }

	    for (i = 0, oz = order(sz); i < n; ++i) {
	      sz[oz[i]].index = i;
	    }

	    offset(sz, oz);
	    return sz;
	  }

	  stack.keys = function(_) {
	    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(slice.call(_)), stack) : keys;
	  };

	  stack.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
	  };

	  stack.order = function(_) {
	    return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant(slice.call(_)), stack) : order;
	  };

	  stack.offset = function(_) {
	    return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
	  };

	  return stack;
	}

	function expand(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
	    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
	    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
	  }
	  none(series, order);
	}

	function diverging(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
	    for (yp = yn = 0, i = 0; i < n; ++i) {
	      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {
	        d[0] = yp, d[1] = yp += dy;
	      } else if (dy < 0) {
	        d[1] = yn, d[0] = yn += dy;
	      } else {
	        d[0] = yp;
	      }
	    }
	  }
	}

	function silhouette(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
	    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
	    s0[j][1] += s0[j][0] = -y / 2;
	  }
	  none(series, order);
	}

	function wiggle(series, order) {
	  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
	  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
	    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
	      var si = series[order[i]],
	          sij0 = si[j][1] || 0,
	          sij1 = si[j - 1][1] || 0,
	          s3 = (sij0 - sij1) / 2;
	      for (var k = 0; k < i; ++k) {
	        var sk = series[order[k]],
	            skj0 = sk[j][1] || 0,
	            skj1 = sk[j - 1][1] || 0;
	        s3 += skj0 - skj1;
	      }
	      s1 += sij0, s2 += s3 * sij0;
	    }
	    s0[j - 1][1] += s0[j - 1][0] = y;
	    if (s1) y -= s2 / s1;
	  }
	  s0[j - 1][1] += s0[j - 1][0] = y;
	  none(series, order);
	}

	function ascending(series) {
	  var sums = series.map(sum);
	  return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });
	}

	function sum(series) {
	  var s = 0, i = -1, n = series.length, v;
	  while (++i < n) if (v = +series[i][1]) s += v;
	  return s;
	}

	function descending$1(series) {
	  return ascending(series).reverse();
	}

	function insideOut(series) {
	  var n = series.length,
	      i,
	      j,
	      sums = series.map(sum),
	      order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),
	      top = 0,
	      bottom = 0,
	      tops = [],
	      bottoms = [];

	  for (i = 0; i < n; ++i) {
	    j = order[i];
	    if (top < bottom) {
	      top += sums[j];
	      tops.push(j);
	    } else {
	      bottom += sums[j];
	      bottoms.push(j);
	    }
	  }

	  return bottoms.reverse().concat(tops);
	}

	function reverse(series) {
	  return none$1(series).reverse();
	}



	var _d3Shape = /*#__PURE__*/Object.freeze({
		arc: arc,
		area: area,
		line: line,
		pie: pie,
		areaRadial: areaRadial,
		radialArea: areaRadial,
		lineRadial: lineRadial$1,
		radialLine: lineRadial$1,
		pointRadial: pointRadial,
		linkHorizontal: linkHorizontal,
		linkVertical: linkVertical,
		linkRadial: linkRadial,
		symbol: symbol$3,
		symbols: symbols,
		symbolCircle: circle,
		symbolCross: cross,
		symbolDiamond: diamond,
		symbolSquare: square,
		symbolStar: star,
		symbolTriangle: triangle,
		symbolWye: wye,
		curveBasisClosed: basisClosed,
		curveBasisOpen: basisOpen,
		curveBasis: basis,
		curveBundle: bundle,
		curveCardinalClosed: cardinalClosed,
		curveCardinalOpen: cardinalOpen,
		curveCardinal: cardinal,
		curveCatmullRomClosed: catmullRomClosed,
		curveCatmullRomOpen: catmullRomOpen,
		curveCatmullRom: catmullRom,
		curveLinearClosed: linearClosed,
		curveLinear: curveLinear,
		curveMonotoneX: monotoneX,
		curveMonotoneY: monotoneY,
		curveNatural: natural,
		curveStep: step,
		curveStepAfter: stepAfter,
		curveStepBefore: stepBefore,
		stack: stack,
		stackOffsetExpand: expand,
		stackOffsetDiverging: diverging,
		stackOffsetNone: none,
		stackOffsetSilhouette: silhouette,
		stackOffsetWiggle: wiggle,
		stackOrderAscending: ascending,
		stackOrderDescending: descending$1,
		stackOrderInsideOut: insideOut,
		stackOrderNone: none$1,
		stackOrderReverse: reverse
	});

	var merge = createCommonjsModule(function (module) {
	(function(isNode) {

		/**
		 * Merge one or more objects 
		 * @param bool? clone
		 * @param mixed,... arguments
		 * @return object
		 */

		var Public = function(clone) {

			return merge(clone === true, false, arguments);

		}, publicName = 'merge';

		/**
		 * Merge two or more objects recursively 
		 * @param bool? clone
		 * @param mixed,... arguments
		 * @return object
		 */

		Public.recursive = function(clone) {

			return merge(clone === true, true, arguments);

		};

		/**
		 * Clone the input removing any reference
		 * @param mixed input
		 * @return mixed
		 */

		Public.clone = function(input) {

			var output = input,
				type = typeOf(input),
				index, size;

			if (type === 'array') {

				output = [];
				size = input.length;

				for (index=0;index<size;++index)

					output[index] = Public.clone(input[index]);

			} else if (type === 'object') {

				output = {};

				for (index in input)

					output[index] = Public.clone(input[index]);

			}

			return output;

		};

		/**
		 * Merge two objects recursively
		 * @param mixed input
		 * @param mixed extend
		 * @return mixed
		 */

		function merge_recursive(base, extend) {

			if (typeOf(base) !== 'object')

				return extend;

			for (var key in extend) {

				if (typeOf(base[key]) === 'object' && typeOf(extend[key]) === 'object') {

					base[key] = merge_recursive(base[key], extend[key]);

				} else {

					base[key] = extend[key];

				}

			}

			return base;

		}

		/**
		 * Merge two or more objects
		 * @param bool clone
		 * @param bool recursive
		 * @param array argv
		 * @return object
		 */

		function merge(clone, recursive, argv) {

			var result = argv[0],
				size = argv.length;

			if (clone || typeOf(result) !== 'object')

				result = {};

			for (var index=0;index<size;++index) {

				var item = argv[index],

					type = typeOf(item);

				if (type !== 'object') continue;

				for (var key in item) {

					var sitem = clone ? Public.clone(item[key]) : item[key];

					if (recursive) {

						result[key] = merge_recursive(result[key], sitem);

					} else {

						result[key] = sitem;

					}

				}

			}

			return result;

		}

		/**
		 * Get type of variable
		 * @param mixed input
		 * @return string
		 *
		 * @see http://jsperf.com/typeofvar
		 */

		function typeOf(input) {

			return ({}).toString.call(input).slice(8, -1).toLowerCase();

		}

		if (isNode) {

			module.exports = Public;

		} else {

			window[publicName] = Public;

		}

	})('object' === 'object' && module && 'object' === 'object' && module.exports);
	});

	var core_getIterator = _core.getIterator = function (it) {
	  var iterFn = core_getIteratorMethod(it);
	  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
	  return _anObject(iterFn.call(it));
	};

	var getIterator = core_getIterator;

	var getIterator$1 = createCommonjsModule(function (module) {
	module.exports = { "default": getIterator, __esModule: true };
	});

	unwrapExports(getIterator$1);

	var immutable = createCommonjsModule(function (module, exports) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	(function (global, factory) {
	  module.exports = factory();
	}(commonjsGlobal, function () {var SLICE$0 = Array.prototype.slice;

	  function createClass(ctor, superClass) {
	    if (superClass) {
	      ctor.prototype = Object.create(superClass.prototype);
	    }
	    ctor.prototype.constructor = ctor;
	  }

	  function Iterable(value) {
	      return isIterable(value) ? value : Seq(value);
	    }


	  createClass(KeyedIterable, Iterable);
	    function KeyedIterable(value) {
	      return isKeyed(value) ? value : KeyedSeq(value);
	    }


	  createClass(IndexedIterable, Iterable);
	    function IndexedIterable(value) {
	      return isIndexed(value) ? value : IndexedSeq(value);
	    }


	  createClass(SetIterable, Iterable);
	    function SetIterable(value) {
	      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
	    }



	  function isIterable(maybeIterable) {
	    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
	  }

	  function isKeyed(maybeKeyed) {
	    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
	  }

	  function isIndexed(maybeIndexed) {
	    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
	  }

	  function isAssociative(maybeAssociative) {
	    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
	  }

	  function isOrdered(maybeOrdered) {
	    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
	  }

	  Iterable.isIterable = isIterable;
	  Iterable.isKeyed = isKeyed;
	  Iterable.isIndexed = isIndexed;
	  Iterable.isAssociative = isAssociative;
	  Iterable.isOrdered = isOrdered;

	  Iterable.Keyed = KeyedIterable;
	  Iterable.Indexed = IndexedIterable;
	  Iterable.Set = SetIterable;


	  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  // Used for setting prototype methods that IE8 chokes on.
	  var DELETE = 'delete';

	  // Constants describing the size of trie nodes.
	  var SHIFT = 5; // Resulted in best performance after ______?
	  var SIZE = 1 << SHIFT;
	  var MASK = SIZE - 1;

	  // A consistent shared value representing "not set" which equals nothing other
	  // than itself, and nothing that could be provided externally.
	  var NOT_SET = {};

	  // Boolean references, Rough equivalent of `bool &`.
	  var CHANGE_LENGTH = { value: false };
	  var DID_ALTER = { value: false };

	  function MakeRef(ref) {
	    ref.value = false;
	    return ref;
	  }

	  function SetRef(ref) {
	    ref && (ref.value = true);
	  }

	  // A function which returns a value representing an "owner" for transient writes
	  // to tries. The return value will only ever equal itself, and will not equal
	  // the return of any subsequent call of this function.
	  function OwnerID() {}

	  // http://jsperf.com/copy-array-inline
	  function arrCopy(arr, offset) {
	    offset = offset || 0;
	    var len = Math.max(0, arr.length - offset);
	    var newArr = new Array(len);
	    for (var ii = 0; ii < len; ii++) {
	      newArr[ii] = arr[ii + offset];
	    }
	    return newArr;
	  }

	  function ensureSize(iter) {
	    if (iter.size === undefined) {
	      iter.size = iter.__iterate(returnTrue);
	    }
	    return iter.size;
	  }

	  function wrapIndex(iter, index) {
	    // This implements "is array index" which the ECMAString spec defines as:
	    //
	    //     A String property name P is an array index if and only if
	    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal
	    //     to 2^32−1.
	    //
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects
	    if (typeof index !== 'number') {
	      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32
	      if ('' + uint32Index !== index || uint32Index === 4294967295) {
	        return NaN;
	      }
	      index = uint32Index;
	    }
	    return index < 0 ? ensureSize(iter) + index : index;
	  }

	  function returnTrue() {
	    return true;
	  }

	  function wholeSlice(begin, end, size) {
	    return (begin === 0 || (size !== undefined && begin <= -size)) &&
	      (end === undefined || (size !== undefined && end >= size));
	  }

	  function resolveBegin(begin, size) {
	    return resolveIndex(begin, size, 0);
	  }

	  function resolveEnd(end, size) {
	    return resolveIndex(end, size, size);
	  }

	  function resolveIndex(index, size, defaultIndex) {
	    return index === undefined ?
	      defaultIndex :
	      index < 0 ?
	        Math.max(0, size + index) :
	        size === undefined ?
	          index :
	          Math.min(size, index);
	  }

	  /* global Symbol */

	  var ITERATE_KEYS = 0;
	  var ITERATE_VALUES = 1;
	  var ITERATE_ENTRIES = 2;

	  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator';

	  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;


	  function Iterator(next) {
	      this.next = next;
	    }

	    Iterator.prototype.toString = function() {
	      return '[Iterator]';
	    };


	  Iterator.KEYS = ITERATE_KEYS;
	  Iterator.VALUES = ITERATE_VALUES;
	  Iterator.ENTRIES = ITERATE_ENTRIES;

	  Iterator.prototype.inspect =
	  Iterator.prototype.toSource = function () { return this.toString(); };
	  Iterator.prototype[ITERATOR_SYMBOL] = function () {
	    return this;
	  };


	  function iteratorValue(type, k, v, iteratorResult) {
	    var value = type === 0 ? k : type === 1 ? v : [k, v];
	    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {
	      value: value, done: false
	    });
	    return iteratorResult;
	  }

	  function iteratorDone() {
	    return { value: undefined, done: true };
	  }

	  function hasIterator(maybeIterable) {
	    return !!getIteratorFn(maybeIterable);
	  }

	  function isIterator(maybeIterator) {
	    return maybeIterator && typeof maybeIterator.next === 'function';
	  }

	  function getIterator(iterable) {
	    var iteratorFn = getIteratorFn(iterable);
	    return iteratorFn && iteratorFn.call(iterable);
	  }

	  function getIteratorFn(iterable) {
	    var iteratorFn = iterable && (
	      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||
	      iterable[FAUX_ITERATOR_SYMBOL]
	    );
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  function isArrayLike(value) {
	    return value && typeof value.length === 'number';
	  }

	  createClass(Seq, Iterable);
	    function Seq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        isIterable(value) ? value.toSeq() : seqFromValue(value);
	    }

	    Seq.of = function(/*...values*/) {
	      return Seq(arguments);
	    };

	    Seq.prototype.toSeq = function() {
	      return this;
	    };

	    Seq.prototype.toString = function() {
	      return this.__toString('Seq {', '}');
	    };

	    Seq.prototype.cacheResult = function() {
	      if (!this._cache && this.__iterateUncached) {
	        this._cache = this.entrySeq().toArray();
	        this.size = this._cache.length;
	      }
	      return this;
	    };

	    // abstract __iterateUncached(fn, reverse)

	    Seq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, true);
	    };

	    // abstract __iteratorUncached(type, reverse)

	    Seq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, true);
	    };



	  createClass(KeyedSeq, Seq);
	    function KeyedSeq(value) {
	      return value === null || value === undefined ?
	        emptySequence().toKeyedSeq() :
	        isIterable(value) ?
	          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :
	          keyedSeqFromValue(value);
	    }

	    KeyedSeq.prototype.toKeyedSeq = function() {
	      return this;
	    };



	  createClass(IndexedSeq, Seq);
	    function IndexedSeq(value) {
	      return value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
	    }

	    IndexedSeq.of = function(/*...values*/) {
	      return IndexedSeq(arguments);
	    };

	    IndexedSeq.prototype.toIndexedSeq = function() {
	      return this;
	    };

	    IndexedSeq.prototype.toString = function() {
	      return this.__toString('Seq [', ']');
	    };

	    IndexedSeq.prototype.__iterate = function(fn, reverse) {
	      return seqIterate(this, fn, reverse, false);
	    };

	    IndexedSeq.prototype.__iterator = function(type, reverse) {
	      return seqIterator(this, type, reverse, false);
	    };



	  createClass(SetSeq, Seq);
	    function SetSeq(value) {
	      return (
	        value === null || value === undefined ? emptySequence() :
	        !isIterable(value) ? indexedSeqFromValue(value) :
	        isKeyed(value) ? value.entrySeq() : value
	      ).toSetSeq();
	    }

	    SetSeq.of = function(/*...values*/) {
	      return SetSeq(arguments);
	    };

	    SetSeq.prototype.toSetSeq = function() {
	      return this;
	    };



	  Seq.isSeq = isSeq;
	  Seq.Keyed = KeyedSeq;
	  Seq.Set = SetSeq;
	  Seq.Indexed = IndexedSeq;

	  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

	  Seq.prototype[IS_SEQ_SENTINEL] = true;



	  createClass(ArraySeq, IndexedSeq);
	    function ArraySeq(array) {
	      this._array = array;
	      this.size = array.length;
	    }

	    ArraySeq.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
	    };

	    ArraySeq.prototype.__iterate = function(fn, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ArraySeq.prototype.__iterator = function(type, reverse) {
	      var array = this._array;
	      var maxIndex = array.length - 1;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}
	      );
	    };



	  createClass(ObjectSeq, KeyedSeq);
	    function ObjectSeq(object) {
	      var keys = Object.keys(object);
	      this._object = object;
	      this._keys = keys;
	      this.size = keys.length;
	    }

	    ObjectSeq.prototype.get = function(key, notSetValue) {
	      if (notSetValue !== undefined && !this.has(key)) {
	        return notSetValue;
	      }
	      return this._object[key];
	    };

	    ObjectSeq.prototype.has = function(key) {
	      return this._object.hasOwnProperty(key);
	    };

	    ObjectSeq.prototype.__iterate = function(fn, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        if (fn(object[key], key, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    ObjectSeq.prototype.__iterator = function(type, reverse) {
	      var object = this._object;
	      var keys = this._keys;
	      var maxIndex = keys.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var key = keys[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, key, object[key]);
	      });
	    };

	  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(IterableSeq, IndexedSeq);
	    function IterableSeq(iterable) {
	      this._iterable = iterable;
	      this.size = iterable.length || iterable.size;
	    }

	    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      var iterations = 0;
	      if (isIterator(iterator)) {
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (fn(step.value, iterations++, this) === false) {
	            break;
	          }
	        }
	      }
	      return iterations;
	    };

	    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterable = this._iterable;
	      var iterator = getIterator(iterable);
	      if (!isIterator(iterator)) {
	        return new Iterator(iteratorDone);
	      }
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step : iteratorValue(type, iterations++, step.value);
	      });
	    };



	  createClass(IteratorSeq, IndexedSeq);
	    function IteratorSeq(iterator) {
	      this._iterator = iterator;
	      this._iteratorCache = [];
	    }

	    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      while (iterations < cache.length) {
	        if (fn(cache[iterations], iterations++, this) === false) {
	          return iterations;
	        }
	      }
	      var step;
	      while (!(step = iterator.next()).done) {
	        var val = step.value;
	        cache[iterations] = val;
	        if (fn(val, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };

	    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = this._iterator;
	      var cache = this._iteratorCache;
	      var iterations = 0;
	      return new Iterator(function()  {
	        if (iterations >= cache.length) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          cache[iterations] = step.value;
	        }
	        return iteratorValue(type, iterations, cache[iterations++]);
	      });
	    };




	  // # pragma Helper functions

	  function isSeq(maybeSeq) {
	    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
	  }

	  var EMPTY_SEQ;

	  function emptySequence() {
	    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
	  }

	  function keyedSeqFromValue(value) {
	    var seq =
	      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :
	      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :
	      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :
	      typeof value === 'object' ? new ObjectSeq(value) :
	      undefined;
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of [k, v] entries, '+
	        'or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function indexedSeqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value);
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values: ' + value
	      );
	    }
	    return seq;
	  }

	  function seqFromValue(value) {
	    var seq = maybeIndexedSeqFromValue(value) ||
	      (typeof value === 'object' && new ObjectSeq(value));
	    if (!seq) {
	      throw new TypeError(
	        'Expected Array or iterable object of values, or keyed object: ' + value
	      );
	    }
	    return seq;
	  }

	  function maybeIndexedSeqFromValue(value) {
	    return (
	      isArrayLike(value) ? new ArraySeq(value) :
	      isIterator(value) ? new IteratorSeq(value) :
	      hasIterator(value) ? new IterableSeq(value) :
	      undefined
	    );
	  }

	  function seqIterate(seq, fn, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    }
	    return seq.__iterateUncached(fn, reverse);
	  }

	  function seqIterator(seq, type, reverse, useKeys) {
	    var cache = seq._cache;
	    if (cache) {
	      var maxIndex = cache.length - 1;
	      var ii = 0;
	      return new Iterator(function()  {
	        var entry = cache[reverse ? maxIndex - ii : ii];
	        return ii++ > maxIndex ?
	          iteratorDone() :
	          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
	      });
	    }
	    return seq.__iteratorUncached(type, reverse);
	  }

	  function fromJS(json, converter) {
	    return converter ?
	      fromJSWith(converter, json, '', {'': json}) :
	      fromJSDefault(json);
	  }

	  function fromJSWith(converter, json, key, parentJSON) {
	    if (Array.isArray(json)) {
	      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    if (isPlainObj(json)) {
	      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));
	    }
	    return json;
	  }

	  function fromJSDefault(json) {
	    if (Array.isArray(json)) {
	      return IndexedSeq(json).map(fromJSDefault).toList();
	    }
	    if (isPlainObj(json)) {
	      return KeyedSeq(json).map(fromJSDefault).toMap();
	    }
	    return json;
	  }

	  function isPlainObj(value) {
	    return value && (value.constructor === Object || value.constructor === undefined);
	  }

	  /**
	   * An extension of the "same-value" algorithm as [described for use by ES6 Map
	   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
	   *
	   * NaN is considered the same as NaN, however -0 and 0 are considered the same
	   * value, which is different from the algorithm described by
	   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
	   *
	   * This is extended further to allow Objects to describe the values they
	   * represent, by way of `valueOf` or `equals` (and `hashCode`).
	   *
	   * Note: because of this extension, the key equality of Immutable.Map and the
	   * value equality of Immutable.Set will differ from ES6 Map and Set.
	   *
	   * ### Defining custom values
	   *
	   * The easiest way to describe the value an object represents is by implementing
	   * `valueOf`. For example, `Date` represents a value by returning a unix
	   * timestamp for `valueOf`:
	   *
	   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
	   *     var date2 = new Date(1234567890000);
	   *     date1.valueOf(); // 1234567890000
	   *     assert( date1 !== date2 );
	   *     assert( Immutable.is( date1, date2 ) );
	   *
	   * Note: overriding `valueOf` may have other implications if you use this object
	   * where JavaScript expects a primitive, such as implicit string coercion.
	   *
	   * For more complex types, especially collections, implementing `valueOf` may
	   * not be performant. An alternative is to implement `equals` and `hashCode`.
	   *
	   * `equals` takes another object, presumably of similar type, and returns true
	   * if the it is equal. Equality is symmetrical, so the same result should be
	   * returned if this and the argument are flipped.
	   *
	   *     assert( a.equals(b) === b.equals(a) );
	   *
	   * `hashCode` returns a 32bit integer number representing the object which will
	   * be used to determine how to store the value object in a Map or Set. You must
	   * provide both or neither methods, one must not exist without the other.
	   *
	   * Also, an important relationship between these methods must be upheld: if two
	   * values are equal, they *must* return the same hashCode. If the values are not
	   * equal, they might have the same hashCode; this is called a hash collision,
	   * and while undesirable for performance reasons, it is acceptable.
	   *
	   *     if (a.equals(b)) {
	   *       assert( a.hashCode() === b.hashCode() );
	   *     }
	   *
	   * All Immutable collections implement `equals` and `hashCode`.
	   *
	   */
	  function is(valueA, valueB) {
	    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	      return true;
	    }
	    if (!valueA || !valueB) {
	      return false;
	    }
	    if (typeof valueA.valueOf === 'function' &&
	        typeof valueB.valueOf === 'function') {
	      valueA = valueA.valueOf();
	      valueB = valueB.valueOf();
	      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {
	        return true;
	      }
	      if (!valueA || !valueB) {
	        return false;
	      }
	    }
	    if (typeof valueA.equals === 'function' &&
	        typeof valueB.equals === 'function' &&
	        valueA.equals(valueB)) {
	      return true;
	    }
	    return false;
	  }

	  function deepEqual(a, b) {
	    if (a === b) {
	      return true;
	    }

	    if (
	      !isIterable(b) ||
	      a.size !== undefined && b.size !== undefined && a.size !== b.size ||
	      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||
	      isKeyed(a) !== isKeyed(b) ||
	      isIndexed(a) !== isIndexed(b) ||
	      isOrdered(a) !== isOrdered(b)
	    ) {
	      return false;
	    }

	    if (a.size === 0 && b.size === 0) {
	      return true;
	    }

	    var notAssociative = !isAssociative(a);

	    if (isOrdered(a)) {
	      var entries = a.entries();
	      return b.every(function(v, k)  {
	        var entry = entries.next().value;
	        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
	      }) && entries.next().done;
	    }

	    var flipped = false;

	    if (a.size === undefined) {
	      if (b.size === undefined) {
	        if (typeof a.cacheResult === 'function') {
	          a.cacheResult();
	        }
	      } else {
	        flipped = true;
	        var _ = a;
	        a = b;
	        b = _;
	      }
	    }

	    var allEqual = true;
	    var bSize = b.__iterate(function(v, k)  {
	      if (notAssociative ? !a.has(v) :
	          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
	        allEqual = false;
	        return false;
	      }
	    });

	    return allEqual && a.size === bSize;
	  }

	  createClass(Repeat, IndexedSeq);

	    function Repeat(value, times) {
	      if (!(this instanceof Repeat)) {
	        return new Repeat(value, times);
	      }
	      this._value = value;
	      this.size = times === undefined ? Infinity : Math.max(0, times);
	      if (this.size === 0) {
	        if (EMPTY_REPEAT) {
	          return EMPTY_REPEAT;
	        }
	        EMPTY_REPEAT = this;
	      }
	    }

	    Repeat.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Repeat []';
	      }
	      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
	    };

	    Repeat.prototype.get = function(index, notSetValue) {
	      return this.has(index) ? this._value : notSetValue;
	    };

	    Repeat.prototype.includes = function(searchValue) {
	      return is(this._value, searchValue);
	    };

	    Repeat.prototype.slice = function(begin, end) {
	      var size = this.size;
	      return wholeSlice(begin, end, size) ? this :
	        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
	    };

	    Repeat.prototype.reverse = function() {
	      return this;
	    };

	    Repeat.prototype.indexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return 0;
	      }
	      return -1;
	    };

	    Repeat.prototype.lastIndexOf = function(searchValue) {
	      if (is(this._value, searchValue)) {
	        return this.size;
	      }
	      return -1;
	    };

	    Repeat.prototype.__iterate = function(fn, reverse) {
	      for (var ii = 0; ii < this.size; ii++) {
	        if (fn(this._value, ii, this) === false) {
	          return ii + 1;
	        }
	      }
	      return ii;
	    };

	    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      var ii = 0;
	      return new Iterator(function() 
	        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}
	      );
	    };

	    Repeat.prototype.equals = function(other) {
	      return other instanceof Repeat ?
	        is(this._value, other._value) :
	        deepEqual(other);
	    };


	  var EMPTY_REPEAT;

	  function invariant(condition, error) {
	    if (!condition) throw new Error(error);
	  }

	  createClass(Range, IndexedSeq);

	    function Range(start, end, step) {
	      if (!(this instanceof Range)) {
	        return new Range(start, end, step);
	      }
	      invariant(step !== 0, 'Cannot step a Range by 0');
	      start = start || 0;
	      if (end === undefined) {
	        end = Infinity;
	      }
	      step = step === undefined ? 1 : Math.abs(step);
	      if (end < start) {
	        step = -step;
	      }
	      this._start = start;
	      this._end = end;
	      this._step = step;
	      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
	      if (this.size === 0) {
	        if (EMPTY_RANGE) {
	          return EMPTY_RANGE;
	        }
	        EMPTY_RANGE = this;
	      }
	    }

	    Range.prototype.toString = function() {
	      if (this.size === 0) {
	        return 'Range []';
	      }
	      return 'Range [ ' +
	        this._start + '...' + this._end +
	        (this._step !== 1 ? ' by ' + this._step : '') +
	      ' ]';
	    };

	    Range.prototype.get = function(index, notSetValue) {
	      return this.has(index) ?
	        this._start + wrapIndex(this, index) * this._step :
	        notSetValue;
	    };

	    Range.prototype.includes = function(searchValue) {
	      var possibleIndex = (searchValue - this._start) / this._step;
	      return possibleIndex >= 0 &&
	        possibleIndex < this.size &&
	        possibleIndex === Math.floor(possibleIndex);
	    };

	    Range.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      begin = resolveBegin(begin, this.size);
	      end = resolveEnd(end, this.size);
	      if (end <= begin) {
	        return new Range(0, 0);
	      }
	      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
	    };

	    Range.prototype.indexOf = function(searchValue) {
	      var offsetValue = searchValue - this._start;
	      if (offsetValue % this._step === 0) {
	        var index = offsetValue / this._step;
	        if (index >= 0 && index < this.size) {
	          return index
	        }
	      }
	      return -1;
	    };

	    Range.prototype.lastIndexOf = function(searchValue) {
	      return this.indexOf(searchValue);
	    };

	    Range.prototype.__iterate = function(fn, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      for (var ii = 0; ii <= maxIndex; ii++) {
	        if (fn(value, ii, this) === false) {
	          return ii + 1;
	        }
	        value += reverse ? -step : step;
	      }
	      return ii;
	    };

	    Range.prototype.__iterator = function(type, reverse) {
	      var maxIndex = this.size - 1;
	      var step = this._step;
	      var value = reverse ? this._start + maxIndex * step : this._start;
	      var ii = 0;
	      return new Iterator(function()  {
	        var v = value;
	        value += reverse ? -step : step;
	        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
	      });
	    };

	    Range.prototype.equals = function(other) {
	      return other instanceof Range ?
	        this._start === other._start &&
	        this._end === other._end &&
	        this._step === other._step :
	        deepEqual(this, other);
	    };


	  var EMPTY_RANGE;

	  createClass(Collection, Iterable);
	    function Collection() {
	      throw TypeError('Abstract');
	    }


	  createClass(KeyedCollection, Collection);function KeyedCollection() {}

	  createClass(IndexedCollection, Collection);function IndexedCollection() {}

	  createClass(SetCollection, Collection);function SetCollection() {}


	  Collection.Keyed = KeyedCollection;
	  Collection.Indexed = IndexedCollection;
	  Collection.Set = SetCollection;

	  var imul =
	    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?
	    Math.imul :
	    function imul(a, b) {
	      a = a | 0; // int
	      b = b | 0; // int
	      var c = a & 0xffff;
	      var d = b & 0xffff;
	      // Shift by 0 fixes the sign on the high part.
	      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int
	    };

	  // v8 has an optimization for storing 31-bit signed numbers.
	  // Values which have either 00 or 11 as the high order bits qualify.
	  // This function drops the highest order bit in a signed number, maintaining
	  // the sign bit.
	  function smi(i32) {
	    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);
	  }

	  function hash(o) {
	    if (o === false || o === null || o === undefined) {
	      return 0;
	    }
	    if (typeof o.valueOf === 'function') {
	      o = o.valueOf();
	      if (o === false || o === null || o === undefined) {
	        return 0;
	      }
	    }
	    if (o === true) {
	      return 1;
	    }
	    var type = typeof o;
	    if (type === 'number') {
	      if (o !== o || o === Infinity) {
	        return 0;
	      }
	      var h = o | 0;
	      if (h !== o) {
	        h ^= o * 0xFFFFFFFF;
	      }
	      while (o > 0xFFFFFFFF) {
	        o /= 0xFFFFFFFF;
	        h ^= o;
	      }
	      return smi(h);
	    }
	    if (type === 'string') {
	      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
	    }
	    if (typeof o.hashCode === 'function') {
	      return o.hashCode();
	    }
	    if (type === 'object') {
	      return hashJSObj(o);
	    }
	    if (typeof o.toString === 'function') {
	      return hashString(o.toString());
	    }
	    throw new Error('Value type ' + type + ' cannot be hashed.');
	  }

	  function cachedHashString(string) {
	    var hash = stringHashCache[string];
	    if (hash === undefined) {
	      hash = hashString(string);
	      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
	        STRING_HASH_CACHE_SIZE = 0;
	        stringHashCache = {};
	      }
	      STRING_HASH_CACHE_SIZE++;
	      stringHashCache[string] = hash;
	    }
	    return hash;
	  }

	  // http://jsperf.com/hashing-strings
	  function hashString(string) {
	    // This is the hash from JVM
	    // The hash code for a string is computed as
	    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	    // where s[i] is the ith character of the string and n is the length of
	    // the string. We "mod" the result to make it between 0 (inclusive) and 2^31
	    // (exclusive) by dropping high bits.
	    var hash = 0;
	    for (var ii = 0; ii < string.length; ii++) {
	      hash = 31 * hash + string.charCodeAt(ii) | 0;
	    }
	    return smi(hash);
	  }

	  function hashJSObj(obj) {
	    var hash;
	    if (usingWeakMap) {
	      hash = weakMap.get(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }

	    hash = obj[UID_HASH_KEY];
	    if (hash !== undefined) {
	      return hash;
	    }

	    if (!canDefineProperty) {
	      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
	      if (hash !== undefined) {
	        return hash;
	      }

	      hash = getIENodeHash(obj);
	      if (hash !== undefined) {
	        return hash;
	      }
	    }

	    hash = ++objHashUID;
	    if (objHashUID & 0x40000000) {
	      objHashUID = 0;
	    }

	    if (usingWeakMap) {
	      weakMap.set(obj, hash);
	    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
	      throw new Error('Non-extensible objects are not allowed as keys.');
	    } else if (canDefineProperty) {
	      Object.defineProperty(obj, UID_HASH_KEY, {
	        'enumerable': false,
	        'configurable': false,
	        'writable': false,
	        'value': hash
	      });
	    } else if (obj.propertyIsEnumerable !== undefined &&
	               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
	      // Since we can't define a non-enumerable property on the object
	      // we'll hijack one of the less-used non-enumerable properties to
	      // save our hash on it. Since this is a function it will not show up in
	      // `JSON.stringify` which is what we want.
	      obj.propertyIsEnumerable = function() {
	        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
	      };
	      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
	    } else if (obj.nodeType !== undefined) {
	      // At this point we couldn't get the IE `uniqueID` to use as a hash
	      // and we couldn't use a non-enumerable property to exploit the
	      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node
	      // itself.
	      obj[UID_HASH_KEY] = hash;
	    } else {
	      throw new Error('Unable to set a non-enumerable property on object.');
	    }

	    return hash;
	  }

	  // Get references to ES5 object methods.
	  var isExtensible = Object.isExtensible;

	  // True if Object.defineProperty works as expected. IE8 fails this test.
	  var canDefineProperty = (function() {
	    try {
	      Object.defineProperty({}, '@', {});
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }());

	  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it
	  // and avoid memory leaks from the IE cloneNode bug.
	  function getIENodeHash(node) {
	    if (node && node.nodeType > 0) {
	      switch (node.nodeType) {
	        case 1: // Element
	          return node.uniqueID;
	        case 9: // Document
	          return node.documentElement && node.documentElement.uniqueID;
	      }
	    }
	  }

	  // If possible, use a WeakMap.
	  var usingWeakMap = typeof WeakMap === 'function';
	  var weakMap;
	  if (usingWeakMap) {
	    weakMap = new WeakMap();
	  }

	  var objHashUID = 0;

	  var UID_HASH_KEY = '__immutablehash__';
	  if (typeof Symbol === 'function') {
	    UID_HASH_KEY = Symbol(UID_HASH_KEY);
	  }

	  var STRING_HASH_CACHE_MIN_STRLEN = 16;
	  var STRING_HASH_CACHE_MAX_SIZE = 255;
	  var STRING_HASH_CACHE_SIZE = 0;
	  var stringHashCache = {};

	  function assertNotInfinite(size) {
	    invariant(
	      size !== Infinity,
	      'Cannot perform this action with an infinite size.'
	    );
	  }

	  createClass(Map, KeyedCollection);

	    // @pragma Construction

	    function Map(value) {
	      return value === null || value === undefined ? emptyMap() :
	        isMap(value) && !isOrdered(value) ? value :
	        emptyMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);
	      return emptyMap().withMutations(function(map ) {
	        for (var i = 0; i < keyValues.length; i += 2) {
	          if (i + 1 >= keyValues.length) {
	            throw new Error('Missing value for key: ' + keyValues[i]);
	          }
	          map.set(keyValues[i], keyValues[i + 1]);
	        }
	      });
	    };

	    Map.prototype.toString = function() {
	      return this.__toString('Map {', '}');
	    };

	    // @pragma Access

	    Map.prototype.get = function(k, notSetValue) {
	      return this._root ?
	        this._root.get(0, undefined, k, notSetValue) :
	        notSetValue;
	    };

	    // @pragma Modification

	    Map.prototype.set = function(k, v) {
	      return updateMap(this, k, v);
	    };

	    Map.prototype.setIn = function(keyPath, v) {
	      return this.updateIn(keyPath, NOT_SET, function()  {return v});
	    };

	    Map.prototype.remove = function(k) {
	      return updateMap(this, k, NOT_SET);
	    };

	    Map.prototype.deleteIn = function(keyPath) {
	      return this.updateIn(keyPath, function()  {return NOT_SET});
	    };

	    Map.prototype.update = function(k, notSetValue, updater) {
	      return arguments.length === 1 ?
	        k(this) :
	        this.updateIn([k], notSetValue, updater);
	    };

	    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {
	      if (!updater) {
	        updater = notSetValue;
	        notSetValue = undefined;
	      }
	      var updatedValue = updateInDeepMap(
	        this,
	        forceIterator(keyPath),
	        notSetValue,
	        updater
	      );
	      return updatedValue === NOT_SET ? undefined : updatedValue;
	    };

	    Map.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._root = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyMap();
	    };

	    // @pragma Composition

	    Map.prototype.merge = function(/*...iters*/) {
	      return mergeIntoMapWith(this, undefined, arguments);
	    };

	    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, merger, iters);
	    };

	    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.merge === 'function' ?
	          m.merge.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };

	    Map.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoMapWith(this, deepMerger, arguments);
	    };

	    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoMapWith(this, deepMergerWith(merger), iters);
	    };

	    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);
	      return this.updateIn(
	        keyPath,
	        emptyMap(),
	        function(m ) {return typeof m.mergeDeep === 'function' ?
	          m.mergeDeep.apply(m, iters) :
	          iters[iters.length - 1]}
	      );
	    };

	    Map.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator));
	    };

	    Map.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedMap(sortFactory(this, comparator, mapper));
	    };

	    // @pragma Mutability

	    Map.prototype.withMutations = function(fn) {
	      var mutable = this.asMutable();
	      fn(mutable);
	      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
	    };

	    Map.prototype.asMutable = function() {
	      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
	    };

	    Map.prototype.asImmutable = function() {
	      return this.__ensureOwner();
	    };

	    Map.prototype.wasAltered = function() {
	      return this.__altered;
	    };

	    Map.prototype.__iterator = function(type, reverse) {
	      return new MapIterator(this, type, reverse);
	    };

	    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      this._root && this._root.iterate(function(entry ) {
	        iterations++;
	        return fn(entry[1], entry[0], this$0);
	      }, reverse);
	      return iterations;
	    };

	    Map.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeMap(this.size, this._root, ownerID, this.__hash);
	    };


	  function isMap(maybeMap) {
	    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
	  }

	  Map.isMap = isMap;

	  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

	  var MapPrototype = Map.prototype;
	  MapPrototype[IS_MAP_SENTINEL] = true;
	  MapPrototype[DELETE] = MapPrototype.remove;
	  MapPrototype.removeIn = MapPrototype.deleteIn;


	  // #pragma Trie Nodes



	    function ArrayMapNode(ownerID, entries) {
	      this.ownerID = ownerID;
	      this.entries = entries;
	    }

	    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && entries.length === 1) {
	        return; // undefined
	      }

	      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
	        return createNodes(ownerID, entries, key, value);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new ArrayMapNode(ownerID, newEntries);
	    };




	    function BitmapIndexedNode(ownerID, bitmap, nodes) {
	      this.ownerID = ownerID;
	      this.bitmap = bitmap;
	      this.nodes = nodes;
	    }

	    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));
	      var bitmap = this.bitmap;
	      return (bitmap & bit) === 0 ? notSetValue :
	        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);
	    };

	    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var bit = 1 << keyHashFrag;
	      var bitmap = this.bitmap;
	      var exists = (bitmap & bit) !== 0;

	      if (!exists && value === NOT_SET) {
	        return this;
	      }

	      var idx = popCount(bitmap & (bit - 1));
	      var nodes = this.nodes;
	      var node = exists ? nodes[idx] : undefined;
	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

	      if (newNode === node) {
	        return this;
	      }

	      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
	        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
	      }

	      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
	        return nodes[idx ^ 1];
	      }

	      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
	        return newNode;
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
	      var newNodes = exists ? newNode ?
	        setIn(nodes, idx, newNode, isEditable) :
	        spliceOut(nodes, idx, isEditable) :
	        spliceIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.bitmap = newBitmap;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
	    };




	    function HashArrayMapNode(ownerID, count, nodes) {
	      this.ownerID = ownerID;
	      this.count = count;
	      this.nodes = nodes;
	    }

	    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var node = this.nodes[idx];
	      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
	    };

	    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }
	      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
	      var removed = value === NOT_SET;
	      var nodes = this.nodes;
	      var node = nodes[idx];

	      if (removed && !node) {
	        return this;
	      }

	      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
	      if (newNode === node) {
	        return this;
	      }

	      var newCount = this.count;
	      if (!node) {
	        newCount++;
	      } else if (!newNode) {
	        newCount--;
	        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
	          return packNodes(ownerID, nodes, newCount, idx);
	        }
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newNodes = setIn(nodes, idx, newNode, isEditable);

	      if (isEditable) {
	        this.count = newCount;
	        this.nodes = newNodes;
	        return this;
	      }

	      return new HashArrayMapNode(ownerID, newCount, newNodes);
	    };




	    function HashCollisionNode(ownerID, keyHash, entries) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entries = entries;
	    }

	    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      var entries = this.entries;
	      for (var ii = 0, len = entries.length; ii < len; ii++) {
	        if (is(key, entries[ii][0])) {
	          return entries[ii][1];
	        }
	      }
	      return notSetValue;
	    };

	    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      if (keyHash === undefined) {
	        keyHash = hash(key);
	      }

	      var removed = value === NOT_SET;

	      if (keyHash !== this.keyHash) {
	        if (removed) {
	          return this;
	        }
	        SetRef(didAlter);
	        SetRef(didChangeSize);
	        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
	      }

	      var entries = this.entries;
	      var idx = 0;
	      for (var len = entries.length; idx < len; idx++) {
	        if (is(key, entries[idx][0])) {
	          break;
	        }
	      }
	      var exists = idx < len;

	      if (exists ? entries[idx][1] === value : removed) {
	        return this;
	      }

	      SetRef(didAlter);
	      (removed || !exists) && SetRef(didChangeSize);

	      if (removed && len === 2) {
	        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
	      }

	      var isEditable = ownerID && ownerID === this.ownerID;
	      var newEntries = isEditable ? entries : arrCopy(entries);

	      if (exists) {
	        if (removed) {
	          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());
	        } else {
	          newEntries[idx] = [key, value];
	        }
	      } else {
	        newEntries.push([key, value]);
	      }

	      if (isEditable) {
	        this.entries = newEntries;
	        return this;
	      }

	      return new HashCollisionNode(ownerID, this.keyHash, newEntries);
	    };




	    function ValueNode(ownerID, keyHash, entry) {
	      this.ownerID = ownerID;
	      this.keyHash = keyHash;
	      this.entry = entry;
	    }

	    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {
	      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
	    };

	    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	      var removed = value === NOT_SET;
	      var keyMatch = is(key, this.entry[0]);
	      if (keyMatch ? value === this.entry[1] : removed) {
	        return this;
	      }

	      SetRef(didAlter);

	      if (removed) {
	        SetRef(didChangeSize);
	        return; // undefined
	      }

	      if (keyMatch) {
	        if (ownerID && ownerID === this.ownerID) {
	          this.entry[1] = value;
	          return this;
	        }
	        return new ValueNode(ownerID, this.keyHash, [key, value]);
	      }

	      SetRef(didChangeSize);
	      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
	    };



	  // #pragma Iterators

	  ArrayMapNode.prototype.iterate =
	  HashCollisionNode.prototype.iterate = function (fn, reverse) {
	    var entries = this.entries;
	    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
	      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
	        return false;
	      }
	    }
	  };

	  BitmapIndexedNode.prototype.iterate =
	  HashArrayMapNode.prototype.iterate = function (fn, reverse) {
	    var nodes = this.nodes;
	    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
	      var node = nodes[reverse ? maxIndex - ii : ii];
	      if (node && node.iterate(fn, reverse) === false) {
	        return false;
	      }
	    }
	  };

	  ValueNode.prototype.iterate = function (fn, reverse) {
	    return fn(this.entry);
	  };

	  createClass(MapIterator, Iterator);

	    function MapIterator(map, type, reverse) {
	      this._type = type;
	      this._reverse = reverse;
	      this._stack = map._root && mapIteratorFrame(map._root);
	    }

	    MapIterator.prototype.next = function() {
	      var type = this._type;
	      var stack = this._stack;
	      while (stack) {
	        var node = stack.node;
	        var index = stack.index++;
	        var maxIndex;
	        if (node.entry) {
	          if (index === 0) {
	            return mapIteratorValue(type, node.entry);
	          }
	        } else if (node.entries) {
	          maxIndex = node.entries.length - 1;
	          if (index <= maxIndex) {
	            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
	          }
	        } else {
	          maxIndex = node.nodes.length - 1;
	          if (index <= maxIndex) {
	            var subNode = node.nodes[this._reverse ? maxIndex - index : index];
	            if (subNode) {
	              if (subNode.entry) {
	                return mapIteratorValue(type, subNode.entry);
	              }
	              stack = this._stack = mapIteratorFrame(subNode, stack);
	            }
	            continue;
	          }
	        }
	        stack = this._stack = this._stack.__prev;
	      }
	      return iteratorDone();
	    };


	  function mapIteratorValue(type, entry) {
	    return iteratorValue(type, entry[0], entry[1]);
	  }

	  function mapIteratorFrame(node, prev) {
	    return {
	      node: node,
	      index: 0,
	      __prev: prev
	    };
	  }

	  function makeMap(size, root, ownerID, hash) {
	    var map = Object.create(MapPrototype);
	    map.size = size;
	    map._root = root;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_MAP;
	  function emptyMap() {
	    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
	  }

	  function updateMap(map, k, v) {
	    var newRoot;
	    var newSize;
	    if (!map._root) {
	      if (v === NOT_SET) {
	        return map;
	      }
	      newSize = 1;
	      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
	    } else {
	      var didChangeSize = MakeRef(CHANGE_LENGTH);
	      var didAlter = MakeRef(DID_ALTER);
	      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
	      if (!didAlter.value) {
	        return map;
	      }
	      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
	    }
	    if (map.__ownerID) {
	      map.size = newSize;
	      map._root = newRoot;
	      map.__hash = undefined;
	      map.__altered = true;
	      return map;
	    }
	    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
	  }

	  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
	    if (!node) {
	      if (value === NOT_SET) {
	        return node;
	      }
	      SetRef(didAlter);
	      SetRef(didChangeSize);
	      return new ValueNode(ownerID, keyHash, [key, value]);
	    }
	    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
	  }

	  function isLeafNode(node) {
	    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
	  }

	  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
	    if (node.keyHash === keyHash) {
	      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
	    }

	    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
	    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

	    var newNode;
	    var nodes = idx1 === idx2 ?
	      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :
	      (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);

	    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);
	  }

	  function createNodes(ownerID, entries, key, value) {
	    if (!ownerID) {
	      ownerID = new OwnerID();
	    }
	    var node = new ValueNode(ownerID, hash(key), [key, value]);
	    for (var ii = 0; ii < entries.length; ii++) {
	      var entry = entries[ii];
	      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
	    }
	    return node;
	  }

	  function packNodes(ownerID, nodes, count, excluding) {
	    var bitmap = 0;
	    var packedII = 0;
	    var packedNodes = new Array(count);
	    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
	      var node = nodes[ii];
	      if (node !== undefined && ii !== excluding) {
	        bitmap |= bit;
	        packedNodes[packedII++] = node;
	      }
	    }
	    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
	  }

	  function expandNodes(ownerID, nodes, bitmap, including, node) {
	    var count = 0;
	    var expandedNodes = new Array(SIZE);
	    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
	      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
	    }
	    expandedNodes[including] = node;
	    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
	  }

	  function mergeIntoMapWith(map, merger, iterables) {
	    var iters = [];
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = KeyedIterable(value);
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    return mergeIntoCollectionWith(map, merger, iters);
	  }

	  function deepMerger(existing, value, key) {
	    return existing && existing.mergeDeep && isIterable(value) ?
	      existing.mergeDeep(value) :
	      is(existing, value) ? existing : value;
	  }

	  function deepMergerWith(merger) {
	    return function(existing, value, key)  {
	      if (existing && existing.mergeDeepWith && isIterable(value)) {
	        return existing.mergeDeepWith(merger, value);
	      }
	      var nextValue = merger(existing, value, key);
	      return is(existing, nextValue) ? existing : nextValue;
	    };
	  }

	  function mergeIntoCollectionWith(collection, merger, iters) {
	    iters = iters.filter(function(x ) {return x.size !== 0});
	    if (iters.length === 0) {
	      return collection;
	    }
	    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
	      return collection.constructor(iters[0]);
	    }
	    return collection.withMutations(function(collection ) {
	      var mergeIntoMap = merger ?
	        function(value, key)  {
	          collection.update(key, NOT_SET, function(existing )
	            {return existing === NOT_SET ? value : merger(existing, value, key)}
	          );
	        } :
	        function(value, key)  {
	          collection.set(key, value);
	        };
	      for (var ii = 0; ii < iters.length; ii++) {
	        iters[ii].forEach(mergeIntoMap);
	      }
	    });
	  }

	  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
	    var isNotSet = existing === NOT_SET;
	    var step = keyPathIter.next();
	    if (step.done) {
	      var existingValue = isNotSet ? notSetValue : existing;
	      var newValue = updater(existingValue);
	      return newValue === existingValue ? existing : newValue;
	    }
	    invariant(
	      isNotSet || (existing && existing.set),
	      'invalid keyPath'
	    );
	    var key = step.value;
	    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
	    var nextUpdated = updateInDeepMap(
	      nextExisting,
	      keyPathIter,
	      notSetValue,
	      updater
	    );
	    return nextUpdated === nextExisting ? existing :
	      nextUpdated === NOT_SET ? existing.remove(key) :
	      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
	  }

	  function popCount(x) {
	    x = x - ((x >> 1) & 0x55555555);
	    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);
	    x = (x + (x >> 4)) & 0x0f0f0f0f;
	    x = x + (x >> 8);
	    x = x + (x >> 16);
	    return x & 0x7f;
	  }

	  function setIn(array, idx, val, canEdit) {
	    var newArray = canEdit ? array : arrCopy(array);
	    newArray[idx] = val;
	    return newArray;
	  }

	  function spliceIn(array, idx, val, canEdit) {
	    var newLen = array.length + 1;
	    if (canEdit && idx + 1 === newLen) {
	      array[idx] = val;
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        newArray[ii] = val;
	        after = -1;
	      } else {
	        newArray[ii] = array[ii + after];
	      }
	    }
	    return newArray;
	  }

	  function spliceOut(array, idx, canEdit) {
	    var newLen = array.length - 1;
	    if (canEdit && idx === newLen) {
	      array.pop();
	      return array;
	    }
	    var newArray = new Array(newLen);
	    var after = 0;
	    for (var ii = 0; ii < newLen; ii++) {
	      if (ii === idx) {
	        after = 1;
	      }
	      newArray[ii] = array[ii + after];
	    }
	    return newArray;
	  }

	  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
	  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
	  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

	  createClass(List, IndexedCollection);

	    // @pragma Construction

	    function List(value) {
	      var empty = emptyList();
	      if (value === null || value === undefined) {
	        return empty;
	      }
	      if (isList(value)) {
	        return value;
	      }
	      var iter = IndexedIterable(value);
	      var size = iter.size;
	      if (size === 0) {
	        return empty;
	      }
	      assertNotInfinite(size);
	      if (size > 0 && size < SIZE) {
	        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
	      }
	      return empty.withMutations(function(list ) {
	        list.setSize(size);
	        iter.forEach(function(v, i)  {return list.set(i, v)});
	      });
	    }

	    List.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    List.prototype.toString = function() {
	      return this.__toString('List [', ']');
	    };

	    // @pragma Access

	    List.prototype.get = function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      if (index >= 0 && index < this.size) {
	        index += this._origin;
	        var node = listNodeFor(this, index);
	        return node && node.array[index & MASK];
	      }
	      return notSetValue;
	    };

	    // @pragma Modification

	    List.prototype.set = function(index, value) {
	      return updateList(this, index, value);
	    };

	    List.prototype.remove = function(index) {
	      return !this.has(index) ? this :
	        index === 0 ? this.shift() :
	        index === this.size - 1 ? this.pop() :
	        this.splice(index, 1);
	    };

	    List.prototype.insert = function(index, value) {
	      return this.splice(index, 0, value);
	    };

	    List.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = this._origin = this._capacity = 0;
	        this._level = SHIFT;
	        this._root = this._tail = null;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyList();
	    };

	    List.prototype.push = function(/*...values*/) {
	      var values = arguments;
	      var oldSize = this.size;
	      return this.withMutations(function(list ) {
	        setListBounds(list, 0, oldSize + values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(oldSize + ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.pop = function() {
	      return setListBounds(this, 0, -1);
	    };

	    List.prototype.unshift = function(/*...values*/) {
	      var values = arguments;
	      return this.withMutations(function(list ) {
	        setListBounds(list, -values.length);
	        for (var ii = 0; ii < values.length; ii++) {
	          list.set(ii, values[ii]);
	        }
	      });
	    };

	    List.prototype.shift = function() {
	      return setListBounds(this, 1);
	    };

	    // @pragma Composition

	    List.prototype.merge = function(/*...iters*/) {
	      return mergeIntoListWith(this, undefined, arguments);
	    };

	    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, merger, iters);
	    };

	    List.prototype.mergeDeep = function(/*...iters*/) {
	      return mergeIntoListWith(this, deepMerger, arguments);
	    };

	    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return mergeIntoListWith(this, deepMergerWith(merger), iters);
	    };

	    List.prototype.setSize = function(size) {
	      return setListBounds(this, 0, size);
	    };

	    // @pragma Iteration

	    List.prototype.slice = function(begin, end) {
	      var size = this.size;
	      if (wholeSlice(begin, end, size)) {
	        return this;
	      }
	      return setListBounds(
	        this,
	        resolveBegin(begin, size),
	        resolveEnd(end, size)
	      );
	    };

	    List.prototype.__iterator = function(type, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      return new Iterator(function()  {
	        var value = values();
	        return value === DONE ?
	          iteratorDone() :
	          iteratorValue(type, index++, value);
	      });
	    };

	    List.prototype.__iterate = function(fn, reverse) {
	      var index = 0;
	      var values = iterateList(this, reverse);
	      var value;
	      while ((value = values()) !== DONE) {
	        if (fn(value, index++, this) === false) {
	          break;
	        }
	      }
	      return index;
	    };

	    List.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        return this;
	      }
	      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
	    };


	  function isList(maybeList) {
	    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
	  }

	  List.isList = isList;

	  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

	  var ListPrototype = List.prototype;
	  ListPrototype[IS_LIST_SENTINEL] = true;
	  ListPrototype[DELETE] = ListPrototype.remove;
	  ListPrototype.setIn = MapPrototype.setIn;
	  ListPrototype.deleteIn =
	  ListPrototype.removeIn = MapPrototype.removeIn;
	  ListPrototype.update = MapPrototype.update;
	  ListPrototype.updateIn = MapPrototype.updateIn;
	  ListPrototype.mergeIn = MapPrototype.mergeIn;
	  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  ListPrototype.withMutations = MapPrototype.withMutations;
	  ListPrototype.asMutable = MapPrototype.asMutable;
	  ListPrototype.asImmutable = MapPrototype.asImmutable;
	  ListPrototype.wasAltered = MapPrototype.wasAltered;



	    function VNode(array, ownerID) {
	      this.array = array;
	      this.ownerID = ownerID;
	    }

	    // TODO: seems like these methods are very similar

	    VNode.prototype.removeBefore = function(ownerID, level, index) {
	      if (index === level ? 1 << level : 0 || this.array.length === 0) {
	        return this;
	      }
	      var originIndex = (index >>> level) & MASK;
	      if (originIndex >= this.array.length) {
	        return new VNode([], ownerID);
	      }
	      var removingFirst = originIndex === 0;
	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[originIndex];
	        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && removingFirst) {
	          return this;
	        }
	      }
	      if (removingFirst && !newChild) {
	        return this;
	      }
	      var editable = editableVNode(this, ownerID);
	      if (!removingFirst) {
	        for (var ii = 0; ii < originIndex; ii++) {
	          editable.array[ii] = undefined;
	        }
	      }
	      if (newChild) {
	        editable.array[originIndex] = newChild;
	      }
	      return editable;
	    };

	    VNode.prototype.removeAfter = function(ownerID, level, index) {
	      if (index === (level ? 1 << level : 0) || this.array.length === 0) {
	        return this;
	      }
	      var sizeIndex = ((index - 1) >>> level) & MASK;
	      if (sizeIndex >= this.array.length) {
	        return this;
	      }

	      var newChild;
	      if (level > 0) {
	        var oldChild = this.array[sizeIndex];
	        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
	        if (newChild === oldChild && sizeIndex === this.array.length - 1) {
	          return this;
	        }
	      }

	      var editable = editableVNode(this, ownerID);
	      editable.array.splice(sizeIndex + 1);
	      if (newChild) {
	        editable.array[sizeIndex] = newChild;
	      }
	      return editable;
	    };



	  var DONE = {};

	  function iterateList(list, reverse) {
	    var left = list._origin;
	    var right = list._capacity;
	    var tailPos = getTailOffset(right);
	    var tail = list._tail;

	    return iterateNodeOrLeaf(list._root, list._level, 0);

	    function iterateNodeOrLeaf(node, level, offset) {
	      return level === 0 ?
	        iterateLeaf(node, offset) :
	        iterateNode(node, level, offset);
	    }

	    function iterateLeaf(node, offset) {
	      var array = offset === tailPos ? tail && tail.array : node && node.array;
	      var from = offset > left ? 0 : left - offset;
	      var to = right - offset;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        if (from === to) {
	          return DONE;
	        }
	        var idx = reverse ? --to : from++;
	        return array && array[idx];
	      };
	    }

	    function iterateNode(node, level, offset) {
	      var values;
	      var array = node && node.array;
	      var from = offset > left ? 0 : (left - offset) >> level;
	      var to = ((right - offset) >> level) + 1;
	      if (to > SIZE) {
	        to = SIZE;
	      }
	      return function()  {
	        do {
	          if (values) {
	            var value = values();
	            if (value !== DONE) {
	              return value;
	            }
	            values = null;
	          }
	          if (from === to) {
	            return DONE;
	          }
	          var idx = reverse ? --to : from++;
	          values = iterateNodeOrLeaf(
	            array && array[idx], level - SHIFT, offset + (idx << level)
	          );
	        } while (true);
	      };
	    }
	  }

	  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
	    var list = Object.create(ListPrototype);
	    list.size = capacity - origin;
	    list._origin = origin;
	    list._capacity = capacity;
	    list._level = level;
	    list._root = root;
	    list._tail = tail;
	    list.__ownerID = ownerID;
	    list.__hash = hash;
	    list.__altered = false;
	    return list;
	  }

	  var EMPTY_LIST;
	  function emptyList() {
	    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
	  }

	  function updateList(list, index, value) {
	    index = wrapIndex(list, index);

	    if (index !== index) {
	      return list;
	    }

	    if (index >= list.size || index < 0) {
	      return list.withMutations(function(list ) {
	        index < 0 ?
	          setListBounds(list, index).set(0, value) :
	          setListBounds(list, 0, index + 1).set(index, value);
	      });
	    }

	    index += list._origin;

	    var newTail = list._tail;
	    var newRoot = list._root;
	    var didAlter = MakeRef(DID_ALTER);
	    if (index >= getTailOffset(list._capacity)) {
	      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
	    } else {
	      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
	    }

	    if (!didAlter.value) {
	      return list;
	    }

	    if (list.__ownerID) {
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
	  }

	  function updateVNode(node, ownerID, level, index, value, didAlter) {
	    var idx = (index >>> level) & MASK;
	    var nodeHas = node && idx < node.array.length;
	    if (!nodeHas && value === undefined) {
	      return node;
	    }

	    var newNode;

	    if (level > 0) {
	      var lowerNode = node && node.array[idx];
	      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
	      if (newLowerNode === lowerNode) {
	        return node;
	      }
	      newNode = editableVNode(node, ownerID);
	      newNode.array[idx] = newLowerNode;
	      return newNode;
	    }

	    if (nodeHas && node.array[idx] === value) {
	      return node;
	    }

	    SetRef(didAlter);

	    newNode = editableVNode(node, ownerID);
	    if (value === undefined && idx === newNode.array.length - 1) {
	      newNode.array.pop();
	    } else {
	      newNode.array[idx] = value;
	    }
	    return newNode;
	  }

	  function editableVNode(node, ownerID) {
	    if (ownerID && node && ownerID === node.ownerID) {
	      return node;
	    }
	    return new VNode(node ? node.array.slice() : [], ownerID);
	  }

	  function listNodeFor(list, rawIndex) {
	    if (rawIndex >= getTailOffset(list._capacity)) {
	      return list._tail;
	    }
	    if (rawIndex < 1 << (list._level + SHIFT)) {
	      var node = list._root;
	      var level = list._level;
	      while (node && level > 0) {
	        node = node.array[(rawIndex >>> level) & MASK];
	        level -= SHIFT;
	      }
	      return node;
	    }
	  }

	  function setListBounds(list, begin, end) {
	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      end = end | 0;
	    }
	    var owner = list.__ownerID || new OwnerID();
	    var oldOrigin = list._origin;
	    var oldCapacity = list._capacity;
	    var newOrigin = oldOrigin + begin;
	    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
	    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
	      return list;
	    }

	    // If it's going to end after it starts, it's empty.
	    if (newOrigin >= newCapacity) {
	      return list.clear();
	    }

	    var newLevel = list._level;
	    var newRoot = list._root;

	    // New origin might need creating a higher root.
	    var offsetShift = 0;
	    while (newOrigin + offsetShift < 0) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
	      newLevel += SHIFT;
	      offsetShift += 1 << newLevel;
	    }
	    if (offsetShift) {
	      newOrigin += offsetShift;
	      oldOrigin += offsetShift;
	      newCapacity += offsetShift;
	      oldCapacity += offsetShift;
	    }

	    var oldTailOffset = getTailOffset(oldCapacity);
	    var newTailOffset = getTailOffset(newCapacity);

	    // New size might need creating a higher root.
	    while (newTailOffset >= 1 << (newLevel + SHIFT)) {
	      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
	      newLevel += SHIFT;
	    }

	    // Locate or create the new tail.
	    var oldTail = list._tail;
	    var newTail = newTailOffset < oldTailOffset ?
	      listNodeFor(list, newCapacity - 1) :
	      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

	    // Merge Tail into tree.
	    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
	      newRoot = editableVNode(newRoot, owner);
	      var node = newRoot;
	      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
	        var idx = (oldTailOffset >>> level) & MASK;
	        node = node.array[idx] = editableVNode(node.array[idx], owner);
	      }
	      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;
	    }

	    // If the size has been reduced, there's a chance the tail needs to be trimmed.
	    if (newCapacity < oldCapacity) {
	      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
	    }

	    // If the new origin is within the tail, then we do not need a root.
	    if (newOrigin >= newTailOffset) {
	      newOrigin -= newTailOffset;
	      newCapacity -= newTailOffset;
	      newLevel = SHIFT;
	      newRoot = null;
	      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);

	    // Otherwise, if the root has been trimmed, garbage collect.
	    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
	      offsetShift = 0;

	      // Identify the new top root node of the subtree of the old root.
	      while (newRoot) {
	        var beginIndex = (newOrigin >>> newLevel) & MASK;
	        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {
	          break;
	        }
	        if (beginIndex) {
	          offsetShift += (1 << newLevel) * beginIndex;
	        }
	        newLevel -= SHIFT;
	        newRoot = newRoot.array[beginIndex];
	      }

	      // Trim the new sides of the new root.
	      if (newRoot && newOrigin > oldOrigin) {
	        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
	      }
	      if (newRoot && newTailOffset < oldTailOffset) {
	        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
	      }
	      if (offsetShift) {
	        newOrigin -= offsetShift;
	        newCapacity -= offsetShift;
	      }
	    }

	    if (list.__ownerID) {
	      list.size = newCapacity - newOrigin;
	      list._origin = newOrigin;
	      list._capacity = newCapacity;
	      list._level = newLevel;
	      list._root = newRoot;
	      list._tail = newTail;
	      list.__hash = undefined;
	      list.__altered = true;
	      return list;
	    }
	    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
	  }

	  function mergeIntoListWith(list, merger, iterables) {
	    var iters = [];
	    var maxSize = 0;
	    for (var ii = 0; ii < iterables.length; ii++) {
	      var value = iterables[ii];
	      var iter = IndexedIterable(value);
	      if (iter.size > maxSize) {
	        maxSize = iter.size;
	      }
	      if (!isIterable(value)) {
	        iter = iter.map(function(v ) {return fromJS(v)});
	      }
	      iters.push(iter);
	    }
	    if (maxSize > list.size) {
	      list = list.setSize(maxSize);
	    }
	    return mergeIntoCollectionWith(list, merger, iters);
	  }

	  function getTailOffset(size) {
	    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);
	  }

	  createClass(OrderedMap, Map);

	    // @pragma Construction

	    function OrderedMap(value) {
	      return value === null || value === undefined ? emptyOrderedMap() :
	        isOrderedMap(value) ? value :
	        emptyOrderedMap().withMutations(function(map ) {
	          var iter = KeyedIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v, k)  {return map.set(k, v)});
	        });
	    }

	    OrderedMap.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedMap.prototype.toString = function() {
	      return this.__toString('OrderedMap {', '}');
	    };

	    // @pragma Access

	    OrderedMap.prototype.get = function(k, notSetValue) {
	      var index = this._map.get(k);
	      return index !== undefined ? this._list.get(index)[1] : notSetValue;
	    };

	    // @pragma Modification

	    OrderedMap.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._map.clear();
	        this._list.clear();
	        return this;
	      }
	      return emptyOrderedMap();
	    };

	    OrderedMap.prototype.set = function(k, v) {
	      return updateOrderedMap(this, k, v);
	    };

	    OrderedMap.prototype.remove = function(k) {
	      return updateOrderedMap(this, k, NOT_SET);
	    };

	    OrderedMap.prototype.wasAltered = function() {
	      return this._map.wasAltered() || this._list.wasAltered();
	    };

	    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._list.__iterate(
	        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},
	        reverse
	      );
	    };

	    OrderedMap.prototype.__iterator = function(type, reverse) {
	      return this._list.fromEntrySeq().__iterator(type, reverse);
	    };

	    OrderedMap.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      var newList = this._list.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        this._list = newList;
	        return this;
	      }
	      return makeOrderedMap(newMap, newList, ownerID, this.__hash);
	    };


	  function isOrderedMap(maybeOrderedMap) {
	    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
	  }

	  OrderedMap.isOrderedMap = isOrderedMap;

	  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
	  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;



	  function makeOrderedMap(map, list, ownerID, hash) {
	    var omap = Object.create(OrderedMap.prototype);
	    omap.size = map ? map.size : 0;
	    omap._map = map;
	    omap._list = list;
	    omap.__ownerID = ownerID;
	    omap.__hash = hash;
	    return omap;
	  }

	  var EMPTY_ORDERED_MAP;
	  function emptyOrderedMap() {
	    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
	  }

	  function updateOrderedMap(omap, k, v) {
	    var map = omap._map;
	    var list = omap._list;
	    var i = map.get(k);
	    var has = i !== undefined;
	    var newMap;
	    var newList;
	    if (v === NOT_SET) { // removed
	      if (!has) {
	        return omap;
	      }
	      if (list.size >= SIZE && list.size >= map.size * 2) {
	        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});
	        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();
	        if (omap.__ownerID) {
	          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
	        }
	      } else {
	        newMap = map.remove(k);
	        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
	      }
	    } else {
	      if (has) {
	        if (v === list.get(i)[1]) {
	          return omap;
	        }
	        newMap = map;
	        newList = list.set(i, [k, v]);
	      } else {
	        newMap = map.set(k, list.size);
	        newList = list.set(list.size, [k, v]);
	      }
	    }
	    if (omap.__ownerID) {
	      omap.size = newMap.size;
	      omap._map = newMap;
	      omap._list = newList;
	      omap.__hash = undefined;
	      return omap;
	    }
	    return makeOrderedMap(newMap, newList);
	  }

	  createClass(ToKeyedSequence, KeyedSeq);
	    function ToKeyedSequence(indexed, useKeys) {
	      this._iter = indexed;
	      this._useKeys = useKeys;
	      this.size = indexed.size;
	    }

	    ToKeyedSequence.prototype.get = function(key, notSetValue) {
	      return this._iter.get(key, notSetValue);
	    };

	    ToKeyedSequence.prototype.has = function(key) {
	      return this._iter.has(key);
	    };

	    ToKeyedSequence.prototype.valueSeq = function() {
	      return this._iter.valueSeq();
	    };

	    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;
	      var reversedSequence = reverseFactory(this, true);
	      if (!this._useKeys) {
	        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};
	      }
	      return reversedSequence;
	    };

	    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;
	      var mappedSequence = mapFactory(this, mapper, context);
	      if (!this._useKeys) {
	        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};
	      }
	      return mappedSequence;
	    };

	    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var ii;
	      return this._iter.__iterate(
	        this._useKeys ?
	          function(v, k)  {return fn(v, k, this$0)} :
	          (ii = reverse ? resolveSize(this) : 0, function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),
	        reverse
	      );
	    };

	    ToKeyedSequence.prototype.__iterator = function(type, reverse) {
	      if (this._useKeys) {
	        return this._iter.__iterator(type, reverse);
	      }
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var ii = reverse ? resolveSize(this) : 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, reverse ? --ii : ii++, step.value, step);
	      });
	    };

	  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;


	  createClass(ToIndexedSequence, IndexedSeq);
	    function ToIndexedSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToIndexedSequence.prototype.includes = function(value) {
	      return this._iter.includes(value);
	    };

	    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);
	    };

	    ToIndexedSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, iterations++, step.value, step)
	      });
	    };



	  createClass(ToSetSequence, SetSeq);
	    function ToSetSequence(iter) {
	      this._iter = iter;
	      this.size = iter.size;
	    }

	    ToSetSequence.prototype.has = function(key) {
	      return this._iter.includes(key);
	    };

	    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);
	    };

	    ToSetSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        return step.done ? step :
	          iteratorValue(type, step.value, step.value, step);
	      });
	    };



	  createClass(FromEntriesSequence, KeyedSeq);
	    function FromEntriesSequence(entries) {
	      this._iter = entries;
	      this.size = entries.size;
	    }

	    FromEntriesSequence.prototype.entrySeq = function() {
	      return this._iter.toSeq();
	    };

	    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._iter.__iterate(function(entry ) {
	        // Check if entry exists first so array access doesn't throw for holes
	        // in the parent iteration.
	        if (entry) {
	          validateEntry(entry);
	          var indexedIterable = isIterable(entry);
	          return fn(
	            indexedIterable ? entry.get(1) : entry[1],
	            indexedIterable ? entry.get(0) : entry[0],
	            this$0
	          );
	        }
	      }, reverse);
	    };

	    FromEntriesSequence.prototype.__iterator = function(type, reverse) {
	      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          // Check if entry exists first so array access doesn't throw for holes
	          // in the parent iteration.
	          if (entry) {
	            validateEntry(entry);
	            var indexedIterable = isIterable(entry);
	            return iteratorValue(
	              type,
	              indexedIterable ? entry.get(0) : entry[0],
	              indexedIterable ? entry.get(1) : entry[1],
	              step
	            );
	          }
	        }
	      });
	    };


	  ToIndexedSequence.prototype.cacheResult =
	  ToKeyedSequence.prototype.cacheResult =
	  ToSetSequence.prototype.cacheResult =
	  FromEntriesSequence.prototype.cacheResult =
	    cacheResultThrough;


	  function flipFactory(iterable) {
	    var flipSequence = makeSequence(iterable);
	    flipSequence._iter = iterable;
	    flipSequence.size = iterable.size;
	    flipSequence.flip = function()  {return iterable};
	    flipSequence.reverse = function () {
	      var reversedSequence = iterable.reverse.apply(this); // super.reverse()
	      reversedSequence.flip = function()  {return iterable.reverse()};
	      return reversedSequence;
	    };
	    flipSequence.has = function(key ) {return iterable.includes(key)};
	    flipSequence.includes = function(key ) {return iterable.has(key)};
	    flipSequence.cacheResult = cacheResultThrough;
	    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);
	    };
	    flipSequence.__iteratorUncached = function(type, reverse) {
	      if (type === ITERATE_ENTRIES) {
	        var iterator = iterable.__iterator(type, reverse);
	        return new Iterator(function()  {
	          var step = iterator.next();
	          if (!step.done) {
	            var k = step.value[0];
	            step.value[0] = step.value[1];
	            step.value[1] = k;
	          }
	          return step;
	        });
	      }
	      return iterable.__iterator(
	        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,
	        reverse
	      );
	    };
	    return flipSequence;
	  }


	  function mapFactory(iterable, mapper, context) {
	    var mappedSequence = makeSequence(iterable);
	    mappedSequence.size = iterable.size;
	    mappedSequence.has = function(key ) {return iterable.has(key)};
	    mappedSequence.get = function(key, notSetValue)  {
	      var v = iterable.get(key, NOT_SET);
	      return v === NOT_SET ?
	        notSetValue :
	        mapper.call(context, v, key, iterable);
	    };
	    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(
	        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},
	        reverse
	      );
	    };
	    mappedSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      return new Iterator(function()  {
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var key = entry[0];
	        return iteratorValue(
	          type,
	          key,
	          mapper.call(context, entry[1], key, iterable),
	          step
	        );
	      });
	    };
	    return mappedSequence;
	  }


	  function reverseFactory(iterable, useKeys) {
	    var reversedSequence = makeSequence(iterable);
	    reversedSequence._iter = iterable;
	    reversedSequence.size = iterable.size;
	    reversedSequence.reverse = function()  {return iterable};
	    if (iterable.flip) {
	      reversedSequence.flip = function () {
	        var flipSequence = flipFactory(iterable);
	        flipSequence.reverse = function()  {return iterable.flip()};
	        return flipSequence;
	      };
	    }
	    reversedSequence.get = function(key, notSetValue) 
	      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};
	    reversedSequence.has = function(key )
	      {return iterable.has(useKeys ? key : -1 - key)};
	    reversedSequence.includes = function(value ) {return iterable.includes(value)};
	    reversedSequence.cacheResult = cacheResultThrough;
	    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;
	      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);
	    };
	    reversedSequence.__iterator =
	      function(type, reverse)  {return iterable.__iterator(type, !reverse)};
	    return reversedSequence;
	  }


	  function filterFactory(iterable, predicate, context, useKeys) {
	    var filterSequence = makeSequence(iterable);
	    if (useKeys) {
	      filterSequence.has = function(key ) {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
	      };
	      filterSequence.get = function(key, notSetValue)  {
	        var v = iterable.get(key, NOT_SET);
	        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?
	          v : notSetValue;
	      };
	    }
	    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      }, reverse);
	      return iterations;
	    };
	    filterSequence.__iteratorUncached = function (type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (true) {
	          var step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	          var entry = step.value;
	          var key = entry[0];
	          var value = entry[1];
	          if (predicate.call(context, value, key, iterable)) {
	            return iteratorValue(type, useKeys ? key : iterations++, value, step);
	          }
	        }
	      });
	    };
	    return filterSequence;
	  }


	  function countByFactory(iterable, grouper, context) {
	    var groups = Map().asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        0,
	        function(a ) {return a + 1}
	      );
	    });
	    return groups.asImmutable();
	  }


	  function groupByFactory(iterable, grouper, context) {
	    var isKeyedIter = isKeyed(iterable);
	    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
	    iterable.__iterate(function(v, k)  {
	      groups.update(
	        grouper.call(context, v, k, iterable),
	        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}
	      );
	    });
	    var coerce = iterableClass(iterable);
	    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});
	  }


	  function sliceFactory(iterable, begin, end, useKeys) {
	    var originalSize = iterable.size;

	    // Sanitize begin & end using this shorthand for ToInt32(argument)
	    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32
	    if (begin !== undefined) {
	      begin = begin | 0;
	    }
	    if (end !== undefined) {
	      if (end === Infinity) {
	        end = originalSize;
	      } else {
	        end = end | 0;
	      }
	    }

	    if (wholeSlice(begin, end, originalSize)) {
	      return iterable;
	    }

	    var resolvedBegin = resolveBegin(begin, originalSize);
	    var resolvedEnd = resolveEnd(end, originalSize);

	    // begin or end will be NaN if they were provided as negative numbers and
	    // this iterable's size is unknown. In that case, cache first so there is
	    // a known size and these do not resolve to NaN.
	    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
	      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
	    }

	    // Note: resolvedEnd is undefined when the original sequence's length is
	    // unknown and this slice did not supply an end and should contain all
	    // elements after resolvedBegin.
	    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.
	    var resolvedSize = resolvedEnd - resolvedBegin;
	    var sliceSize;
	    if (resolvedSize === resolvedSize) {
	      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
	    }

	    var sliceSeq = makeSequence(iterable);

	    // If iterable.size is undefined, the size of the realized sliceSeq is
	    // unknown at this point unless the number of items to slice is 0
	    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

	    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
	      sliceSeq.get = function (index, notSetValue) {
	        index = wrapIndex(this, index);
	        return index >= 0 && index < sliceSize ?
	          iterable.get(index + resolvedBegin, notSetValue) :
	          notSetValue;
	      };
	    }

	    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (sliceSize === 0) {
	        return 0;
	      }
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var skipped = 0;
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k)  {
	        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&
	                 iterations !== sliceSize;
	        }
	      });
	      return iterations;
	    };

	    sliceSeq.__iteratorUncached = function(type, reverse) {
	      if (sliceSize !== 0 && reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      // Don't bother instantiating parent iterator if taking 0.
	      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
	      var skipped = 0;
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (skipped++ < resolvedBegin) {
	          iterator.next();
	        }
	        if (++iterations > sliceSize) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (useKeys || type === ITERATE_VALUES) {
	          return step;
	        } else if (type === ITERATE_KEYS) {
	          return iteratorValue(type, iterations - 1, undefined, step);
	        } else {
	          return iteratorValue(type, iterations - 1, step.value[1], step);
	        }
	      });
	    };

	    return sliceSeq;
	  }


	  function takeWhileFactory(iterable, predicate, context) {
	    var takeSequence = makeSequence(iterable);
	    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c) 
	        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}
	      );
	      return iterations;
	    };
	    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var iterating = true;
	      return new Iterator(function()  {
	        if (!iterating) {
	          return iteratorDone();
	        }
	        var step = iterator.next();
	        if (step.done) {
	          return step;
	        }
	        var entry = step.value;
	        var k = entry[0];
	        var v = entry[1];
	        if (!predicate.call(context, v, k, this$0)) {
	          iterating = false;
	          return iteratorDone();
	        }
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return takeSequence;
	  }


	  function skipWhileFactory(iterable, predicate, context, useKeys) {
	    var skipSequence = makeSequence(iterable);
	    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterate(fn, reverse);
	      }
	      var isSkipping = true;
	      var iterations = 0;
	      iterable.__iterate(function(v, k, c)  {
	        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
	          iterations++;
	          return fn(v, useKeys ? k : iterations - 1, this$0);
	        }
	      });
	      return iterations;
	    };
	    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;
	      if (reverse) {
	        return this.cacheResult().__iterator(type, reverse);
	      }
	      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
	      var skipping = true;
	      var iterations = 0;
	      return new Iterator(function()  {
	        var step, k, v;
	        do {
	          step = iterator.next();
	          if (step.done) {
	            if (useKeys || type === ITERATE_VALUES) {
	              return step;
	            } else if (type === ITERATE_KEYS) {
	              return iteratorValue(type, iterations++, undefined, step);
	            } else {
	              return iteratorValue(type, iterations++, step.value[1], step);
	            }
	          }
	          var entry = step.value;
	          k = entry[0];
	          v = entry[1];
	          skipping && (skipping = predicate.call(context, v, k, this$0));
	        } while (skipping);
	        return type === ITERATE_ENTRIES ? step :
	          iteratorValue(type, k, v, step);
	      });
	    };
	    return skipSequence;
	  }


	  function concatFactory(iterable, values) {
	    var isKeyedIterable = isKeyed(iterable);
	    var iters = [iterable].concat(values).map(function(v ) {
	      if (!isIterable(v)) {
	        v = isKeyedIterable ?
	          keyedSeqFromValue(v) :
	          indexedSeqFromValue(Array.isArray(v) ? v : [v]);
	      } else if (isKeyedIterable) {
	        v = KeyedIterable(v);
	      }
	      return v;
	    }).filter(function(v ) {return v.size !== 0});

	    if (iters.length === 0) {
	      return iterable;
	    }

	    if (iters.length === 1) {
	      var singleton = iters[0];
	      if (singleton === iterable ||
	          isKeyedIterable && isKeyed(singleton) ||
	          isIndexed(iterable) && isIndexed(singleton)) {
	        return singleton;
	      }
	    }

	    var concatSeq = new ArraySeq(iters);
	    if (isKeyedIterable) {
	      concatSeq = concatSeq.toKeyedSeq();
	    } else if (!isIndexed(iterable)) {
	      concatSeq = concatSeq.toSetSeq();
	    }
	    concatSeq = concatSeq.flatten(true);
	    concatSeq.size = iters.reduce(
	      function(sum, seq)  {
	        if (sum !== undefined) {
	          var size = seq.size;
	          if (size !== undefined) {
	            return sum + size;
	          }
	        }
	      },
	      0
	    );
	    return concatSeq;
	  }


	  function flattenFactory(iterable, depth, useKeys) {
	    var flatSequence = makeSequence(iterable);
	    flatSequence.__iterateUncached = function(fn, reverse) {
	      var iterations = 0;
	      var stopped = false;
	      function flatDeep(iter, currentDepth) {var this$0 = this;
	        iter.__iterate(function(v, k)  {
	          if ((!depth || currentDepth < depth) && isIterable(v)) {
	            flatDeep(v, currentDepth + 1);
	          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
	            stopped = true;
	          }
	          return !stopped;
	        }, reverse);
	      }
	      flatDeep(iterable, 0);
	      return iterations;
	    };
	    flatSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(type, reverse);
	      var stack = [];
	      var iterations = 0;
	      return new Iterator(function()  {
	        while (iterator) {
	          var step = iterator.next();
	          if (step.done !== false) {
	            iterator = stack.pop();
	            continue;
	          }
	          var v = step.value;
	          if (type === ITERATE_ENTRIES) {
	            v = v[1];
	          }
	          if ((!depth || stack.length < depth) && isIterable(v)) {
	            stack.push(iterator);
	            iterator = v.__iterator(type, reverse);
	          } else {
	            return useKeys ? step : iteratorValue(type, iterations++, v, step);
	          }
	        }
	        return iteratorDone();
	      });
	    };
	    return flatSequence;
	  }


	  function flatMapFactory(iterable, mapper, context) {
	    var coerce = iterableClass(iterable);
	    return iterable.toSeq().map(
	      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}
	    ).flatten(true);
	  }


	  function interposeFactory(iterable, separator) {
	    var interposedSequence = makeSequence(iterable);
	    interposedSequence.size = iterable.size && iterable.size * 2 -1;
	    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;
	      var iterations = 0;
	      iterable.__iterate(function(v, k) 
	        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&
	        fn(v, iterations++, this$0) !== false},
	        reverse
	      );
	      return iterations;
	    };
	    interposedSequence.__iteratorUncached = function(type, reverse) {
	      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
	      var iterations = 0;
	      var step;
	      return new Iterator(function()  {
	        if (!step || iterations % 2) {
	          step = iterator.next();
	          if (step.done) {
	            return step;
	          }
	        }
	        return iterations % 2 ?
	          iteratorValue(type, iterations++, separator) :
	          iteratorValue(type, iterations++, step.value, step);
	      });
	    };
	    return interposedSequence;
	  }


	  function sortFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    var isKeyedIterable = isKeyed(iterable);
	    var index = 0;
	    var entries = iterable.toSeq().map(
	      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}
	    ).toArray();
	    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(
	      isKeyedIterable ?
	      function(v, i)  { entries[i].length = 2; } :
	      function(v, i)  { entries[i] = v[1]; }
	    );
	    return isKeyedIterable ? KeyedSeq(entries) :
	      isIndexed(iterable) ? IndexedSeq(entries) :
	      SetSeq(entries);
	  }


	  function maxFactory(iterable, comparator, mapper) {
	    if (!comparator) {
	      comparator = defaultComparator;
	    }
	    if (mapper) {
	      var entry = iterable.toSeq()
	        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})
	        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});
	      return entry && entry[0];
	    } else {
	      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});
	    }
	  }

	  function maxCompare(comparator, a, b) {
	    var comp = comparator(b, a);
	    // b is considered the new max if the comparator declares them equal, but
	    // they are not equal and b is in fact a nullish value.
	    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;
	  }


	  function zipWithFactory(keyIter, zipper, iters) {
	    var zipSequence = makeSequence(keyIter);
	    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();
	    // Note: this a generic base implementation of __iterate in terms of
	    // __iterator which may be more generically useful in the future.
	    zipSequence.__iterate = function(fn, reverse) {
	      /* generic:
	      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        iterations++;
	        if (fn(step.value[1], step.value[0], this) === false) {
	          break;
	        }
	      }
	      return iterations;
	      */
	      // indexed:
	      var iterator = this.__iterator(ITERATE_VALUES, reverse);
	      var step;
	      var iterations = 0;
	      while (!(step = iterator.next()).done) {
	        if (fn(step.value, iterations++, this) === false) {
	          break;
	        }
	      }
	      return iterations;
	    };
	    zipSequence.__iteratorUncached = function(type, reverse) {
	      var iterators = iters.map(function(i )
	        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}
	      );
	      var iterations = 0;
	      var isDone = false;
	      return new Iterator(function()  {
	        var steps;
	        if (!isDone) {
	          steps = iterators.map(function(i ) {return i.next()});
	          isDone = steps.some(function(s ) {return s.done});
	        }
	        if (isDone) {
	          return iteratorDone();
	        }
	        return iteratorValue(
	          type,
	          iterations++,
	          zipper.apply(null, steps.map(function(s ) {return s.value}))
	        );
	      });
	    };
	    return zipSequence
	  }


	  // #pragma Helper Functions

	  function reify(iter, seq) {
	    return isSeq(iter) ? seq : iter.constructor(seq);
	  }

	  function validateEntry(entry) {
	    if (entry !== Object(entry)) {
	      throw new TypeError('Expected [K, V] tuple: ' + entry);
	    }
	  }

	  function resolveSize(iter) {
	    assertNotInfinite(iter.size);
	    return ensureSize(iter);
	  }

	  function iterableClass(iterable) {
	    return isKeyed(iterable) ? KeyedIterable :
	      isIndexed(iterable) ? IndexedIterable :
	      SetIterable;
	  }

	  function makeSequence(iterable) {
	    return Object.create(
	      (
	        isKeyed(iterable) ? KeyedSeq :
	        isIndexed(iterable) ? IndexedSeq :
	        SetSeq
	      ).prototype
	    );
	  }

	  function cacheResultThrough() {
	    if (this._iter.cacheResult) {
	      this._iter.cacheResult();
	      this.size = this._iter.size;
	      return this;
	    } else {
	      return Seq.prototype.cacheResult.call(this);
	    }
	  }

	  function defaultComparator(a, b) {
	    return a > b ? 1 : a < b ? -1 : 0;
	  }

	  function forceIterator(keyPath) {
	    var iter = getIterator(keyPath);
	    if (!iter) {
	      // Array might not be iterable in this environment, so we need a fallback
	      // to our wrapped type.
	      if (!isArrayLike(keyPath)) {
	        throw new TypeError('Expected iterable or array-like: ' + keyPath);
	      }
	      iter = getIterator(Iterable(keyPath));
	    }
	    return iter;
	  }

	  createClass(Record, KeyedCollection);

	    function Record(defaultValues, name) {
	      var hasInitialized;

	      var RecordType = function Record(values) {
	        if (values instanceof RecordType) {
	          return values;
	        }
	        if (!(this instanceof RecordType)) {
	          return new RecordType(values);
	        }
	        if (!hasInitialized) {
	          hasInitialized = true;
	          var keys = Object.keys(defaultValues);
	          setProps(RecordTypePrototype, keys);
	          RecordTypePrototype.size = keys.length;
	          RecordTypePrototype._name = name;
	          RecordTypePrototype._keys = keys;
	          RecordTypePrototype._defaultValues = defaultValues;
	        }
	        this._map = Map(values);
	      };

	      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
	      RecordTypePrototype.constructor = RecordType;

	      return RecordType;
	    }

	    Record.prototype.toString = function() {
	      return this.__toString(recordName(this) + ' {', '}');
	    };

	    // @pragma Access

	    Record.prototype.has = function(k) {
	      return this._defaultValues.hasOwnProperty(k);
	    };

	    Record.prototype.get = function(k, notSetValue) {
	      if (!this.has(k)) {
	        return notSetValue;
	      }
	      var defaultVal = this._defaultValues[k];
	      return this._map ? this._map.get(k, defaultVal) : defaultVal;
	    };

	    // @pragma Modification

	    Record.prototype.clear = function() {
	      if (this.__ownerID) {
	        this._map && this._map.clear();
	        return this;
	      }
	      var RecordType = this.constructor;
	      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
	    };

	    Record.prototype.set = function(k, v) {
	      if (!this.has(k)) {
	        throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
	      }
	      if (this._map && !this._map.has(k)) {
	        var defaultVal = this._defaultValues[k];
	        if (v === defaultVal) {
	          return this;
	        }
	      }
	      var newMap = this._map && this._map.set(k, v);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.remove = function(k) {
	      if (!this.has(k)) {
	        return this;
	      }
	      var newMap = this._map && this._map.remove(k);
	      if (this.__ownerID || newMap === this._map) {
	        return this;
	      }
	      return makeRecord(this, newMap);
	    };

	    Record.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);
	    };

	    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);
	    };

	    Record.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map && this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return makeRecord(this, newMap, ownerID);
	    };


	  var RecordPrototype = Record.prototype;
	  RecordPrototype[DELETE] = RecordPrototype.remove;
	  RecordPrototype.deleteIn =
	  RecordPrototype.removeIn = MapPrototype.removeIn;
	  RecordPrototype.merge = MapPrototype.merge;
	  RecordPrototype.mergeWith = MapPrototype.mergeWith;
	  RecordPrototype.mergeIn = MapPrototype.mergeIn;
	  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
	  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
	  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
	  RecordPrototype.setIn = MapPrototype.setIn;
	  RecordPrototype.update = MapPrototype.update;
	  RecordPrototype.updateIn = MapPrototype.updateIn;
	  RecordPrototype.withMutations = MapPrototype.withMutations;
	  RecordPrototype.asMutable = MapPrototype.asMutable;
	  RecordPrototype.asImmutable = MapPrototype.asImmutable;


	  function makeRecord(likeRecord, map, ownerID) {
	    var record = Object.create(Object.getPrototypeOf(likeRecord));
	    record._map = map;
	    record.__ownerID = ownerID;
	    return record;
	  }

	  function recordName(record) {
	    return record._name || record.constructor.name || 'Record';
	  }

	  function setProps(prototype, names) {
	    try {
	      names.forEach(setProp.bind(undefined, prototype));
	    } catch (error) {
	      // Object.defineProperty failed. Probably IE8.
	    }
	  }

	  function setProp(prototype, name) {
	    Object.defineProperty(prototype, name, {
	      get: function() {
	        return this.get(name);
	      },
	      set: function(value) {
	        invariant(this.__ownerID, 'Cannot set on an immutable record.');
	        this.set(name, value);
	      }
	    });
	  }

	  createClass(Set, SetCollection);

	    // @pragma Construction

	    function Set(value) {
	      return value === null || value === undefined ? emptySet() :
	        isSet(value) && !isOrdered(value) ? value :
	        emptySet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    Set.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Set.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    Set.prototype.toString = function() {
	      return this.__toString('Set {', '}');
	    };

	    // @pragma Access

	    Set.prototype.has = function(value) {
	      return this._map.has(value);
	    };

	    // @pragma Modification

	    Set.prototype.add = function(value) {
	      return updateSet(this, this._map.set(value, true));
	    };

	    Set.prototype.remove = function(value) {
	      return updateSet(this, this._map.remove(value));
	    };

	    Set.prototype.clear = function() {
	      return updateSet(this, this._map.clear());
	    };

	    // @pragma Composition

	    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);
	      iters = iters.filter(function(x ) {return x.size !== 0});
	      if (iters.length === 0) {
	        return this;
	      }
	      if (this.size === 0 && !this.__ownerID && iters.length === 1) {
	        return this.constructor(iters[0]);
	      }
	      return this.withMutations(function(set ) {
	        for (var ii = 0; ii < iters.length; ii++) {
	          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});
	        }
	      });
	    };

	    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (!iters.every(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);
	      if (iters.length === 0) {
	        return this;
	      }
	      iters = iters.map(function(iter ) {return SetIterable(iter)});
	      var originalSet = this;
	      return this.withMutations(function(set ) {
	        originalSet.forEach(function(value ) {
	          if (iters.some(function(iter ) {return iter.includes(value)})) {
	            set.remove(value);
	          }
	        });
	      });
	    };

	    Set.prototype.merge = function() {
	      return this.union.apply(this, arguments);
	    };

	    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);
	      return this.union.apply(this, iters);
	    };

	    Set.prototype.sort = function(comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator));
	    };

	    Set.prototype.sortBy = function(mapper, comparator) {
	      // Late binding
	      return OrderedSet(sortFactory(this, comparator, mapper));
	    };

	    Set.prototype.wasAltered = function() {
	      return this._map.wasAltered();
	    };

	    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;
	      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);
	    };

	    Set.prototype.__iterator = function(type, reverse) {
	      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);
	    };

	    Set.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      var newMap = this._map.__ensureOwner(ownerID);
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this._map = newMap;
	        return this;
	      }
	      return this.__make(newMap, ownerID);
	    };


	  function isSet(maybeSet) {
	    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
	  }

	  Set.isSet = isSet;

	  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

	  var SetPrototype = Set.prototype;
	  SetPrototype[IS_SET_SENTINEL] = true;
	  SetPrototype[DELETE] = SetPrototype.remove;
	  SetPrototype.mergeDeep = SetPrototype.merge;
	  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
	  SetPrototype.withMutations = MapPrototype.withMutations;
	  SetPrototype.asMutable = MapPrototype.asMutable;
	  SetPrototype.asImmutable = MapPrototype.asImmutable;

	  SetPrototype.__empty = emptySet;
	  SetPrototype.__make = makeSet;

	  function updateSet(set, newMap) {
	    if (set.__ownerID) {
	      set.size = newMap.size;
	      set._map = newMap;
	      return set;
	    }
	    return newMap === set._map ? set :
	      newMap.size === 0 ? set.__empty() :
	      set.__make(newMap);
	  }

	  function makeSet(map, ownerID) {
	    var set = Object.create(SetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_SET;
	  function emptySet() {
	    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
	  }

	  createClass(OrderedSet, Set);

	    // @pragma Construction

	    function OrderedSet(value) {
	      return value === null || value === undefined ? emptyOrderedSet() :
	        isOrderedSet(value) ? value :
	        emptyOrderedSet().withMutations(function(set ) {
	          var iter = SetIterable(value);
	          assertNotInfinite(iter.size);
	          iter.forEach(function(v ) {return set.add(v)});
	        });
	    }

	    OrderedSet.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    OrderedSet.fromKeys = function(value) {
	      return this(KeyedIterable(value).keySeq());
	    };

	    OrderedSet.prototype.toString = function() {
	      return this.__toString('OrderedSet {', '}');
	    };


	  function isOrderedSet(maybeOrderedSet) {
	    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
	  }

	  OrderedSet.isOrderedSet = isOrderedSet;

	  var OrderedSetPrototype = OrderedSet.prototype;
	  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

	  OrderedSetPrototype.__empty = emptyOrderedSet;
	  OrderedSetPrototype.__make = makeOrderedSet;

	  function makeOrderedSet(map, ownerID) {
	    var set = Object.create(OrderedSetPrototype);
	    set.size = map ? map.size : 0;
	    set._map = map;
	    set.__ownerID = ownerID;
	    return set;
	  }

	  var EMPTY_ORDERED_SET;
	  function emptyOrderedSet() {
	    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
	  }

	  createClass(Stack, IndexedCollection);

	    // @pragma Construction

	    function Stack(value) {
	      return value === null || value === undefined ? emptyStack() :
	        isStack(value) ? value :
	        emptyStack().unshiftAll(value);
	    }

	    Stack.of = function(/*...values*/) {
	      return this(arguments);
	    };

	    Stack.prototype.toString = function() {
	      return this.__toString('Stack [', ']');
	    };

	    // @pragma Access

	    Stack.prototype.get = function(index, notSetValue) {
	      var head = this._head;
	      index = wrapIndex(this, index);
	      while (head && index--) {
	        head = head.next;
	      }
	      return head ? head.value : notSetValue;
	    };

	    Stack.prototype.peek = function() {
	      return this._head && this._head.value;
	    };

	    // @pragma Modification

	    Stack.prototype.push = function(/*...values*/) {
	      if (arguments.length === 0) {
	        return this;
	      }
	      var newSize = this.size + arguments.length;
	      var head = this._head;
	      for (var ii = arguments.length - 1; ii >= 0; ii--) {
	        head = {
	          value: arguments[ii],
	          next: head
	        };
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pushAll = function(iter) {
	      iter = IndexedIterable(iter);
	      if (iter.size === 0) {
	        return this;
	      }
	      assertNotInfinite(iter.size);
	      var newSize = this.size;
	      var head = this._head;
	      iter.reverse().forEach(function(value ) {
	        newSize++;
	        head = {
	          value: value,
	          next: head
	        };
	      });
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    Stack.prototype.pop = function() {
	      return this.slice(1);
	    };

	    Stack.prototype.unshift = function(/*...values*/) {
	      return this.push.apply(this, arguments);
	    };

	    Stack.prototype.unshiftAll = function(iter) {
	      return this.pushAll(iter);
	    };

	    Stack.prototype.shift = function() {
	      return this.pop.apply(this, arguments);
	    };

	    Stack.prototype.clear = function() {
	      if (this.size === 0) {
	        return this;
	      }
	      if (this.__ownerID) {
	        this.size = 0;
	        this._head = undefined;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return emptyStack();
	    };

	    Stack.prototype.slice = function(begin, end) {
	      if (wholeSlice(begin, end, this.size)) {
	        return this;
	      }
	      var resolvedBegin = resolveBegin(begin, this.size);
	      var resolvedEnd = resolveEnd(end, this.size);
	      if (resolvedEnd !== this.size) {
	        // super.slice(begin, end);
	        return IndexedCollection.prototype.slice.call(this, begin, end);
	      }
	      var newSize = this.size - resolvedBegin;
	      var head = this._head;
	      while (resolvedBegin--) {
	        head = head.next;
	      }
	      if (this.__ownerID) {
	        this.size = newSize;
	        this._head = head;
	        this.__hash = undefined;
	        this.__altered = true;
	        return this;
	      }
	      return makeStack(newSize, head);
	    };

	    // @pragma Mutability

	    Stack.prototype.__ensureOwner = function(ownerID) {
	      if (ownerID === this.__ownerID) {
	        return this;
	      }
	      if (!ownerID) {
	        this.__ownerID = ownerID;
	        this.__altered = false;
	        return this;
	      }
	      return makeStack(this.size, this._head, ownerID, this.__hash);
	    };

	    // @pragma Iteration

	    Stack.prototype.__iterate = function(fn, reverse) {
	      if (reverse) {
	        return this.reverse().__iterate(fn);
	      }
	      var iterations = 0;
	      var node = this._head;
	      while (node) {
	        if (fn(node.value, iterations++, this) === false) {
	          break;
	        }
	        node = node.next;
	      }
	      return iterations;
	    };

	    Stack.prototype.__iterator = function(type, reverse) {
	      if (reverse) {
	        return this.reverse().__iterator(type);
	      }
	      var iterations = 0;
	      var node = this._head;
	      return new Iterator(function()  {
	        if (node) {
	          var value = node.value;
	          node = node.next;
	          return iteratorValue(type, iterations++, value);
	        }
	        return iteratorDone();
	      });
	    };


	  function isStack(maybeStack) {
	    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
	  }

	  Stack.isStack = isStack;

	  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

	  var StackPrototype = Stack.prototype;
	  StackPrototype[IS_STACK_SENTINEL] = true;
	  StackPrototype.withMutations = MapPrototype.withMutations;
	  StackPrototype.asMutable = MapPrototype.asMutable;
	  StackPrototype.asImmutable = MapPrototype.asImmutable;
	  StackPrototype.wasAltered = MapPrototype.wasAltered;


	  function makeStack(size, head, ownerID, hash) {
	    var map = Object.create(StackPrototype);
	    map.size = size;
	    map._head = head;
	    map.__ownerID = ownerID;
	    map.__hash = hash;
	    map.__altered = false;
	    return map;
	  }

	  var EMPTY_STACK;
	  function emptyStack() {
	    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
	  }

	  /**
	   * Contributes additional methods to a constructor
	   */
	  function mixin(ctor, methods) {
	    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };
	    Object.keys(methods).forEach(keyCopier);
	    Object.getOwnPropertySymbols &&
	      Object.getOwnPropertySymbols(methods).forEach(keyCopier);
	    return ctor;
	  }

	  Iterable.Iterator = Iterator;

	  mixin(Iterable, {

	    // ### Conversion to other types

	    toArray: function() {
	      assertNotInfinite(this.size);
	      var array = new Array(this.size || 0);
	      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });
	      return array;
	    },

	    toIndexedSeq: function() {
	      return new ToIndexedSequence(this);
	    },

	    toJS: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}
	      ).__toJS();
	    },

	    toJSON: function() {
	      return this.toSeq().map(
	        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}
	      ).__toJS();
	    },

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, true);
	    },

	    toMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Map(this.toKeyedSeq());
	    },

	    toObject: function() {
	      assertNotInfinite(this.size);
	      var object = {};
	      this.__iterate(function(v, k)  { object[k] = v; });
	      return object;
	    },

	    toOrderedMap: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedMap(this.toKeyedSeq());
	    },

	    toOrderedSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSet: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Set(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toSetSeq: function() {
	      return new ToSetSequence(this);
	    },

	    toSeq: function() {
	      return isIndexed(this) ? this.toIndexedSeq() :
	        isKeyed(this) ? this.toKeyedSeq() :
	        this.toSetSeq();
	    },

	    toStack: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return Stack(isKeyed(this) ? this.valueSeq() : this);
	    },

	    toList: function() {
	      // Use Late Binding here to solve the circular dependency.
	      return List(isKeyed(this) ? this.valueSeq() : this);
	    },


	    // ### Common JavaScript methods and properties

	    toString: function() {
	      return '[Iterable]';
	    },

	    __toString: function(head, tail) {
	      if (this.size === 0) {
	        return head + tail;
	      }
	      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    concat: function() {var values = SLICE$0.call(arguments, 0);
	      return reify(this, concatFactory(this, values));
	    },

	    includes: function(searchValue) {
	      return this.some(function(value ) {return is(value, searchValue)});
	    },

	    entries: function() {
	      return this.__iterator(ITERATE_ENTRIES);
	    },

	    every: function(predicate, context) {
	      assertNotInfinite(this.size);
	      var returnValue = true;
	      this.__iterate(function(v, k, c)  {
	        if (!predicate.call(context, v, k, c)) {
	          returnValue = false;
	          return false;
	        }
	      });
	      return returnValue;
	    },

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, true));
	    },

	    find: function(predicate, context, notSetValue) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[1] : notSetValue;
	    },

	    forEach: function(sideEffect, context) {
	      assertNotInfinite(this.size);
	      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
	    },

	    join: function(separator) {
	      assertNotInfinite(this.size);
	      separator = separator !== undefined ? '' + separator : ',';
	      var joined = '';
	      var isFirst = true;
	      this.__iterate(function(v ) {
	        isFirst ? (isFirst = false) : (joined += separator);
	        joined += v !== null && v !== undefined ? v.toString() : '';
	      });
	      return joined;
	    },

	    keys: function() {
	      return this.__iterator(ITERATE_KEYS);
	    },

	    map: function(mapper, context) {
	      return reify(this, mapFactory(this, mapper, context));
	    },

	    reduce: function(reducer, initialReduction, context) {
	      assertNotInfinite(this.size);
	      var reduction;
	      var useFirst;
	      if (arguments.length < 2) {
	        useFirst = true;
	      } else {
	        reduction = initialReduction;
	      }
	      this.__iterate(function(v, k, c)  {
	        if (useFirst) {
	          useFirst = false;
	          reduction = v;
	        } else {
	          reduction = reducer.call(context, reduction, v, k, c);
	        }
	      });
	      return reduction;
	    },

	    reduceRight: function(reducer, initialReduction, context) {
	      var reversed = this.toKeyedSeq().reverse();
	      return reversed.reduce.apply(reversed, arguments);
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, true));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, true));
	    },

	    some: function(predicate, context) {
	      return !this.every(not(predicate), context);
	    },

	    sort: function(comparator) {
	      return reify(this, sortFactory(this, comparator));
	    },

	    values: function() {
	      return this.__iterator(ITERATE_VALUES);
	    },


	    // ### More sequential methods

	    butLast: function() {
	      return this.slice(0, -1);
	    },

	    isEmpty: function() {
	      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});
	    },

	    count: function(predicate, context) {
	      return ensureSize(
	        predicate ? this.toSeq().filter(predicate, context) : this
	      );
	    },

	    countBy: function(grouper, context) {
	      return countByFactory(this, grouper, context);
	    },

	    equals: function(other) {
	      return deepEqual(this, other);
	    },

	    entrySeq: function() {
	      var iterable = this;
	      if (iterable._cache) {
	        // We cache as an entries array, so we can just return the cache!
	        return new ArraySeq(iterable._cache);
	      }
	      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
	      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};
	      return entriesSequence;
	    },

	    filterNot: function(predicate, context) {
	      return this.filter(not(predicate), context);
	    },

	    findEntry: function(predicate, context, notSetValue) {
	      var found = notSetValue;
	      this.__iterate(function(v, k, c)  {
	        if (predicate.call(context, v, k, c)) {
	          found = [k, v];
	          return false;
	        }
	      });
	      return found;
	    },

	    findKey: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry && entry[0];
	    },

	    findLast: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
	    },

	    findLastEntry: function(predicate, context, notSetValue) {
	      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
	    },

	    findLastKey: function(predicate, context) {
	      return this.toKeyedSeq().reverse().findKey(predicate, context);
	    },

	    first: function() {
	      return this.find(returnTrue);
	    },

	    flatMap: function(mapper, context) {
	      return reify(this, flatMapFactory(this, mapper, context));
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, true));
	    },

	    fromEntrySeq: function() {
	      return new FromEntriesSequence(this);
	    },

	    get: function(searchKey, notSetValue) {
	      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);
	    },

	    getIn: function(searchKeyPath, notSetValue) {
	      var nested = this;
	      // Note: in an ES6 environment, we would prefer:
	      // for (var key of searchKeyPath) {
	      var iter = forceIterator(searchKeyPath);
	      var step;
	      while (!(step = iter.next()).done) {
	        var key = step.value;
	        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
	        if (nested === NOT_SET) {
	          return notSetValue;
	        }
	      }
	      return nested;
	    },

	    groupBy: function(grouper, context) {
	      return groupByFactory(this, grouper, context);
	    },

	    has: function(searchKey) {
	      return this.get(searchKey, NOT_SET) !== NOT_SET;
	    },

	    hasIn: function(searchKeyPath) {
	      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
	    },

	    isSubset: function(iter) {
	      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
	      return this.every(function(value ) {return iter.includes(value)});
	    },

	    isSuperset: function(iter) {
	      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
	      return iter.isSubset(this);
	    },

	    keyOf: function(searchValue) {
	      return this.findKey(function(value ) {return is(value, searchValue)});
	    },

	    keySeq: function() {
	      return this.toSeq().map(keyMapper).toIndexedSeq();
	    },

	    last: function() {
	      return this.toSeq().reverse().first();
	    },

	    lastKeyOf: function(searchValue) {
	      return this.toKeyedSeq().reverse().keyOf(searchValue);
	    },

	    max: function(comparator) {
	      return maxFactory(this, comparator);
	    },

	    maxBy: function(mapper, comparator) {
	      return maxFactory(this, comparator, mapper);
	    },

	    min: function(comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
	    },

	    minBy: function(mapper, comparator) {
	      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
	    },

	    rest: function() {
	      return this.slice(1);
	    },

	    skip: function(amount) {
	      return this.slice(Math.max(0, amount));
	    },

	    skipLast: function(amount) {
	      return reify(this, this.toSeq().reverse().skip(amount).reverse());
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, true));
	    },

	    skipUntil: function(predicate, context) {
	      return this.skipWhile(not(predicate), context);
	    },

	    sortBy: function(mapper, comparator) {
	      return reify(this, sortFactory(this, comparator, mapper));
	    },

	    take: function(amount) {
	      return this.slice(0, Math.max(0, amount));
	    },

	    takeLast: function(amount) {
	      return reify(this, this.toSeq().reverse().take(amount).reverse());
	    },

	    takeWhile: function(predicate, context) {
	      return reify(this, takeWhileFactory(this, predicate, context));
	    },

	    takeUntil: function(predicate, context) {
	      return this.takeWhile(not(predicate), context);
	    },

	    valueSeq: function() {
	      return this.toIndexedSeq();
	    },


	    // ### Hashable Object

	    hashCode: function() {
	      return this.__hash || (this.__hash = hashIterable(this));
	    }


	    // ### Internal

	    // abstract __iterate(fn, reverse)

	    // abstract __iterator(type, reverse)
	  });

	  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
	  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
	  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
	  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

	  var IterablePrototype = Iterable.prototype;
	  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
	  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
	  IterablePrototype.__toJS = IterablePrototype.toArray;
	  IterablePrototype.__toStringMapper = quoteString;
	  IterablePrototype.inspect =
	  IterablePrototype.toSource = function() { return this.toString(); };
	  IterablePrototype.chain = IterablePrototype.flatMap;
	  IterablePrototype.contains = IterablePrototype.includes;

	  mixin(KeyedIterable, {

	    // ### More sequential methods

	    flip: function() {
	      return reify(this, flipFactory(this));
	    },

	    mapEntries: function(mapper, context) {var this$0 = this;
	      var iterations = 0;
	      return reify(this,
	        this.toSeq().map(
	          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}
	        ).fromEntrySeq()
	      );
	    },

	    mapKeys: function(mapper, context) {var this$0 = this;
	      return reify(this,
	        this.toSeq().flip().map(
	          function(k, v)  {return mapper.call(context, k, v, this$0)}
	        ).flip()
	      );
	    }

	  });

	  var KeyedIterablePrototype = KeyedIterable.prototype;
	  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
	  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
	  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
	  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};



	  mixin(IndexedIterable, {

	    // ### Conversion to other types

	    toKeyedSeq: function() {
	      return new ToKeyedSequence(this, false);
	    },


	    // ### ES6 Collection methods (ES6 Array and Map)

	    filter: function(predicate, context) {
	      return reify(this, filterFactory(this, predicate, context, false));
	    },

	    findIndex: function(predicate, context) {
	      var entry = this.findEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },

	    indexOf: function(searchValue) {
	      var key = this.keyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },

	    lastIndexOf: function(searchValue) {
	      var key = this.lastKeyOf(searchValue);
	      return key === undefined ? -1 : key;
	    },

	    reverse: function() {
	      return reify(this, reverseFactory(this, false));
	    },

	    slice: function(begin, end) {
	      return reify(this, sliceFactory(this, begin, end, false));
	    },

	    splice: function(index, removeNum /*, ...values*/) {
	      var numArgs = arguments.length;
	      removeNum = Math.max(removeNum | 0, 0);
	      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {
	        return this;
	      }
	      // If index is negative, it should resolve relative to the size of the
	      // collection. However size may be expensive to compute if not cached, so
	      // only call count() if the number is in fact negative.
	      index = resolveBegin(index, index < 0 ? this.count() : this.size);
	      var spliced = this.slice(0, index);
	      return reify(
	        this,
	        numArgs === 1 ?
	          spliced :
	          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))
	      );
	    },


	    // ### More collection methods

	    findLastIndex: function(predicate, context) {
	      var entry = this.findLastEntry(predicate, context);
	      return entry ? entry[0] : -1;
	    },

	    first: function() {
	      return this.get(0);
	    },

	    flatten: function(depth) {
	      return reify(this, flattenFactory(this, depth, false));
	    },

	    get: function(index, notSetValue) {
	      index = wrapIndex(this, index);
	      return (index < 0 || (this.size === Infinity ||
	          (this.size !== undefined && index > this.size))) ?
	        notSetValue :
	        this.find(function(_, key)  {return key === index}, undefined, notSetValue);
	    },

	    has: function(index) {
	      index = wrapIndex(this, index);
	      return index >= 0 && (this.size !== undefined ?
	        this.size === Infinity || index < this.size :
	        this.indexOf(index) !== -1
	      );
	    },

	    interpose: function(separator) {
	      return reify(this, interposeFactory(this, separator));
	    },

	    interleave: function(/*...iterables*/) {
	      var iterables = [this].concat(arrCopy(arguments));
	      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
	      var interleaved = zipped.flatten(true);
	      if (zipped.size) {
	        interleaved.size = zipped.size * iterables.length;
	      }
	      return reify(this, interleaved);
	    },

	    keySeq: function() {
	      return Range(0, this.size);
	    },

	    last: function() {
	      return this.get(-1);
	    },

	    skipWhile: function(predicate, context) {
	      return reify(this, skipWhileFactory(this, predicate, context, false));
	    },

	    zip: function(/*, ...iterables */) {
	      var iterables = [this].concat(arrCopy(arguments));
	      return reify(this, zipWithFactory(this, defaultZipper, iterables));
	    },

	    zipWith: function(zipper/*, ...iterables */) {
	      var iterables = arrCopy(arguments);
	      iterables[0] = this;
	      return reify(this, zipWithFactory(this, zipper, iterables));
	    }

	  });

	  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
	  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;



	  mixin(SetIterable, {

	    // ### ES6 Collection methods (ES6 Array and Map)

	    get: function(value, notSetValue) {
	      return this.has(value) ? value : notSetValue;
	    },

	    includes: function(value) {
	      return this.has(value);
	    },


	    // ### More sequential methods

	    keySeq: function() {
	      return this.valueSeq();
	    }

	  });

	  SetIterable.prototype.has = IterablePrototype.includes;
	  SetIterable.prototype.contains = SetIterable.prototype.includes;


	  // Mixin subclasses

	  mixin(KeyedSeq, KeyedIterable.prototype);
	  mixin(IndexedSeq, IndexedIterable.prototype);
	  mixin(SetSeq, SetIterable.prototype);

	  mixin(KeyedCollection, KeyedIterable.prototype);
	  mixin(IndexedCollection, IndexedIterable.prototype);
	  mixin(SetCollection, SetIterable.prototype);


	  // #pragma Helper functions

	  function keyMapper(v, k) {
	    return k;
	  }

	  function entryMapper(v, k) {
	    return [k, v];
	  }

	  function not(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    }
	  }

	  function neg(predicate) {
	    return function() {
	      return -predicate.apply(this, arguments);
	    }
	  }

	  function quoteString(value) {
	    return typeof value === 'string' ? JSON.stringify(value) : String(value);
	  }

	  function defaultZipper() {
	    return arrCopy(arguments);
	  }

	  function defaultNegComparator(a, b) {
	    return a < b ? 1 : a > b ? -1 : 0;
	  }

	  function hashIterable(iterable) {
	    if (iterable.size === Infinity) {
	      return 0;
	    }
	    var ordered = isOrdered(iterable);
	    var keyed = isKeyed(iterable);
	    var h = ordered ? 1 : 0;
	    var size = iterable.__iterate(
	      keyed ?
	        ordered ?
	          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :
	          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :
	        ordered ?
	          function(v ) { h = 31 * h + hash(v) | 0; } :
	          function(v ) { h = h + hash(v) | 0; }
	    );
	    return murmurHashOfSize(size, h);
	  }

	  function murmurHashOfSize(size, h) {
	    h = imul(h, 0xCC9E2D51);
	    h = imul(h << 15 | h >>> -15, 0x1B873593);
	    h = imul(h << 13 | h >>> -13, 5);
	    h = (h + 0xE6546B64 | 0) ^ size;
	    h = imul(h ^ h >>> 16, 0x85EBCA6B);
	    h = imul(h ^ h >>> 13, 0xC2B2AE35);
	    h = smi(h ^ h >>> 16);
	    return h;
	  }

	  function hashMerge(a, b) {
	    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int
	  }

	  var Immutable = {

	    Iterable: Iterable,

	    Seq: Seq,
	    Collection: Collection,
	    Map: Map,
	    OrderedMap: OrderedMap,
	    List: List,
	    Stack: Stack,
	    Set: Set,
	    OrderedSet: OrderedSet,

	    Record: Record,
	    Range: Range,
	    Repeat: Repeat,

	    is: is,
	    fromJS: fromJS

	  };

	  return Immutable;

	}));
	});

	var $JSON$1 = _core.JSON || (_core.JSON = { stringify: JSON.stringify });
	var stringify = function stringify(it) { // eslint-disable-line no-unused-vars
	  return $JSON$1.stringify.apply($JSON$1, arguments);
	};

	var stringify$1 = createCommonjsModule(function (module) {
	module.exports = { "default": stringify, __esModule: true };
	});

	unwrapExports(stringify$1);

	var ITERATOR$4 = _wks('iterator');

	var core_isIterable = _core.isIterable = function (it) {
	  var O = Object(it);
	  return O[ITERATOR$4] !== undefined
	    || '@@iterator' in O
	    // eslint-disable-next-line no-prototype-builtins
	    || _iterators.hasOwnProperty(_classof(O));
	};

	var isIterable = core_isIterable;

	var isIterable$1 = createCommonjsModule(function (module) {
	module.exports = { "default": isIterable, __esModule: true };
	});

	unwrapExports(isIterable$1);

	var slicedToArray$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _isIterable3 = _interopRequireDefault(isIterable$1);



	var _getIterator3 = _interopRequireDefault(getIterator$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;

	    try {
	      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if ((0, _isIterable3.default)(Object(arr))) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();
	});

	unwrapExports(slicedToArray$1);

	var runtime = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	!(function(global) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  var inModule = 'object' === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }

	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  runtime.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }

	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  runtime.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );

	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        if (delegate.iterator.return) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  Gp[toStringTagSymbol] = "Generator";

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;

	  function doneResult() {
	    return { value: undefined, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined;
	      }

	      return ContinueSentinel;
	    }
	  };
	})(
	  // In sloppy mode, unbound `this` refers to the global object, fallback to
	  // Function constructor if we're in global strict mode. That is sadly a form
	  // of indirect eval which violates Content Security Policy.
	  (function() { return this })() || Function("return this")()
	);
	});

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	// This method of obtaining a reference to the global object needs to be
	// kept identical to the way it is obtained in runtime.js
	var g = (function() { return this })() || Function("return this")();

	// Use `getOwnPropertyNames` because not all browsers support calling
	// `hasOwnProperty` on the global `self` object in a worker. See #183.
	var hadRuntime = g.regeneratorRuntime &&
	  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

	// Save the old regeneratorRuntime in case it needs to be restored later.
	var oldRuntime = hadRuntime && g.regeneratorRuntime;

	// Force reevalutation of runtime.js.
	g.regeneratorRuntime = undefined;

	var runtimeModule = runtime;

	if (hadRuntime) {
	  // Restore the original runtime.
	  g.regeneratorRuntime = oldRuntime;
	} else {
	  // Remove the global property added by runtime.js.
	  try {
	    delete g.regeneratorRuntime;
	  } catch(e) {
	    g.regeneratorRuntime = undefined;
	  }
	}

	var regenerator = runtimeModule;

	var hookCallback;

	function hooks () {
	    return hookCallback.apply(null, arguments);
	}

	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback (callback) {
	    hookCallback = callback;
	}

	function isArray$1(input) {
	    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}

	function isObject$1(input) {
	    // IE8 will treat undefined and null as object if it wasn't for
	    // input != null
	    return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}

	function isObjectEmpty(obj) {
	    if (Object.getOwnPropertyNames) {
	        return (Object.getOwnPropertyNames(obj).length === 0);
	    } else {
	        var k;
	        for (k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                return false;
	            }
	        }
	        return true;
	    }
	}

	function isUndefined(input) {
	    return input === void 0;
	}

	function isNumber(input) {
	    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}

	function isDate(input) {
	    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}

	function map$3(arr, fn) {
	    var res = [], i;
	    for (i = 0; i < arr.length; ++i) {
	        res.push(fn(arr[i], i));
	    }
	    return res;
	}

	function hasOwnProp(a, b) {
	    return Object.prototype.hasOwnProperty.call(a, b);
	}

	function extend(a, b) {
	    for (var i in b) {
	        if (hasOwnProp(b, i)) {
	            a[i] = b[i];
	        }
	    }

	    if (hasOwnProp(b, 'toString')) {
	        a.toString = b.toString;
	    }

	    if (hasOwnProp(b, 'valueOf')) {
	        a.valueOf = b.valueOf;
	    }

	    return a;
	}

	function createUTC (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, true).utc();
	}

	function defaultParsingFlags() {
	    // We need to deep clone this object.
	    return {
	        empty           : false,
	        unusedTokens    : [],
	        unusedInput     : [],
	        overflow        : -2,
	        charsLeftOver   : 0,
	        nullInput       : false,
	        invalidMonth    : null,
	        invalidFormat   : false,
	        userInvalidated : false,
	        iso             : false,
	        parsedDateParts : [],
	        meridiem        : null,
	        rfc2822         : false,
	        weekdayMismatch : false
	    };
	}

	function getParsingFlags(m) {
	    if (m._pf == null) {
	        m._pf = defaultParsingFlags();
	    }
	    return m._pf;
	}

	var some;
	if (Array.prototype.some) {
	    some = Array.prototype.some;
	} else {
	    some = function (fun) {
	        var t = Object(this);
	        var len = t.length >>> 0;

	        for (var i = 0; i < len; i++) {
	            if (i in t && fun.call(this, t[i], i, t)) {
	                return true;
	            }
	        }

	        return false;
	    };
	}

	function isValid(m) {
	    if (m._isValid == null) {
	        var flags = getParsingFlags(m);
	        var parsedParts = some.call(flags.parsedDateParts, function (i) {
	            return i != null;
	        });
	        var isNowValid = !isNaN(m._d.getTime()) &&
	            flags.overflow < 0 &&
	            !flags.empty &&
	            !flags.invalidMonth &&
	            !flags.invalidWeekday &&
	            !flags.weekdayMismatch &&
	            !flags.nullInput &&
	            !flags.invalidFormat &&
	            !flags.userInvalidated &&
	            (!flags.meridiem || (flags.meridiem && parsedParts));

	        if (m._strict) {
	            isNowValid = isNowValid &&
	                flags.charsLeftOver === 0 &&
	                flags.unusedTokens.length === 0 &&
	                flags.bigHour === undefined;
	        }

	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
	            m._isValid = isNowValid;
	        }
	        else {
	            return isNowValid;
	        }
	    }
	    return m._isValid;
	}

	function createInvalid (flags) {
	    var m = createUTC(NaN);
	    if (flags != null) {
	        extend(getParsingFlags(m), flags);
	    }
	    else {
	        getParsingFlags(m).userInvalidated = true;
	    }

	    return m;
	}

	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = hooks.momentProperties = [];

	function copyConfig(to, from) {
	    var i, prop, val;

	    if (!isUndefined(from._isAMomentObject)) {
	        to._isAMomentObject = from._isAMomentObject;
	    }
	    if (!isUndefined(from._i)) {
	        to._i = from._i;
	    }
	    if (!isUndefined(from._f)) {
	        to._f = from._f;
	    }
	    if (!isUndefined(from._l)) {
	        to._l = from._l;
	    }
	    if (!isUndefined(from._strict)) {
	        to._strict = from._strict;
	    }
	    if (!isUndefined(from._tzm)) {
	        to._tzm = from._tzm;
	    }
	    if (!isUndefined(from._isUTC)) {
	        to._isUTC = from._isUTC;
	    }
	    if (!isUndefined(from._offset)) {
	        to._offset = from._offset;
	    }
	    if (!isUndefined(from._pf)) {
	        to._pf = getParsingFlags(from);
	    }
	    if (!isUndefined(from._locale)) {
	        to._locale = from._locale;
	    }

	    if (momentProperties.length > 0) {
	        for (i = 0; i < momentProperties.length; i++) {
	            prop = momentProperties[i];
	            val = from[prop];
	            if (!isUndefined(val)) {
	                to[prop] = val;
	            }
	        }
	    }

	    return to;
	}

	var updateInProgress = false;

	// Moment prototype object
	function Moment(config) {
	    copyConfig(this, config);
	    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	    if (!this.isValid()) {
	        this._d = new Date(NaN);
	    }
	    // Prevent infinite loop in case updateOffset creates new moment
	    // objects.
	    if (updateInProgress === false) {
	        updateInProgress = true;
	        hooks.updateOffset(this);
	        updateInProgress = false;
	    }
	}

	function isMoment (obj) {
	    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	}

	function absFloor (number) {
	    if (number < 0) {
	        // -0 -> 0
	        return Math.ceil(number) || 0;
	    } else {
	        return Math.floor(number);
	    }
	}

	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion,
	        value = 0;

	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = absFloor(coercedNumber);
	    }

	    return value;
	}

	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
	    var len = Math.min(array1.length, array2.length),
	        lengthDiff = Math.abs(array1.length - array2.length),
	        diffs = 0,
	        i;
	    for (i = 0; i < len; i++) {
	        if ((dontConvert && array1[i] !== array2[i]) ||
	            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	            diffs++;
	        }
	    }
	    return diffs + lengthDiff;
	}

	function warn(msg) {
	    if (hooks.suppressDeprecationWarnings === false &&
	            (typeof console !==  'undefined') && console.warn) {
	        console.warn('Deprecation warning: ' + msg);
	    }
	}

	function deprecate(msg, fn) {
	    var firstTime = true;

	    return extend(function () {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(null, msg);
	        }
	        if (firstTime) {
	            var args = [];
	            var arg;
	            for (var i = 0; i < arguments.length; i++) {
	                arg = '';
	                if (typeof arguments[i] === 'object') {
	                    arg += '\n[' + i + '] ';
	                    for (var key in arguments[0]) {
	                        arg += key + ': ' + arguments[0][key] + ', ';
	                    }
	                    arg = arg.slice(0, -2); // Remove trailing comma and space
	                } else {
	                    arg = arguments[i];
	                }
	                args.push(arg);
	            }
	            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	            firstTime = false;
	        }
	        return fn.apply(this, arguments);
	    }, fn);
	}

	var deprecations = {};

	function deprecateSimple(name, msg) {
	    if (hooks.deprecationHandler != null) {
	        hooks.deprecationHandler(name, msg);
	    }
	    if (!deprecations[name]) {
	        warn(msg);
	        deprecations[name] = true;
	    }
	}

	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;

	function isFunction$1(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}

	function set$2 (config) {
	    var prop, i;
	    for (i in config) {
	        prop = config[i];
	        if (isFunction$1(prop)) {
	            this[i] = prop;
	        } else {
	            this['_' + i] = prop;
	        }
	    }
	    this._config = config;
	    // Lenient ordinal parsing accepts just a number in addition to
	    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    this._dayOfMonthOrdinalParseLenient = new RegExp(
	        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	            '|' + (/\d{1,2}/).source);
	}

	function mergeConfigs(parentConfig, childConfig) {
	    var res = extend({}, parentConfig), prop;
	    for (prop in childConfig) {
	        if (hasOwnProp(childConfig, prop)) {
	            if (isObject$1(parentConfig[prop]) && isObject$1(childConfig[prop])) {
	                res[prop] = {};
	                extend(res[prop], parentConfig[prop]);
	                extend(res[prop], childConfig[prop]);
	            } else if (childConfig[prop] != null) {
	                res[prop] = childConfig[prop];
	            } else {
	                delete res[prop];
	            }
	        }
	    }
	    for (prop in parentConfig) {
	        if (hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject$1(parentConfig[prop])) {
	            // make sure changes to properties don't modify parent config
	            res[prop] = extend({}, res[prop]);
	        }
	    }
	    return res;
	}

	function Locale(config) {
	    if (config != null) {
	        this.set(config);
	    }
	}

	var keys$3;

	if (Object.keys) {
	    keys$3 = Object.keys;
	} else {
	    keys$3 = function (obj) {
	        var i, res = [];
	        for (i in obj) {
	            if (hasOwnProp(obj, i)) {
	                res.push(i);
	            }
	        }
	        return res;
	    };
	}

	var defaultCalendar = {
	    sameDay : '[Today at] LT',
	    nextDay : '[Tomorrow at] LT',
	    nextWeek : 'dddd [at] LT',
	    lastDay : '[Yesterday at] LT',
	    lastWeek : '[Last] dddd [at] LT',
	    sameElse : 'L'
	};

	function calendar (key, mom, now) {
	    var output = this._calendar[key] || this._calendar['sameElse'];
	    return isFunction$1(output) ? output.call(mom, now) : output;
	}

	var defaultLongDateFormat = {
	    LTS  : 'h:mm:ss A',
	    LT   : 'h:mm A',
	    L    : 'MM/DD/YYYY',
	    LL   : 'MMMM D, YYYY',
	    LLL  : 'MMMM D, YYYY h:mm A',
	    LLLL : 'dddd, MMMM D, YYYY h:mm A'
	};

	function longDateFormat (key) {
	    var format = this._longDateFormat[key],
	        formatUpper = this._longDateFormat[key.toUpperCase()];

	    if (format || !formatUpper) {
	        return format;
	    }

	    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	        return val.slice(1);
	    });

	    return this._longDateFormat[key];
	}

	var defaultInvalidDate = 'Invalid date';

	function invalidDate () {
	    return this._invalidDate;
	}

	var defaultOrdinal = '%d';
	var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	function ordinal (number) {
	    return this._ordinal.replace('%d', number);
	}

	var defaultRelativeTime = {
	    future : 'in %s',
	    past   : '%s ago',
	    s  : 'a few seconds',
	    ss : '%d seconds',
	    m  : 'a minute',
	    mm : '%d minutes',
	    h  : 'an hour',
	    hh : '%d hours',
	    d  : 'a day',
	    dd : '%d days',
	    M  : 'a month',
	    MM : '%d months',
	    y  : 'a year',
	    yy : '%d years'
	};

	function relativeTime (number, withoutSuffix, string, isFuture) {
	    var output = this._relativeTime[string];
	    return (isFunction$1(output)) ?
	        output(number, withoutSuffix, string, isFuture) :
	        output.replace(/%d/i, number);
	}

	function pastFuture (diff, output) {
	    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	    return isFunction$1(format) ? format(output) : format.replace(/%s/i, output);
	}

	var aliases = {};

	function addUnitAlias (unit, shorthand) {
	    var lowerCase = unit.toLowerCase();
	    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}

	function normalizeUnits(units) {
	    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}

	function normalizeObjectUnits(inputObject) {
	    var normalizedInput = {},
	        normalizedProp,
	        prop;

	    for (prop in inputObject) {
	        if (hasOwnProp(inputObject, prop)) {
	            normalizedProp = normalizeUnits(prop);
	            if (normalizedProp) {
	                normalizedInput[normalizedProp] = inputObject[prop];
	            }
	        }
	    }

	    return normalizedInput;
	}

	var priorities = {};

	function addUnitPriority(unit, priority) {
	    priorities[unit] = priority;
	}

	function getPrioritizedUnits(unitsObj) {
	    var units = [];
	    for (var u in unitsObj) {
	        units.push({unit: u, priority: priorities[u]});
	    }
	    units.sort(function (a, b) {
	        return a.priority - b.priority;
	    });
	    return units;
	}

	function zeroFill(number, targetLength, forceSign) {
	    var absNumber = '' + Math.abs(number),
	        zerosToFill = targetLength - absNumber.length,
	        sign = number >= 0;
	    return (sign ? (forceSign ? '+' : '') : '-') +
	        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}

	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	var formatFunctions = {};

	var formatTokenFunctions = {};

	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken (token, padded, ordinal, callback) {
	    var func = callback;
	    if (typeof callback === 'string') {
	        func = function () {
	            return this[callback]();
	        };
	    }
	    if (token) {
	        formatTokenFunctions[token] = func;
	    }
	    if (padded) {
	        formatTokenFunctions[padded[0]] = function () {
	            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	        };
	    }
	    if (ordinal) {
	        formatTokenFunctions[ordinal] = function () {
	            return this.localeData().ordinal(func.apply(this, arguments), token);
	        };
	    }
	}

	function removeFormattingTokens(input) {
	    if (input.match(/\[[\s\S]/)) {
	        return input.replace(/^\[|\]$/g, '');
	    }
	    return input.replace(/\\/g, '');
	}

	function makeFormatFunction(format) {
	    var array = format.match(formattingTokens), i, length;

	    for (i = 0, length = array.length; i < length; i++) {
	        if (formatTokenFunctions[array[i]]) {
	            array[i] = formatTokenFunctions[array[i]];
	        } else {
	            array[i] = removeFormattingTokens(array[i]);
	        }
	    }

	    return function (mom) {
	        var output = '', i;
	        for (i = 0; i < length; i++) {
	            output += isFunction$1(array[i]) ? array[i].call(mom, format) : array[i];
	        }
	        return output;
	    };
	}

	// format date using native date object
	function formatMoment(m, format) {
	    if (!m.isValid()) {
	        return m.localeData().invalidDate();
	    }

	    format = expandFormat(format, m.localeData());
	    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	    return formatFunctions[format](m);
	}

	function expandFormat(format, locale) {
	    var i = 5;

	    function replaceLongDateFormatTokens(input) {
	        return locale.longDateFormat(input) || input;
	    }

	    localFormattingTokens.lastIndex = 0;
	    while (i >= 0 && localFormattingTokens.test(format)) {
	        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	        localFormattingTokens.lastIndex = 0;
	        i -= 1;
	    }

	    return format;
	}

	var match1         = /\d/;            //       0 - 9
	var match2         = /\d\d/;          //      00 - 99
	var match3         = /\d{3}/;         //     000 - 999
	var match4         = /\d{4}/;         //    0000 - 9999
	var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	var match1to2      = /\d\d?/;         //       0 - 99
	var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	var match1to3      = /\d{1,3}/;       //       0 - 999
	var match1to4      = /\d{1,4}/;       //       0 - 9999
	var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	var matchUnsigned  = /\d+/;           //       0 - inf
	var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

	var regexes = {};

	function addRegexToken (token, regex, strictRegex) {
	    regexes[token] = isFunction$1(regex) ? regex : function (isStrict, localeData) {
	        return (isStrict && strictRegex) ? strictRegex : regex;
	    };
	}

	function getParseRegexForToken (token, config) {
	    if (!hasOwnProp(regexes, token)) {
	        return new RegExp(unescapeFormat(token));
	    }

	    return regexes[token](config._strict, config._locale);
	}

	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
	    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	        return p1 || p2 || p3 || p4;
	    }));
	}

	function regexEscape(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}

	var tokens = {};

	function addParseToken (token, callback) {
	    var i, func = callback;
	    if (typeof token === 'string') {
	        token = [token];
	    }
	    if (isNumber(callback)) {
	        func = function (input, array) {
	            array[callback] = toInt(input);
	        };
	    }
	    for (i = 0; i < token.length; i++) {
	        tokens[token[i]] = func;
	    }
	}

	function addWeekParseToken (token, callback) {
	    addParseToken(token, function (input, array, config, token) {
	        config._w = config._w || {};
	        callback(input, config._w, config, token);
	    });
	}

	function addTimeToArrayFromToken(token, input, config) {
	    if (input != null && hasOwnProp(tokens, token)) {
	        tokens[token](input, config._a, config, token);
	    }
	}

	var YEAR = 0;
	var MONTH = 1;
	var DATE = 2;
	var HOUR = 3;
	var MINUTE = 4;
	var SECOND = 5;
	var MILLISECOND = 6;
	var WEEK = 7;
	var WEEKDAY = 8;

	// FORMATTING

	addFormatToken('Y', 0, 0, function () {
	    var y = this.year();
	    return y <= 9999 ? '' + y : '+' + y;
	});

	addFormatToken(0, ['YY', 2], 0, function () {
	    return this.year() % 100;
	});

	addFormatToken(0, ['YYYY',   4],       0, 'year');
	addFormatToken(0, ['YYYYY',  5],       0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	// ALIASES

	addUnitAlias('year', 'y');

	// PRIORITIES

	addUnitPriority('year', 1);

	// PARSING

	addRegexToken('Y',      matchSigned);
	addRegexToken('YY',     match1to2, match2);
	addRegexToken('YYYY',   match1to4, match4);
	addRegexToken('YYYYY',  match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);

	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	    array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	    array[YEAR] = parseInt(input, 10);
	});

	// HELPERS

	function daysInYear(year) {
	    return isLeapYear(year) ? 366 : 365;
	}

	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}

	// HOOKS

	hooks.parseTwoDigitYear = function (input) {
	    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};

	// MOMENTS

	var getSetYear = makeGetSet('FullYear', true);

	function getIsLeapYear () {
	    return isLeapYear(this.year());
	}

	function makeGetSet (unit, keepTime) {
	    return function (value) {
	        if (value != null) {
	            set$3(this, unit, value);
	            hooks.updateOffset(this, keepTime);
	            return this;
	        } else {
	            return get$1(this, unit);
	        }
	    };
	}

	function get$1 (mom, unit) {
	    return mom.isValid() ?
	        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}

	function set$3 (mom, unit, value) {
	    if (mom.isValid() && !isNaN(value)) {
	        if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
	        }
	        else {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }
	}

	// MOMENTS

	function stringGet (units) {
	    units = normalizeUnits(units);
	    if (isFunction$1(this[units])) {
	        return this[units]();
	    }
	    return this;
	}


	function stringSet (units, value) {
	    if (typeof units === 'object') {
	        units = normalizeObjectUnits(units);
	        var prioritized = getPrioritizedUnits(units);
	        for (var i = 0; i < prioritized.length; i++) {
	            this[prioritized[i].unit](units[prioritized[i].unit]);
	        }
	    } else {
	        units = normalizeUnits(units);
	        if (isFunction$1(this[units])) {
	            return this[units](value);
	        }
	    }
	    return this;
	}

	function mod(n, x) {
	    return ((n % x) + x) % x;
	}

	var indexOf;

	if (Array.prototype.indexOf) {
	    indexOf = Array.prototype.indexOf;
	} else {
	    indexOf = function (o) {
	        // I know
	        var i;
	        for (i = 0; i < this.length; ++i) {
	            if (this[i] === o) {
	                return i;
	            }
	        }
	        return -1;
	    };
	}

	function daysInMonth(year, month) {
	    if (isNaN(year) || isNaN(month)) {
	        return NaN;
	    }
	    var modMonth = mod(month, 12);
	    year += (month - modMonth) / 12;
	    return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
	}

	// FORMATTING

	addFormatToken('M', ['MM', 2], 'Mo', function () {
	    return this.month() + 1;
	});

	addFormatToken('MMM', 0, 0, function (format) {
	    return this.localeData().monthsShort(this, format);
	});

	addFormatToken('MMMM', 0, 0, function (format) {
	    return this.localeData().months(this, format);
	});

	// ALIASES

	addUnitAlias('month', 'M');

	// PRIORITY

	addUnitPriority('month', 8);

	// PARSING

	addRegexToken('M',    match1to2);
	addRegexToken('MM',   match1to2, match2);
	addRegexToken('MMM',  function (isStrict, locale) {
	    return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	    return locale.monthsRegex(isStrict);
	});

	addParseToken(['M', 'MM'], function (input, array) {
	    array[MONTH] = toInt(input) - 1;
	});

	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	    var month = config._locale.monthsParse(input, token, config._strict);
	    // if we didn't find a month name, mark the date as invalid.
	    if (month != null) {
	        array[MONTH] = month;
	    } else {
	        getParsingFlags(config).invalidMonth = input;
	    }
	});

	// LOCALES

	var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	function localeMonths (m, format) {
	    if (!m) {
	        return isArray$1(this._months) ? this._months :
	            this._months['standalone'];
	    }
	    return isArray$1(this._months) ? this._months[m.month()] :
	        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}

	var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	function localeMonthsShort (m, format) {
	    if (!m) {
	        return isArray$1(this._monthsShort) ? this._monthsShort :
	            this._monthsShort['standalone'];
	    }
	    return isArray$1(this._monthsShort) ? this._monthsShort[m.month()] :
	        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}

	function handleStrictParse(monthName, format, strict) {
	    var i, ii, mom, llc = monthName.toLocaleLowerCase();
	    if (!this._monthsParse) {
	        // this is not used
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	        for (i = 0; i < 12; ++i) {
	            mom = createUTC([2000, i]);
	            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'MMM') {
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'MMM') {
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._longMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeMonthsParse (monthName, format, strict) {
	    var i, mom, regex;

	    if (this._monthsParseExact) {
	        return handleStrictParse.call(this, monthName, format, strict);
	    }

	    if (!this._monthsParse) {
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	    }

	    // TODO: add sorting
	    // Sorting makes sure if one month (or abbr) is a prefix of another
	    // see sorting in computeMonthsParse
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        if (strict && !this._longMonthsParse[i]) {
	            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	        }
	        if (!strict && !this._monthsParse[i]) {
	            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (!strict && this._monthsParse[i].test(monthName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function setMonth (mom, value) {
	    var dayOfMonth;

	    if (!mom.isValid()) {
	        // No op
	        return mom;
	    }

	    if (typeof value === 'string') {
	        if (/^\d+$/.test(value)) {
	            value = toInt(value);
	        } else {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (!isNumber(value)) {
	                return mom;
	            }
	        }
	    }

	    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	    return mom;
	}

	function getSetMonth (value) {
	    if (value != null) {
	        setMonth(this, value);
	        hooks.updateOffset(this, true);
	        return this;
	    } else {
	        return get$1(this, 'Month');
	    }
	}

	function getDaysInMonth () {
	    return daysInMonth(this.year(), this.month());
	}

	var defaultMonthsShortRegex = matchWord;
	function monthsShortRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsShortStrictRegex;
	        } else {
	            return this._monthsShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsShortRegex')) {
	            this._monthsShortRegex = defaultMonthsShortRegex;
	        }
	        return this._monthsShortStrictRegex && isStrict ?
	            this._monthsShortStrictRegex : this._monthsShortRegex;
	    }
	}

	var defaultMonthsRegex = matchWord;
	function monthsRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsStrictRegex;
	        } else {
	            return this._monthsRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            this._monthsRegex = defaultMonthsRegex;
	        }
	        return this._monthsStrictRegex && isStrict ?
	            this._monthsStrictRegex : this._monthsRegex;
	    }
	}

	function computeMonthsParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom;
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        shortPieces.push(this.monthsShort(mom, ''));
	        longPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.monthsShort(mom, ''));
	    }
	    // Sorting makes sure if one month (or abbr) is a prefix of another it
	    // will match the longer piece.
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 12; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	    }
	    for (i = 0; i < 24; i++) {
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._monthsShortRegex = this._monthsRegex;
	    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}

	function createDate (y, m, d, h, M, s, ms) {
	    // can't just apply() to create a date:
	    // https://stackoverflow.com/q/181348
	    var date = new Date(y, m, d, h, M, s, ms);

	    // the date constructor remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	        date.setFullYear(y);
	    }
	    return date;
	}

	function createUTCDate (y) {
	    var date = new Date(Date.UTC.apply(null, arguments));

	    // the Date.UTC function remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	        date.setUTCFullYear(y);
	    }
	    return date;
	}

	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
	    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	    return -fwdlw + fwd - 1;
	}

	// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	    var localWeekday = (7 + weekday - dow) % 7,
	        weekOffset = firstWeekOffset(year, dow, doy),
	        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	        resYear, resDayOfYear;

	    if (dayOfYear <= 0) {
	        resYear = year - 1;
	        resDayOfYear = daysInYear(resYear) + dayOfYear;
	    } else if (dayOfYear > daysInYear(year)) {
	        resYear = year + 1;
	        resDayOfYear = dayOfYear - daysInYear(year);
	    } else {
	        resYear = year;
	        resDayOfYear = dayOfYear;
	    }

	    return {
	        year: resYear,
	        dayOfYear: resDayOfYear
	    };
	}

	function weekOfYear(mom, dow, doy) {
	    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	        resWeek, resYear;

	    if (week < 1) {
	        resYear = mom.year() - 1;
	        resWeek = week + weeksInYear(resYear, dow, doy);
	    } else if (week > weeksInYear(mom.year(), dow, doy)) {
	        resWeek = week - weeksInYear(mom.year(), dow, doy);
	        resYear = mom.year() + 1;
	    } else {
	        resYear = mom.year();
	        resWeek = week;
	    }

	    return {
	        week: resWeek,
	        year: resYear
	    };
	}

	function weeksInYear(year, dow, doy) {
	    var weekOffset = firstWeekOffset(year, dow, doy),
	        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}

	// FORMATTING

	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	// ALIASES

	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');

	// PRIORITIES

	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);

	// PARSING

	addRegexToken('w',  match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W',  match1to2);
	addRegexToken('WW', match1to2, match2);

	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	    week[token.substr(0, 1)] = toInt(input);
	});

	// HELPERS

	// LOCALES

	function localeWeek (mom) {
	    return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}

	var defaultLocaleWeek = {
	    dow : 0, // Sunday is the first day of the week.
	    doy : 6  // The week that contains Jan 1st is the first week of the year.
	};

	function localeFirstDayOfWeek () {
	    return this._week.dow;
	}

	function localeFirstDayOfYear () {
	    return this._week.doy;
	}

	// MOMENTS

	function getSetWeek (input) {
	    var week = this.localeData().week(this);
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	function getSetISOWeek (input) {
	    var week = weekOfYear(this, 1, 4).week;
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	// FORMATTING

	addFormatToken('d', 0, 'do', 'day');

	addFormatToken('dd', 0, 0, function (format) {
	    return this.localeData().weekdaysMin(this, format);
	});

	addFormatToken('ddd', 0, 0, function (format) {
	    return this.localeData().weekdaysShort(this, format);
	});

	addFormatToken('dddd', 0, 0, function (format) {
	    return this.localeData().weekdays(this, format);
	});

	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');

	// ALIASES

	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');

	// PRIORITY
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);

	// PARSING

	addRegexToken('d',    match1to2);
	addRegexToken('e',    match1to2);
	addRegexToken('E',    match1to2);
	addRegexToken('dd',   function (isStrict, locale) {
	    return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd',   function (isStrict, locale) {
	    return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd',   function (isStrict, locale) {
	    return locale.weekdaysRegex(isStrict);
	});

	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	    var weekday = config._locale.weekdaysParse(input, token, config._strict);
	    // if we didn't get a weekday name, mark the date as invalid
	    if (weekday != null) {
	        week.d = weekday;
	    } else {
	        getParsingFlags(config).invalidWeekday = input;
	    }
	});

	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	    week[token] = toInt(input);
	});

	// HELPERS

	function parseWeekday(input, locale) {
	    if (typeof input !== 'string') {
	        return input;
	    }

	    if (!isNaN(input)) {
	        return parseInt(input, 10);
	    }

	    input = locale.weekdaysParse(input);
	    if (typeof input === 'number') {
	        return input;
	    }

	    return null;
	}

	function parseIsoWeekday(input, locale) {
	    if (typeof input === 'string') {
	        return locale.weekdaysParse(input) % 7 || 7;
	    }
	    return isNaN(input) ? null : input;
	}

	// LOCALES

	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	function localeWeekdays (m, format) {
	    if (!m) {
	        return isArray$1(this._weekdays) ? this._weekdays :
	            this._weekdays['standalone'];
	    }
	    return isArray$1(this._weekdays) ? this._weekdays[m.day()] :
	        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	}

	var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	function localeWeekdaysShort (m) {
	    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}

	var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	function localeWeekdaysMin (m) {
	    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}

	function handleStrictParse$1(weekdayName, format, strict) {
	    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._minWeekdaysParse = [];

	        for (i = 0; i < 7; ++i) {
	            mom = createUTC([2000, 1]).day(i);
	            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'dddd') {
	            ii = indexOf.call(this._weekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'dddd') {
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeWeekdaysParse (weekdayName, format, strict) {
	    var i, mom, regex;

	    if (this._weekdaysParseExact) {
	        return handleStrictParse$1.call(this, weekdayName, format, strict);
	    }

	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._minWeekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._fullWeekdaysParse = [];
	    }

	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already

	        mom = createUTC([2000, 1]).day(i);
	        if (strict && !this._fullWeekdaysParse[i]) {
	            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
	            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
	            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
	        }
	        if (!this._weekdaysParse[i]) {
	            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function getSetDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	    if (input != null) {
	        input = parseWeekday(input, this.localeData());
	        return this.add(input - day, 'd');
	    } else {
	        return day;
	    }
	}

	function getSetLocaleDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	    return input == null ? weekday : this.add(input - weekday, 'd');
	}

	function getSetISODayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }

	    // behaves the same as moment#day except
	    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	    // as a setter, sunday should belong to the previous week.

	    if (input != null) {
	        var weekday = parseIsoWeekday(input, this.localeData());
	        return this.day(this.day() % 7 ? weekday : weekday - 7);
	    } else {
	        return this.day() || 7;
	    }
	}

	var defaultWeekdaysRegex = matchWord;
	function weekdaysRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysStrictRegex;
	        } else {
	            return this._weekdaysRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            this._weekdaysRegex = defaultWeekdaysRegex;
	        }
	        return this._weekdaysStrictRegex && isStrict ?
	            this._weekdaysStrictRegex : this._weekdaysRegex;
	    }
	}

	var defaultWeekdaysShortRegex = matchWord;
	function weekdaysShortRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysShortStrictRegex;
	        } else {
	            return this._weekdaysShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	        }
	        return this._weekdaysShortStrictRegex && isStrict ?
	            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	    }
	}

	var defaultWeekdaysMinRegex = matchWord;
	function weekdaysMinRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysMinStrictRegex;
	        } else {
	            return this._weekdaysMinRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	        }
	        return this._weekdaysMinStrictRegex && isStrict ?
	            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	    }
	}


	function computeWeekdaysParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom, minp, shortp, longp;
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, 1]).day(i);
	        minp = this.weekdaysMin(mom, '');
	        shortp = this.weekdaysShort(mom, '');
	        longp = this.weekdays(mom, '');
	        minPieces.push(minp);
	        shortPieces.push(shortp);
	        longPieces.push(longp);
	        mixedPieces.push(minp);
	        mixedPieces.push(shortp);
	        mixedPieces.push(longp);
	    }
	    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	    // will match the longer piece.
	    minPieces.sort(cmpLenRev);
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 7; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._weekdaysShortRegex = this._weekdaysRegex;
	    this._weekdaysMinRegex = this._weekdaysRegex;

	    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}

	// FORMATTING

	function hFormat() {
	    return this.hours() % 12 || 12;
	}

	function kFormat() {
	    return this.hours() || 24;
	}

	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);

	addFormatToken('hmm', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});

	addFormatToken('hmmss', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	addFormatToken('Hmm', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2);
	});

	addFormatToken('Hmmss', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	function meridiem (token, lowercase) {
	    addFormatToken(token, 0, 0, function () {
	        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	    });
	}

	meridiem('a', true);
	meridiem('A', false);

	// ALIASES

	addUnitAlias('hour', 'h');

	// PRIORITY
	addUnitPriority('hour', 13);

	// PARSING

	function matchMeridiem (isStrict, locale) {
	    return locale._meridiemParse;
	}

	addRegexToken('a',  matchMeridiem);
	addRegexToken('A',  matchMeridiem);
	addRegexToken('H',  match1to2);
	addRegexToken('h',  match1to2);
	addRegexToken('k',  match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);
	addRegexToken('kk', match1to2, match2);

	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);

	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['k', 'kk'], function (input, array, config) {
	    var kInput = toInt(input);
	    array[HOUR] = kInput === 24 ? 0 : kInput;
	});
	addParseToken(['a', 'A'], function (input, array, config) {
	    config._isPm = config._locale.isPM(input);
	    config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	    array[HOUR] = toInt(input);
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	});

	// LOCALES

	function localeIsPM (input) {
	    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	    // Using charAt should be more compatible.
	    return ((input + '').toLowerCase().charAt(0) === 'p');
	}

	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	function localeMeridiem (hours, minutes, isLower) {
	    if (hours > 11) {
	        return isLower ? 'pm' : 'PM';
	    } else {
	        return isLower ? 'am' : 'AM';
	    }
	}


	// MOMENTS

	// Setting the hour should keep the time, because the user explicitly
	// specified which hour he wants. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour = makeGetSet('Hours', true);

	var baseConfig = {
	    calendar: defaultCalendar,
	    longDateFormat: defaultLongDateFormat,
	    invalidDate: defaultInvalidDate,
	    ordinal: defaultOrdinal,
	    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	    relativeTime: defaultRelativeTime,

	    months: defaultLocaleMonths,
	    monthsShort: defaultLocaleMonthsShort,

	    week: defaultLocaleWeek,

	    weekdays: defaultLocaleWeekdays,
	    weekdaysMin: defaultLocaleWeekdaysMin,
	    weekdaysShort: defaultLocaleWeekdaysShort,

	    meridiemParse: defaultLocaleMeridiemParse
	};

	// internal storage for locale config files
	var locales = {};
	var localeFamilies = {};
	var globalLocale;

	function normalizeLocale(key) {
	    return key ? key.toLowerCase().replace('_', '-') : key;
	}

	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
	    var i = 0, j, next, locale, split;

	    while (i < names.length) {
	        split = normalizeLocale(names[i]).split('-');
	        j = split.length;
	        next = normalizeLocale(names[i + 1]);
	        next = next ? next.split('-') : null;
	        while (j > 0) {
	            locale = loadLocale(split.slice(0, j).join('-'));
	            if (locale) {
	                return locale;
	            }
	            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                //the next array item is better than a shallower substring of this one
	                break;
	            }
	            j--;
	        }
	        i++;
	    }
	    return globalLocale;
	}

	function loadLocale(name) {
	    var oldLocale = null;
	    // TODO: Find a better way to register and load all the locales in Node
	    if (!locales[name] && (typeof module !== 'undefined') &&
	            module && module.exports) {
	        try {
	            oldLocale = globalLocale._abbr;
	            var aliasedRequire = require;
	            aliasedRequire('./locale/' + name);
	            getSetGlobalLocale(oldLocale);
	        } catch (e) {}
	    }
	    return locales[name];
	}

	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale (key, values) {
	    var data;
	    if (key) {
	        if (isUndefined(values)) {
	            data = getLocale(key);
	        }
	        else {
	            data = defineLocale(key, values);
	        }

	        if (data) {
	            // moment.duration._locale = moment._locale = data;
	            globalLocale = data;
	        }
	        else {
	            if ((typeof console !==  'undefined') && console.warn) {
	                //warn user if arguments are passed but the locale could not be set
	                console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
	            }
	        }
	    }

	    return globalLocale._abbr;
	}

	function defineLocale (name, config) {
	    if (config !== null) {
	        var locale, parentConfig = baseConfig;
	        config.abbr = name;
	        if (locales[name] != null) {
	            deprecateSimple('defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                    'an existing locale. moment.defineLocale(localeName, ' +
	                    'config) should only be used for creating a new locale ' +
	                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	            parentConfig = locales[name]._config;
	        } else if (config.parentLocale != null) {
	            if (locales[config.parentLocale] != null) {
	                parentConfig = locales[config.parentLocale]._config;
	            } else {
	                locale = loadLocale(config.parentLocale);
	                if (locale != null) {
	                    parentConfig = locale._config;
	                } else {
	                    if (!localeFamilies[config.parentLocale]) {
	                        localeFamilies[config.parentLocale] = [];
	                    }
	                    localeFamilies[config.parentLocale].push({
	                        name: name,
	                        config: config
	                    });
	                    return null;
	                }
	            }
	        }
	        locales[name] = new Locale(mergeConfigs(parentConfig, config));

	        if (localeFamilies[name]) {
	            localeFamilies[name].forEach(function (x) {
	                defineLocale(x.name, x.config);
	            });
	        }

	        // backwards compat for now: also set the locale
	        // make sure we set the locale AFTER all child locales have been
	        // created, so we won't end up with the child locale set.
	        getSetGlobalLocale(name);


	        return locales[name];
	    } else {
	        // useful for testing
	        delete locales[name];
	        return null;
	    }
	}

	function updateLocale(name, config) {
	    if (config != null) {
	        var locale, tmpLocale, parentConfig = baseConfig;
	        // MERGE
	        tmpLocale = loadLocale(name);
	        if (tmpLocale != null) {
	            parentConfig = tmpLocale._config;
	        }
	        config = mergeConfigs(parentConfig, config);
	        locale = new Locale(config);
	        locale.parentLocale = locales[name];
	        locales[name] = locale;

	        // backwards compat for now: also set the locale
	        getSetGlobalLocale(name);
	    } else {
	        // pass null for config to unupdate, useful for tests
	        if (locales[name] != null) {
	            if (locales[name].parentLocale != null) {
	                locales[name] = locales[name].parentLocale;
	            } else if (locales[name] != null) {
	                delete locales[name];
	            }
	        }
	    }
	    return locales[name];
	}

	// returns locale data
	function getLocale (key) {
	    var locale;

	    if (key && key._locale && key._locale._abbr) {
	        key = key._locale._abbr;
	    }

	    if (!key) {
	        return globalLocale;
	    }

	    if (!isArray$1(key)) {
	        //short-circuit everything else
	        locale = loadLocale(key);
	        if (locale) {
	            return locale;
	        }
	        key = [key];
	    }

	    return chooseLocale(key);
	}

	function listLocales() {
	    return keys$3(locales);
	}

	function checkOverflow (m) {
	    var overflow;
	    var a = m._a;

	    if (a && getParsingFlags(m).overflow === -2) {
	        overflow =
	            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	            -1;

	        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	            overflow = DATE;
	        }
	        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	            overflow = WEEK;
	        }
	        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	            overflow = WEEKDAY;
	        }

	        getParsingFlags(m).overflow = overflow;
	    }

	    return m;
	}

	// Pick the first defined of two or three arguments.
	function defaults$1(a, b, c) {
	    if (a != null) {
	        return a;
	    }
	    if (b != null) {
	        return b;
	    }
	    return c;
	}

	function currentDateArray(config) {
	    // hooks is actually the exported moment object
	    var nowValue = new Date(hooks.now());
	    if (config._useUTC) {
	        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	    }
	    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}

	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray (config) {
	    var i, date, input = [], currentDate, expectedWeekday, yearToUse;

	    if (config._d) {
	        return;
	    }

	    currentDate = currentDateArray(config);

	    //compute day of the year from weeks and weekdays
	    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	        dayOfYearFromWeekInfo(config);
	    }

	    //if the day of the year is set, figure out what it is
	    if (config._dayOfYear != null) {
	        yearToUse = defaults$1(config._a[YEAR], currentDate[YEAR]);

	        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
	            getParsingFlags(config)._overflowDayOfYear = true;
	        }

	        date = createUTCDate(yearToUse, 0, config._dayOfYear);
	        config._a[MONTH] = date.getUTCMonth();
	        config._a[DATE] = date.getUTCDate();
	    }

	    // Default to current date.
	    // * if no year, month, day of month are given, default to today
	    // * if day of month is given, default month and year
	    // * if month is given, default only year
	    // * if year is given, don't default anything
	    for (i = 0; i < 3 && config._a[i] == null; ++i) {
	        config._a[i] = input[i] = currentDate[i];
	    }

	    // Zero out whatever was not defaulted, including time
	    for (; i < 7; i++) {
	        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	    }

	    // Check for 24:00:00.000
	    if (config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0) {
	        config._nextDay = true;
	        config._a[HOUR] = 0;
	    }

	    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

	    // Apply timezone offset from input. The actual utcOffset can be changed
	    // with parseZone.
	    if (config._tzm != null) {
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    }

	    if (config._nextDay) {
	        config._a[HOUR] = 24;
	    }

	    // check for mismatching day of week
	    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
	        getParsingFlags(config).weekdayMismatch = true;
	    }
	}

	function dayOfYearFromWeekInfo(config) {
	    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	    w = config._w;
	    if (w.GG != null || w.W != null || w.E != null) {
	        dow = 1;
	        doy = 4;

	        // TODO: We need to take the current isoWeekYear, but that depends on
	        // how we interpret now (local, utc, fixed offset). So create
	        // a now version of current config (take local/utc/offset flags, and
	        // create now).
	        weekYear = defaults$1(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	        week = defaults$1(w.W, 1);
	        weekday = defaults$1(w.E, 1);
	        if (weekday < 1 || weekday > 7) {
	            weekdayOverflow = true;
	        }
	    } else {
	        dow = config._locale._week.dow;
	        doy = config._locale._week.doy;

	        var curWeek = weekOfYear(createLocal(), dow, doy);

	        weekYear = defaults$1(w.gg, config._a[YEAR], curWeek.year);

	        // Default to current week.
	        week = defaults$1(w.w, curWeek.week);

	        if (w.d != null) {
	            // weekday -- low day numbers are considered next week
	            weekday = w.d;
	            if (weekday < 0 || weekday > 6) {
	                weekdayOverflow = true;
	            }
	        } else if (w.e != null) {
	            // local weekday -- counting starts from begining of week
	            weekday = w.e + dow;
	            if (w.e < 0 || w.e > 6) {
	                weekdayOverflow = true;
	            }
	        } else {
	            // default to begining of week
	            weekday = dow;
	        }
	    }
	    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	        getParsingFlags(config)._overflowWeeks = true;
	    } else if (weekdayOverflow != null) {
	        getParsingFlags(config)._overflowWeekday = true;
	    } else {
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }
	}

	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	var isoDates = [
	    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	    ['YYYY-DDD', /\d{4}-\d{3}/],
	    ['YYYY-MM', /\d{4}-\d\d/, false],
	    ['YYYYYYMMDD', /[+-]\d{10}/],
	    ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/],
	    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	    ['YYYYDDD', /\d{7}/]
	];

	// iso time formats and regexes
	var isoTimes = [
	    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	    ['HH:mm', /\d\d:\d\d/],
	    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	    ['HHmmss', /\d\d\d\d\d\d/],
	    ['HHmm', /\d\d\d\d/],
	    ['HH', /\d\d/]
	];

	var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	// date from iso format
	function configFromISO(config) {
	    var i, l,
	        string = config._i,
	        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	        allowTime, dateFormat, timeFormat, tzFormat;

	    if (match) {
	        getParsingFlags(config).iso = true;

	        for (i = 0, l = isoDates.length; i < l; i++) {
	            if (isoDates[i][1].exec(match[1])) {
	                dateFormat = isoDates[i][0];
	                allowTime = isoDates[i][2] !== false;
	                break;
	            }
	        }
	        if (dateFormat == null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[3]) {
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(match[3])) {
	                    // match[2] should be 'T' or space
	                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (timeFormat == null) {
	                config._isValid = false;
	                return;
	            }
	        }
	        if (!allowTime && timeFormat != null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[4]) {
	            if (tzRegex.exec(match[4])) {
	                tzFormat = 'Z';
	            } else {
	                config._isValid = false;
	                return;
	            }
	        }
	        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	        configFromStringAndFormat(config);
	    } else {
	        config._isValid = false;
	    }
	}

	// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

	function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
	    var result = [
	        untruncateYear(yearStr),
	        defaultLocaleMonthsShort.indexOf(monthStr),
	        parseInt(dayStr, 10),
	        parseInt(hourStr, 10),
	        parseInt(minuteStr, 10)
	    ];

	    if (secondStr) {
	        result.push(parseInt(secondStr, 10));
	    }

	    return result;
	}

	function untruncateYear(yearStr) {
	    var year = parseInt(yearStr, 10);
	    if (year <= 49) {
	        return 2000 + year;
	    } else if (year <= 999) {
	        return 1900 + year;
	    }
	    return year;
	}

	function preprocessRFC2822(s) {
	    // Remove comments and folding whitespace and replace multiple-spaces with a single space
	    return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').trim();
	}

	function checkWeekday(weekdayStr, parsedInput, config) {
	    if (weekdayStr) {
	        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
	        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
	        if (weekdayProvided !== weekdayActual) {
	            getParsingFlags(config).weekdayMismatch = true;
	            config._isValid = false;
	            return false;
	        }
	    }
	    return true;
	}

	var obsOffsets = {
	    UT: 0,
	    GMT: 0,
	    EDT: -4 * 60,
	    EST: -5 * 60,
	    CDT: -5 * 60,
	    CST: -6 * 60,
	    MDT: -6 * 60,
	    MST: -7 * 60,
	    PDT: -7 * 60,
	    PST: -8 * 60
	};

	function calculateOffset(obsOffset, militaryOffset, numOffset) {
	    if (obsOffset) {
	        return obsOffsets[obsOffset];
	    } else if (militaryOffset) {
	        // the only allowed military tz is Z
	        return 0;
	    } else {
	        var hm = parseInt(numOffset, 10);
	        var m = hm % 100, h = (hm - m) / 100;
	        return h * 60 + m;
	    }
	}

	// date and time from ref 2822 format
	function configFromRFC2822(config) {
	    var match = rfc2822.exec(preprocessRFC2822(config._i));
	    if (match) {
	        var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
	        if (!checkWeekday(match[1], parsedArray, config)) {
	            return;
	        }

	        config._a = parsedArray;
	        config._tzm = calculateOffset(match[8], match[9], match[10]);

	        config._d = createUTCDate.apply(null, config._a);
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

	        getParsingFlags(config).rfc2822 = true;
	    } else {
	        config._isValid = false;
	    }
	}

	// date from iso format or fallback
	function configFromString(config) {
	    var matched = aspNetJsonRegex.exec(config._i);

	    if (matched !== null) {
	        config._d = new Date(+matched[1]);
	        return;
	    }

	    configFromISO(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }

	    configFromRFC2822(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }

	    // Final attempt, use Input Fallback
	    hooks.createFromInputFallback(config);
	}

	hooks.createFromInputFallback = deprecate(
	    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	    'discouraged and will be removed in an upcoming major release. Please refer to ' +
	    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	    function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    }
	);

	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};

	// constant that refers to the RFC 2822 form
	hooks.RFC_2822 = function () {};

	// date from string and format string
	function configFromStringAndFormat(config) {
	    // TODO: Move this to another part of the creation flow to prevent circular deps
	    if (config._f === hooks.ISO_8601) {
	        configFromISO(config);
	        return;
	    }
	    if (config._f === hooks.RFC_2822) {
	        configFromRFC2822(config);
	        return;
	    }
	    config._a = [];
	    getParsingFlags(config).empty = true;

	    // This array is used to make a Date, either with `new Date` or `Date.UTC`
	    var string = '' + config._i,
	        i, parsedInput, tokens, token, skipped,
	        stringLength = string.length,
	        totalParsedInputLength = 0;

	    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	        // console.log('token', token, 'parsedInput', parsedInput,
	        //         'regex', getParseRegexForToken(token, config));
	        if (parsedInput) {
	            skipped = string.substr(0, string.indexOf(parsedInput));
	            if (skipped.length > 0) {
	                getParsingFlags(config).unusedInput.push(skipped);
	            }
	            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	            totalParsedInputLength += parsedInput.length;
	        }
	        // don't parse if it's not a known token
	        if (formatTokenFunctions[token]) {
	            if (parsedInput) {
	                getParsingFlags(config).empty = false;
	            }
	            else {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	            addTimeToArrayFromToken(token, parsedInput, config);
	        }
	        else if (config._strict && !parsedInput) {
	            getParsingFlags(config).unusedTokens.push(token);
	        }
	    }

	    // add remaining unparsed input length to the string
	    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	    if (string.length > 0) {
	        getParsingFlags(config).unusedInput.push(string);
	    }

	    // clear _12h flag if hour is <= 12
	    if (config._a[HOUR] <= 12 &&
	        getParsingFlags(config).bigHour === true &&
	        config._a[HOUR] > 0) {
	        getParsingFlags(config).bigHour = undefined;
	    }

	    getParsingFlags(config).parsedDateParts = config._a.slice(0);
	    getParsingFlags(config).meridiem = config._meridiem;
	    // handle meridiem
	    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	    configFromArray(config);
	    checkOverflow(config);
	}


	function meridiemFixWrap (locale, hour, meridiem) {
	    var isPm;

	    if (meridiem == null) {
	        // nothing to do
	        return hour;
	    }
	    if (locale.meridiemHour != null) {
	        return locale.meridiemHour(hour, meridiem);
	    } else if (locale.isPM != null) {
	        // Fallback
	        isPm = locale.isPM(meridiem);
	        if (isPm && hour < 12) {
	            hour += 12;
	        }
	        if (!isPm && hour === 12) {
	            hour = 0;
	        }
	        return hour;
	    } else {
	        // this is not supposed to happen
	        return hour;
	    }
	}

	// date from string and array of format strings
	function configFromStringAndArray(config) {
	    var tempConfig,
	        bestMoment,

	        scoreToBeat,
	        i,
	        currentScore;

	    if (config._f.length === 0) {
	        getParsingFlags(config).invalidFormat = true;
	        config._d = new Date(NaN);
	        return;
	    }

	    for (i = 0; i < config._f.length; i++) {
	        currentScore = 0;
	        tempConfig = copyConfig({}, config);
	        if (config._useUTC != null) {
	            tempConfig._useUTC = config._useUTC;
	        }
	        tempConfig._f = config._f[i];
	        configFromStringAndFormat(tempConfig);

	        if (!isValid(tempConfig)) {
	            continue;
	        }

	        // if there is any input that was not parsed add a penalty for that format
	        currentScore += getParsingFlags(tempConfig).charsLeftOver;

	        //or tokens
	        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	        getParsingFlags(tempConfig).score = currentScore;

	        if (scoreToBeat == null || currentScore < scoreToBeat) {
	            scoreToBeat = currentScore;
	            bestMoment = tempConfig;
	        }
	    }

	    extend(config, bestMoment || tempConfig);
	}

	function configFromObject(config) {
	    if (config._d) {
	        return;
	    }

	    var i = normalizeObjectUnits(config._i);
	    config._a = map$3([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	        return obj && parseInt(obj, 10);
	    });

	    configFromArray(config);
	}

	function createFromConfig (config) {
	    var res = new Moment(checkOverflow(prepareConfig(config)));
	    if (res._nextDay) {
	        // Adding is smart enough around DST
	        res.add(1, 'd');
	        res._nextDay = undefined;
	    }

	    return res;
	}

	function prepareConfig (config) {
	    var input = config._i,
	        format = config._f;

	    config._locale = config._locale || getLocale(config._l);

	    if (input === null || (format === undefined && input === '')) {
	        return createInvalid({nullInput: true});
	    }

	    if (typeof input === 'string') {
	        config._i = input = config._locale.preparse(input);
	    }

	    if (isMoment(input)) {
	        return new Moment(checkOverflow(input));
	    } else if (isDate(input)) {
	        config._d = input;
	    } else if (isArray$1(format)) {
	        configFromStringAndArray(config);
	    } else if (format) {
	        configFromStringAndFormat(config);
	    }  else {
	        configFromInput(config);
	    }

	    if (!isValid(config)) {
	        config._d = null;
	    }

	    return config;
	}

	function configFromInput(config) {
	    var input = config._i;
	    if (isUndefined(input)) {
	        config._d = new Date(hooks.now());
	    } else if (isDate(input)) {
	        config._d = new Date(input.valueOf());
	    } else if (typeof input === 'string') {
	        configFromString(config);
	    } else if (isArray$1(input)) {
	        config._a = map$3(input.slice(0), function (obj) {
	            return parseInt(obj, 10);
	        });
	        configFromArray(config);
	    } else if (isObject$1(input)) {
	        configFromObject(config);
	    } else if (isNumber(input)) {
	        // from milliseconds
	        config._d = new Date(input);
	    } else {
	        hooks.createFromInputFallback(config);
	    }
	}

	function createLocalOrUTC (input, format, locale, strict, isUTC) {
	    var c = {};

	    if (locale === true || locale === false) {
	        strict = locale;
	        locale = undefined;
	    }

	    if ((isObject$1(input) && isObjectEmpty(input)) ||
	            (isArray$1(input) && input.length === 0)) {
	        input = undefined;
	    }
	    // object construction must be done this way.
	    // https://github.com/moment/moment/issues/1423
	    c._isAMomentObject = true;
	    c._useUTC = c._isUTC = isUTC;
	    c._l = locale;
	    c._i = input;
	    c._f = format;
	    c._strict = strict;

	    return createFromConfig(c);
	}

	function createLocal (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, false);
	}

	var prototypeMin = deprecate(
	    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	var prototypeMax = deprecate(
	    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
	    var res, i;
	    if (moments.length === 1 && isArray$1(moments[0])) {
	        moments = moments[0];
	    }
	    if (!moments.length) {
	        return createLocal();
	    }
	    res = moments[0];
	    for (i = 1; i < moments.length; ++i) {
	        if (!moments[i].isValid() || moments[i][fn](res)) {
	            res = moments[i];
	        }
	    }
	    return res;
	}

	// TODO: Use [].sort instead?
	function min$3 () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isBefore', args);
	}

	function max$2 () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isAfter', args);
	}

	var now$1 = function () {
	    return Date.now ? Date.now() : +(new Date());
	};

	var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

	function isDurationValid(m) {
	    for (var key in m) {
	        if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
	            return false;
	        }
	    }

	    var unitHasDecimal = false;
	    for (var i = 0; i < ordering.length; ++i) {
	        if (m[ordering[i]]) {
	            if (unitHasDecimal) {
	                return false; // only allow non-integers for smallest unit
	            }
	            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                unitHasDecimal = true;
	            }
	        }
	    }

	    return true;
	}

	function isValid$1() {
	    return this._isValid;
	}

	function createInvalid$1() {
	    return createDuration(NaN);
	}

	function Duration (duration) {
	    var normalizedInput = normalizeObjectUnits(duration),
	        years = normalizedInput.year || 0,
	        quarters = normalizedInput.quarter || 0,
	        months = normalizedInput.month || 0,
	        weeks = normalizedInput.week || 0,
	        days = normalizedInput.day || 0,
	        hours = normalizedInput.hour || 0,
	        minutes = normalizedInput.minute || 0,
	        seconds = normalizedInput.second || 0,
	        milliseconds = normalizedInput.millisecond || 0;

	    this._isValid = isDurationValid(normalizedInput);

	    // representation for dateAddRemove
	    this._milliseconds = +milliseconds +
	        seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	    // Because of dateAddRemove treats 24 hours as different from a
	    // day when working around DST, we need to store them separately
	    this._days = +days +
	        weeks * 7;
	    // It is impossible to translate months into days without knowing
	    // which months you are are talking about, so we have to store
	    // it separately.
	    this._months = +months +
	        quarters * 3 +
	        years * 12;

	    this._data = {};

	    this._locale = getLocale();

	    this._bubble();
	}

	function isDuration (obj) {
	    return obj instanceof Duration;
	}

	function absRound (number) {
	    if (number < 0) {
	        return Math.round(-1 * number) * -1;
	    } else {
	        return Math.round(number);
	    }
	}

	// FORMATTING

	function offset (token, separator) {
	    addFormatToken(token, 0, 0, function () {
	        var offset = this.utcOffset();
	        var sign = '+';
	        if (offset < 0) {
	            offset = -offset;
	            sign = '-';
	        }
	        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	    });
	}

	offset('Z', ':');
	offset('ZZ', '');

	// PARSING

	addRegexToken('Z',  matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	    config._useUTC = true;
	    config._tzm = offsetFromString(matchShortOffset, input);
	});

	// HELPERS

	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;

	function offsetFromString(matcher, string) {
	    var matches = (string || '').match(matcher);

	    if (matches === null) {
	        return null;
	    }

	    var chunk   = matches[matches.length - 1] || [];
	    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	    var minutes = +(parts[1] * 60) + toInt(parts[2]);

	    return minutes === 0 ?
	      0 :
	      parts[0] === '+' ? minutes : -minutes;
	}

	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
	    var res, diff;
	    if (model._isUTC) {
	        res = model.clone();
	        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	        // Use low-level api, because this fn is low-level api.
	        res._d.setTime(res._d.valueOf() + diff);
	        hooks.updateOffset(res, false);
	        return res;
	    } else {
	        return createLocal(input).local();
	    }
	}

	function getDateOffset (m) {
	    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	    // https://github.com/moment/moment/pull/1871
	    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	}

	// HOOKS

	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};

	// MOMENTS

	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset (input, keepLocalTime, keepMinutes) {
	    var offset = this._offset || 0,
	        localAdjust;
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    if (input != null) {
	        if (typeof input === 'string') {
	            input = offsetFromString(matchShortOffset, input);
	            if (input === null) {
	                return this;
	            }
	        } else if (Math.abs(input) < 16 && !keepMinutes) {
	            input = input * 60;
	        }
	        if (!this._isUTC && keepLocalTime) {
	            localAdjust = getDateOffset(this);
	        }
	        this._offset = input;
	        this._isUTC = true;
	        if (localAdjust != null) {
	            this.add(localAdjust, 'm');
	        }
	        if (offset !== input) {
	            if (!keepLocalTime || this._changeInProgress) {
	                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	            } else if (!this._changeInProgress) {
	                this._changeInProgress = true;
	                hooks.updateOffset(this, true);
	                this._changeInProgress = null;
	            }
	        }
	        return this;
	    } else {
	        return this._isUTC ? offset : getDateOffset(this);
	    }
	}

	function getSetZone (input, keepLocalTime) {
	    if (input != null) {
	        if (typeof input !== 'string') {
	            input = -input;
	        }

	        this.utcOffset(input, keepLocalTime);

	        return this;
	    } else {
	        return -this.utcOffset();
	    }
	}

	function setOffsetToUTC (keepLocalTime) {
	    return this.utcOffset(0, keepLocalTime);
	}

	function setOffsetToLocal (keepLocalTime) {
	    if (this._isUTC) {
	        this.utcOffset(0, keepLocalTime);
	        this._isUTC = false;

	        if (keepLocalTime) {
	            this.subtract(getDateOffset(this), 'm');
	        }
	    }
	    return this;
	}

	function setOffsetToParsedOffset () {
	    if (this._tzm != null) {
	        this.utcOffset(this._tzm, false, true);
	    } else if (typeof this._i === 'string') {
	        var tZone = offsetFromString(matchOffset, this._i);
	        if (tZone != null) {
	            this.utcOffset(tZone);
	        }
	        else {
	            this.utcOffset(0, true);
	        }
	    }
	    return this;
	}

	function hasAlignedHourOffset (input) {
	    if (!this.isValid()) {
	        return false;
	    }
	    input = input ? createLocal(input).utcOffset() : 0;

	    return (this.utcOffset() - input) % 60 === 0;
	}

	function isDaylightSavingTime () {
	    return (
	        this.utcOffset() > this.clone().month(0).utcOffset() ||
	        this.utcOffset() > this.clone().month(5).utcOffset()
	    );
	}

	function isDaylightSavingTimeShifted () {
	    if (!isUndefined(this._isDSTShifted)) {
	        return this._isDSTShifted;
	    }

	    var c = {};

	    copyConfig(c, this);
	    c = prepareConfig(c);

	    if (c._a) {
	        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	        this._isDSTShifted = this.isValid() &&
	            compareArrays(c._a, other.toArray()) > 0;
	    } else {
	        this._isDSTShifted = false;
	    }

	    return this._isDSTShifted;
	}

	function isLocal () {
	    return this.isValid() ? !this._isUTC : false;
	}

	function isUtcOffset () {
	    return this.isValid() ? this._isUTC : false;
	}

	function isUtc () {
	    return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}

	// ASP.NET json date format regex
	var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

	function createDuration (input, key) {
	    var duration = input,
	        // matching against regexp is expensive, do it on demand
	        match = null,
	        sign,
	        ret,
	        diffRes;

	    if (isDuration(input)) {
	        duration = {
	            ms : input._milliseconds,
	            d  : input._days,
	            M  : input._months
	        };
	    } else if (isNumber(input)) {
	        duration = {};
	        if (key) {
	            duration[key] = input;
	        } else {
	            duration.milliseconds = input;
	        }
	    } else if (!!(match = aspNetRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y  : 0,
	            d  : toInt(match[DATE])                         * sign,
	            h  : toInt(match[HOUR])                         * sign,
	            m  : toInt(match[MINUTE])                       * sign,
	            s  : toInt(match[SECOND])                       * sign,
	            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	        };
	    } else if (!!(match = isoRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
	        duration = {
	            y : parseIso(match[2], sign),
	            M : parseIso(match[3], sign),
	            w : parseIso(match[4], sign),
	            d : parseIso(match[5], sign),
	            h : parseIso(match[6], sign),
	            m : parseIso(match[7], sign),
	            s : parseIso(match[8], sign)
	        };
	    } else if (duration == null) {// checks for null or undefined
	        duration = {};
	    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

	        duration = {};
	        duration.ms = diffRes.milliseconds;
	        duration.M = diffRes.months;
	    }

	    ret = new Duration(duration);

	    if (isDuration(input) && hasOwnProp(input, '_locale')) {
	        ret._locale = input._locale;
	    }

	    return ret;
	}

	createDuration.fn = Duration.prototype;
	createDuration.invalid = createInvalid$1;

	function parseIso (inp, sign) {
	    // We'd normally use ~~inp for this, but unfortunately it also
	    // converts floats to ints.
	    // inp may be undefined, so careful calling replace on it.
	    var res = inp && parseFloat(inp.replace(',', '.'));
	    // apply sign while we're at it
	    return (isNaN(res) ? 0 : res) * sign;
	}

	function positiveMomentsDifference(base, other) {
	    var res = {milliseconds: 0, months: 0};

	    res.months = other.month() - base.month() +
	        (other.year() - base.year()) * 12;
	    if (base.clone().add(res.months, 'M').isAfter(other)) {
	        --res.months;
	    }

	    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	    return res;
	}

	function momentsDifference(base, other) {
	    var res;
	    if (!(base.isValid() && other.isValid())) {
	        return {milliseconds: 0, months: 0};
	    }

	    other = cloneWithOffset(other, base);
	    if (base.isBefore(other)) {
	        res = positiveMomentsDifference(base, other);
	    } else {
	        res = positiveMomentsDifference(other, base);
	        res.milliseconds = -res.milliseconds;
	        res.months = -res.months;
	    }

	    return res;
	}

	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
	    return function (val, period) {
	        var dur, tmp;
	        //invert the arguments, but complain about it
	        if (period !== null && !isNaN(+period)) {
	            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	            tmp = val; val = period; period = tmp;
	        }

	        val = typeof val === 'string' ? +val : val;
	        dur = createDuration(val, period);
	        addSubtract(this, dur, direction);
	        return this;
	    };
	}

	function addSubtract (mom, duration, isAdding, updateOffset) {
	    var milliseconds = duration._milliseconds,
	        days = absRound(duration._days),
	        months = absRound(duration._months);

	    if (!mom.isValid()) {
	        // No op
	        return;
	    }

	    updateOffset = updateOffset == null ? true : updateOffset;

	    if (months) {
	        setMonth(mom, get$1(mom, 'Month') + months * isAdding);
	    }
	    if (days) {
	        set$3(mom, 'Date', get$1(mom, 'Date') + days * isAdding);
	    }
	    if (milliseconds) {
	        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	    }
	    if (updateOffset) {
	        hooks.updateOffset(mom, days || months);
	    }
	}

	var add      = createAdder(1, 'add');
	var subtract = createAdder(-1, 'subtract');

	function getCalendarFormat(myMoment, now) {
	    var diff = myMoment.diff(now, 'days', true);
	    return diff < -6 ? 'sameElse' :
	            diff < -1 ? 'lastWeek' :
	            diff < 0 ? 'lastDay' :
	            diff < 1 ? 'sameDay' :
	            diff < 2 ? 'nextDay' :
	            diff < 7 ? 'nextWeek' : 'sameElse';
	}

	function calendar$1 (time, formats) {
	    // We want to compare the start of today, vs this.
	    // Getting start-of-today depends on whether we're local/utc/offset or not.
	    var now = time || createLocal(),
	        sod = cloneWithOffset(now, this).startOf('day'),
	        format = hooks.calendarFormat(this, sod) || 'sameElse';

	    var output = formats && (isFunction$1(formats[format]) ? formats[format].call(this, now) : formats[format]);

	    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}

	function clone () {
	    return new Moment(this);
	}

	function isAfter (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() > localInput.valueOf();
	    } else {
	        return localInput.valueOf() < this.clone().startOf(units).valueOf();
	    }
	}

	function isBefore (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() < localInput.valueOf();
	    } else {
	        return this.clone().endOf(units).valueOf() < localInput.valueOf();
	    }
	}

	function isBetween (from, to, units, inclusivity) {
	    inclusivity = inclusivity || '()';
	    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	}

	function isSame (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input),
	        inputMs;
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(units || 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() === localInput.valueOf();
	    } else {
	        inputMs = localInput.valueOf();
	        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	    }
	}

	function isSameOrAfter (input, units) {
	    return this.isSame(input, units) || this.isAfter(input,units);
	}

	function isSameOrBefore (input, units) {
	    return this.isSame(input, units) || this.isBefore(input,units);
	}

	function diff (input, units, asFloat) {
	    var that,
	        zoneDelta,
	        output;

	    if (!this.isValid()) {
	        return NaN;
	    }

	    that = cloneWithOffset(input, this);

	    if (!that.isValid()) {
	        return NaN;
	    }

	    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	    units = normalizeUnits(units);

	    switch (units) {
	        case 'year': output = monthDiff(this, that) / 12; break;
	        case 'month': output = monthDiff(this, that); break;
	        case 'quarter': output = monthDiff(this, that) / 3; break;
	        case 'second': output = (this - that) / 1e3; break; // 1000
	        case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
	        case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
	        case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
	        case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
	        default: output = this - that;
	    }

	    return asFloat ? output : absFloor(output);
	}

	function monthDiff (a, b) {
	    // difference in months
	    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	        anchor2, adjust;

	    if (b - anchor < 0) {
	        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor - anchor2);
	    } else {
	        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor2 - anchor);
	    }

	    //check for negative zero, return zero if negative zero
	    return -(wholeMonthDiff + adjust) || 0;
	}

	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	function toString$3 () {
	    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}

	function toISOString(keepOffset) {
	    if (!this.isValid()) {
	        return null;
	    }
	    var utc = keepOffset !== true;
	    var m = utc ? this.clone().utc() : this;
	    if (m.year() < 0 || m.year() > 9999) {
	        return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
	    }
	    if (isFunction$1(Date.prototype.toISOString)) {
	        // native implementation is ~50x faster, use it when we can
	        if (utc) {
	            return this.toDate().toISOString();
	        } else {
	            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
	        }
	    }
	    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
	}

	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect () {
	    if (!this.isValid()) {
	        return 'moment.invalid(/* ' + this._i + ' */)';
	    }
	    var func = 'moment';
	    var zone = '';
	    if (!this.isLocal()) {
	        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	        zone = 'Z';
	    }
	    var prefix = '[' + func + '("]';
	    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	    var suffix = zone + '[")]';

	    return this.format(prefix + year + datetime + suffix);
	}

	function format (inputString) {
	    if (!inputString) {
	        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	    }
	    var output = formatMoment(this, inputString);
	    return this.localeData().postformat(output);
	}

	function from$3 (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function fromNow (withoutSuffix) {
	    return this.from(createLocal(), withoutSuffix);
	}

	function to (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function toNow (withoutSuffix) {
	    return this.to(createLocal(), withoutSuffix);
	}

	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale (key) {
	    var newLocaleData;

	    if (key === undefined) {
	        return this._locale._abbr;
	    } else {
	        newLocaleData = getLocale(key);
	        if (newLocaleData != null) {
	            this._locale = newLocaleData;
	        }
	        return this;
	    }
	}

	var lang = deprecate(
	    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	    function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    }
	);

	function localeData () {
	    return this._locale;
	}

	function startOf (units) {
	    units = normalizeUnits(units);
	    // the following switch intentionally omits break keywords
	    // to utilize falling through the cases.
	    switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	    }

	    // weeks are a special case
	    if (units === 'week') {
	        this.weekday(0);
	    }
	    if (units === 'isoWeek') {
	        this.isoWeekday(1);
	    }

	    // quarters are also special
	    if (units === 'quarter') {
	        this.month(Math.floor(this.month() / 3) * 3);
	    }

	    return this;
	}

	function endOf (units) {
	    units = normalizeUnits(units);
	    if (units === undefined || units === 'millisecond') {
	        return this;
	    }

	    // 'date' is an alias for 'day', so it should be considered as such.
	    if (units === 'date') {
	        units = 'day';
	    }

	    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	}

	function valueOf () {
	    return this._d.valueOf() - ((this._offset || 0) * 60000);
	}

	function unix () {
	    return Math.floor(this.valueOf() / 1000);
	}

	function toDate () {
	    return new Date(this.valueOf());
	}

	function toArray$1 () {
	    var m = this;
	    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}

	function toObject$1 () {
	    var m = this;
	    return {
	        years: m.year(),
	        months: m.month(),
	        date: m.date(),
	        hours: m.hours(),
	        minutes: m.minutes(),
	        seconds: m.seconds(),
	        milliseconds: m.milliseconds()
	    };
	}

	function toJSON () {
	    // new Date(NaN).toJSON() === null
	    return this.isValid() ? this.toISOString() : null;
	}

	function isValid$2 () {
	    return isValid(this);
	}

	function parsingFlags () {
	    return extend({}, getParsingFlags(this));
	}

	function invalidAt () {
	    return getParsingFlags(this).overflow;
	}

	function creationData() {
	    return {
	        input: this._i,
	        format: this._f,
	        locale: this._locale,
	        isUTC: this._isUTC,
	        strict: this._strict
	    };
	}

	// FORMATTING

	addFormatToken(0, ['gg', 2], 0, function () {
	    return this.weekYear() % 100;
	});

	addFormatToken(0, ['GG', 2], 0, function () {
	    return this.isoWeekYear() % 100;
	});

	function addWeekYearFormatToken (token, getter) {
	    addFormatToken(0, [token, token.length], 0, getter);
	}

	addWeekYearFormatToken('gggg',     'weekYear');
	addWeekYearFormatToken('ggggg',    'weekYear');
	addWeekYearFormatToken('GGGG',  'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	// ALIASES

	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');

	// PRIORITY

	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);


	// PARSING

	addRegexToken('G',      matchSigned);
	addRegexToken('g',      matchSigned);
	addRegexToken('GG',     match1to2, match2);
	addRegexToken('gg',     match1to2, match2);
	addRegexToken('GGGG',   match1to4, match4);
	addRegexToken('gggg',   match1to4, match4);
	addRegexToken('GGGGG',  match1to6, match6);
	addRegexToken('ggggg',  match1to6, match6);

	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	    week[token.substr(0, 2)] = toInt(input);
	});

	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	    week[token] = hooks.parseTwoDigitYear(input);
	});

	// MOMENTS

	function getSetWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy);
	}

	function getSetISOWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}

	function getISOWeeksInYear () {
	    return weeksInYear(this.year(), 1, 4);
	}

	function getWeeksInYear () {
	    var weekInfo = this.localeData()._week;
	    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}

	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	    var weeksTarget;
	    if (input == null) {
	        return weekOfYear(this, dow, doy).year;
	    } else {
	        weeksTarget = weeksInYear(input, dow, doy);
	        if (week > weeksTarget) {
	            week = weeksTarget;
	        }
	        return setWeekAll.call(this, input, week, weekday, dow, doy);
	    }
	}

	function setWeekAll(weekYear, week, weekday, dow, doy) {
	    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	    this.year(date.getUTCFullYear());
	    this.month(date.getUTCMonth());
	    this.date(date.getUTCDate());
	    return this;
	}

	// FORMATTING

	addFormatToken('Q', 0, 'Qo', 'quarter');

	// ALIASES

	addUnitAlias('quarter', 'Q');

	// PRIORITY

	addUnitPriority('quarter', 7);

	// PARSING

	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	    array[MONTH] = (toInt(input) - 1) * 3;
	});

	// MOMENTS

	function getSetQuarter (input) {
	    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}

	// FORMATTING

	addFormatToken('D', ['DD', 2], 'Do', 'date');

	// ALIASES

	addUnitAlias('date', 'D');

	// PRIOROITY
	addUnitPriority('date', 9);

	// PARSING

	addRegexToken('D',  match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    return isStrict ?
	      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
	      locale._dayOfMonthOrdinalParseLenient;
	});

	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	    array[DATE] = toInt(input.match(match1to2)[0]);
	});

	// MOMENTS

	var getSetDayOfMonth = makeGetSet('Date', true);

	// FORMATTING

	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	// ALIASES

	addUnitAlias('dayOfYear', 'DDD');

	// PRIORITY
	addUnitPriority('dayOfYear', 4);

	// PARSING

	addRegexToken('DDD',  match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	    config._dayOfYear = toInt(input);
	});

	// HELPERS

	// MOMENTS

	function getSetDayOfYear (input) {
	    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	}

	// FORMATTING

	addFormatToken('m', ['mm', 2], 0, 'minute');

	// ALIASES

	addUnitAlias('minute', 'm');

	// PRIORITY

	addUnitPriority('minute', 14);

	// PARSING

	addRegexToken('m',  match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);

	// MOMENTS

	var getSetMinute = makeGetSet('Minutes', false);

	// FORMATTING

	addFormatToken('s', ['ss', 2], 0, 'second');

	// ALIASES

	addUnitAlias('second', 's');

	// PRIORITY

	addUnitPriority('second', 15);

	// PARSING

	addRegexToken('s',  match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);

	// MOMENTS

	var getSetSecond = makeGetSet('Seconds', false);

	// FORMATTING

	addFormatToken('S', 0, 0, function () {
	    return ~~(this.millisecond() / 100);
	});

	addFormatToken(0, ['SS', 2], 0, function () {
	    return ~~(this.millisecond() / 10);
	});

	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	    return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	    return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	    return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	    return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	    return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	    return this.millisecond() * 1000000;
	});


	// ALIASES

	addUnitAlias('millisecond', 'ms');

	// PRIORITY

	addUnitPriority('millisecond', 16);

	// PARSING

	addRegexToken('S',    match1to3, match1);
	addRegexToken('SS',   match1to3, match2);
	addRegexToken('SSS',  match1to3, match3);

	var token;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	    addRegexToken(token, matchUnsigned);
	}

	function parseMs(input, array) {
	    array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}

	for (token = 'S'; token.length <= 9; token += 'S') {
	    addParseToken(token, parseMs);
	}
	// MOMENTS

	var getSetMillisecond = makeGetSet('Milliseconds', false);

	// FORMATTING

	addFormatToken('z',  0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');

	// MOMENTS

	function getZoneAbbr () {
	    return this._isUTC ? 'UTC' : '';
	}

	function getZoneName () {
	    return this._isUTC ? 'Coordinated Universal Time' : '';
	}

	var proto$1 = Moment.prototype;

	proto$1.add               = add;
	proto$1.calendar          = calendar$1;
	proto$1.clone             = clone;
	proto$1.diff              = diff;
	proto$1.endOf             = endOf;
	proto$1.format            = format;
	proto$1.from              = from$3;
	proto$1.fromNow           = fromNow;
	proto$1.to                = to;
	proto$1.toNow             = toNow;
	proto$1.get               = stringGet;
	proto$1.invalidAt         = invalidAt;
	proto$1.isAfter           = isAfter;
	proto$1.isBefore          = isBefore;
	proto$1.isBetween         = isBetween;
	proto$1.isSame            = isSame;
	proto$1.isSameOrAfter     = isSameOrAfter;
	proto$1.isSameOrBefore    = isSameOrBefore;
	proto$1.isValid           = isValid$2;
	proto$1.lang              = lang;
	proto$1.locale            = locale;
	proto$1.localeData        = localeData;
	proto$1.max               = prototypeMax;
	proto$1.min               = prototypeMin;
	proto$1.parsingFlags      = parsingFlags;
	proto$1.set               = stringSet;
	proto$1.startOf           = startOf;
	proto$1.subtract          = subtract;
	proto$1.toArray           = toArray$1;
	proto$1.toObject          = toObject$1;
	proto$1.toDate            = toDate;
	proto$1.toISOString       = toISOString;
	proto$1.inspect           = inspect;
	proto$1.toJSON            = toJSON;
	proto$1.toString          = toString$3;
	proto$1.unix              = unix;
	proto$1.valueOf           = valueOf;
	proto$1.creationData      = creationData;
	proto$1.year       = getSetYear;
	proto$1.isLeapYear = getIsLeapYear;
	proto$1.weekYear    = getSetWeekYear;
	proto$1.isoWeekYear = getSetISOWeekYear;
	proto$1.quarter = proto$1.quarters = getSetQuarter;
	proto$1.month       = getSetMonth;
	proto$1.daysInMonth = getDaysInMonth;
	proto$1.week           = proto$1.weeks        = getSetWeek;
	proto$1.isoWeek        = proto$1.isoWeeks     = getSetISOWeek;
	proto$1.weeksInYear    = getWeeksInYear;
	proto$1.isoWeeksInYear = getISOWeeksInYear;
	proto$1.date       = getSetDayOfMonth;
	proto$1.day        = proto$1.days             = getSetDayOfWeek;
	proto$1.weekday    = getSetLocaleDayOfWeek;
	proto$1.isoWeekday = getSetISODayOfWeek;
	proto$1.dayOfYear  = getSetDayOfYear;
	proto$1.hour = proto$1.hours = getSetHour;
	proto$1.minute = proto$1.minutes = getSetMinute;
	proto$1.second = proto$1.seconds = getSetSecond;
	proto$1.millisecond = proto$1.milliseconds = getSetMillisecond;
	proto$1.utcOffset            = getSetOffset;
	proto$1.utc                  = setOffsetToUTC;
	proto$1.local                = setOffsetToLocal;
	proto$1.parseZone            = setOffsetToParsedOffset;
	proto$1.hasAlignedHourOffset = hasAlignedHourOffset;
	proto$1.isDST                = isDaylightSavingTime;
	proto$1.isLocal              = isLocal;
	proto$1.isUtcOffset          = isUtcOffset;
	proto$1.isUtc                = isUtc;
	proto$1.isUTC                = isUtc;
	proto$1.zoneAbbr = getZoneAbbr;
	proto$1.zoneName = getZoneName;
	proto$1.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto$1.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto$1.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto$1.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto$1.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	function createUnix (input) {
	    return createLocal(input * 1000);
	}

	function createInZone () {
	    return createLocal.apply(null, arguments).parseZone();
	}

	function preParsePostFormat (string) {
	    return string;
	}

	var proto$2 = Locale.prototype;

	proto$2.calendar        = calendar;
	proto$2.longDateFormat  = longDateFormat;
	proto$2.invalidDate     = invalidDate;
	proto$2.ordinal         = ordinal;
	proto$2.preparse        = preParsePostFormat;
	proto$2.postformat      = preParsePostFormat;
	proto$2.relativeTime    = relativeTime;
	proto$2.pastFuture      = pastFuture;
	proto$2.set             = set$2;

	proto$2.months            =        localeMonths;
	proto$2.monthsShort       =        localeMonthsShort;
	proto$2.monthsParse       =        localeMonthsParse;
	proto$2.monthsRegex       = monthsRegex;
	proto$2.monthsShortRegex  = monthsShortRegex;
	proto$2.week = localeWeek;
	proto$2.firstDayOfYear = localeFirstDayOfYear;
	proto$2.firstDayOfWeek = localeFirstDayOfWeek;

	proto$2.weekdays       =        localeWeekdays;
	proto$2.weekdaysMin    =        localeWeekdaysMin;
	proto$2.weekdaysShort  =        localeWeekdaysShort;
	proto$2.weekdaysParse  =        localeWeekdaysParse;

	proto$2.weekdaysRegex       =        weekdaysRegex;
	proto$2.weekdaysShortRegex  =        weekdaysShortRegex;
	proto$2.weekdaysMinRegex    =        weekdaysMinRegex;

	proto$2.isPM = localeIsPM;
	proto$2.meridiem = localeMeridiem;

	function get$2 (format, index, field, setter) {
	    var locale = getLocale();
	    var utc = createUTC().set(setter, index);
	    return locale[field](utc, format);
	}

	function listMonthsImpl (format, index, field) {
	    if (isNumber(format)) {
	        index = format;
	        format = undefined;
	    }

	    format = format || '';

	    if (index != null) {
	        return get$2(format, index, field, 'month');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 12; i++) {
	        out[i] = get$2(format, i, field, 'month');
	    }
	    return out;
	}

	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl (localeSorted, format, index, field) {
	    if (typeof localeSorted === 'boolean') {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    } else {
	        format = localeSorted;
	        index = format;
	        localeSorted = false;

	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    }

	    var locale = getLocale(),
	        shift = localeSorted ? locale._week.dow : 0;

	    if (index != null) {
	        return get$2(format, (index + shift) % 7, field, 'day');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 7; i++) {
	        out[i] = get$2(format, (i + shift) % 7, field, 'day');
	    }
	    return out;
	}

	function listMonths (format, index) {
	    return listMonthsImpl(format, index, 'months');
	}

	function listMonthsShort (format, index) {
	    return listMonthsImpl(format, index, 'monthsShort');
	}

	function listWeekdays (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}

	function listWeekdaysShort (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}

	function listWeekdaysMin (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}

	getSetGlobalLocale('en', {
	    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (toInt(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});

	// Side effect imports

	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

	var mathAbs = Math.abs;

	function abs$1 () {
	    var data           = this._data;

	    this._milliseconds = mathAbs(this._milliseconds);
	    this._days         = mathAbs(this._days);
	    this._months       = mathAbs(this._months);

	    data.milliseconds  = mathAbs(data.milliseconds);
	    data.seconds       = mathAbs(data.seconds);
	    data.minutes       = mathAbs(data.minutes);
	    data.hours         = mathAbs(data.hours);
	    data.months        = mathAbs(data.months);
	    data.years         = mathAbs(data.years);

	    return this;
	}

	function addSubtract$1 (duration, input, value, direction) {
	    var other = createDuration(input, value);

	    duration._milliseconds += direction * other._milliseconds;
	    duration._days         += direction * other._days;
	    duration._months       += direction * other._months;

	    return duration._bubble();
	}

	// supports only 2.0-style add(1, 's') or add(duration)
	function add$1 (input, value) {
	    return addSubtract$1(this, input, value, 1);
	}

	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1 (input, value) {
	    return addSubtract$1(this, input, value, -1);
	}

	function absCeil (number) {
	    if (number < 0) {
	        return Math.floor(number);
	    } else {
	        return Math.ceil(number);
	    }
	}

	function bubble () {
	    var milliseconds = this._milliseconds;
	    var days         = this._days;
	    var months       = this._months;
	    var data         = this._data;
	    var seconds, minutes, hours, years, monthsFromDays;

	    // if we have a mix of positive and negative values, bubble down first
	    // check: https://github.com/moment/moment/issues/2166
	    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	            (milliseconds <= 0 && days <= 0 && months <= 0))) {
	        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	        days = 0;
	        months = 0;
	    }

	    // The following code bubbles up values, see the tests for
	    // examples of what that means.
	    data.milliseconds = milliseconds % 1000;

	    seconds           = absFloor(milliseconds / 1000);
	    data.seconds      = seconds % 60;

	    minutes           = absFloor(seconds / 60);
	    data.minutes      = minutes % 60;

	    hours             = absFloor(minutes / 60);
	    data.hours        = hours % 24;

	    days += absFloor(hours / 24);

	    // convert days to months
	    monthsFromDays = absFloor(daysToMonths(days));
	    months += monthsFromDays;
	    days -= absCeil(monthsToDays(monthsFromDays));

	    // 12 months -> 1 year
	    years = absFloor(months / 12);
	    months %= 12;

	    data.days   = days;
	    data.months = months;
	    data.years  = years;

	    return this;
	}

	function daysToMonths (days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    // 400 years have 12 months === 4800
	    return days * 4800 / 146097;
	}

	function monthsToDays (months) {
	    // the reverse of daysToMonths
	    return months * 146097 / 4800;
	}

	function as (units) {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    var days;
	    var months;
	    var milliseconds = this._milliseconds;

	    units = normalizeUnits(units);

	    if (units === 'month' || units === 'year') {
	        days   = this._days   + milliseconds / 864e5;
	        months = this._months + daysToMonths(days);
	        return units === 'month' ? months : months / 12;
	    } else {
	        // handle milliseconds separately because of floating point math errors (issue #1867)
	        days = this._days + Math.round(monthsToDays(this._months));
	        switch (units) {
	            case 'week'   : return days / 7     + milliseconds / 6048e5;
	            case 'day'    : return days         + milliseconds / 864e5;
	            case 'hour'   : return days * 24    + milliseconds / 36e5;
	            case 'minute' : return days * 1440  + milliseconds / 6e4;
	            case 'second' : return days * 86400 + milliseconds / 1000;
	            // Math.floor prevents floating point math errors here
	            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	            default: throw new Error('Unknown unit ' + units);
	        }
	    }
	}

	// TODO: Use this.as('ms')?
	function valueOf$1 () {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    return (
	        this._milliseconds +
	        this._days * 864e5 +
	        (this._months % 12) * 2592e6 +
	        toInt(this._months / 12) * 31536e6
	    );
	}

	function makeAs (alias) {
	    return function () {
	        return this.as(alias);
	    };
	}

	var asMilliseconds = makeAs('ms');
	var asSeconds      = makeAs('s');
	var asMinutes      = makeAs('m');
	var asHours        = makeAs('h');
	var asDays         = makeAs('d');
	var asWeeks        = makeAs('w');
	var asMonths       = makeAs('M');
	var asYears        = makeAs('y');

	function clone$1 () {
	    return createDuration(this);
	}

	function get$3 (units) {
	    units = normalizeUnits(units);
	    return this.isValid() ? this[units + 's']() : NaN;
	}

	function makeGetter(name) {
	    return function () {
	        return this.isValid() ? this._data[name] : NaN;
	    };
	}

	var milliseconds = makeGetter('milliseconds');
	var seconds      = makeGetter('seconds');
	var minutes      = makeGetter('minutes');
	var hours        = makeGetter('hours');
	var days         = makeGetter('days');
	var months       = makeGetter('months');
	var years        = makeGetter('years');

	function weeks () {
	    return absFloor(this.days() / 7);
	}

	var round = Math.round;
	var thresholds = {
	    ss: 44,         // a few seconds to seconds
	    s : 45,         // seconds to minute
	    m : 45,         // minutes to hour
	    h : 22,         // hours to day
	    d : 26,         // days to month
	    M : 11          // months to year
	};

	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}

	function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	    var duration = createDuration(posNegDuration).abs();
	    var seconds  = round(duration.as('s'));
	    var minutes  = round(duration.as('m'));
	    var hours    = round(duration.as('h'));
	    var days     = round(duration.as('d'));
	    var months   = round(duration.as('M'));
	    var years    = round(duration.as('y'));

	    var a = seconds <= thresholds.ss && ['s', seconds]  ||
	            seconds < thresholds.s   && ['ss', seconds] ||
	            minutes <= 1             && ['m']           ||
	            minutes < thresholds.m   && ['mm', minutes] ||
	            hours   <= 1             && ['h']           ||
	            hours   < thresholds.h   && ['hh', hours]   ||
	            days    <= 1             && ['d']           ||
	            days    < thresholds.d   && ['dd', days]    ||
	            months  <= 1             && ['M']           ||
	            months  < thresholds.M   && ['MM', months]  ||
	            years   <= 1             && ['y']           || ['yy', years];

	    a[2] = withoutSuffix;
	    a[3] = +posNegDuration > 0;
	    a[4] = locale;
	    return substituteTimeAgo.apply(null, a);
	}

	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding (roundingFunction) {
	    if (roundingFunction === undefined) {
	        return round;
	    }
	    if (typeof(roundingFunction) === 'function') {
	        round = roundingFunction;
	        return true;
	    }
	    return false;
	}

	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold (threshold, limit) {
	    if (thresholds[threshold] === undefined) {
	        return false;
	    }
	    if (limit === undefined) {
	        return thresholds[threshold];
	    }
	    thresholds[threshold] = limit;
	    if (threshold === 's') {
	        thresholds.ss = limit - 1;
	    }
	    return true;
	}

	function humanize (withSuffix) {
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }

	    var locale = this.localeData();
	    var output = relativeTime$1(this, !withSuffix, locale);

	    if (withSuffix) {
	        output = locale.pastFuture(+this, output);
	    }

	    return locale.postformat(output);
	}

	var abs$2 = Math.abs;

	function sign$1(x) {
	    return ((x > 0) - (x < 0)) || +x;
	}

	function toISOString$1() {
	    // for ISO strings we do not use the normal bubbling rules:
	    //  * milliseconds bubble up until they become hours
	    //  * days do not bubble at all
	    //  * months bubble up until they become years
	    // This is because there is no context-free conversion between hours and days
	    // (think of clock changes)
	    // and also not between days and months (28-31 days per month)
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }

	    var seconds = abs$2(this._milliseconds) / 1000;
	    var days         = abs$2(this._days);
	    var months       = abs$2(this._months);
	    var minutes, hours, years;

	    // 3600 seconds -> 60 minutes -> 1 hour
	    minutes           = absFloor(seconds / 60);
	    hours             = absFloor(minutes / 60);
	    seconds %= 60;
	    minutes %= 60;

	    // 12 months -> 1 year
	    years  = absFloor(months / 12);
	    months %= 12;


	    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	    var Y = years;
	    var M = months;
	    var D = days;
	    var h = hours;
	    var m = minutes;
	    var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	    var total = this.asSeconds();

	    if (!total) {
	        // this is the same as C#'s (Noda) and python (isodate)...
	        // but not other JS (goog.date)
	        return 'P0D';
	    }

	    var totalSign = total < 0 ? '-' : '';
	    var ymSign = sign$1(this._months) !== sign$1(total) ? '-' : '';
	    var daysSign = sign$1(this._days) !== sign$1(total) ? '-' : '';
	    var hmsSign = sign$1(this._milliseconds) !== sign$1(total) ? '-' : '';

	    return totalSign + 'P' +
	        (Y ? ymSign + Y + 'Y' : '') +
	        (M ? ymSign + M + 'M' : '') +
	        (D ? daysSign + D + 'D' : '') +
	        ((h || m || s) ? 'T' : '') +
	        (h ? hmsSign + h + 'H' : '') +
	        (m ? hmsSign + m + 'M' : '') +
	        (s ? hmsSign + s + 'S' : '');
	}

	var proto$3 = Duration.prototype;

	proto$3.isValid        = isValid$1;
	proto$3.abs            = abs$1;
	proto$3.add            = add$1;
	proto$3.subtract       = subtract$1;
	proto$3.as             = as;
	proto$3.asMilliseconds = asMilliseconds;
	proto$3.asSeconds      = asSeconds;
	proto$3.asMinutes      = asMinutes;
	proto$3.asHours        = asHours;
	proto$3.asDays         = asDays;
	proto$3.asWeeks        = asWeeks;
	proto$3.asMonths       = asMonths;
	proto$3.asYears        = asYears;
	proto$3.valueOf        = valueOf$1;
	proto$3._bubble        = bubble;
	proto$3.clone          = clone$1;
	proto$3.get            = get$3;
	proto$3.milliseconds   = milliseconds;
	proto$3.seconds        = seconds;
	proto$3.minutes        = minutes;
	proto$3.hours          = hours;
	proto$3.days           = days;
	proto$3.weeks          = weeks;
	proto$3.months         = months;
	proto$3.years          = years;
	proto$3.humanize       = humanize;
	proto$3.toISOString    = toISOString$1;
	proto$3.toString       = toISOString$1;
	proto$3.toJSON         = toISOString$1;
	proto$3.locale         = locale;
	proto$3.localeData     = localeData;

	proto$3.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$3.lang = lang;

	// Side effect imports

	// FORMATTING

	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');

	// PARSING

	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	    config._d = new Date(parseFloat(input, 10) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	    config._d = new Date(toInt(input));
	});

	// Side effect imports

	//! moment.js

	hooks.version = '2.21.0';

	setHookCallback(createLocal);

	hooks.fn                    = proto$1;
	hooks.min                   = min$3;
	hooks.max                   = max$2;
	hooks.now                   = now$1;
	hooks.utc                   = createUTC;
	hooks.unix                  = createUnix;
	hooks.months                = listMonths;
	hooks.isDate                = isDate;
	hooks.locale                = getSetGlobalLocale;
	hooks.invalid               = createInvalid;
	hooks.duration              = createDuration;
	hooks.isMoment              = isMoment;
	hooks.weekdays              = listWeekdays;
	hooks.parseZone             = createInZone;
	hooks.localeData            = getLocale;
	hooks.isDuration            = isDuration;
	hooks.monthsShort           = listMonthsShort;
	hooks.weekdaysMin           = listWeekdaysMin;
	hooks.defineLocale          = defineLocale;
	hooks.updateLocale          = updateLocale;
	hooks.locales               = listLocales;
	hooks.weekdaysShort         = listWeekdaysShort;
	hooks.normalizeUnits        = normalizeUnits;
	hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat        = getCalendarFormat;
	hooks.prototype             = proto$1;

	// currently HTML5 input type only supports 24-hour formats
	hooks.HTML5_FMT = {
	    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
	    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
	    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
	    DATE: 'YYYY-MM-DD',                             // <input type="date" />
	    TIME: 'HH:mm',                                  // <input type="time" />
	    TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
	    TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
	    WEEK: 'YYYY-[W]WW',                             // <input type="week" />
	    MONTH: 'YYYY-MM'                                // <input type="month" />
	};

	var moment = /*#__PURE__*/Object.freeze({
		default: hooks
	});

	var _moment = ( moment && hooks ) || moment;

	var timerange = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _stringify2 = _interopRequireDefault(stringify$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _immutable2 = _interopRequireDefault(immutable);



	var _moment2 = _interopRequireDefault(_moment);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	A time range is a simple representation of a begin and end time, used
	to maintain consistency across an application.

	### Construction

	You can define a TimeRange with moments, Javascript Date objects
	or ms since UNIX epoch. Here we construct one with two moments:

	```js
	var fmt = "YYYY-MM-DD HH:mm";
	var beginTime = moment("2012-01-11 11:11", fmt);
	var endTime =   moment("2012-02-22 12:12", fmt);
	var range = new TimeRange(beginTime, endTime);
	```

	or with ms times:

	```js
	var range = new TimeRange([1326309060000, 1329941520000]);
	```

	 */
	var TimeRange = function () {
	    /**
	     * Builds a new TimeRange which may be of several different formats:
	     *   - Another TimeRange (copy constructor)
	     *   - An Immutable.List containing two Dates.
	     *   - A Javascript array containing two Date or ms timestamps
	     *   - Two arguments, begin and end, each of which may be a Data,
	     *     a Moment, or a ms timestamp.
	     */
	    function TimeRange(arg1, arg2) {
	        (0, _classCallCheck3.default)(this, TimeRange);

	        if (arg1 instanceof TimeRange) {
	            var other = arg1;
	            this._range = other._range;
	        } else if (arg1 instanceof _immutable2.default.List) {
	            var rangeList = arg1;
	            this._range = rangeList;
	        } else if (_underscore2.default.isArray(arg1)) {
	            var rangeArray = arg1;
	            this._range = new _immutable2.default.List([new Date(rangeArray[0]), new Date(rangeArray[1])]);
	        } else {
	            var b = arg1;
	            var e = arg2;
	            if (_underscore2.default.isDate(b) && _underscore2.default.isDate(e)) {
	                this._range = new _immutable2.default.List([new Date(b.getTime()), new Date(e.getTime())]);
	            } else if (_moment2.default.isMoment(b) && _moment2.default.isMoment(e)) {
	                this._range = new _immutable2.default.List([new Date(b.valueOf()), new Date(e.valueOf())]);
	            } else if (_underscore2.default.isNumber(b) && _underscore2.default.isNumber(e)) {
	                this._range = new _immutable2.default.List([new Date(b), new Date(e)]);
	            }
	        }
	    }

	    /**
	     * Returns the internal range, which is an Immutable List containing
	     * begin and end times.
	     *
	     * @return {Immutable.List} List containing the begin and end of the time range.
	     */


	    (0, _createClass3.default)(TimeRange, [{
	        key: "range",
	        value: function range() {
	            return this._range;
	        }

	        //
	        // Serialize
	        //
	        /**
	         * Returns the TimeRange as JSON, which will be a Javascript array
	         * of two ms timestamps.
	         *
	         * @return {number[]} JSON representation of the TimeRange
	         */

	    }, {
	        key: "toJSON",
	        value: function toJSON() {
	            return [this.begin().getTime(), this.end().getTime()];
	        }

	        /**
	         * Returns the TimeRange as a string, useful for serialization.
	         *
	         * @return {string} String representation of the TimeRange
	         */

	    }, {
	        key: "toString",
	        value: function toString() {
	            return (0, _stringify2.default)(this.toJSON());
	        }

	        /**
	         * Returns the TimeRange as a string expressed in local time
	         *
	         * @return {string} String representation of the TimeRange
	         */

	    }, {
	        key: "toLocalString",
	        value: function toLocalString() {
	            return "[" + this.begin() + ", " + this.end() + "]";
	        }

	        /**
	         * Returns the TimeRange as a string expressed in UTC time
	         *
	         * @return {string} String representation of the TimeRange
	         */

	    }, {
	        key: "toUTCString",
	        value: function toUTCString() {
	            return "[" + this.begin().toUTCString() + ", " + this.end().toUTCString() + "]";
	        }

	        /**
	         * Returns a human friendly version of the TimeRange, e.g.
	         * "Aug 1, 2014 05:19:59 am to Aug 1, 2014 07:41:06 am"
	         *
	         * @return {string} Human friendly string representation of the TimeRange
	         */

	    }, {
	        key: "humanize",
	        value: function humanize() {
	            var begin = (0, _moment2.default)(this.begin());
	            var end = (0, _moment2.default)(this.end());
	            var beginStr = begin.format("MMM D, YYYY hh:mm:ss a");
	            var endStr = end.format("MMM D, YYYY hh:mm:ss a");

	            return beginStr + " to " + endStr;
	        }

	        /**
	         * Returns a human friendly version of the TimeRange
	         * @example
	         * "a few seconds ago to a month ago"
	         *
	         * @return {string} Human friendly string representation of the TimeRange
	         */

	    }, {
	        key: "relativeString",
	        value: function relativeString() {
	            var begin = (0, _moment2.default)(this.begin());
	            var end = (0, _moment2.default)(this.end());
	            return begin.fromNow() + " to " + end.fromNow();
	        }

	        /**
	         * Returns the begin time of the TimeRange.
	         *
	         * @return {Date} The begin time of the TimeRange
	         */

	    }, {
	        key: "begin",
	        value: function begin() {
	            return this._range.get(0);
	        }

	        /**
	         * Returns the end time of the TimeRange.
	         *
	         * @return {Date} The end time of the TimeRange
	         */

	    }, {
	        key: "end",
	        value: function end() {
	            return this._range.get(1);
	        }

	        /**
	         * Sets a new begin time on the TimeRange. The result will be
	         * a new TimeRange.
	         *
	         * @param {Date} t Time to set the begin time to
	         * @return {TimeRange} The new mutated TimeRange
	         */

	    }, {
	        key: "setBegin",
	        value: function setBegin(t) {
	            return new TimeRange(this._range.set(0, t));
	        }

	        /**
	         * Sets a new end time on the TimeRange. The result will be
	         * a new TimeRange.
	         *
	         * @param {Date} t Time to set the end time to
	         * @return {TimeRange} The new mutated TimeRange
	         */

	    }, {
	        key: "setEnd",
	        value: function setEnd(t) {
	            return new TimeRange(this._range.set(1, t));
	        }

	        /**
	         * Returns if the two TimeRanges can be considered equal,
	         * in that they have the same times.
	         *
	         * @param {TimeRange} other The TimeRange to compare to
	         * @return {boolean} Result
	         */

	    }, {
	        key: "equals",
	        value: function equals(other) {
	            return this.begin().getTime() === other.begin().getTime() && this.end().getTime() === other.end().getTime();
	        }

	        /**
	         * Returns true if other is completely inside this.
	         *
	         * @param {TimeRange} other The TimeRange to compare to
	         * @return {boolean} Result
	         */

	    }, {
	        key: "contains",
	        value: function contains(other) {
	            if (_underscore2.default.isDate(other)) {
	                return this.begin() <= other && this.end() >= other;
	            } else {
	                return this.begin() <= other.begin() && this.end() >= other.end();
	            }
	            return false;
	        }

	        /**
	         * Returns true if this TimeRange is completely within the supplied
	         * other TimeRange.
	         *
	         * @param {TimeRange} other The TimeRange to compare to
	         * @return {boolean} Result
	         */

	    }, {
	        key: "within",
	        value: function within(other) {
	            return this.begin() >= other.begin() && this.end() <= other.end();
	        }

	        /**
	         * Returns true if the passed in other TimeRange overlaps this time Range.
	         *
	         * @param {TimeRange} other The TimeRange to compare to
	         * @return {boolean} Result
	         */

	    }, {
	        key: "overlaps",
	        value: function overlaps(other) {
	            if (this.contains(other.begin()) && !this.contains(other.end()) || this.contains(other.end()) && !this.contains(other.begin())) {
	                return true;
	            } else {
	                return false;
	            }
	        }

	        /**
	         * Returns true if the passed in other Range in no way
	         * overlaps this time Range.
	         *
	         * @param {TimeRange} other The TimeRange to compare to
	         * @return {boolean} Result
	         */

	    }, {
	        key: "disjoint",
	        value: function disjoint(other) {
	            return this.end() < other.begin() || this.begin() > other.end();
	        }

	        /**
	         * @param {TimeRange} other The TimeRange to extend with
	         * @return {TimeRange} a new Timerange which covers the extents of this and
	         * other combined.
	         */

	    }, {
	        key: "extents",
	        value: function extents(other) {
	            var b = this.begin() < other.begin() ? this.begin() : other.begin();
	            var e = this.end() > other.end() ? this.end() : other.end();
	            return new TimeRange(new Date(b.getTime()), new Date(e.getTime()));
	        }

	        /**
	         * @param {TimeRange} other The TimeRange to intersect with
	         * @return {TimeRange} A new TimeRange which represents the intersection
	         * (overlapping) part of this and other.
	         */

	    }, {
	        key: "intersection",
	        value: function intersection(other) {
	            if (this.disjoint(other)) {
	                return undefined;
	            }
	            var b = this.begin() > other.begin() ? this.begin() : other.begin();
	            var e = this.end() < other.end() ? this.end() : other.end();
	            return new TimeRange(new Date(b.getTime()), new Date(e.getTime()));
	        }

	        /**
	         * @return {number} The duration of the TimeRange in milliseconds
	         */

	    }, {
	        key: "duration",
	        value: function duration() {
	            return this.end().getTime() - this.begin().getTime();
	        }

	        /**
	         * @return {string} A user friendly version of the duration.
	         */

	    }, {
	        key: "humanizeDuration",
	        value: function humanizeDuration() {
	            return _moment2.default.duration(this.duration()).humanize();
	        }

	        //
	        // Static TimeRange creators
	        //
	        /**
	         * @return {TimeRange} The last day, as a TimeRange
	         */

	    }], [{
	        key: "lastDay",
	        value: function lastDay() {
	            var endTime = (0, _moment2.default)();
	            var beginTime = endTime.clone().subtract(24, "hours");
	            return new TimeRange(beginTime, endTime);
	        }

	        /**
	         * @return {TimeRange} The last seven days, as a TimeRange
	         */

	    }, {
	        key: "lastSevenDays",
	        value: function lastSevenDays() {
	            var endTime = (0, _moment2.default)();
	            var beginTime = endTime.clone().subtract(7, "days");
	            return new TimeRange(beginTime, endTime);
	        }

	        /**
	         * @return {TimeRange} The last thirty days, as a TimeRange
	         */

	    }, {
	        key: "lastThirtyDays",
	        value: function lastThirtyDays() {
	            var endTime = (0, _moment2.default)();
	            var beginTime = endTime.clone().subtract(30, "days");
	            return new TimeRange(beginTime, endTime);
	        }

	        /**
	         * @return {TimeRange} The last month, as a TimeRange
	         */

	    }, {
	        key: "lastMonth",
	        value: function lastMonth() {
	            var endTime = (0, _moment2.default)();
	            var beginTime = endTime.clone().subtract(1, "month");
	            return new TimeRange(beginTime, endTime);
	        }

	        /**
	         * @return {TimeRange} The last 90 days, as a TimeRange
	         */

	    }, {
	        key: "lastNinetyDays",
	        value: function lastNinetyDays() {
	            var endTime = (0, _moment2.default)();
	            var beginTime = endTime.clone().subtract(90, "days");
	            return new TimeRange(beginTime, endTime);
	        }

	        /**
	         * @return {TimeRange} The last year, as a TimeRange
	         */

	    }, {
	        key: "lastYear",
	        value: function lastYear() {
	            var endTime = (0, _moment2.default)();
	            var beginTime = endTime.clone().subtract(1, "year");
	            return new TimeRange(beginTime, endTime);
	        }
	    }]);
	    return TimeRange;
	}(); /*
	      *  Copyright (c) 2015-2017, The Regents of the University of California,
	      *  through Lawrence Berkeley National Laboratory (subject to receipt
	      *  of any required approvals from the U.S. Dept. of Energy).
	      *  All rights reserved.
	      *
	      *  This source code is licensed under the BSD-style license found in the
	      *  LICENSE file in the root directory of this source tree.
	      */

	exports.default = TimeRange;
	});

	unwrapExports(timerange);

	var lib$9 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _util2 = _interopRequireDefault(util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	An index is simply a string that represents a fixed range of time. There are two basic types:
	 * *Multiplier index* - the number of some unit of time (hours, days etc) since the UNIX epoch.
	 * *Calendar index* - The second represents a calendar range, such as Oct 2014.

	For the first type, a multiplier index, an example might be:

	```text
	    1d-12355      //  30th Oct 2003 (GMT), the 12355th day since the UNIX epoch
	```

	You can also use seconds (e.g. 30s), minutes (e.g. 5m), hours (e.g. 1h) or days (e.g. 7d).

	Here are several examples of a calendar index:

	```text
	    2003-10-30    // 30th Oct 2003
	    2014-09       // Sept 2014
	    2015          // All of the year 2015
	```

	An Index is a nice representation of certain types of time intervals because it can be cached with its string representation as a key. A specific chunk of time, and associated data can be looked up based on that string. It also allows us to represent things like months, which have variable length.

	An Index is also useful when collecting into specific time ranges, for example generating all the 5 min ("5m") maximum rollups within a specific day ("1d"). See the processing section within these docs.

	 */
	var Index = function () {
	    function Index(s) {
	        var utc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	        (0, _classCallCheck3.default)(this, Index);

	        this._utc = utc;
	        this._string = s;
	        this._timerange = _util2.default.rangeFromIndexString(s, this._utc);
	    }

	    /**
	     * Returns the Index as JSON, which will just be its string
	     * representation
	     */


	    (0, _createClass3.default)(Index, [{
	        key: "toJSON",
	        value: function toJSON() {
	            return this._string;
	        }

	        /**
	         * Simply returns the Index as its string
	         */

	    }, {
	        key: "toString",
	        value: function toString() {
	            return this._string;
	        }

	        /**
	         * for the calendar range style Indexes, this lets you return
	         * that calendar range as a human readable format, e.g. "June, 2014".
	         * The format specified is a Moment.format.
	         */

	    }, {
	        key: "toNiceString",
	        value: function toNiceString(format) {
	            return _util2.default.niceIndexString(this._string, format);
	        }

	        /**
	         * Alias for toString()
	         */

	    }, {
	        key: "asString",
	        value: function asString() {
	            return this.toString();
	        }

	        /**
	         * Returns the Index as a TimeRange
	         */

	    }, {
	        key: "asTimerange",
	        value: function asTimerange() {
	            return this._timerange;
	        }

	        /**
	         * Returns the start date of the Index
	         */

	    }, {
	        key: "begin",
	        value: function begin() {
	            return this._timerange.begin();
	        }

	        /**
	         * Returns the end date of the Index
	         */

	    }, {
	        key: "end",
	        value: function end() {
	            return this._timerange.end();
	        }

	        /**
	         * Return the index string given an index prefix and a datetime object.
	         */

	    }], [{
	        key: "getIndexString",
	        value: function getIndexString(win, date) {
	            var pos = _util2.default.windowPositionFromDate(win, date);
	            return win + "-" + pos;
	        }

	        /**
	         * Given the time range, return a list of strings of index values every <prefix> tick.
	         */

	    }, {
	        key: "getIndexStringList",
	        value: function getIndexStringList(win, timerange) {
	            var pos1 = _util2.default.windowPositionFromDate(win, timerange.begin());
	            var pos2 = _util2.default.windowPositionFromDate(win, timerange.end());
	            var indexList = [];
	            if (pos1 <= pos2) {
	                for (var pos = pos1; pos <= pos2; pos++) {
	                    indexList.push(win + "-" + pos);
	                }
	            }
	            return indexList;
	        }

	        /**
	         * Generate an index string with day granularity.
	         */

	    }, {
	        key: "getDailyIndexString",
	        value: function getDailyIndexString(date) {
	            var utc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	            var day = _util2.default.leftPad(utc ? date.getUTCDate() : date.getDate());
	            var month = _util2.default.leftPad(utc ? date.getUTCMonth() + 1 : date.getMonth() + 1);
	            var year = utc ? date.getUTCFullYear() : date.getFullYear();
	            return year + "-" + month + "-" + day;
	        }

	        /**
	         * Generate an index string with month granularity.
	         */

	    }, {
	        key: "getMonthlyIndexString",
	        value: function getMonthlyIndexString(date) {
	            var utc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	            var month = _util2.default.leftPad(utc ? date.getUTCMonth() + 1 : date.getMonth() + 1);
	            var year = utc ? date.getUTCFullYear() : date.getFullYear();
	            return year + "-" + month;
	        }

	        /**
	         * Generate an index string with month granularity.
	         */

	    }, {
	        key: "getYearlyIndexString",
	        value: function getYearlyIndexString(date) {
	            var utc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	            var year = utc ? date.getUTCFullYear() : date.getFullYear();
	            return "" + year;
	        }
	    }]);
	    return Index;
	}(); /*
	      *  Copyright (c) 2016-2017, The Regents of the University of California,
	      *  through Lawrence Berkeley National Laboratory (subject to receipt
	      *  of any required approvals from the U.S. Dept. of Energy).
	      *  All rights reserved.
	      *
	      *  This source code is licensed under the BSD-style license found in the
	      *  LICENSE file in the root directory of this source tree.
	      */

	exports.default = Index;
	});

	unwrapExports(lib$9);

	var util = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _slicedToArray3 = _interopRequireDefault(slicedToArray$1);



	var _regenerator2 = _interopRequireDefault(regenerator);



	var _toConsumableArray3 = _interopRequireDefault(toConsumableArray$1);



	var _keys2 = _interopRequireDefault(keys$1);



	var _getIterator3 = _interopRequireDefault(getIterator$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _immutable2 = _interopRequireDefault(immutable);



	var _moment2 = _interopRequireDefault(_moment);



	var _timerange2 = _interopRequireDefault(timerange);



	var _index2 = _interopRequireDefault(lib$9);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var units = {
	    s: { label: "seconds", length: 1 },
	    m: { label: "minutes", length: 60 },
	    h: { label: "hours", length: 60 * 60 },
	    d: { label: "days", length: 60 * 60 * 24 }
	};

	/**
	 * This function will take an index, which may be of two forms:
	 *     2015-07-14  (day)
	 *     2015-07     (month)
	 *     2015        (year)
	 * or:
	 *     1d-278      (range, in n x days, hours, minutes or seconds)
	 *
	 * and return a TimeRange for that time. The TimeRange may be considered to be
	 * local time or UTC time, depending on the utc flag passed in.
	 */
	/**
	 *  Copyright (c) 2015-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	exports.default = {
	    /**
	     * Single zero left padding, for days and months.
	     */
	    leftPad: function leftPad(value) {
	        return "" + (value < 10 ? "0" : "") + value;
	    },

	    /**
	     * Returns a duration in milliseconds given a window duration string.
	     * For example "30s" (30 seconds) should return 30000ms. Accepts
	     * seconds (e.g. "30s"), minutes (e.g. "5m"), hours (e.g. "6h") and
	     * days (e.g. "30d")
	     */
	    windowDuration: function windowDuration(w) {
	        // window should be two parts, a number and a letter if it's a
	        // range based index, e.g "1h".
	        var regex = /([0-9]+)([smhd])/;
	        var parts = regex.exec(w);
	        if (parts && parts.length >= 3) {
	            var num = parseInt(parts[1], 10);
	            var unit = parts[2];
	            return num * units[unit].length * 1000;
	        }
	    },
	    windowPositionFromDate: function windowPositionFromDate(w, date) {
	        var duration = this.windowDuration(w);
	        var dd = _moment2.default.utc(date).valueOf();
	        return parseInt(dd /= duration, 10);
	    },
	    rangeFromIndexString: function rangeFromIndexString(index, utc) {
	        var isUTC = !_underscore2.default.isUndefined(utc) ? utc : true;
	        var parts = index.split("-");

	        var beginTime = void 0;
	        var endTime = void 0;

	        switch (parts.length) {
	            case 3:
	                // A day, month and year e.g. 2014-10-24
	                if (!_underscore2.default.isNaN(parseInt(parts[0], 10)) && !_underscore2.default.isNaN(parseInt(parts[1], 10)) && !_underscore2.default.isNaN(parseInt(parts[2], 10))) {
	                    var _year = parseInt(parts[0], 10);
	                    var month = parseInt(parts[1], 10);
	                    var day = parseInt(parts[2], 10);
	                    beginTime = isUTC ? _moment2.default.utc([_year, month - 1, day]) : (0, _moment2.default)([_year, month - 1, day]);
	                    endTime = isUTC ? _moment2.default.utc(beginTime).endOf("day") : (0, _moment2.default)(beginTime).endOf("day");
	                }
	                break;

	            case 2:
	                // Size should be two parts, a number and a letter if it's a
	                // range based index, e.g 1h-23478
	                var rangeRegex = /([0-9]+)([smhd])/;
	                var sizeParts = rangeRegex.exec(parts[0]);
	                if (sizeParts && sizeParts.length >= 3 && !_underscore2.default.isNaN(parseInt(parts[1], 10))) {
	                    var pos = parseInt(parts[1], 10);
	                    var num = parseInt(sizeParts[1], 10);
	                    var unit = sizeParts[2];
	                    var length = num * units[unit].length * 1000;

	                    beginTime = isUTC ? _moment2.default.utc(pos * length) : (0, _moment2.default)(pos * length);
	                    endTime = isUTC ? _moment2.default.utc((pos + 1) * length) : (0, _moment2.default)((pos + 1) * length);
	                    // A month and year e.g 2015-09
	                } else if (!_underscore2.default.isNaN(parseInt(parts[0], 10)) && !_underscore2.default.isNaN(parseInt(parts[1], 10))) {
	                    var _year2 = parseInt(parts[0], 10);
	                    var _month = parseInt(parts[1], 10);
	                    beginTime = isUTC ? _moment2.default.utc([_year2, _month - 1]) : (0, _moment2.default)([_year2, _month - 1]);
	                    endTime = isUTC ? _moment2.default.utc(beginTime).endOf("month") : (0, _moment2.default)(beginTime).endOf("month");
	                }
	                break;

	            // A year e.g. 2015
	            case 1:
	                var year = parts[0];
	                beginTime = isUTC ? _moment2.default.utc([year]) : (0, _moment2.default)([year]);
	                endTime = isUTC ? _moment2.default.utc(beginTime).endOf("year") : (0, _moment2.default)(beginTime).endOf("year");
	                break;
	        }

	        if (beginTime && beginTime.isValid() && endTime && endTime.isValid()) {
	            return new _timerange2.default(beginTime, endTime);
	        } else {
	            return undefined;
	        }
	    },

	    /**
	     * Returns a nice string for the index. If the index is of the form
	     * 1d-2345 then just that string is returned (there's not nice way to put
	     * it), but if it represents a day, month, or year (e.g. 2015-07) then a
	     * nice string like "July" will be returned. It's also possible to pass in
	     * the format of the reply for these types of strings. See moment's format
	     * naming conventions:
	     * http://momentjs.com/docs/#/displaying/format/
	     */
	    niceIndexString: function niceIndexString(index, format) {
	        var t = void 0;

	        var parts = index.split("-");
	        switch (parts.length) {
	            case 3:
	                if (!_underscore2.default.isNaN(parseInt(parts[0], 10)) && !_underscore2.default.isNaN(parseInt(parts[1], 10)) && !_underscore2.default.isNaN(parseInt(parts[2], 10))) {
	                    var _year3 = parseInt(parts[0], 10);
	                    var month = parseInt(parts[1], 10);
	                    var day = parseInt(parts[2], 10);
	                    t = _moment2.default.utc([_year3, month - 1, day]);
	                    if (format) {
	                        return t.format(format);
	                    } else {
	                        return t.format("MMMM Do YYYY");
	                    }
	                }
	                break;

	            case 2:
	                var rangeRegex = /([0-9]+)([smhd])/;
	                var sizeParts = rangeRegex.exec(parts[0]);
	                if (sizeParts && sizeParts.length >= 3 && !_underscore2.default.isNaN(parseInt(parts[1], 10))) {
	                    return index;
	                } else if (!_underscore2.default.isNaN(parseInt(parts[0], 10)) && !_underscore2.default.isNaN(parseInt(parts[1], 10))) {
	                    var _year4 = parseInt(parts[0], 10);
	                    var _month2 = parseInt(parts[1], 10);
	                    t = _moment2.default.utc([_year4, _month2 - 1]);
	                    if (format) {
	                        return t.format(format);
	                    } else {
	                        return t.format("MMMM");
	                    }
	                }
	                break;

	            case 1:
	                var year = parts[0];
	                t = _moment2.default.utc([year]);
	                if (format) {
	                    return t.format(format);
	                } else {
	                    return t.format("YYYY");
	                }
	                break;
	        }
	        return index;
	    },
	    isMissing: function isMissing(val) {
	        return _underscore2.default.isNull(val) || _underscore2.default.isUndefined(val) || _underscore2.default.isNaN(val);
	    },

	    /**
	     * Split the field spec if it is not already a list.
	     *
	     * Also, allow for deep fields to be passed in as a tuple because
	     * it will need to be used as a dict key in some of the processor
	     * Options.
	     *
	     * This is deployed in Event.get() to process anything passed
	     * to it, but this should also be deployed "upstream" to avoid
	     * having that split() done over and over in a loop.
	     */
	    fieldPathToArray: function fieldPathToArray(fieldSpec) {
	        if (_underscore2.default.isArray(fieldSpec) || _underscore2.default.isFunction(fieldSpec)) {
	            return fieldSpec;
	        } else if (_underscore2.default.isString(fieldSpec)) {
	            return fieldSpec.split(".");
	        } else if (_underscore2.default.isUndefined(fieldSpec)) {
	            return ["value"];
	        }
	    },

	    /**
	     * Generate a list of all possible field paths in an object. This is
	     * for to determine all deep paths when none is given.
	     */
	    generatePaths: function generatePaths(newData) {
	        var _marked = [recurse].map(_regenerator2.default.mark);

	        var paths = [];

	        function recurse(data) {
	            var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	            var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, key, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, path;

	            return _regenerator2.default.wrap(function recurse$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            if (!_underscore2.default.isObject(data)) {
	                                _context.next = 53;
	                                break;
	                            }

	                            _iteratorNormalCompletion = true;
	                            _didIteratorError = false;
	                            _iteratorError = undefined;
	                            _context.prev = 4;
	                            _iterator = (0, _getIterator3.default)((0, _keys2.default)(data));

	                        case 6:
	                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	                                _context.next = 37;
	                                break;
	                            }

	                            key = _step.value;
	                            _iteratorNormalCompletion2 = true;
	                            _didIteratorError2 = false;
	                            _iteratorError2 = undefined;
	                            _context.prev = 11;
	                            _iterator2 = (0, _getIterator3.default)(recurse(data[key], [].concat((0, _toConsumableArray3.default)(keys), [key])));

	                        case 13:
	                            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
	                                _context.next = 20;
	                                break;
	                            }

	                            path = _step2.value;
	                            _context.next = 17;
	                            return path;

	                        case 17:
	                            _iteratorNormalCompletion2 = true;
	                            _context.next = 13;
	                            break;

	                        case 20:
	                            _context.next = 26;
	                            break;

	                        case 22:
	                            _context.prev = 22;
	                            _context.t0 = _context["catch"](11);
	                            _didIteratorError2 = true;
	                            _iteratorError2 = _context.t0;

	                        case 26:
	                            _context.prev = 26;
	                            _context.prev = 27;

	                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                _iterator2.return();
	                            }

	                        case 29:
	                            _context.prev = 29;

	                            if (!_didIteratorError2) {
	                                _context.next = 32;
	                                break;
	                            }

	                            throw _iteratorError2;

	                        case 32:
	                            return _context.finish(29);

	                        case 33:
	                            return _context.finish(26);

	                        case 34:
	                            _iteratorNormalCompletion = true;
	                            _context.next = 6;
	                            break;

	                        case 37:
	                            _context.next = 43;
	                            break;

	                        case 39:
	                            _context.prev = 39;
	                            _context.t1 = _context["catch"](4);
	                            _didIteratorError = true;
	                            _iteratorError = _context.t1;

	                        case 43:
	                            _context.prev = 43;
	                            _context.prev = 44;

	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }

	                        case 46:
	                            _context.prev = 46;

	                            if (!_didIteratorError) {
	                                _context.next = 49;
	                                break;
	                            }

	                            throw _iteratorError;

	                        case 49:
	                            return _context.finish(46);

	                        case 50:
	                            return _context.finish(43);

	                        case 51:
	                            _context.next = 55;
	                            break;

	                        case 53:
	                            _context.next = 55;
	                            return keys;

	                        case 55:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, _marked[0], this, [[4, 39, 43, 51], [11, 22, 26, 34], [27,, 29, 33], [44,, 46, 50]]);
	        }

	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	            for (var _iterator3 = (0, _getIterator3.default)(recurse(newData)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                var key = _step3.value;

	                paths.push(key);
	            }
	        } catch (err) {
	            _didIteratorError3 = true;
	            _iteratorError3 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                    _iterator3.return();
	                }
	            } finally {
	                if (_didIteratorError3) {
	                    throw _iteratorError3;
	                }
	            }
	        }

	        return paths;
	    },

	    //
	    // Functions to turn constructor args
	    // into other stuff
	    //
	    timestampFromArg: function timestampFromArg(arg) {
	        if (_underscore2.default.isNumber(arg)) {
	            return new Date(arg);
	        } else if (_underscore2.default.isString(arg)) {
	            return new Date(+arg);
	        } else if (_underscore2.default.isDate(arg)) {
	            return new Date(arg.getTime());
	        } else if (_moment2.default.isMoment(arg)) {
	            return new Date(arg.valueOf());
	        } else {
	            throw new Error("Unable to get timestamp from " + arg + ". Should be a number, date, or moment.");
	        }
	    },
	    timeRangeFromArg: function timeRangeFromArg(arg) {
	        if (arg instanceof _timerange2.default) {
	            return arg;
	        } else if (_underscore2.default.isString(arg)) {
	            var _arg$split = arg.split(","),
	                _arg$split2 = (0, _slicedToArray3.default)(_arg$split, 2),
	                begin = _arg$split2[0],
	                end = _arg$split2[1];

	            return new _timerange2.default([+begin, +end]);
	        } else if (_underscore2.default.isArray(arg) && arg.length === 2) {
	            return new _timerange2.default(arg);
	        } else {
	            throw new Error("Unable to parse timerange. Should be a TimeRange. Got " + arg + ".");
	        }
	    },
	    indexFromArgs: function indexFromArgs(arg1) {
	        var arg2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	        if (_underscore2.default.isString(arg1)) {
	            return new _index2.default(arg1, arg2);
	        } else if (arg1 instanceof _index2.default) {
	            return arg1;
	        } else {
	            throw new Error("Unable to get index from " + arg1 + ". Should be a string or Index.");
	        }
	    },
	    dataFromArg: function dataFromArg(arg) {
	        var data = void 0;
	        if (_underscore2.default.isObject(arg)) {
	            // Deeply convert the data to Immutable Map
	            data = new _immutable2.default.fromJS(arg);
	        } else if (data instanceof _immutable2.default.Map) {
	            // Copy reference to the data
	            data = arg;
	        } else if (_underscore2.default.isNumber(arg) || _underscore2.default.isString(arg)) {
	            // Just add it to the value key of a new Map
	            // e.g. new Event(t, 25); -> t, {value: 25}
	            data = new _immutable2.default.Map({ value: arg });
	        } else {
	            throw new Error("Unable to interpret event data from " + arg + ".");
	        }
	        return data;
	    }
	};
	});

	unwrapExports(util);

	var event = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _stringify2 = _interopRequireDefault(stringify$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _immutable2 = _interopRequireDefault(immutable);



	var _util2 = _interopRequireDefault(util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	There are three types of Events in Pond, while this class provides the base class
	for them all:

	1. *TimeEvent* - a generic event which associates a timestamp with some data
	2. *TimeRangeEvent* - associates a TimeRange with some data
	3. *IndexedEvent* - associates a time range specified as an Index

	Event contains several static methods that may be useful, though in general
	are used by the Collection and TimeSeries classes. So, if you already have a
	TimeSeries or Collection you may want to examine the API there to see if you
	can do what you want to do.
	*/
	var Event = function () {
	    function Event() {
	        (0, _classCallCheck3.default)(this, Event);

	        if (this.constructor.name === "Event") {
	            throw new TypeError("Cannot construct Event instances directly");
	        }
	    }

	    /**
	     * Express the event as a string
	     */


	    (0, _createClass3.default)(Event, [{
	        key: "toString",
	        value: function toString() {
	            if (this.toJSON === undefined) {
	                throw new TypeError("Must implement toJSON()");
	            }
	            return (0, _stringify2.default)(this.toJSON());
	        }

	        /**
	         * Returns the type of this class instance
	         */

	    }, {
	        key: "type",
	        value: function type() {
	            return this.constructor;
	        }

	        /**
	         * Sets the data of the event and returns a new event of the
	         * same type.
	         *
	         * @param {object}  data    New data for the event
	         * @return {object}         A new event
	         */

	    }, {
	        key: "setData",
	        value: function setData(data) {
	            var eventType = this.type();
	            var d = this._d.set("data", _util2.default.dataFromArg(data));
	            return new eventType(d);
	        }

	        /**
	         * Access the event data in its native form. The result
	         * will be an Immutable.Map.
	         *
	         * @return {Immutable.Map} Data for the Event
	         */

	    }, {
	        key: "data",
	        value: function data() {
	            return this._d.get("data");
	        }

	        /**
	         * Get specific data out of the event. The data will be converted
	         * to a JS Object. You can use a `fieldSpec` to address deep data.
	         * A `fieldSpec` could be "a.b"
	         */

	    }, {
	        key: "get",
	        value: function get() {
	            var fieldSpec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ["value"];

	            var v = void 0;
	            if (_underscore2.default.isArray(fieldSpec)) {
	                v = this.data().getIn(fieldSpec);
	            } else if (_underscore2.default.isString(fieldSpec)) {
	                var searchKeyPath = fieldSpec.split(".");
	                v = this.data().getIn(searchKeyPath);
	            }

	            if (v instanceof _immutable2.default.Map || v instanceof _immutable2.default.List) {
	                return v.toJS();
	            }
	            return v;
	        }

	        /**
	         * Alias for `get()`.
	         */

	    }, {
	        key: "value",
	        value: function value() {
	            var fieldSpec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ["value"];

	            return this.get(fieldSpec);
	        }

	        /**
	         * Collapses this event's columns, represented by the fieldSpecList
	         * into a single column. The collapsing itself is done with the reducer
	         * function. Optionally the collapsed column could be appended to the
	         * existing columns, or replace them (the default).
	         */

	    }, {
	        key: "collapse",
	        value: function collapse(fieldSpecList, name, reducer) {
	            var _this = this;

	            var append = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

	            var data = append ? this.data().toJS() : {};
	            var d = fieldSpecList.map(function (fs) {
	                return _this.get(fs);
	            });
	            data[name] = reducer(d);
	            return this.setData(data);
	        }

	        //
	        // Static Event functions
	        //
	        /**
	         * Do the two supplied events contain the same data,
	         * even if they are not the same instance.
	         * @param  {Event}  event1 First event to compare
	         * @param  {Event}  event2 Second event to compare
	         * @return {Boolean}       Result
	         */

	    }], [{
	        key: "is",
	        value: function is(event1, event2) {
	            return event1.key() === event2.key() && _immutable2.default.is(event1._d.get("data"), event2._d.get("data"));
	        }

	        /**
	         * Returns if the two supplied events are duplicates
	         * of each other. By default, duplicated means that the
	         * timestamps are the same. This is the case with incoming events
	         * where the second event is either known to be the same (but
	         * duplicate) of the first, or supersedes the first. You can
	         * also pass in false for ignoreValues and get a full
	         * compare.
	         *
	         * @return {Boolean}              The result of the compare
	         */

	    }, {
	        key: "isDuplicate",
	        value: function isDuplicate(event1, event2) {
	            var ignoreValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

	            if (ignoreValues) {
	                return event1.type() === event2.type() && event1.key() === event2.key();
	            } else {
	                return event1.type() === event2.type() && Event.is(event1, event2);
	            }
	        }

	        /**
	         * The same as Event.value() only it will return false if the
	         * value is either undefined, NaN or Null.
	         *
	         * @param {Event} event The Event to check
	         * @param {string|array} The field to check
	         */

	    }, {
	        key: "isValidValue",
	        value: function isValidValue(event, fieldPath) {
	            var v = event.value(fieldPath);
	            var invalid = _underscore2.default.isUndefined(v) || _underscore2.default.isNaN(v) || _underscore2.default.isNull(v);
	            return !invalid;
	        }

	        /**
	         * Function to select specific fields of an event using
	         * a fieldPath and return a new event with just those fields.
	         *
	         * The fieldPath currently can be:
	         *  * A single field name
	         *  * An array of field names
	         *
	         * The function returns a new event.
	         */

	    }, {
	        key: "selector",
	        value: function selector(event, fieldPath) {
	            var data = {};
	            if (_underscore2.default.isString(fieldPath)) {
	                var fieldName = fieldPath;
	                var value = event.get(fieldName);
	                data[fieldName] = value;
	            } else if (_underscore2.default.isArray(fieldPath)) {
	                _underscore2.default.each(fieldPath, function (fieldName) {
	                    var value = event.get(fieldName);
	                    data[fieldName] = value;
	                });
	            } else {
	                return event;
	            }
	            return event.setData(data);
	        }

	        /**
	         * Merges multiple `events` together into a new array of events, one
	         * for each time/index/timerange of the source events. Merging is done on
	         * the data of each event. Values from later events in the list overwrite
	         * early values if fields conflict.
	         *
	         * Common use cases:
	         *   - append events of different timestamps
	         *   - merge in events with one field to events with another
	         *   - merge in events that supersede the previous events
	         *
	         * See also: TimeSeries.timeSeriesListMerge()
	         *
	         * @param {Immutable.List|array} events  Array or Immutable.List of events
	         *
	         * @return {Immutable.List|array}        Array or Immutable.List of events
	         */

	    }, {
	        key: "merge",
	        value: function merge(events, deep) {
	            if (events instanceof _immutable2.default.List && events.size === 0 || _underscore2.default.isArray(events) && events.length === 0) {
	                return [];
	            }

	            //
	            // Group by the time (the key), as well as keeping track
	            // of the event types so we can check that for a given key
	            // they are homogeneous and also so we can build an output
	            // event for this key
	            //
	            var eventMap = {};
	            var typeMap = {};

	            events.forEach(function (e) {
	                var type = e.type();
	                var key = e.key();
	                if (!_underscore2.default.has(eventMap, key)) {
	                    eventMap[key] = [];
	                }
	                eventMap[key].push(e);

	                if (!_underscore2.default.has(typeMap, key)) {
	                    typeMap[key] = type;
	                } else {
	                    if (typeMap[key] !== type) {
	                        throw new Error("Events for time " + key + " are not homogeneous");
	                    }
	                }
	            });

	            //
	            // For each key we'll build a new event of the same type as the source
	            // events. Here we loop through all the events for that key, then for each field
	            // we are considering, we get all the values and reduce them (sum, avg, etc).
	            //
	            var outEvents = [];
	            _underscore2.default.each(eventMap, function (events, key) {
	                var data = _immutable2.default.Map();
	                events.forEach(function (event) {
	                    data = deep ? data.mergeDeep(event.data()) : data.merge(event.data());
	                });
	                var type = typeMap[key];
	                outEvents.push(new type(key, data));
	            });

	            // This function outputs the same as its input. If we are
	            // passed an Immutable.List of events, the user will get
	            // an Immutable.List back. If an array, a simple JS array will
	            // be returned.
	            if (events instanceof _immutable2.default.List) {
	                return _immutable2.default.List(outEvents);
	            }
	            return outEvents;
	        }

	        /**
	         * Combines multiple `events` together into a new array of events, one
	         * for each time/index/timerange of the source events. The list of
	         * events may be specified as an array or `Immutable.List`. Combining acts
	         * on the fields specified in the `fieldSpec` and uses the reducer
	         * function to take the multiple values and reducer them down to one.
	         *
	         * The return result will be an of the same form as the input. If you
	         * pass in an array of events, you will get an array of events back. If
	         * you pass an `Immutable.List` of events then you will get an
	         * `Immutable.List` of events back.
	         *
	         * This is the general version of `Event.sum()` and `Event.avg()`. If those
	         * common use cases are what you want, just use those functions. If you
	         * want to specify your own reducer you can use this function.
	         *
	         * See also: `TimeSeries.timeSeriesListSum()`
	         *
	         * @param {Immutable.List|array} events     Array of event objects
	         * @param {string|array}         fieldSpec  Column or columns to look up. If you need
	         *                                          to retrieve multiple deep nested values that
	         *                                          ['can.be', 'done.with', 'this.notation'].
	         *                                          A single deep value with a string.like.this.
	         *                                          If not supplied, all columns will be operated on.
	         * @param {function}             reducer    Reducer function to apply to column data.
	         *
	         * @return {Immutable.List|array}   An Immutable.List or array of events
	         */

	    }, {
	        key: "combine",
	        value: function combine(events, reducer, fieldSpec) {
	            if (events instanceof _immutable2.default.List && events.size === 0 || _underscore2.default.isArray(events) && events.length === 0) {
	                return [];
	            }

	            var fieldNames = void 0;
	            if (_underscore2.default.isString(fieldSpec)) {
	                fieldNames = [fieldSpec];
	            } else if (_underscore2.default.isArray(fieldSpec)) {
	                fieldNames = fieldSpec;
	            }

	            var eventMap = {};
	            var typeMap = {};

	            //
	            // Group by the time (the key), as well as keeping track
	            // of the event types so we can check that for a given key
	            // they are homogeneous and also so we can build an output
	            // event for this key
	            //
	            events.forEach(function (e) {
	                var type = e.type();
	                var key = e.key();
	                if (!_underscore2.default.has(eventMap, key)) {
	                    eventMap[key] = [];
	                }
	                eventMap[key].push(e);
	                if (!_underscore2.default.has(typeMap, key)) {
	                    typeMap[key] = type;
	                } else {
	                    if (typeMap[key] !== type) {
	                        throw new Error("Events for time " + key + " are not homogeneous");
	                    }
	                }
	            });

	            //
	            // For each key we'll build a new event of the same type as the source
	            // events. Here we loop through all the events for that key, then for each field
	            // we are considering, we get all the values and reduce them (sum, avg, etc).
	            //
	            var outEvents = [];
	            _underscore2.default.each(eventMap, function (events, key) {
	                var mapEvent = {};
	                events.forEach(function (event) {
	                    var fields = fieldNames;
	                    if (!fieldNames) {
	                        fields = _underscore2.default.map(event.data().toJSON(), function (value, fieldName) {
	                            return fieldName;
	                        });
	                    }
	                    fields.forEach(function (fieldName) {
	                        if (!mapEvent[fieldName]) {
	                            mapEvent[fieldName] = [];
	                        }
	                        mapEvent[fieldName].push(event.data().get(fieldName));
	                    });
	                });

	                var data = {};
	                _underscore2.default.map(mapEvent, function (values, fieldName) {
	                    data[fieldName] = reducer(values);
	                });

	                var type = typeMap[key];
	                outEvents.push(new type(key, data));
	            });

	            // This function outputs the same as its input. If we are
	            // passed an Immutable.List of events, the user will get
	            // an Immutable.List back. If an array, a simple JS array will
	            // be returned.
	            if (events instanceof _immutable2.default.List) {
	                return _immutable2.default.List(outEvents);
	            }
	            return outEvents;
	        }

	        /**
	         * Returns a function that will take a list of events and combine them
	         * together using the fieldSpec and reducer function provided. This is
	         * used as an event reducer for merging multiple TimeSeries together
	         * with `timeSeriesListReduce()`.
	         */

	    }, {
	        key: "combiner",
	        value: function combiner(fieldSpec, reducer) {
	            return function (events) {
	                return Event.combine(events, reducer, fieldSpec);
	            };
	        }

	        /**
	         * Returns a function that will take a list of events and merge them
	         * together using the fieldSpec provided. This is used as a reducer for
	         * merging multiple TimeSeries together with `timeSeriesListMerge()`.
	         */

	    }, {
	        key: "merger",
	        value: function merger(fieldSpec) {
	            return function (events) {
	                return Event.merge(events, fieldSpec);
	            };
	        }

	        /**
	         * Maps a list of events according to the fieldSpec
	         * passed in. The spec maybe a single field name, a
	         * list of field names, or a function that takes an
	         * event and returns a key/value pair.
	         *
	         * @example
	         * ````
	         *         in   out
	         *  3am    1    2
	         *  4am    3    4
	         *
	         * Mapper result:  { in: [1, 3], out: [2, 4]}
	         * ```
	         * @param {string|array} fieldSpec  Column or columns to look up. If you need
	         *                                  to retrieve multiple deep nested values that
	         *                                  ['can.be', 'done.with', 'this.notation'].
	         *                                  A single deep value with a string.like.this.
	         *                                  If not supplied, all columns will be operated on.
	         *                                  If field_spec is a function, the function should
	         *                                  return a map. The keys will be come the
	         *                                  "column names" that will be used in the map that
	         *                                  is returned.
	         */

	    }, {
	        key: "map",
	        value: function map(evts) {
	            var multiFieldSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "value";

	            var result = {};

	            var events = void 0;
	            if (evts instanceof _immutable2.default.List) {
	                events = evts;
	            } else if (_underscore2.default.isArray(evts)) {
	                events = new _immutable2.default.List(evts);
	            } else {
	                throw new Error("Unknown event list type. Should be an array or Immutable List");
	            }

	            if (_underscore2.default.isString(multiFieldSpec)) {
	                var fieldSpec = multiFieldSpec;
	                events.forEach(function (event) {
	                    if (!_underscore2.default.has(result, fieldSpec)) {
	                        result[fieldSpec] = [];
	                    }
	                    var value = event.get(fieldSpec);

	                    result[fieldSpec].push(value);
	                });
	            } else if (_underscore2.default.isArray(multiFieldSpec)) {
	                _underscore2.default.each(multiFieldSpec, function (fieldSpec) {
	                    events.forEach(function (event) {
	                        if (!_underscore2.default.has(result, fieldSpec)) {
	                            result[fieldSpec] = [];
	                        }
	                        result[fieldSpec].push(event.get(fieldSpec));
	                    });
	                });
	            } else if (_underscore2.default.isFunction(multiFieldSpec)) {
	                events.forEach(function (event) {
	                    var pair = multiFieldSpec(event);
	                    _underscore2.default.each(pair, function (value, key) {
	                        if (!_underscore2.default.has(result, key)) {
	                            result[key] = [];
	                        }
	                        result[key].push(value);
	                    });
	                });
	            } else {
	                events.forEach(function (event) {
	                    _underscore2.default.each(event.data().toJSON(), function (value, key) {
	                        if (!_underscore2.default.has(result, key)) {
	                            result[key] = [];
	                        }
	                        result[key].push(value);
	                    });
	                });
	            }
	            return result;
	        }

	        /**
	         * Takes a list of events and a reducer function and returns
	         * a new Event with the result, for each column. The reducer is
	         * of the form:
	         * ```
	         *     function sum(valueList) {
	         *         return calcValue;
	         *     }
	         * ```
	         * @param {map}         mapped      A map, as produced from map()
	         * @param {function}    reducer     The reducer function
	         */

	    }, {
	        key: "reduce",
	        value: function reduce(mapped, reducer) {
	            var result = {};
	            _underscore2.default.each(mapped, function (valueList, key) {
	                result[key] = reducer(valueList);
	            });
	            return result;
	        }
	        /*
	         * @param {array}        events     Array of event objects
	         * @param {string|array} fieldSpec  Column or columns to look up. If you need
	         *                                  to retrieve multiple deep nested values that
	         *                                  ['can.be', 'done.with', 'this.notation'].
	         *                                  A single deep value with a string.like.this.
	         *                                  If not supplied, all columns will be operated on.
	         * @param {function}     reducer    The reducer function
	         */

	    }, {
	        key: "mapReduce",
	        value: function mapReduce(events, multiFieldSpec, reducer) {
	            return Event.reduce(this.map(events, multiFieldSpec), reducer);
	        }
	    }]);
	    return Event;
	}(); /*
	      *  Copyright (c) 2016-2017, The Regents of the University of California,
	      *  through Lawrence Berkeley National Laboratory (subject to receipt
	      *  of any required approvals from the U.S. Dept. of Energy).
	      *  All rights reserved.
	      *
	      *  This source code is licensed under the BSD-style license found in the
	      *  LICENSE file in the root directory of this source tree.
	      */

	exports.default = Event;
	});

	unwrapExports(event);

	var timeevent = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _stringify2 = _interopRequireDefault(stringify$1);



	var _toConsumableArray3 = _interopRequireDefault(toConsumableArray$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _immutable2 = _interopRequireDefault(immutable);



	var _event2 = _interopRequireDefault(event);



	var _util2 = _interopRequireDefault(util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * The creation of an TimeEvent is done by combining two parts:
	 *  * the timestamp
	 *  * the data
	 *
	 * To specify the data you can supply:

	 *  * a Javascript object of key/values. The object may contained nested data.
	 *  * an Immutable.Map
	 *  * a simple type such as an integer. This is a shorthand for supplying {"value": v}.
	 *
	 * Example:
	 *
	 * ```
	 * const t = new Date("2015-04-22T03:30:00Z");
	 * const event1 = new TimeEvent(t, { a: 5, b: 6 });
	 * ```
	 */
	/*
	 *  Copyright (c) 2015, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var TimeEvent = function (_Event) {
	    (0, _inherits3.default)(TimeEvent, _Event);

	    /**
	     * The creation of an TimeEvent is done by combining two parts:
	     * the timestamp and the data.
	     *
	     * To construct you specify the timestamp as either:
	     *     - Javascript Date object
	     *     - a Moment, or
	     *     - millisecond timestamp: the number of ms since the UNIX epoch
	     *
	     * To specify the data you can supply either:
	     *     - a Javascript object containing key values pairs
	     *     - an Immutable.Map, or
	     *     - a simple type such as an integer. In the case of the simple type
	     *       this is a shorthand for supplying {"value": v}.
	     */
	    function TimeEvent(arg1, arg2) {
	        (0, _classCallCheck3.default)(this, TimeEvent);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (TimeEvent.__proto__ || (0, _getPrototypeOf2.default)(TimeEvent)).call(this));

	        if (arg1 instanceof TimeEvent) {
	            var other = arg1;
	            _this._d = other._d;
	            return (0, _possibleConstructorReturn3.default)(_this);
	        } else if (arg1 instanceof _immutable2.default.Map && arg1.has("time") && arg1.has("data")) {
	            _this._d = arg1;
	            return (0, _possibleConstructorReturn3.default)(_this);
	        }
	        var time = _util2.default.timestampFromArg(arg1);
	        var data = _util2.default.dataFromArg(arg2);
	        _this._d = new _immutable2.default.Map({ time: time, data: data });
	        return _this;
	    }

	    /**
	     * Returns the timestamp (as ms since the epoch)
	     */


	    (0, _createClass3.default)(TimeEvent, [{
	        key: "key",
	        value: function key() {
	            return this.timestamp().getTime();
	        }

	        /**
	         * Returns the Event as a JSON object, essentially:
	         *  {time: t, data: {key: value, ...}}
	         * @return {Object} The event as JSON.
	         */

	    }, {
	        key: "toJSON",
	        value: function toJSON() {
	            return { time: this.timestamp().getTime(), data: this.data().toJSON() };
	        }

	        /**
	         * Returns a flat array starting with the timestamp, followed by the values.
	         */

	    }, {
	        key: "toPoint",
	        value: function toPoint() {
	            return [this.timestamp().getTime()].concat((0, _toConsumableArray3.default)(_underscore2.default.values(this.data().toJSON())));
	        }

	        /**
	         * The timestamp of this data, in UTC time, as a string.
	         */

	    }, {
	        key: "timestampAsUTCString",
	        value: function timestampAsUTCString() {
	            return this.timestamp().toUTCString();
	        }

	        /**
	         * The timestamp of this data, in Local time, as a string.
	         */

	    }, {
	        key: "timestampAsLocalString",
	        value: function timestampAsLocalString() {
	            return this.timestamp().toString();
	        }

	        /**
	         * The timestamp of this data
	         */

	    }, {
	        key: "timestamp",
	        value: function timestamp() {
	            return this._d.get("time");
	        }

	        /**
	         * The begin time of this Event, which will be just the timestamp
	         */

	    }, {
	        key: "begin",
	        value: function begin() {
	            return this.timestamp();
	        }

	        /**
	         * The end time of this Event, which will be just the timestamp
	         */

	    }, {
	        key: "end",
	        value: function end() {
	            return this.timestamp();
	        }

	        /**
	         * Turn the Collection data into a string
	         * @return {string} The collection as a string
	         */

	    }, {
	        key: "stringify",
	        value: function stringify() {
	            return (0, _stringify2.default)(this.data());
	        }
	    }]);
	    return TimeEvent;
	}(_event2.default);

	exports.default = TimeEvent;
	});

	unwrapExports(timeevent);

	var indexedevent = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _toConsumableArray3 = _interopRequireDefault(toConsumableArray$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _immutable2 = _interopRequireDefault(immutable);



	var _event2 = _interopRequireDefault(event);



	var _util2 = _interopRequireDefault(util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * An `IndexedEvent` uses an `Index` to specify a timerange over which the event
	 * occurs and maps that to a data object representing some measurement or metric
	 * during that time range.
	 *
	 * You can supply the index as a string or as an Index object.
	 *
	 * Example Indexes are:
	 *  * 1d-1565 is the entire duration of the 1565th day since the UNIX epoch
	 *  * 2014-03 is the entire duration of march in 2014
	 *
	 * The range, as expressed by the `Index`, is provided by the convenience method
	 * `range()`, which returns a `TimeRange` instance. Alternatively the begin
	 * and end times represented by the Index can be found with `begin()`
	 * and `end()` respectively.
	 *
	 * The data is also specified during construction, and is generally expected to
	 * be an object or an Immutable Map. If an object is provided it will be stored
	 * internally as an Immutable Map. If the data provided is some other type then
	 * it will be equivalent to supplying an object of `{value: data}`. Data may be
	 * undefined.
	 *
	 * The get the data out of an IndexedEvent instance use `data()`. It will return
	 * an Immutable.Map.
	 */
	/*
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var IndexedEvent = function (_Event) {
	    (0, _inherits3.default)(IndexedEvent, _Event);

	    /**
	     * The creation of an IndexedEvent is done by combining two parts:
	     * the Index and the data.
	     *
	     * To construct you specify an Index, along with the data.
	     *
	     * The index may be an Index, or a string.
	     *
	     * To specify the data you can supply either:
	     *     - a Javascript object containing key values pairs
	     *     - an Immutable.Map, or
	     *     - a simple type such as an integer. In the case of the simple type
	     *       this is a shorthand for supplying {"value": v}.
	     */
	    function IndexedEvent(arg1, arg2, arg3) {
	        (0, _classCallCheck3.default)(this, IndexedEvent);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (IndexedEvent.__proto__ || (0, _getPrototypeOf2.default)(IndexedEvent)).call(this));

	        if (arg1 instanceof IndexedEvent) {
	            var other = arg1;
	            _this._d = other._d;
	            return (0, _possibleConstructorReturn3.default)(_this);
	        } else if (arg1 instanceof _immutable2.default.Map) {
	            _this._d = arg1;
	            return (0, _possibleConstructorReturn3.default)(_this);
	        }
	        var index = _util2.default.indexFromArgs(arg1, arg3);
	        var data = _util2.default.dataFromArg(arg2);
	        _this._d = new _immutable2.default.Map({ index: index, data: data });
	        return _this;
	    }

	    /**
	     * Returns the timestamp (as ms since the epoch)
	     */


	    (0, _createClass3.default)(IndexedEvent, [{
	        key: "key",
	        value: function key() {
	            return this.indexAsString();
	        }

	        /**
	         * For Avro serialization, this defines the event's key (the Index)
	         * as a simple string
	         */

	    }, {
	        key: "toJSON",


	        /**
	         * Express the IndexedEvent as a JSON object
	         */
	        value: function toJSON() {
	            return { index: this.indexAsString(), data: this.data().toJSON() };
	        }

	        /**
	         * Returns a flat array starting with the index, followed by the values.
	         */

	    }, {
	        key: "toPoint",
	        value: function toPoint() {
	            return [this.indexAsString()].concat((0, _toConsumableArray3.default)(_underscore2.default.values(this.data().toJSON())));
	        }

	        /**
	         * Returns the Index associated with the data in this Event
	         * @return {Index} The Index
	         */

	    }, {
	        key: "index",
	        value: function index() {
	            return this._d.get("index");
	        }

	        /**
	         * Returns the Index as a string, same as event.index().toString()
	         * @return {string} The Index
	         */

	    }, {
	        key: "indexAsString",
	        value: function indexAsString() {
	            return this.index().asString();
	        }

	        /**
	         * The TimeRange of this data, in UTC, as a string.
	         * @return {string} TimeRange of this data.
	         */

	    }, {
	        key: "timerangeAsUTCString",
	        value: function timerangeAsUTCString() {
	            return this.timerange().toUTCString();
	        }

	        /**
	         * The TimeRange of this data, in Local time, as a string.
	         * @return {string} TimeRange of this data.
	         */

	    }, {
	        key: "timerangeAsLocalString",
	        value: function timerangeAsLocalString() {
	            return this.timerange().toLocalString();
	        }

	        /**
	         * The TimeRange of this data
	         * @return {TimeRange} TimeRange of this data.
	         */

	    }, {
	        key: "timerange",
	        value: function timerange() {
	            return this.index().asTimerange();
	        }

	        /**
	         * The begin time of this Event
	         * @return {Data} Begin time
	         */

	    }, {
	        key: "begin",
	        value: function begin() {
	            return this.timerange().begin();
	        }

	        /**
	         * The end time of this Event
	         * @return {Data} End time
	         */

	    }, {
	        key: "end",
	        value: function end() {
	            return this.timerange().end();
	        }

	        /**
	         * Alias for the begin() time.
	         * @return {Data} Time representing this Event
	         */

	    }, {
	        key: "timestamp",
	        value: function timestamp() {
	            return this.begin();
	        }
	    }], [{
	        key: "keySchema",
	        value: function keySchema() {
	            return { name: "index", type: "string" };
	        }
	    }]);
	    return IndexedEvent;
	}(_event2.default);

	exports.default = IndexedEvent;
	});

	unwrapExports(indexedevent);

	var timerangeevent = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _toConsumableArray3 = _interopRequireDefault(toConsumableArray$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _immutable2 = _interopRequireDefault(immutable);



	var _event2 = _interopRequireDefault(event);



	var _util2 = _interopRequireDefault(util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A `TimeRangeEvent` uses a `TimeRange` to specify the range over
	 * which the event occurs and maps that to a data object representing
	 * some measurements or metrics during that time range.
	 *
	 * You supply the timerange as a `TimeRange` object.
	 *
	 * The data is also specified during construction and maybe either:
	 *  1) a Javascript object or simple type
	 *  2) an Immutable.Map.
	 *  3) Simple measurement
	 *
	 * If an Javascript object is provided it will be stored internally as an
	 * Immutable Map. If the data provided is some other simple type (such as an
	 * integer) then it will be equivalent to supplying an object of {value: data}.
	 * Data may also be undefined.
	 *
	 * ```
	 * const e = new TimeRangeEvent(timerange, data);
	 * ```
	 *
	 * To get the data out of an TimeRangeEvent instance use `data()`.
	 * It will return an Immutable.Map. Alternatively you can call `toJSON()`
	 * to return a Javascript object representation of the data, while
	 * `toString()` will serialize the entire event to a string.
	 *
	 * **Example:**
	 *
	 * Given some source of data that looks like this:
	 *
	 * ```json
	 * const event = {
	 *     "start_time": "2015-04-22T03:30:00Z",
	 *     "end_time": "2015-04-22T13:00:00Z",
	 *     "description": "At 13:33 pacific circuit 06519 went down.",
	 *     "title": "STAR-CR5 - Outage",
	 *     "completed": true,
	 *     "external_ticket": "",
	 *     "esnet_ticket": "ESNET-20150421-013",
	 *     "organization": "Internet2 / Level 3",
	 *     "type": "U"
	 * }
	 * ```
	 *
	 * We first extract the begin and end times to build a TimeRange:
	 *
	 * ```js
	 * let b = new Date(event.start_time);
	 * let e = new Date(event.end_time);
	 * let timerange = new TimeRange(b, e);
	 * ```
	 *
	 * Then we combine the TimeRange and the event itself to create the Event.
	 *
	 * ```js
	 * let outageEvent = new TimeRangeEvent(timerange, sampleEvent);
	 * ```
	 *
	 * Once we have an event we can get access the time range with:
	 *
	 * ```js
	 * outageEvent.begin().getTime()   // 1429673400000
	 * outageEvent.end().getTime())    // 1429707600000
	 * outageEvent.humanizeDuration()) // "10 hours"
	 * ```
	 *
	 * And we can access the data like so:
	 *
	 * ```js
	 * outageEvent.get("title")  // "STAR-CR5 - Outage"
	 * ```
	 */
	/*
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var TimeRangeEvent = function (_Event) {
	    (0, _inherits3.default)(TimeRangeEvent, _Event);

	    /**
	     * The creation of an TimeRangeEvent is done by combining two parts:
	     * the timerange and the data.
	     *
	     * To construct you specify a TimeRange, along with the data.
	     *
	     * To specify the data you can supply either:
	     *     - a Javascript object containing key values pairs
	     *     - an Immutable.Map, or
	     *     - a simple type such as an integer. In the case of the simple type
	     *       this is a shorthand for supplying {"value": v}.
	     */
	    function TimeRangeEvent(arg1, arg2) {
	        (0, _classCallCheck3.default)(this, TimeRangeEvent);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (TimeRangeEvent.__proto__ || (0, _getPrototypeOf2.default)(TimeRangeEvent)).call(this));

	        if (arg1 instanceof TimeRangeEvent) {
	            var other = arg1;
	            _this._d = other._d;
	            return (0, _possibleConstructorReturn3.default)(_this);
	        } else if (arg1 instanceof _immutable2.default.Map) {
	            _this._d = arg1;
	            return (0, _possibleConstructorReturn3.default)(_this);
	        }
	        var range = _util2.default.timeRangeFromArg(arg1);
	        var data = _util2.default.dataFromArg(arg2);
	        _this._d = new _immutable2.default.Map({ range: range, data: data });
	        return _this;
	    }

	    /**
	     * Returns the timerange as a string
	     */


	    (0, _createClass3.default)(TimeRangeEvent, [{
	        key: "key",
	        value: function key() {
	            return +this.timerange().begin() + "," + +this.timerange().end();
	        }

	        /**
	         * Returns the TimeRangeEvent as a JSON object, converting all
	         * Immutable structures in the process.
	         */

	    }, {
	        key: "toJSON",
	        value: function toJSON() {
	            return {
	                timerange: this.timerange().toJSON(),
	                data: this.data().toJSON()
	            };
	        }

	        /**
	         * Returns a flat array starting with the timestamp, followed by the values.
	         */

	    }, {
	        key: "toPoint",
	        value: function toPoint() {
	            return [this.timerange().toJSON()].concat((0, _toConsumableArray3.default)(_underscore2.default.values(this.data().toJSON())));
	        }

	        /**
	         * The timerange of this data as a `TimeRange` object
	         * @return {TimeRange} TimeRange of this data.
	         */

	    }, {
	        key: "timerange",
	        value: function timerange() {
	            return this._d.get("range");
	        }

	        /**
	         * The TimeRange of this event, in UTC, as a string.
	         * @return {string} TimeRange of this data.
	         */

	    }, {
	        key: "timerangeAsUTCString",
	        value: function timerangeAsUTCString() {
	            return this.timerange().toUTCString();
	        }

	        /**
	         * The TimeRange of this event, in Local time, as a string.
	         * @return {string} TimeRange of this data.
	         */

	    }, {
	        key: "timerangeAsLocalString",
	        value: function timerangeAsLocalString() {
	            return this.timerange().toLocalString();
	        }

	        /**
	         * The begin time of this Event
	         * @return {Data} Begin time
	         */

	    }, {
	        key: "begin",
	        value: function begin() {
	            return this.timerange().begin();
	        }

	        /**
	         * The end time of this Event
	         * @return {Data} End time
	         */

	    }, {
	        key: "end",
	        value: function end() {
	            return this.timerange().end();
	        }

	        /**
	         * Alias for the begin() time.
	         * @return {Data} Time representing this Event
	         */

	    }, {
	        key: "timestamp",
	        value: function timestamp() {
	            return this.begin();
	        }

	        /**
	         * A human friendly version of the duration of this event
	         */

	    }, {
	        key: "humanizeDuration",
	        value: function humanizeDuration() {
	            return this.timerange().humanizeDuration();
	        }
	    }]);
	    return TimeRangeEvent;
	}(_event2.default);

	exports.default = TimeRangeEvent;
	});

	unwrapExports(timerangeevent);

	var toArray$2 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _from2 = _interopRequireDefault(from$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (arr) {
	  return Array.isArray(arr) ? arr : (0, _from2.default)(arr);
	};
	});

	unwrapExports(toArray$2);

	var observable = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _underscore2 = _interopRequireDefault(underscore);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Base class for objects in the processing chain which
	 * need other object to listen to them. It provides a basic
	 * interface to define the relationships and to emit events
	 * to the interested observers.
	 */
	var Observable = function () {
	    function Observable() {
	        (0, _classCallCheck3.default)(this, Observable);

	        this._id = _underscore2.default.uniqueId("id-");
	        this._observers = [];
	    }

	    (0, _createClass3.default)(Observable, [{
	        key: "emit",
	        value: function emit(event) {
	            this._observers.forEach(function (observer) {
	                observer.addEvent(event);
	            });
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            this._observers.forEach(function (observer) {
	                observer.flush();
	            });
	        }
	    }, {
	        key: "addObserver",
	        value: function addObserver(observer) {
	            var shouldAdd = true;
	            this._observers.forEach(function (o) {
	                if (o === observer) {
	                    shouldAdd = false;
	                }
	            });

	            if (shouldAdd) this._observers.push(observer);
	        }
	    }, {
	        key: "hasObservers",
	        value: function hasObservers() {
	            return this._observers.length > 0;
	        }
	    }]);
	    return Observable;
	}(); /**
	      *  Copyright (c) 2016, The Regents of the University of California,
	      *  through Lawrence Berkeley National Laboratory (subject to receipt
	      *  of any required approvals from the U.S. Dept. of Energy).
	      *  All rights reserved.
	      *
	      *  This source code is licensed under the BSD-style license found in the
	      *  LICENSE file in the root directory of this source tree.
	      */

	exports.default = Observable;
	});

	unwrapExports(observable);

	var pipelinein = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _observable2 = _interopRequireDefault(observable);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var PipelineIn = function (_Observable) {
	    (0, _inherits3.default)(PipelineIn, _Observable);

	    function PipelineIn() {
	        (0, _classCallCheck3.default)(this, PipelineIn);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (PipelineIn.__proto__ || (0, _getPrototypeOf2.default)(PipelineIn)).call(this));

	        _this._id = _underscore2.default.uniqueId("in-");
	        _this._type = null; // The type (class) of the events in this In
	        return _this;
	    }

	    (0, _createClass3.default)(PipelineIn, [{
	        key: "_check",
	        value: function _check(e) {
	            if (!this._type) {
	                this._type = e.type();
	            } else {
	                if (!(e instanceof this._type)) {
	                    throw new Error("Homogeneous events expected.");
	                }
	            }
	        }
	    }]);
	    return PipelineIn;
	}(_observable2.default);

	exports.default = PipelineIn;
	});

	unwrapExports(pipelinein);

	var bounded = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _pipelinein2 = _interopRequireDefault(pipelinein);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Bounded = function (_PipelineIn) {
	    (0, _inherits3.default)(Bounded, _PipelineIn);

	    function Bounded() {
	        (0, _classCallCheck3.default)(this, Bounded);
	        return (0, _possibleConstructorReturn3.default)(this, (Bounded.__proto__ || (0, _getPrototypeOf2.default)(Bounded)).call(this));
	    }

	    (0, _createClass3.default)(Bounded, [{
	        key: "start",
	        value: function start() {
	            throw new Error("start() not supported on bounded source.");
	        }
	    }, {
	        key: "stop",
	        value: function stop() {
	            throw new Error("stop() not supported on bounded source.");
	        }
	    }, {
	        key: "onEmit",
	        value: function onEmit() {
	            throw new Error("You can not setup a listener to a bounded source.");
	        }
	    }]);
	    return Bounded;
	}(_pipelinein2.default); /**
	                          *  Copyright (c) 2016-2017, The Regents of the University of California,
	                          *  through Lawrence Berkeley National Laboratory (subject to receipt
	                          *  of any required approvals from the U.S. Dept. of Energy).
	                          *  All rights reserved.
	                          *
	                          *  This source code is licensed under the BSD-style license found in the
	                          *  LICENSE file in the root directory of this source tree.
	                          */

	exports.default = Bounded;
	});

	unwrapExports(bounded);

	var functions$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.filter = undefined;
	exports.keep = keep;
	exports.sum = sum;
	exports.avg = avg;
	exports.max = max;
	exports.min = min;
	exports.count = count;
	exports.first = first;
	exports.last = last;
	exports.difference = difference;
	exports.median = median;
	exports.stdev = stdev;
	exports.percentile = percentile;



	var _underscore2 = _interopRequireDefault(underscore);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isValid(v) {
	    return !(_underscore2.default.isUndefined(v) || _underscore2.default.isNaN(v) || _underscore2.default.isNull(v));
	}

	//
	// Functions to process missing values out of a value list
	//

	/**
	 * Default filter, so default it does nothing at all to the values passed to it
	 * e.g. max(1, 2, null, 4) would be max(1, 2, null, 4)
	 */
	/**
	 *  Copyright (c) 2015-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var keepMissing = function keepMissing(values) {
	    return values;
	};

	/**
	 * Removes missing values (null, undefined or NaN) from the list of
	 * values passed into the aggregation function 
	 * e.g. avg(1, 2, null, 4) would be avg(1, 2, 4)
	 */
	var ignoreMissing = function ignoreMissing(values) {
	    return values.filter(isValid);
	};

	/**
	 * Replaces missing values (null, undefined or NaN) by 0.
	 * e.g. avg(1, 2, null, 4) would be avg(1, 2, 0, 4)
	 */
	var zeroMissing = function zeroMissing(values) {
	    return values.map(function (v) {
	        return isValid(v) ? v : 0;
	    });
	};

	/**
	 * If there are missing values in the list of values being
	 * aggregated then the result of the aggregation should be
	 * also undefined or null.
	 * e.g. avg(2, 4, null, 7) would be null.
	 */
	var propagateMissing = function propagateMissing(values) {
	    return ignoreMissing(values).length === values.length ? values : null;
	};

	/**
	 * If there are no values in the list, the result of the aggregation
	 * is null 
	 */
	var noneIfEmpty = function noneIfEmpty(values) {
	    return values.length === 0 ? null : values;
	};

	var filter = exports.filter = {
	    keepMissing: keepMissing,
	    ignoreMissing: ignoreMissing,
	    zeroMissing: zeroMissing,
	    propagateMissing: propagateMissing,
	    noneIfEmpty: noneIfEmpty
	};

	/**
	 * Like first() except it will return null if not all the values are
	 * the same. This can be used to transfer a value when doing aggregation.
	 * For instance you might group by the 'type', then avg the 'value', but
	 * you want to results to include the type. So you would 'keep' the type
	 * and 'avg' the value.
	 */
	function keep() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        var result = first()(cleanValues);
	        cleanValues.forEach(function (v) {
	            if (v !== result) {
	                return null;
	            }
	        });
	        return result;
	    };
	}

	/**
	 * Returns a sum function.
	 *
	 * Optionally you can specify the method by which unclean values
	 * are treated. The default is to exclude missing values from
	 * the sum calculation. Other possibilities are:
	 *     `propergateMissing` - which will cause the min itself to
	 *     be null if the values contain a missing value
	 *     `zeroMissing` - will replace missing values with a zero
	 */
	function sum() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        return _underscore2.default.reduce(cleanValues, function (a, b) {
	            return a + b;
	        }, 0);
	    };
	}

	/**
	 * Returns a avg function.
	 *
	 * Optionally you can specify the method by which unclean values
	 * are treated. The default is to exclude missing values from
	 * the average calculation. Other possibilities are:
	 *     `propergateMissing` - which will cause the avg itself to
	 *     be null if the values contain a missing value
	 *     `zeroMissing` - will replace missing values with a zero
	 */
	function avg() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        var sum = _underscore2.default.reduce(cleanValues, function (a, b) {
	            return a + b;
	        }, 0);
	        return sum / cleanValues.length;
	    };
	}

	/**
	 * Return a max function.
	 *
	 * Optionally you can specify the method by which unclean values
	 * are treated. The default is to exclude missing values from
	 * the maximum search. Other possibilities are:
	 *     `propergateMissing` - which will cause the max itself to
	 *     be null if the values contain a missing value
	 *     `zeroMissing` - will replace missing values with a zero
	 */
	function max() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        var max = _underscore2.default.max(cleanValues);
	        if (_underscore2.default.isFinite(max)) {
	            return max;
	        }
	    };
	}

	/**
	 * Return a min function.
	 *
	 * Optionally you can specify the method by which unclean values
	 * are treated. The default is to exclude missing values from
	 * the minimum search. Other possibilities are:
	 *     `propergateMissing` - which will cause the min itself to
	 *     be null if the values contain a missing value
	 *     `zeroMissing` - will replace missing values with a zero
	 */
	function min() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        var min = _underscore2.default.min(cleanValues);
	        if (_underscore2.default.isFinite(min)) {
	            return min;
	        }
	    };
	}

	/**
	 * Returns a count() function.
	 *
	 * Optionally you can specify the method by which unclean values
	 * are treated. The default is to exclude missing values from
	 * the count. Other possibilities are:
	 *     `propergateMissing` - which will cause the count itself to
	 *     be null if the values contain a missing value
	 */
	function count() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        return cleanValues.length;
	    };
	}

	/**
	 * Returns a first() function, i.e. a function that returns the first
	 * value in the supplied values list.
	 *
	 * Optionally you can specify the method by which unclean values
	 * are treated. The default is to exclude missing values from
	 * the list, i.e to find the first non-missing value. Other
	 * possibilities are:
	 *     `keepMissing` - to return the first value, regardless of if
	 *     it is a missing value or not.
	 */
	function first() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        return cleanValues.length ? cleanValues[0] : undefined;
	    };
	}

	/**
	 * Returns a last() function, i.e. a function that returns the list
	 * value in the supplied values list.
	 *
	 * Optionally you can specify the method by which unclean values
	 * are treated. The default is to exclude missing values from
	 * the list, i.e to find the last non-missing value. Other
	 * possibilities are:
	 *     `keepMissing` - to return the last value, regardless of if
	 *     it is a missing value or not.
	 */
	function last() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        return cleanValues.length ? cleanValues[cleanValues.length - 1] : undefined;
	    };
	}

	/**
	 * Returns a difference() function, i.e. a function that returns
	 * the difference between the min and max values.
	 *
	 * Optionally you can specify the method by which unclean values
	 * are treated. The default is to exclude missing values from
	 * the list, i.e to find the last non-missing value. Other
	 * possibilities are:
	 *     `propergateMissing` - which will cause the min itself to
	 *     be null if the values contain a missing value
	 *     `zeroMissing` - will replace missing values with a zero
	 */
	function difference() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        return _underscore2.default.max(cleanValues) - _underscore2.default.min(cleanValues);
	    };
	}

	function median() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        var sorted = cleanValues.sort();
	        var i = Math.floor(sorted.length / 2);
	        if (sorted.length % 2 === 0) {
	            var a = sorted[i];
	            var b = sorted[i - 1];
	            return (a + b) / 2;
	        } else {
	            return sorted[i];
	        }
	    };
	}

	function stdev() {
	    var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;
	        var sums = 0;
	        var mean = avg(clean)(cleanValues);
	        cleanValues.forEach(function (v) {
	            return sums += Math.pow(v - mean, 2);
	        });
	        return Math.sqrt(sums / values.length);
	    };
	}

	/**
	 * Returns a percentile function within the a values list.
	 *
	 * @param  {object}  options  The parameters controlling the function:
	 *                             * q        The percentile (should be between 0 and 100)
	 *                             * interp   Specifies the interpolation method
	 *                                        to use when the desired quantile lies between
	 *                                        two data points. Options are:
	 *                                          * linear: i + (j - i) * fraction, where fraction is the fractional part of the index surrounded by i and j.
	 *                                          * lower: i.
	 *                                          * higher: j.
	 *                                          * nearest: i or j whichever is nearest.
	 *                                          * midpoint: (i + j) / 2.
	 *                             * clean    Strategy to use when encountering missing data:
	 *                                          * `propergateMissing` - which will cause the min
	 *                                             itself to be null if the values contain a
	 *                                             missing value
	 *                                          * `zeroMissing` - will replace missing values
	 *                                             with a zero
	 * @return {number}            The percentile
	 */
	function percentile(q) {
	    var interp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "linear";
	    var clean = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : filter.ignoreMissing;

	    return function (values) {
	        var cleanValues = clean(values);
	        if (!cleanValues) return null;

	        var v = void 0;

	        var sorted = cleanValues.slice().sort(function (a, b) {
	            return a - b;
	        });
	        var size = sorted.length;

	        if (q < 0 || q > 100) {
	            throw new Error("Percentile q must be between 0 and 100");
	        }

	        var i = q / 100;
	        var index = Math.floor((sorted.length - 1) * i);

	        if (size === 1 || q === 0) {
	            return sorted[0];
	        }

	        if (q === 100) {
	            return sorted[size - 1];
	        }

	        if (index < size - 1) {
	            var fraction = (size - 1) * i - index;
	            var v0 = sorted[index];
	            var v1 = sorted[index + 1];
	            if (interp === "lower" || fraction === 0) {
	                v = v0;
	            } else if (interp === "linear") {
	                v = v0 + (v1 - v0) * fraction;
	            } else if (interp === "higher") {
	                v = v1;
	            } else if (interp === "nearest") {
	                v = fraction < 0.5 ? v0 : v1;
	            } else if (interp === "midpoint") {
	                v = (v0 + v1) / 2;
	            }
	        }

	        return v;
	    };
	}
	});

	unwrapExports(functions$2);
	var functions_1 = functions$2.filter;
	var functions_2 = functions$2.keep;
	var functions_3 = functions$2.sum;
	var functions_4 = functions$2.avg;
	var functions_5 = functions$2.max;
	var functions_6 = functions$2.min;
	var functions_7 = functions$2.count;
	var functions_8 = functions$2.first;
	var functions_9 = functions$2.last;
	var functions_10 = functions$2.difference;
	var functions_11 = functions$2.median;
	var functions_12 = functions$2.stdev;
	var functions_13 = functions$2.percentile;

	var collection = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _regenerator2 = _interopRequireDefault(regenerator);



	var _getIterator3 = _interopRequireDefault(getIterator$1);



	var _stringify2 = _interopRequireDefault(stringify$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _immutable2 = _interopRequireDefault(immutable);



	var _bounded2 = _interopRequireDefault(bounded);



	var _event2 = _interopRequireDefault(event);



	var _timerange2 = _interopRequireDefault(timerange);



	var _util2 = _interopRequireDefault(util);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A collection is an abstraction for a bag of Events.
	 *
	 * You typically construct a Collection from a list of Events, which
	 * may be either within an Immutable.List or an Array. You can also
	 * copy another Collection or create an empty one.
	 *
	 * You can mutate a collection in a number of ways. In each instance
	 * a new Collection will be returned.
	 *
	 * Basic operations on the list of events are also possible. You
	 * can iterate over the collection with a for..of loop, get the size()
	 * of the collection and access a specific element with at().
	 *
	 * You can also perform aggregations of the events, map them, filter them
	 * clean them, etc.
	 *
	 * Collections form the backing structure for a TimeSeries, as well as
	 * in Pipeline event processing. They are an instance of a BoundedIn, so
	 * they can be used as a pipeline source.
	 */
	var Collection = function (_Bounded) {
	    (0, _inherits3.default)(Collection, _Bounded);

	    /**
	     * Construct a new Collection.
	     *
	     * @param  {Collection|array|Immutable.List}  arg1 Initial data for
	     * the collection. If arg1 is another Collection, this will act as
	     * a copy constructor.
	     * @param  {Boolean} [arg2] When using a the copy constructor
	     * this specified whether or not to also copy all the events in this
	     * collection. Generally you'll want to let it copy the events.
	     * If arg1 is an Immutable.List, then arg2 will specify the type of
	     * the Events accepted into the Collection. This form is generally
	     * used internally.
	     *
	     * @return {Collection} The constructed Collection.
	     */
	    function Collection(arg1, arg2) {
	        (0, _classCallCheck3.default)(this, Collection);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Collection.__proto__ || (0, _getPrototypeOf2.default)(Collection)).call(this));

	        _this._id = _underscore2.default.uniqueId("collection-");
	        _this._eventList = null;
	        // The events in this collection
	        _this._type = null;

	        // The type (class) of the events in this collection
	        if (!arg1) {
	            _this._eventList = new _immutable2.default.List();
	        } else if (arg1 instanceof Collection) {
	            var other = arg1;
	            var copyEvents = arg2 || true;
	            // copyEvents is whether to copy events from other, default is true
	            if (_underscore2.default.isUndefined(copyEvents) || copyEvents === true) {
	                _this._eventList = other._eventList;
	                _this._type = other._type;
	            } else {
	                _this._eventList = new _immutable2.default.List();
	            }
	        } else if (_underscore2.default.isArray(arg1)) {
	            var events = [];
	            arg1.forEach(function (e) {
	                _this._check(e);
	                events.push(e._d);
	            });
	            _this._eventList = new _immutable2.default.List(events);
	        } else if (_immutable2.default.List.isList(arg1)) {
	            var type = arg2;
	            if (!type) {
	                throw new Error("No type supplied to Collection constructor");
	            }
	            _this._type = type;
	            _this._eventList = arg1;
	        }
	        return _this;
	    }

	    /**
	     * Returns the Collection as a regular JSON object.
	     *
	     * @return {Object} The JSON representation of this Collection
	     */


	    (0, _createClass3.default)(Collection, [{
	        key: "toJSON",
	        value: function toJSON() {
	            return this._eventList.toJS();
	        }

	        /**
	         * Serialize out the Collection as a string. This will be the
	         * string representation of `toJSON()`.
	         *
	         * @return {string} The Collection serialized as a string.
	         */

	    }, {
	        key: "toString",
	        value: function toString() {
	            return (0, _stringify2.default)(this.toJSON());
	        }

	        /**
	         * Returns the Event object type in this Collection.
	         *
	         * Since Collections may only have one type of event (`Event`, `IndexedEvent`
	         * or `TimeRangeEvent`) this will return that type. If no events
	         * have been added to the Collection it will return `undefined`.
	         *
	         * @return {Event} - The class of the type of events contained in
	         *                   this Collection.
	         */

	    }, {
	        key: "type",
	        value: function type() {
	            return this._type;
	        }

	        /**
	         * Returns the number of events in this collection
	         *
	         * @return {number} Count of events
	         */

	    }, {
	        key: "size",
	        value: function size() {
	            return this._eventList.size;
	        }

	        /**
	         * Returns the number of valid items in this collection.
	         *
	         * Uses the fieldPath to look up values in all events.
	         * It then counts the number that are considered valid, which
	         * specifically are not NaN, undefined or null.
	         *
	         * @return {number} Count of valid events
	         */

	    }, {
	        key: "sizeValid",
	        value: function sizeValid() {
	            var fieldPath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "value";

	            var count = 0;
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = (0, _getIterator3.default)(this.events()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var e = _step.value;

	                    if (_event2.default.isValidValue(e, fieldPath)) count++;
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return count;
	        }

	        /**
	         * Returns an event in the Collection by its position.
	         * @example
	         * ```
	         * for (let row=0; row < series.size(); row++) {
	         *   const event = series.at(row);
	         *   console.log(event.toString());
	         * }
	         * ```
	         * @param  {number} pos The position of the event
	         * @return {Event}      Returns the event at the pos specified.
	         */

	    }, {
	        key: "at",
	        value: function at(pos) {
	            if (this._eventList.size > 0) {
	                var event$$1 = new this._type(this._eventList.get(pos));
	                return event$$1;
	            }
	        }

	        /**
	         * Returns a list of events in the Collection which have
	         * the exact key (time, timerange or index) as the key specified
	         * by 'at'. Note that this is an O(n) search for the time specified,
	         * since collections are an unordered bag of events.
	         *
	         * @param  {Date|string|TimeRange} key The key of the event.
	         * @return {Array} All events at that key
	         */

	    }, {
	        key: "atKey",
	        value: function atKey(k) {
	            var result = [];
	            var key = void 0;
	            if (k instanceof Date) {
	                key = k.getTime();
	            } else if (_underscore2.default.isString(k)) {
	                key = k;
	            } else if (k instanceof _timerange2.default) {
	                key = this.timerange().begin() + "," + this.timerange().end();
	            }
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = (0, _getIterator3.default)(this.events()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var e = _step2.value;

	                    if (e.key() === key) {
	                        result.push(e);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return result;
	        }

	        /**
	         * Returns the first event in the Collection.
	         *
	         * @return {Event}
	         */

	    }, {
	        key: "atFirst",
	        value: function atFirst() {
	            if (this.size()) {
	                return this.at(0);
	            }
	        }

	        /**
	         * Returns the last event in the Collection.
	         *
	         * @return {Event}
	         */

	    }, {
	        key: "atLast",
	        value: function atLast() {
	            if (this.size()) {
	                return this.at(this.size() - 1);
	            }
	        }

	        /**
	         * Generator to return all the events in the Collection.
	         *
	         * @example
	         * ```
	         * for (let event of collection.events()) {
	         *     console.log(event.toString());
	         * }
	         * ```
	         */

	    }, {
	        key: "events",
	        value: _regenerator2.default.mark(function events() {
	            var i;
	            return _regenerator2.default.wrap(function events$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            i = 0;

	                        case 1:
	                            if (!(i < this.size())) {
	                                _context.next = 7;
	                                break;
	                            }

	                            _context.next = 4;
	                            return this.at(i);

	                        case 4:
	                            i++;
	                            _context.next = 1;
	                            break;

	                        case 7:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, events, this);
	        })
	    }, {
	        key: "setEvents",
	        value: function setEvents(events) {
	            var result = new Collection(this);
	            result._eventList = events;
	            return result;
	        }

	        /**
	         * Returns the raw Immutable event list
	         *
	         * @return {Immutable.List} All events as an Immutable List.
	         */

	    }, {
	        key: "eventList",
	        value: function eventList() {
	            return this._eventList;
	        }

	        /**
	         * Returns a Javascript array representation of the event list
	         *
	         * @return {Array} All events as a Javascript Array.
	         */

	    }, {
	        key: "eventListAsArray",
	        value: function eventListAsArray() {
	            var events = [];
	            var _iteratorNormalCompletion3 = true;
	            var _didIteratorError3 = false;
	            var _iteratorError3 = undefined;

	            try {
	                for (var _iterator3 = (0, _getIterator3.default)(this.events()), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                    var e = _step3.value;

	                    events.push(e);
	                }
	            } catch (err) {
	                _didIteratorError3 = true;
	                _iteratorError3 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                        _iterator3.return();
	                    }
	                } finally {
	                    if (_didIteratorError3) {
	                        throw _iteratorError3;
	                    }
	                }
	            }

	            return events;
	        }

	        /**
	         * Returns the events in the collection as a Javascript Map, where
	         * the key is the timestamp, index or timerange and the
	         * value is an array of events with that key.
	         *
	         * @return {map} The map of events
	         */

	    }, {
	        key: "eventListAsMap",
	        value: function eventListAsMap() {
	            var events = {};
	            var _iteratorNormalCompletion4 = true;
	            var _didIteratorError4 = false;
	            var _iteratorError4 = undefined;

	            try {
	                for (var _iterator4 = (0, _getIterator3.default)(this.events()), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	                    var e = _step4.value;

	                    var key = e.key();
	                    if (!_underscore2.default.has(events, key)) {
	                        events[key] = [];
	                    }
	                    events[key].push(e);
	                }
	            } catch (err) {
	                _didIteratorError4 = true;
	                _iteratorError4 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
	                        _iterator4.return();
	                    }
	                } finally {
	                    if (_didIteratorError4) {
	                        throw _iteratorError4;
	                    }
	                }
	            }

	            return events;
	        }

	        //
	        // De-duplicate
	        //
	        /**
	         * Removes duplicates from the Collection. If duplicates
	         * exist in the collection with the same key but with different
	         * values, then later event values will be used.
	         *
	         * @return {Collection} The sorted Collection.
	         */

	    }, {
	        key: "dedup",
	        value: function dedup() {
	            var events = _event2.default.merge(this.eventListAsArray());
	            return new Collection(events);
	        }

	        //
	        // Sorting
	        //
	        /**
	         * Sorts the Collection by the timestamp. In the case
	         * of TimeRangeEvents and IndexedEvents, it will be sorted
	         * by the begin time. This is useful when the collection
	         * will be passed into a TimeSeries.
	         *
	         * See also isChronological().
	         *
	         * @return {Collection} The sorted Collection
	         */

	    }, {
	        key: "sortByTime",
	        value: function sortByTime() {
	            var _this2 = this;

	            var sorted = this._eventList.sortBy(function (event$$1) {
	                var e = new _this2._type(event$$1);
	                return e.timestamp().getTime();
	            });
	            return this.setEvents(sorted);
	        }

	        /**
	         * Sorts the Collection using the value referenced by
	         * the fieldPath.
	         *
	         * @return {Collection} The extents of the Collection
	         */

	    }, {
	        key: "sort",
	        value: function sort(fieldPath) {
	            var _this3 = this;

	            var fs = _util2.default.fieldPathToArray(fieldPath);
	            var sorted = this._eventList.sortBy(function (event$$1) {
	                var e = new _this3._type(event$$1);
	                return e.get(fs);
	            });
	            return this.setEvents(sorted);
	        }

	        //
	        // Series range
	        //
	        /**
	         * From the range of times, or Indexes within the TimeSeries, return
	         * the extents of the TimeSeries as a TimeRange. This is currently implemented
	         * by walking the events.
	         *
	         * @return {TimeRange} The extents of the TimeSeries
	         */

	    }, {
	        key: "range",
	        value: function range() {
	            var min = void 0;
	            var max = void 0;
	            var _iteratorNormalCompletion5 = true;
	            var _didIteratorError5 = false;
	            var _iteratorError5 = undefined;

	            try {
	                for (var _iterator5 = (0, _getIterator3.default)(this.events()), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	                    var e = _step5.value;

	                    if (!min || e.begin() < min) min = e.begin();
	                    if (!max || e.end() > max) max = e.end();
	                }
	            } catch (err) {
	                _didIteratorError5 = true;
	                _iteratorError5 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion5 && _iterator5.return) {
	                        _iterator5.return();
	                    }
	                } finally {
	                    if (_didIteratorError5) {
	                        throw _iteratorError5;
	                    }
	                }
	            }

	            if (min && max) return new _timerange2.default(min, max);
	        }

	        //
	        // Collection mutation
	        //
	        /**
	         * Adds an event to the collection, returns a new Collection. The event added
	         * can be an Event, TimeRangeEvent or IndexedEvent, but it must be of the
	         * same type as other events within the Collection.
	         *
	         * @param {Event} event The event being added.
	         *
	         * @return {Collection} A new, modified, Collection containing the new event.
	         */

	    }, {
	        key: "addEvent",
	        value: function addEvent(event$$1) {
	            this._check(event$$1);
	            var result = new Collection(this);
	            result._eventList = this._eventList.push(event$$1._d);
	            return result;
	        }

	        /**
	         * Perform a slice of events within the Collection, returns a new
	         * Collection representing a portion of this TimeSeries from begin up to
	         * but not including end.
	         *
	         * @param {Number} begin   The position to begin slicing
	         * @param {Number} end     The position to end slicing
	         *
	         * @return {Collection}    The new, sliced, Collection.
	         */

	    }, {
	        key: "slice",
	        value: function slice(begin, end) {
	            return new Collection(this._eventList.slice(begin, end), this._type);
	        }

	        /**
	         * Filter the collection's event list with the supplied function
	         *
	         * @param {function} func The filter function, that should return
	         *                        true or false when passed in an event.
	         *
	         * @return {Collection}   A new, filtered, Collection.
	         */

	    }, {
	        key: "filter",
	        value: function filter(filterFunc) {
	            var filteredEventList = [];
	            var _iteratorNormalCompletion6 = true;
	            var _didIteratorError6 = false;
	            var _iteratorError6 = undefined;

	            try {
	                for (var _iterator6 = (0, _getIterator3.default)(this.events()), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	                    var e = _step6.value;

	                    if (filterFunc(e)) {
	                        filteredEventList.push(e);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError6 = true;
	                _iteratorError6 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
	                        _iterator6.return();
	                    }
	                } finally {
	                    if (_didIteratorError6) {
	                        throw _iteratorError6;
	                    }
	                }
	            }

	            return new Collection(filteredEventList);
	        }

	        /**
	         * Map the collection's event list to a new event list with
	         * the supplied function.
	         * @param {function} func The mapping function, that should return
	         * a new event when passed in the old event.
	         *
	         * @return {Collection} A new, modified, Collection.
	         */

	    }, {
	        key: "map",
	        value: function map(mapFunc) {
	            var result = [];
	            var _iteratorNormalCompletion7 = true;
	            var _didIteratorError7 = false;
	            var _iteratorError7 = undefined;

	            try {
	                for (var _iterator7 = (0, _getIterator3.default)(this.events()), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
	                    var e = _step7.value;

	                    result.push(mapFunc(e));
	                }
	            } catch (err) {
	                _didIteratorError7 = true;
	                _iteratorError7 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
	                        _iterator7.return();
	                    }
	                } finally {
	                    if (_didIteratorError7) {
	                        throw _iteratorError7;
	                    }
	                }
	            }

	            return new Collection(result);
	        }

	        /**
	         * Returns a new Collection by testing the fieldPath
	         * values for being valid (not NaN, null or undefined).
	         *
	         * The resulting Collection will be clean (for that fieldPath).
	         *
	         * @param  {string}      fieldPath  Name of value to look up. If not supplied,
	         *                                  defaults to ['value']. "Deep" syntax is
	         *                                  ['deep', 'value'] or 'deep.value'
	         *
	         * @return {Collection}             A new, modified, Collection.
	         */

	    }, {
	        key: "clean",
	        value: function clean(fieldPath) {
	            var fs = _util2.default.fieldPathToArray(fieldPath);
	            var filteredEvents = [];
	            var _iteratorNormalCompletion8 = true;
	            var _didIteratorError8 = false;
	            var _iteratorError8 = undefined;

	            try {
	                for (var _iterator8 = (0, _getIterator3.default)(this.events()), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
	                    var e = _step8.value;

	                    if (_event2.default.isValidValue(e, fs)) {
	                        filteredEvents.push(e);
	                    }
	                }
	            } catch (err) {
	                _didIteratorError8 = true;
	                _iteratorError8 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
	                        _iterator8.return();
	                    }
	                } finally {
	                    if (_didIteratorError8) {
	                        throw _iteratorError8;
	                    }
	                }
	            }

	            return new Collection(filteredEvents);
	        }

	        //
	        // Aggregate the event list to a single value
	        //
	        /**
	         * Returns the number of events in this collection
	         *
	         * @return {number} The number of events
	         */

	    }, {
	        key: "count",
	        value: function count() {
	            return this.size();
	        }

	        /**
	         * Returns the first value in the Collection for the fieldspec
	         *
	         * @param {string} fieldPath  Column to find the first value of. A deep value can be referenced with a
	         *                            string.like.this.  If not supplied the `value` column will be
	         *                            aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The first value
	         */

	    }, {
	        key: "first",
	        value: function first(fieldPath, filter) {
	            return this.aggregate((0, functions$2.first)(filter), fieldPath);
	        }

	        /**
	         * Returns the last value in the Collection for the fieldspec
	         *
	         * @param {string} fieldPath  Column to find the last value of. A deep value can be referenced with a
	         *                            string.like.this.  If not supplied the `value` column will be
	         *                            aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The last value
	         */

	    }, {
	        key: "last",
	        value: function last(fieldPath, filter) {
	            return this.aggregate((0, functions$2.last)(filter), fieldPath);
	        }

	        /**
	         * Returns the sum of the Collection for the fieldspec
	         *
	         * @param {string} fieldPath  Column to find the sum of. A deep value can be referenced with a
	         *                            string.like.this.  If not supplied the `value` column will be
	         *                            aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The sum
	         */

	    }, {
	        key: "sum",
	        value: function sum(fieldPath, filter) {
	            return this.aggregate((0, functions$2.sum)(filter), fieldPath);
	        }

	        /**
	         * Aggregates the events down to their average(s)
	         *
	         * @param {string} fieldPath  Column to find the avg of. A deep value can be referenced with a
	         *                            string.like.this.  If not supplied the `value` column will be
	         *                            aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The average
	         */

	    }, {
	        key: "avg",
	        value: function avg(fieldPath, filter) {
	            return this.aggregate((0, functions$2.avg)(filter), fieldPath);
	        }

	        /**
	         * Aggregates the events down to their maximum value
	         *
	         * @param {string} fieldPath  Column to find the max of. A deep value can be referenced with a
	         *                            string.like.this.  If not supplied the `value` column will be
	         *                            aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The max value for the field
	         */

	    }, {
	        key: "max",
	        value: function max(fieldPath, filter) {
	            return this.aggregate((0, functions$2.max)(filter), fieldPath);
	        }

	        /**
	         * Aggregates the events down to their minimum value
	         *
	         * @param {string} fieldPath  Column to find the min of. A deep value can be referenced with a
	         *                            string.like.this.  If not supplied the `value` column will be
	         *                            aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The min value for the field
	         */

	    }, {
	        key: "min",
	        value: function min(fieldPath, filter) {
	            return this.aggregate((0, functions$2.min)(filter), fieldPath);
	        }

	        /**
	         * Aggregates the events down to their mean (same as avg)
	         *
	         * @param {string} fieldPath  Column to find the mean of. A deep value can be referenced with a
	         *                            string.like.this.  If not supplied the `value` column will be
	         *                            aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The mean
	         */

	    }, {
	        key: "mean",
	        value: function mean(fieldPath, filter) {
	            return this.avg(fieldPath, filter);
	        }

	        /**
	         * Aggregates the events down to their minimum value
	         *
	         * @param {string} fieldPath  Column to find the median of. A deep value can be referenced with a
	         *                            string.like.this.  If not supplied the `value` column will be
	         *                            aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The median value
	         */

	    }, {
	        key: "median",
	        value: function median(fieldPath, filter) {
	            return this.aggregate((0, functions$2.median)(filter), fieldPath);
	        }

	        /**
	         * Aggregates the events down to their stdev
	         *
	         * @param {string} fieldPath  Column to find the stdev of. A deep value can be referenced with a
	         *                            string.like.this.  If not supplied the `value` column will be
	         *                            aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The resulting stdev value
	         */

	    }, {
	        key: "stdev",
	        value: function stdev(fieldPath, filter) {
	            return this.aggregate((0, functions$2.stdev)(filter), fieldPath);
	        }

	        /**
	         * Gets percentile q within the Collection. This works the same way as numpy.
	         *
	         * @param  {integer} q        The percentile (should be between 0 and 100)
	         *
	         * @param {string} fieldPath  Column to find the percentile of. A deep value can be referenced with a
	         *                            string.like.this.  If not supplied the `value` column will be
	         *                            aggregated.
	         *
	         * @param  {string} interp    Specifies the interpolation method
	         *                            to use when the desired quantile lies between
	         *                            two data points. Options are:
	         *                            options are:
	         *                             * linear: i + (j - i) * fraction, where fraction is the fractional part of the index surrounded by i and j.
	         *                             * lower: i.
	         *                             * higher: j.
	         *                             * nearest: i or j whichever is nearest.
	         *                             * midpoint: (i + j) / 2.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The percentile
	         */

	    }, {
	        key: "percentile",
	        value: function percentile(q, fieldPath) {
	            var interp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "linear";
	            var filter = arguments[3];

	            return this.aggregate((0, functions$2.percentile)(q, interp, filter), fieldPath);
	        }

	        /**
	         * Aggregates the events down using a user defined function to
	         * do the reduction.
	         *
	         * @param  {function} func    User defined reduction function. Will be
	         *                            passed a list of values. Should return a
	         *                            singe value.
	         *
	         * @param  {String} fieldPath The field to aggregate over
	         *
	         * @return {number}           The resulting value
	         */

	    }, {
	        key: "aggregate",
	        value: function aggregate(func, fieldPath) {
	            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	            var fpath = void 0;
	            if (!_underscore2.default.isFunction(func)) {
	                throw new Error("First arg to aggregate() must be a function");
	            }

	            if (_underscore2.default.isString(fieldPath)) {
	                fpath = fieldPath;
	            } else if (_underscore2.default.isArray(fieldPath)) {
	                // if the ['array', 'style', 'fieldpath'] is being used,
	                // we need to turn it back into a string since we are
	                // using a subset of the the map() functionality on
	                // a single column
	                fpath = fieldPath.split(".");
	            } else if (_underscore2.default.isUndefined(fieldPath)) {
	                // map() needs a field name to use as a key. Normally
	                // this case is normally handled by _field_spec_to_array()
	                // inside get(). Also, if map(func, field_spec=None) then
	                // it will map all the columns.
	                fpath = "value";
	            } else {
	                throw new Error("Collection.aggregate() takes a string/array fieldPath");
	            }

	            var result = _event2.default.mapReduce(this.eventListAsArray(), fpath, func, options);
	            return result[fpath];
	        }

	        /**
	         * Gets n quantiles within the Collection. This works the same way as numpy.
	         *
	         * @param  {integer} n        The number of quantiles to divide the
	         *                            Collection into.
	         *
	         * @param  {string} column    The field to return as the quantile
	         *
	         * @param  {string} interp    Specifies the interpolation method
	         *                            to use when the desired quantile lies between
	         *                            two data points. Options are:
	         *                            options are:
	         *                             * linear: i + (j - i) * fraction, where fraction is the fractional part of the index surrounded by i and j.
	         *                             * lower: i.
	         *                             * higher: j.
	         *                             * nearest: i or j whichever is nearest.
	         *                             * midpoint: (i + j) / 2.
	         *
	         * @return {array}            An array of n quantiles
	         */

	    }, {
	        key: "quantile",
	        value: function quantile(n) {
	            var column = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "value";
	            var interp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "linear";

	            var results = [];
	            var sorted = this.sort(column);
	            var subsets = 1.0 / n;

	            if (n > this.length) {
	                throw new Error("Subset n is greater than the Collection length");
	            }

	            for (var i = subsets; i < 1; i += subsets) {
	                var index = Math.floor((sorted.size() - 1) * i);
	                if (index < sorted.size() - 1) {
	                    var fraction = (sorted.size() - 1) * i - index;
	                    var v0 = sorted.at(index).get(column);
	                    var v1 = sorted.at(index + 1).get(column);
	                    var v = void 0;

	                    if (interp === "lower" || fraction === 0) {
	                        v = v0;
	                    } else if (interp === "linear") {
	                        v = v0 + (v1 - v0) * fraction;
	                    } else if (interp === "higher") {
	                        v = v1;
	                    } else if (interp === "nearest") {
	                        v = fraction < 0.5 ? v0 : v1;
	                    } else if (interp === "midpoint") {
	                        v = (v0 + v1) / 2;
	                    }

	                    results.push(v);
	                }
	            }
	            return results;
	        }

	        /**
	         * Returns true if all events in this Collection are in chronological order.
	         * @return {Boolean} True if all events are in order, oldest events to newest.
	         */

	    }, {
	        key: "isChronological",
	        value: function isChronological() {
	            var result = true;
	            var t = void 0;
	            var _iteratorNormalCompletion9 = true;
	            var _didIteratorError9 = false;
	            var _iteratorError9 = undefined;

	            try {
	                for (var _iterator9 = (0, _getIterator3.default)(this.events()), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
	                    var e = _step9.value;

	                    if (!t) {
	                        t = e.timestamp().getTime();
	                    } else {
	                        if (e.timestamp() < t) {
	                            result = false;
	                        }
	                        t = e.timestamp();
	                    }
	                }
	            } catch (err) {
	                _didIteratorError9 = true;
	                _iteratorError9 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
	                        _iterator9.return();
	                    }
	                } finally {
	                    if (_didIteratorError9) {
	                        throw _iteratorError9;
	                    }
	                }
	            }

	            return result;
	        }

	        /**
	         * STATIC
	         */
	        /**
	          * Static function to compare two collections to each other. If the collections
	          * are of the same instance as each other then equals will return true.
	          *
	          * @param  {Collection} collection1
	          * @param  {Collection} collection2
	          *
	          * @return {bool} result
	          */

	    }], [{
	        key: "equal",
	        value: function equal(collection1, collection2) {
	            return collection1._type === collection2._type && collection1._eventList === collection2._eventList;
	        }

	        /**
	          * Static function to compare two collections to each other. If the collections
	          * are of the same value as each other then equals will return true.
	          *
	          * @param  {Collection} collection1
	          * @param  {Collection} collection2
	          *
	          * @return {bool} result
	          */

	    }, {
	        key: "is",
	        value: function is(collection1, collection2) {
	            return collection1._type === collection2._type && _immutable2.default.is(collection1._eventList, collection2._eventList);
	        }
	    }]);
	    return Collection;
	}(_bounded2.default); /*
	                       *  Copyright (c) 2016-2017, The Regents of the University of California,
	                       *  through Lawrence Berkeley National Laboratory (subject to receipt
	                       *  of any required approvals from the U.S. Dept. of Energy).
	                       *  All rights reserved.
	                       *
	                       *  This source code is licensed under the BSD-style license found in the
	                       *  LICENSE file in the root directory of this source tree.
	                       */

	exports.default = Collection;
	});

	unwrapExports(collection);

	var timeseries = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _extends3 = _interopRequireDefault(_extends$6);



	var _regenerator2 = _interopRequireDefault(regenerator);



	var _stringify2 = _interopRequireDefault(stringify$1);



	var _getIterator3 = _interopRequireDefault(getIterator$1);



	var _toConsumableArray3 = _interopRequireDefault(toConsumableArray$1);



	var _toArray3 = _interopRequireDefault(toArray$2);



	var _objectWithoutProperties3 = _interopRequireDefault(objectWithoutProperties$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _immutable2 = _interopRequireDefault(immutable);



	var _collection2 = _interopRequireDefault(collection);



	var _index2 = _interopRequireDefault(lib$9);



	var _event2 = _interopRequireDefault(event);



	var _timeevent2 = _interopRequireDefault(timeevent);



	var _timerangeevent2 = _interopRequireDefault(timerangeevent);



	var _indexedevent2 = _interopRequireDefault(indexedevent);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function buildMetaData(meta) {
	    var d = meta ? meta : {};

	    // Name
	    d.name = meta.name ? meta.name : "";

	    // Index
	    if (meta.index) {
	        if (_underscore2.default.isString(meta.index)) {
	            d.index = new _index2.default(meta.index);
	        } else if (meta.index instanceof _index2.default) {
	            d.index = meta.index;
	        }
	    }

	    // UTC or Local time
	    d.utc = true;
	    if (_underscore2.default.isBoolean(meta.utc)) {
	        d.utc = meta.utc;
	    }

	    return new _immutable2.default.Map(d);
	}

	/**
	 * A `TimeSeries` represents a series of events, with each event being a combination of:
	 *
	 *  - time (or `TimeRange`, or `Index`)
	 *  - data - corresponding set of key/values.
	 *
	 * ### Construction
	 *
	 * Currently you can initialize a `TimeSeries` with either a list of events, or with a data format that looks like this:
	 *
	 * ```javascript
	 * const data = {
	 *     name: "trafficc",
	 *     columns: ["time", "value"],
	 *     points: [
	 *         [1400425947000, 52],
	 *         [1400425948000, 18],
	 *         [1400425949000, 26],
	 *         [1400425950000, 93],
	 *         ...
	 *     ]
	 * };
	 * ```
	 *
	 * To create a new TimeSeries object from the above format, simply use the constructor:
	 *
	 * ```javascript
	 * const series = new TimeSeries(data);
	 * ```
	 *
	 * The format of the data is as follows:
	 *
	 *  - **name** - optional, but a good practice
	 *  - **columns** - are necessary and give labels to the data in the points.
	 *  - **points** - are an array of tuples. Each row is at a different time (or timerange), and each value corresponds to the column labels.
	 *
	 * As just hinted at, the first column may actually be:
	 *
	 *  - "time"
	 *  - "timeRange" represented by a `TimeRange`
	 *  - "index" - a time range represented by an `Index`. By using an index it is possible, for example, to refer to a specific month:
	 *
	 * ```javascript
	 * const availabilityData = {
	 *     name: "Last 3 months availability",
	 *     columns: ["index", "uptime"],
	 *     points: [
	 *         ["2015-06", "100%"], // <-- 2015-06 specified here represents June 2015
	 *         ["2015-05", "92%"],
	 *         ["2015-04", "87%"],
	 *     ]
	 * };
	 * ```
	 *
	 * Alternatively, you can construct a `TimeSeries` with a list of events.
	 * These may be `TimeEvents`, `TimeRangeEvents` or `IndexedEvents`. Here's an example of that:
	 *
	 * ```javascript
	 * const events = [];
	 * events.push(new TimeEvent(new Date(2015, 7, 1), {value: 27}));
	 * events.push(new TimeEvent(new Date(2015, 8, 1), {value: 29}));
	 * const series = new TimeSeries({
	 *     name: "avg temps",
	 *     events: events
	 * });
	 * ```
	 *
	 * ### Nested data
	 *
	 * The values do not have to be simple types like the above examples. Here's an
	 * example where each value is itself an object with "in" and "out" keys:
	 *
	 * ```javascript
	 * const series = new TimeSeries({
	 *     name: "Map Traffic",
	 *     columns: ["time", "NASA_north", "NASA_south"],
	 *     points: [
	 *         [1400425951000, {in: 100, out: 200}, {in: 145, out: 135}],
	 *         [1400425952000, {in: 200, out: 400}, {in: 146, out: 142}],
	 *         [1400425953000, {in: 300, out: 600}, {in: 147, out: 158}],
	 *         [1400425954000, {in: 400, out: 800}, {in: 155, out: 175}],
	 *     ]
	 * });
	 * ```
	 *
	 * Complex data is stored in an Immutable structure. To get a value out of nested
	 * data like this you will get the event you want (by row), as usual, and then use
	 * `get()` to fetch the value by column name. The result of this call will be a
	 * JSON copy of the Immutable data so you can query deeper in the usual way:
	 *
	 * ```javascript
	 * series.at(0).get("NASA_north")["in"]  // 200`
	 * ```
	 *
	 * It is then possible to use a value mapper function when calculating different
	 * properties. For example, to get the average "in" value of the NASA_north column:
	 *
	 * ```javascript
	 * series.avg("NASA_north", d => d.in);  // 250
	 * ```
	 */
	/*
	 *  Copyright (c) 2015-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var TimeSeries = function () {
	    function TimeSeries(arg) {
	        (0, _classCallCheck3.default)(this, TimeSeries);

	        this._collection = null;
	        // Collection
	        this._data = null;

	        // Meta data
	        if (arg instanceof TimeSeries) {
	            //
	            // Copy another TimeSeries
	            //
	            var other = arg;
	            this._data = other._data;
	            this._collection = other._collection;
	        } else if (_underscore2.default.isObject(arg)) {
	            //
	            // TimeSeries(object data) where data may be:
	            //    { "events": [event-1, event-2, ..., event-n]}
	            // or
	            //    { "columns": [time|timerange|index, column-1, ..., column-n]
	            //      "points": [
	            //         [t1, v1, v2, ..., v2],
	            //         [t2, v1, v2, ..., vn],
	            //         ...
	            //      ]
	            //    }
	            var obj = arg;

	            if (_underscore2.default.has(obj, "events")) {
	                //
	                // Initialized from an event list
	                //
	                var events = obj.events,
	                    meta1 = (0, _objectWithoutProperties3.default)(obj, ["events"]);
	                //eslint-disable-line

	                this._collection = new _collection2.default(events);
	                this._data = buildMetaData(meta1);
	            } else if (_underscore2.default.has(obj, "collection")) {
	                //
	                // Initialized from a Collection
	                //
	                var collection$$1 = obj.collection,
	                    meta3 = (0, _objectWithoutProperties3.default)(obj, ["collection"]);
	                //eslint-disable-line

	                this._collection = collection$$1;
	                this._data = buildMetaData(meta3);
	            } else if (_underscore2.default.has(obj, "columns") && _underscore2.default.has(obj, "points")) {
	                //
	                // Initialized from the wire format
	                //
	                var columns = obj.columns,
	                    points = obj.points,
	                    _obj$utc = obj.utc,
	                    utc = _obj$utc === undefined ? true : _obj$utc,
	                    meta2 = (0, _objectWithoutProperties3.default)(obj, ["columns", "points", "utc"]);
	                //eslint-disable-line

	                var _columns = (0, _toArray3.default)(columns),
	                    eventKey = _columns[0],
	                    eventFields = _columns.slice(1);

	                var _events = points.map(function (point) {
	                    var _point = (0, _toArray3.default)(point),
	                        t = _point[0],
	                        eventValues = _point.slice(1);

	                    var d = _underscore2.default.object(eventFields, eventValues);
	                    var options = utc;
	                    switch (eventKey) {
	                        case "time":
	                            return new _timeevent2.default(t, d, options);
	                        case "index":
	                            return new _indexedevent2.default(t, d, options);
	                        case "timerange":
	                            return new _timerangeevent2.default(t, d, options);
	                        default:
	                            throw new Error("Unknown event type");
	                    }
	                });

	                this._collection = new _collection2.default(_events);
	                this._data = buildMetaData(meta2);
	            }

	            if (!this._collection.isChronological()) {
	                throw new Error("TimeSeries was passed non-chronological events");
	            }
	        }
	    }

	    //
	    // Serialize
	    //
	    /**
	     * Turn the TimeSeries into regular javascript objects
	     */


	    (0, _createClass3.default)(TimeSeries, [{
	        key: "toJSON",
	        value: function toJSON() {
	            var e = this.atFirst();
	            if (!e) {
	                return;
	            }

	            var columns = void 0;
	            if (e instanceof _timeevent2.default) {
	                columns = ["time"].concat((0, _toConsumableArray3.default)(this.columns()));
	            } else if (e instanceof _timerangeevent2.default) {
	                columns = ["timerange"].concat((0, _toConsumableArray3.default)(this.columns()));
	            } else if (e instanceof _indexedevent2.default) {
	                columns = ["index"].concat((0, _toConsumableArray3.default)(this.columns()));
	            }

	            var points = [];
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = (0, _getIterator3.default)(this._collection.events()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var _e = _step.value;

	                    points.push(_e.toPoint());
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return _underscore2.default.extend(this._data.toJSON(), { columns: columns, points: points });
	        }

	        /**
	         * Represent the TimeSeries as a string
	         */

	    }, {
	        key: "toString",
	        value: function toString() {
	            return (0, _stringify2.default)(this.toJSON());
	        }

	        /**
	         * Returns the extents of the TimeSeries as a TimeRange.
	         */

	    }, {
	        key: "timerange",
	        value: function timerange() {
	            return this._collection.range();
	        }

	        /**
	         * Alias for `timerange()`
	         */

	    }, {
	        key: "range",
	        value: function range() {
	            return this.timerange();
	        }

	        /**
	         * Gets the earliest time represented in the TimeSeries.
	         *
	         * @return {Date} Begin time
	         */

	    }, {
	        key: "begin",
	        value: function begin() {
	            return this.range().begin();
	        }

	        /**
	         * Gets the latest time represented in the TimeSeries.
	         *
	         * @return {Date} End time
	         */

	    }, {
	        key: "end",
	        value: function end() {
	            return this.range().end();
	        }

	        /**
	         * Access a specific TimeSeries event via its position
	         *
	         * @param {number} pos The event position
	         */

	    }, {
	        key: "at",
	        value: function at(pos) {
	            return this._collection.at(pos);
	        }

	        /**
	         * Returns an event in the series by its time. This is the same
	         * as calling `bisect` first and then using `at` with the index.
	         *
	         * @param  {Date} time The time of the event.
	         * @return {TimeEvent|IndexedEvent|TimeRangeEvent}
	         */

	    }, {
	        key: "atTime",
	        value: function atTime(time) {
	            var pos = this.bisect(time);
	            if (pos >= 0 && pos < this.size()) {
	                return this.at(pos);
	            }
	        }

	        /**
	         * Returns the first event in the series.
	         *
	         * @return {TimeEvent|IndexedEvent|TimeRangeEvent}
	         */

	    }, {
	        key: "atFirst",
	        value: function atFirst() {
	            return this._collection.atFirst();
	        }

	        /**
	         * Returns the last event in the series.
	         *
	         * @return {TimeEvent|IndexedEvent|TimeRangeEvent}
	         */

	    }, {
	        key: "atLast",
	        value: function atLast() {
	            return this._collection.atLast();
	        }

	        /**
	         * Generator to return all the events in the series
	         *
	         * @example
	         * ```
	         * for (let event of series.events()) {
	         *     console.log(event.toString());
	         * }
	         * ```
	         */

	    }, {
	        key: "events",
	        value: _regenerator2.default.mark(function events() {
	            var i;
	            return _regenerator2.default.wrap(function events$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            i = 0;

	                        case 1:
	                            if (!(i < this.size())) {
	                                _context.next = 7;
	                                break;
	                            }

	                            _context.next = 4;
	                            return this.at(i);

	                        case 4:
	                            i++;
	                            _context.next = 1;
	                            break;

	                        case 7:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, events, this);
	        })

	        /**
	         * Sets a new underlying collection for this TimeSeries.
	         *
	         * @param {Collection}  collection       The new collection
	         * @param {boolean}     isChronological  Causes the chronological
	         *                                       order of the events to
	         *                                       not be checked
	         *
	         * @return {TimeSeries}                  A new TimeSeries
	         */

	    }, {
	        key: "setCollection",
	        value: function setCollection(collection$$1) {
	            var isChronological = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	            if (!isChronological && !collection$$1.isChronological()) {
	                throw new Error("Collection supplied is not chronological");
	            }
	            var result = new TimeSeries(this);
	            if (collection$$1) {
	                result._collection = collection$$1;
	            } else {
	                result._collection = new _collection2.default();
	            }
	            return result;
	        }

	        /**
	         * Returns the index that bisects the TimeSeries at the time specified.
	         *
	         * @param  {Date}    t   The time to bisect the TimeSeries with
	         * @param  {number}  b   The position to begin searching at
	         *
	         * @return {number}      The row number that is the greatest, but still below t.
	         */

	    }, {
	        key: "bisect",
	        value: function bisect(t, b) {
	            var tms = t.getTime();
	            var size = this.size();
	            var i = b || 0;

	            if (!size) {
	                return undefined;
	            }

	            for (; i < size; i++) {
	                var ts = this.at(i).timestamp().getTime();
	                if (ts > tms) {
	                    return i - 1 >= 0 ? i - 1 : 0;
	                } else if (ts === tms) {
	                    return i;
	                }
	            }
	            return i - 1;
	        }

	        /**
	         * Perform a slice of events within the TimeSeries, returns a new
	         * TimeSeries representing a portion of this TimeSeries from
	         * begin up to but not including end.
	         *
	         * @param {Number} begin   The position to begin slicing
	         * @param {Number} end     The position to end slicing
	         *
	         * @return {TimeSeries}    The new, sliced, TimeSeries.
	         */

	    }, {
	        key: "slice",
	        value: function slice(begin, end) {
	            var sliced = this._collection.slice(begin, end);
	            return this.setCollection(sliced, true);
	        }

	        /**
	         * Crop the TimeSeries to the specified TimeRange and
	         * return a new TimeSeries.
	         *
	         * @param {TimeRange} timerange   The bounds of the new TimeSeries
	         *
	         * @return {TimeSeries}    The new, cropped, TimeSeries.
	         */

	    }, {
	        key: "crop",
	        value: function crop(timerange) {
	            var beginPos = this.bisect(timerange.begin());
	            var endPos = this.bisect(timerange.end(), beginPos);
	            return this.slice(beginPos, endPos);
	        }

	        /**
	         * Returns a new TimeSeries by testing the fieldPath
	         * values for being valid (not NaN, null or undefined).
	         *
	         * The resulting TimeSeries will be clean (for that fieldPath).
	         *
	         * @param  {string}      fieldPath  Name of value to look up. If not supplied,
	         *                                  defaults to ['value']. "Deep" syntax is
	         *                                  ['deep', 'value'] or 'deep.value'
	         *
	         * @return {TimeSeries}             A new, modified, TimeSeries.
	         */

	    }, {
	        key: "clean",
	        value: function clean(fieldSpec) {
	            var cleaned = this._collection.clean(fieldSpec);
	            return this.setCollection(cleaned, true);
	        }

	        /**
	         * Generator to return all the events in the collection.
	         *
	         * @example
	         * ```
	         * for (let event of timeseries.events()) {
	         *     console.log(event.toString());
	         * }
	         * ```
	         */

	    }, {
	        key: "events",
	        value: _regenerator2.default.mark(function events() {
	            var i;
	            return _regenerator2.default.wrap(function events$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            i = 0;

	                        case 1:
	                            if (!(i < this.size())) {
	                                _context2.next = 7;
	                                break;
	                            }

	                            _context2.next = 4;
	                            return this.at(i);

	                        case 4:
	                            i++;
	                            _context2.next = 1;
	                            break;

	                        case 7:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, events, this);
	        })

	        //
	        // Access meta data about the series
	        //
	        /**
	         * Fetch the timeseries name
	         *
	         * @return {string} The name given to this TimeSeries
	         */

	    }, {
	        key: "name",
	        value: function name() {
	            return this._data.get("name");
	        }

	        /**
	         * Rename the timeseries
	         */

	    }, {
	        key: "setName",
	        value: function setName(name) {
	            return this.setMeta("name", name);
	        }

	        /**
	         * Fetch the timeseries Index, if it has one.
	         *
	         * @return {Index} The Index given to this TimeSeries
	         */

	    }, {
	        key: "index",
	        value: function index() {
	            return this._data.get("index");
	        }

	        /**
	         * Fetch the timeseries Index, as a string, if it has one.
	         *
	         * @return {string} The Index, as a string, given to this TimeSeries
	         */

	    }, {
	        key: "indexAsString",
	        value: function indexAsString() {
	            return this.index() ? this.index().asString() : undefined;
	        }

	        /**
	         * Fetch the timeseries `Index`, as a `TimeRange`, if it has one.
	         *
	         * @return {TimeRange} The `Index`, as a `TimeRange`, given to this `TimeSeries`
	         */

	    }, {
	        key: "indexAsRange",
	        value: function indexAsRange() {
	            return this.index() ? this.index().asTimerange() : undefined;
	        }

	        /**
	         * Fetch the UTC flag, i.e. are the events in this `TimeSeries` in
	         * UTC or local time (if they are `IndexedEvent`s an event might be
	         * "2014-08-31". The actual time range of that representation
	         * depends on where you are. Pond supports thinking about that in
	         * either as a UTC day, or a local day).
	         *
	         * @return {TimeRange} The Index, as a TimeRange, given to this TimeSeries
	         */

	    }, {
	        key: "isUTC",
	        value: function isUTC() {
	            return this._data.get("utc");
	        }

	        /**
	         * Fetch the list of column names. This is determined by
	         * traversing though the events and collecting the set.
	         *
	         * Note: the order is not defined
	         *
	         * @return {array} List of columns
	         */

	    }, {
	        key: "columns",
	        value: function columns() {
	            var c = {};
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;

	            try {
	                for (var _iterator2 = (0, _getIterator3.default)(this._collection.events()), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var e = _step2.value;

	                    var d = e.toJSON().data;
	                    _underscore2.default.each(d, function (val, key) {
	                        c[key] = true;
	                    });
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }

	            return _underscore2.default.keys(c);
	        }

	        /**
	         * Returns the internal `Collection` of events for this `TimeSeries`
	         *
	         * @return {Collection} The collection backing this `TimeSeries`
	         */

	    }, {
	        key: "collection",
	        value: function collection$$1() {
	            return this._collection;
	        }

	        /**
	         * Returns the meta data about this TimeSeries as a JSON object.
	         * Any extra data supplied to the TimeSeries constructor will be
	         * placed in the meta data object. This returns either all of that
	         * data as a JSON object, or a specific key if `key` is supplied.
	         *
	         * @param {string}   key   Optional specific part of the meta data
	         * @return {object}        The meta data
	         */

	    }, {
	        key: "meta",
	        value: function meta(key) {
	            if (!key) {
	                return this._data.toJSON();
	            } else {
	                return this._data.get(key);
	            }
	        }

	        /**
	         * Set new meta data for the TimeSeries. The result will
	         * be a new TimeSeries.
	         */

	    }, {
	        key: "setMeta",
	        value: function setMeta(key, value) {
	            var newTimeSeries = new TimeSeries(this);
	            var d = newTimeSeries._data;
	            var dd = d.set(key, value);
	            newTimeSeries._data = dd;
	            return newTimeSeries;
	        }

	        //
	        // Access the series itself
	        //
	        /**
	         * Returns the number of events in this TimeSeries
	         *
	         * @return {number} Count of events
	         */

	    }, {
	        key: "size",
	        value: function size() {
	            return this._collection ? this._collection.size() : 0;
	        }

	        /**
	         * Returns the number of valid items in this TimeSeries.
	         *
	         * Uses the fieldSpec to look up values in all events.
	         * It then counts the number that are considered valid, which
	         * specifically are not NaN, undefined or null.
	         *
	         * @return {number} Count of valid events
	         */

	    }, {
	        key: "sizeValid",
	        value: function sizeValid(fieldSpec) {
	            return this._collection.sizeValid(fieldSpec);
	        }

	        /**
	         * Returns the number of events in this TimeSeries. Alias
	         * for size().
	         *
	         * @return {number} Count of events
	         */

	    }, {
	        key: "count",
	        value: function count() {
	            return this.size();
	        }

	        /**
	         * Returns the sum for the fieldspec
	         *
	         * @param {string} fieldPath  Column to find the stdev of. A deep value can
	         *                            be referenced with a string.like.this.  If not supplied
	         *                            the `value` column will be aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The sum
	         */

	    }, {
	        key: "sum",
	        value: function sum(fieldPath, filter) {
	            return this._collection.sum(fieldPath, filter);
	        }

	        /**
	         * Aggregates the events down to their maximum value
	         *
	         * @param {string} fieldPath  Column to find the max of. A deep value can
	         *                            be referenced with a string.like.this.  If not supplied
	         *                            the `value` column will be aggregated.
	         *
	         * @return {number}           The max value for the field
	         */

	    }, {
	        key: "max",
	        value: function max(fieldPath, filter) {
	            return this._collection.max(fieldPath, filter);
	        }

	        /**
	         * Aggregates the events down to their minimum value
	         *
	         * @param {string} fieldPath  Column to find the min of. A deep value can
	         *                            be referenced with a string.like.this.  If not supplied
	         *                            the `value` column will be aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The min value for the field
	         */

	    }, {
	        key: "min",
	        value: function min(fieldPath, filter) {
	            return this._collection.min(fieldPath, filter);
	        }

	        /**
	         * Aggregates the events in the TimeSeries down to their average
	         *
	         * @param {string} fieldPath  Column to find the avg of. A deep value can
	         *                            be referenced with a string.like.this.  If not supplied
	         *                            the `value` column will be aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The average
	         */

	    }, {
	        key: "avg",
	        value: function avg(fieldPath, filter) {
	            return this._collection.avg(fieldPath, filter);
	        }

	        /**
	         * Aggregates the events in the TimeSeries down to their mean (same as avg)
	         *
	         * @param {string} fieldPath  Column to find the mean of. A deep value can
	         *                            be referenced with a string.like.this.  If not supplied
	         *                            the `value` column will be aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The mean
	         */

	    }, {
	        key: "mean",
	        value: function mean(fieldPath, filter) {
	            return this._collection.mean(fieldPath, filter);
	        }

	        /**
	         * Aggregates the events down to their medium value
	         *
	         * @param {string} fieldPath  Column to find the median of. A deep value can
	         *                            be referenced with a string.like.this.  If not supplied
	         *                            the `value` column will be aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The resulting median value
	         */

	    }, {
	        key: "median",
	        value: function median(fieldPath, filter) {
	            return this._collection.median(fieldPath, filter);
	        }

	        /**
	         * Aggregates the events down to their stdev
	         *
	         * @param {string} fieldPath  Column to find the stdev of. A deep value can
	         *                            be referenced with a string.like.this.  If not supplied
	         *                            the `value` column will be aggregated.
	         * @param {function} filter   Optional filter function used to clean data before aggregating
	         *
	         * @return {number}           The resulting stdev value
	         */

	    }, {
	        key: "stdev",
	        value: function stdev(fieldPath, filter) {
	            return this._collection.stdev(fieldPath, filter);
	        }

	        /**
	         * Gets percentile q within the TimeSeries. This works the same way as numpy.
	         *
	         * @param  {integer} q         The percentile (should be between 0 and 100)
	         *
	         * @param {string} fieldPath   Column to find the qth percentile of. A deep value can
	         *                             be referenced with a string.like.this.  If not supplied
	         *                             the `value` column will be aggregated.
	         *
	         * @param  {string}  interp    Specifies the interpolation method
	         *                             to use when the desired quantile lies between
	         *                             two data points. Options are: "linear", "lower", "higher",
	         *                             "nearest", "midpoint"
	         * @param {function} filter    Optional filter function used to clean data before aggregating
	         *
	         * @return {number}            The percentile
	         */

	    }, {
	        key: "percentile",
	        value: function percentile(q, fieldPath) {
	            var interp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "linear";
	            var filter = arguments[3];

	            return this._collection.percentile(q, fieldPath, interp, filter);
	        }

	        /**
	         * Aggregates the events down using a user defined function to
	         * do the reduction.
	         *
	         * @param  {function} func    User defined reduction function. Will be
	         *                            passed a list of values. Should return a
	         *                            singe value.
	         * @param {string} fieldPath  Column to aggregate over. A deep value can
	         *                            be referenced with a string.like.this.  If not supplied
	         *                            the `value` column will be aggregated.
	         *
	         * @return {number}           The resulting value
	         */

	    }, {
	        key: "aggregate",
	        value: function aggregate(func, fieldPath) {
	            return this._collection.aggregate(func, fieldPath);
	        }

	        /**
	         * Gets n quantiles within the TimeSeries. This works the same way as numpy's percentile().
	         * For example `timeseries.quantile(4)` would be the same as using percentile with q = 0.25, 0.5 and 0.75.
	         *
	         * @param  {integer} n        The number of quantiles to divide the
	         *                            TimeSeries into.
	         * @param {string} fieldPath  Column to calculate over. A deep value can
	         *                            be referenced with a string.like.this.  If not supplied
	         *                            the `value` column will be aggregated.
	         * @param  {string} interp    Specifies the interpolation method
	         *                            to use when the desired quantile lies between
	         *                            two data points. Options are: "linear", "lower", "higher",
	         *                            "nearest", "midpoint".
	         * @return {array}            An array of n quantiles
	         */

	    }, {
	        key: "quantile",
	        value: function quantile(quantity) {
	            var fieldPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "value";
	            var interp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "linear";

	            return this._collection.quantile(quantity, fieldPath, interp);
	        }

	        /**
	         * Returns a new Pipeline with input source being initialized to
	         * this TimeSeries collection. This allows pipeline operations
	         * to be chained directly onto the TimeSeries to produce a new
	         * TimeSeries or event result.
	         *
	         * @example
	         *
	         * ```
	         * timeseries.pipeline()
	         *     .offsetBy(1)
	         *     .offsetBy(2)
	         *     .to(CollectionOut, c => out = c);
	         * ```
	         *
	         * @return {Pipeline} The Pipeline.
	         */

	    }, {
	        key: "pipeline",
	        value: function pipeline() {
	            return new pipeline_1.Pipeline().from(this._collection);
	        }

	        /**
	         * Takes an operator that is used to remap events from this TimeSeries to
	         * a new set of events.
	         *
	         * @param  {function}   operator      An operator which will be passed each
	         *                                    event and which should return a new event.
	         * @return {TimeSeries}               A TimeSeries containing the remapped events
	         */

	    }, {
	        key: "map",
	        value: function map(op) {
	            var collections = this.pipeline().map(op).toKeyedCollections();
	            return this.setCollection(collections["all"], true);
	        }

	        /**
	         * Takes a fieldSpec (list of column names) and outputs to the callback just those
	         * columns in a new TimeSeries.
	         *
	         * @example
	         *
	         * ```
	         *     const ts = timeseries.select({fieldSpec: ["uptime", "notes"]});
	         * ```
	         *
	         * @param                options           An object containing options for the command
	         * @param {string|array} options.fieldSpec Column or columns to select into the new TimeSeries.
	         *                                         If you need to retrieve multiple deep nested values
	         *                                         that ['can.be', 'done.with', 'this.notation'].
	         *                                         A single deep value with a string.like.this.
	         *
	         * @return {TimeSeries}                    The resulting TimeSeries with renamed columns
	         */

	    }, {
	        key: "select",
	        value: function select(options) {
	            var fieldSpec = options.fieldSpec;

	            var collections = this.pipeline().select(fieldSpec).toKeyedCollections();
	            return this.setCollection(collections["all"], true);
	        }

	        /**
	         * Takes a `fieldSpecList` (list of column names) and collapses
	         * them to a new column named `name` which is the reduction (using
	         * the `reducer` function) of the matched columns in the `fieldSpecList`.
	         *
	         * The column may be appended to the existing columns, or replace them,
	         * based on the `append` boolean.
	         *
	         * @example
	         *
	         * ```
	         *     const sums = ts.collapse({
	         *          name: "sum_series",
	         *          fieldSpecList: ["in", "out"],
	         *          reducer: sum(),
	         *          append: false
	         *     });
	         * ```
	         *
	         * @param                options                An object containing options:
	         * @param {array}        options.fieldSpecList  The list of columns to collapse. (required)
	         * @param {string}       options.name           The resulting collapsed column name (required)
	         * @param {function}     options.reducer        The reducer function (required)
	         * @param {bool}         options.append         Append the collapsed column, rather
	         *                                              than replace
	         *
	         * @return {TimeSeries}     The resulting collapsed TimeSeries
	         */

	    }, {
	        key: "collapse",
	        value: function collapse(options) {
	            var fieldSpecList = options.fieldSpecList,
	                name = options.name,
	                reducer = options.reducer,
	                append = options.append;

	            var collections = this.pipeline().collapse(fieldSpecList, name, reducer, append).toKeyedCollections();
	            return this.setCollection(collections["all"], true);
	        }

	        /**
	         * Rename columns in the underlying events.
	         *
	         * Takes a object of columns to rename. Returns a new `TimeSeries` containing
	         * new events. Columns not in the dict will be retained and not renamed.
	         *
	         * @example
	         * ```
	         * new_ts = ts.renameColumns({
	         *     renameMap: {in: "new_in", out: "new_out"}
	         * });
	         * ```
	         *
	         * @note As the name implies, this will only rename the main
	         * "top level" (ie: non-deep) columns. If you need more
	         * extravagant renaming, roll your own using `TimeSeries.map()`.
	         *
	         * @param                options                An object containing options:
	         * @param {Object}       options.renameMap      Columns to rename.
	         *
	         * @return {TimeSeries}     The resulting TimeSeries with renamed columns
	         */

	    }, {
	        key: "renameColumns",
	        value: function renameColumns(options) {
	            var renameMap = options.renameMap;

	            return this.map(function (event$$1) {
	                var eventType = event$$1.type();
	                var d = event$$1.data().mapKeys(function (key) {
	                    return renameMap[key] || key;
	                });
	                return new eventType(event$$1.key(), d);
	            });
	        }

	        /**
	         * Take the data in this TimeSeries and "fill" any missing or invalid
	         * values. This could be setting `null` values to zero so mathematical
	         * operations will succeed, interpolate a new value, or pad with the
	         * previously given value.
	         *
	         * The `fill()` method takes a single `options` arg.
	         *
	         * @example
	         * ```
	         * const filled = timeseries.fill({
	         *     fieldSpec: ["direction.in", "direction.out"],
	         *     method: "zero",
	         *     limit: 3
	         * });
	         * ```
	         *
	         * @param                options                An object containing options:
	         * @param {string|array} options.fieldSpec      Column or columns to fill. If you need to
	         *                                              retrieve multiple deep nested values
	         *                                              that ['can.be', 'done.with', 'this.notation'].
	         *                                              A single deep value with a string.like.this.
	         * @param {string}       options.method         "linear" or "pad" or "zero" style interpolation
	         * @param {number}       options.limit          The maximum number of points which should be
	         *                                              interpolated onto missing points. You might set this to
	         *                                              2 if you are willing to fill 2 new points,
	         *                                              and then beyond that leave data with missing values.
	         *
	         * @return {TimeSeries}                         The resulting filled TimeSeries
	         */

	    }, {
	        key: "fill",
	        value: function fill(options) {
	            var _options$fieldSpec = options.fieldSpec,
	                fieldSpec = _options$fieldSpec === undefined ? null : _options$fieldSpec,
	                _options$method = options.method,
	                method = _options$method === undefined ? "zero" : _options$method,
	                _options$limit = options.limit,
	                limit = _options$limit === undefined ? null : _options$limit;


	            var pipeline = this.pipeline();

	            if (method === "zero" || method === "pad") {
	                pipeline = pipeline.fill({ fieldSpec: fieldSpec, method: method, limit: limit });
	            } else if (method === "linear" && _underscore2.default.isArray(fieldSpec)) {
	                fieldSpec.forEach(function (fieldPath) {
	                    pipeline = pipeline.fill({
	                        fieldSpec: fieldPath,
	                        method: method,
	                        limit: limit
	                    });
	                });
	            } else {
	                throw new Error("Invalid fill method:", method);
	            }

	            var collections = pipeline.toKeyedCollections();

	            return this.setCollection(collections["all"], true);
	        }

	        /**
	         * Align event values to regular time boundaries. The value at
	         * the boundary is interpolated. Only the new interpolated
	         * points are returned. If limit is reached nulls will be
	         * returned at each boundary position.
	         *
	         * One use case for this is to modify irregular data (i.e. data
	         * that falls at slightly irregular times) so that it falls into a
	         * sequence of evenly spaced values. We use this to take data we
	         * get from the network which is approximately every 30 second
	         * (:32, 1:02, 1:34, ...) and output data on exact 30 second
	         * boundaries (:30, 1:00, 1:30, ...).
	         *
	         * Another use case is data that might be already aligned to
	         * some regular interval, but that contains missing points.
	         * While `fill()` can be used to replace `null` values, `align()`
	         * can be used to add in missing points completely. Those points
	         * can have an interpolated value, or by setting limit to 0,
	         * can be filled with nulls. This is really useful when downstream
	         * processing depends on complete sequences.
	         *
	         * @example
	         * ```
	         * const aligned = ts.align({
	         *     fieldSpec: "value",
	         *     period: "1m",
	         *     method: "linear"
	         * });
	         * ```
	         *
	         * @param                options                An object containing options:
	         * @param {string|array} options.fieldSpec      Column or columns to align. If you need to
	         *                                              retrieve multiple deep nested values
	         *                                              that ['can.be', 'done.with', 'this.notation'].
	         *                                              A single deep value with a string.like.this.
	         * @param {string}       options.period         Spacing of aligned values. e.g. "6h" or "5m"
	         * @param {string}       options.method         "linear" or "pad" style interpolation to boundaries.
	         * @param {number}       options.limit          The maximum number of points which should be
	         *                                              interpolated onto boundaries. You might set this to
	         *                                              2 if you are willing to interpolate 2 new points,
	         *                                              and then beyond that just emit nulls on the boundaries.
	         *
	         * @return {TimeSeries}     The resulting aligned TimeSeries
	         */

	    }, {
	        key: "align",
	        value: function align(options) {
	            var _options$fieldSpec2 = options.fieldSpec,
	                fieldSpec = _options$fieldSpec2 === undefined ? "value" : _options$fieldSpec2,
	                _options$period = options.period,
	                period = _options$period === undefined ? "5m" : _options$period,
	                _options$method2 = options.method,
	                method = _options$method2 === undefined ? "linear" : _options$method2,
	                _options$limit2 = options.limit,
	                limit = _options$limit2 === undefined ? null : _options$limit2;

	            var collection$$1 = this.pipeline().align(fieldSpec, period, method, limit).toKeyedCollections();

	            return this.setCollection(collection$$1["all"], true);
	        }

	        /**
	         * Returns the derivative of the TimeSeries for the given columns. The result will
	         * be per second. Optionally you can substitute in `null` values if the rate
	         * is negative. This is useful when a negative rate would be considered invalid.
	         *
	         * @param                options                An object containing options:
	         * @param {string|array} options.fieldSpec      Column or columns to get the rate of. If you
	         *                                              need to retrieve multiple deep nested values
	         *                                              that ['can.be', 'done.with', 'this.notation'].
	         * @param {bool}         options.allowNegative  Will output null values for negative rates.
	         *                                              This is useful if you are getting the rate
	         *                                              of a counter that always goes up, except
	         *                                              when perhaps it rolls around or resets.
	         *
	         * @return {TimeSeries}                         The resulting `TimeSeries` containing calculated rates.
	         */

	    }, {
	        key: "rate",
	        value: function rate() {
	            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	            var _options$fieldSpec3 = options.fieldSpec,
	                fieldSpec = _options$fieldSpec3 === undefined ? "value" : _options$fieldSpec3,
	                _options$allowNegativ = options.allowNegative,
	                allowNegative = _options$allowNegativ === undefined ? true : _options$allowNegativ;

	            var collection$$1 = this.pipeline().rate(fieldSpec, allowNegative).toKeyedCollections();

	            return this.setCollection(collection$$1["all"], true);
	        }

	        /**
	         * Builds a new TimeSeries by dividing events within the TimeSeries
	         * across multiple fixed windows of size `windowSize`.
	         *
	         * Note that these are windows defined relative to Jan 1st, 1970,
	         * and are UTC, so this is best suited to smaller window sizes
	         * (hourly, 5m, 30s, 1s etc), or in situations where you don't care
	         * about the specific window, just that the data is smaller.
	         *
	         * Each window then has an aggregation specification applied as
	         * `aggregation`. This specification describes a mapping of output
	         * fieldNames to aggregation functions and their fieldPath. For example:
	         * ```
	         * { in_avg: { in: avg() }, out_avg: { out: avg() } }
	         * ```
	         * will aggregate both "in" and "out" using the average aggregation
	         * function and return the result as in_avg and out_avg.
	         * 
	         * Note that each aggregation function, such as `avg()` also can take a
	         * filter function to apply before the aggregation. A set of filter functions
	         * exists to do common data cleanup such as removing bad values. For example:
	         * ```
	         * { value_avg: { value: avg(filter.ignoreMissing) } }
	         * ```
	         *
	         * @example
	         * ```
	         *     const timeseries = new TimeSeries(data);
	         *     const dailyAvg = timeseries.fixedWindowRollup({
	         *         windowSize: "1d",
	         *         aggregation: {value: {value: avg()}}
	         *     });
	         * ```
	         *
	         * @param                options                An object containing options:
	         * @param {string}       options.windowSize     The size of the window. e.g. "6h" or "5m"
	         * @param {object}       options.aggregation    The aggregation specification (see description above)
	         * @param {bool}         options.toTimeEvents   Output as `TimeEvent`s, rather than `IndexedEvent`s
	         * @return {TimeSeries}                         The resulting rolled up `TimeSeries`
	         */

	    }, {
	        key: "fixedWindowRollup",
	        value: function fixedWindowRollup(options) {
	            var windowSize = options.windowSize,
	                aggregation = options.aggregation,
	                _options$toTimeEvents = options.toTimeEvents,
	                toTimeEvents = _options$toTimeEvents === undefined ? false : _options$toTimeEvents;

	            if (!windowSize) {
	                throw new Error("windowSize must be supplied, for example '5m' for five minute rollups");
	            }

	            if (!aggregation || !_underscore2.default.isObject(aggregation)) {
	                throw new Error("aggregation object must be supplied, for example: {value: {value: avg()}}");
	            }

	            var aggregatorPipeline = this.pipeline().windowBy(windowSize).emitOn("discard").aggregate(aggregation);

	            var eventTypePipeline = toTimeEvents ? aggregatorPipeline.asTimeEvents() : aggregatorPipeline;

	            var collections = eventTypePipeline.clearWindow().toKeyedCollections();

	            return this.setCollection(collections["all"], true);
	        }

	        /**
	         * Builds a new TimeSeries by dividing events into hours.
	         *
	         * Each window then has an aggregation specification `aggregation`
	         * applied. This specification describes a mapping of output
	         * fieldNames to aggregation functions and their fieldPath. For example:
	         * ```
	         * {in_avg: {in: avg()}, out_avg: {out: avg()}}
	         * ```
	         *
	         * @param                options                An object containing options:
	         * @param {bool}         options.toTimeEvents   Convert the rollup events to `TimeEvent`s, otherwise it
	         *                                              will be returned as a `TimeSeries` of `IndexedEvent`s.
	         * @param {object}       options.aggregation    The aggregation specification (see description above)
	         *
	         * @return {TimeSeries}     The resulting rolled up TimeSeries
	         */

	    }, {
	        key: "hourlyRollup",
	        value: function hourlyRollup(options) {
	            var aggregation = options.aggregation,
	                _options$toTimeEvents2 = options.toTimeEvents,
	                toTimeEvents = _options$toTimeEvents2 === undefined ? false : _options$toTimeEvents2;


	            if (!aggregation || !_underscore2.default.isObject(aggregation)) {
	                throw new Error("aggregation object must be supplied, for example: {value: {value: avg()}}");
	            }

	            return this.fixedWindowRollup("1h", aggregation, toTimeEvents);
	        }

	        /**
	         * Builds a new TimeSeries by dividing events into days.
	         *
	         * Each window then has an aggregation specification `aggregation`
	         * applied. This specification describes a mapping of output
	         * fieldNames to aggregation functions and their fieldPath. For example:
	         * ```
	         * {in_avg: {in: avg()}, out_avg: {out: avg()}}
	         * ```
	         *
	         * @param                options                An object containing options:
	         * @param {bool}         options.toTimeEvents   Convert the rollup events to `TimeEvent`s, otherwise it
	         *                                              will be returned as a `TimeSeries` of `IndexedEvent`s.
	         * @param {object}       options.aggregation    The aggregation specification (see description above)
	         *
	         * @return {TimeSeries}     The resulting rolled up TimeSeries
	         */

	    }, {
	        key: "dailyRollup",
	        value: function dailyRollup(options) {
	            var aggregation = options.aggregation,
	                _options$toTimeEvents3 = options.toTimeEvents,
	                toTimeEvents = _options$toTimeEvents3 === undefined ? false : _options$toTimeEvents3;


	            if (!aggregation || !_underscore2.default.isObject(aggregation)) {
	                throw new Error("aggregation object must be supplied, for example: {value: {value: avg()}}");
	            }

	            return this._rollup("daily", aggregation, toTimeEvents);
	        }

	        /**
	         * Builds a new TimeSeries by dividing events into months.
	         *
	         * Each window then has an aggregation specification `aggregation`
	         * applied. This specification describes a mapping of output
	         * fieldNames to aggregation functions and their fieldPath. For example:
	         * ```
	         * {in_avg: {in: avg()}, out_avg: {out: avg()}}
	         * ```
	         *
	         * @param                options                An object containing options:
	         * @param {bool}         options.toTimeEvents   Convert the rollup events to `TimeEvent`s, otherwise it
	         *                                              will be returned as a `TimeSeries` of `IndexedEvent`s.
	         * @param {object}       options.aggregation    The aggregation specification (see description above)
	         *
	         * @return {TimeSeries}                         The resulting rolled up `TimeSeries`
	         */

	    }, {
	        key: "monthlyRollup",
	        value: function monthlyRollup(options) {
	            var aggregation = options.aggregation,
	                _options$toTimeEvents4 = options.toTimeEvents,
	                toTimeEvents = _options$toTimeEvents4 === undefined ? false : _options$toTimeEvents4;


	            if (!aggregation || !_underscore2.default.isObject(aggregation)) {
	                throw new Error("aggregation object must be supplied, for example: {value: {value: avg()}}");
	            }

	            return this._rollup("monthly", aggregation, toTimeEvents);
	        }

	        /**
	         * Builds a new TimeSeries by dividing events into years.
	         *
	         * Each window then has an aggregation specification `aggregation`
	         * applied. This specification describes a mapping of output
	         * fieldNames to aggregation functions and their fieldPath. For example:
	         *
	         * ```
	         * {in_avg: {in: avg()}, out_avg: {out: avg()}}
	         * ```
	         *
	         * @param                options                An object containing options:
	         * @param {bool}         options.toTimeEvents   Convert the rollup events to `TimeEvent`s, otherwise it
	         *                                              will be returned as a `TimeSeries` of `IndexedEvent`s.
	         * @param {object}       options.aggregation    The aggregation specification (see description above)
	         *
	         * @return {TimeSeries}                         The resulting rolled up `TimeSeries`
	         */

	    }, {
	        key: "yearlyRollup",
	        value: function yearlyRollup(options) {
	            var aggregation = options.aggregation,
	                _options$toTimeEvents5 = options.toTimeEvents,
	                toTimeEvents = _options$toTimeEvents5 === undefined ? false : _options$toTimeEvents5;


	            if (!aggregation || !_underscore2.default.isObject(aggregation)) {
	                throw new Error("aggregation object must be supplied, for example: {value: {value: avg()}}");
	            }

	            return this._rollup("yearly", aggregation, toTimeEvents);
	        }

	        /**
	         * @private
	         *
	         * Internal function to build the TimeSeries rollup functions using
	         * an aggregator Pipeline.
	         */

	    }, {
	        key: "_rollup",
	        value: function _rollup(type, aggregation) {
	            var toTimeEvents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	            var aggregatorPipeline = this.pipeline().windowBy(type).emitOn("discard").aggregate(aggregation);

	            var eventTypePipeline = toTimeEvents ? aggregatorPipeline.asTimeEvents() : aggregatorPipeline;

	            var collections = eventTypePipeline.clearWindow().toKeyedCollections();

	            return this.setCollection(collections["all"], true);
	        }

	        /**
	         * Builds multiple `Collection`s, each collects together
	         * events within a window of size `windowSize`. Note that these
	         * are windows defined relative to Jan 1st, 1970, and are UTC.
	         *
	         * @example
	         * ```
	         * const timeseries = new TimeSeries(data);
	         * const collections = timeseries.collectByFixedWindow({windowSize: "1d"});
	         * console.log(collections); // {1d-16314: Collection, 1d-16315: Collection, ...}
	         * ```
	         *
	         * @param                options                An object containing options:
	         * @param {bool}         options.windowSize     The size of the window. e.g. "6h" or "5m"
	         *
	         * @return {map}    The result is a mapping from window index to a Collection.
	         */

	    }, {
	        key: "collectByFixedWindow",
	        value: function collectByFixedWindow(_ref) {
	            var windowSize = _ref.windowSize;

	            return this.pipeline().windowBy(windowSize).emitOn("discard").toKeyedCollections();
	        }

	        /*
	         * STATIC
	         */
	        /**
	          * Defines the event type contained in this TimeSeries. The default here
	          * is to use the supplied type (time, timerange or index) to build either
	          * a TimeEvent, TimeRangeEvent or IndexedEvent. However, you can also
	          * subclass the TimeSeries and reimplement this to return another event
	          * type.
	          */

	    }], [{
	        key: "event",
	        value: function event$$1(eventKey) {
	            switch (eventKey) {
	                case "time":
	                    return _timeevent2.default;
	                case "timerange":
	                    return _timerangeevent2.default;
	                case "index":
	                    return _indexedevent2.default;
	                default:
	                    throw new Error("Unknown event type: " + eventKey);
	            }
	        }

	        /**
	          * Static function to compare two TimeSeries to each other. If the TimeSeries
	          * are of the same instance as each other then equals will return true.
	          * @param  {TimeSeries} series1
	          * @param  {TimeSeries} series2
	          * @return {bool} result
	          */

	    }, {
	        key: "equal",
	        value: function equal(series1, series2) {
	            return series1._data === series2._data && series1._collection === series2._collection;
	        }

	        /**
	          * Static function to compare two TimeSeries to each other. If the TimeSeries
	          * are of the same value as each other then equals will return true.
	          * @param  {TimeSeries} series1
	          * @param  {TimeSeries} series2
	          * @return {bool} result
	          */

	    }, {
	        key: "is",
	        value: function is(series1, series2) {
	            return _immutable2.default.is(series1._data, series2._data) && _collection2.default.is(series1._collection, series2._collection);
	        }

	        /**
	         * Reduces a list of TimeSeries objects using a reducer function. This works
	         * by taking each event in each TimeSeries and collecting them together
	         * based on timestamp. All events for a given time are then merged together
	         * using the reducer function to produce a new event. The reducer function is
	         * applied to all columns in the fieldSpec. Those new events are then
	         * collected together to form a new TimeSeries.
	         *
	         * @example
	         *
	         * For example you might have three TimeSeries with columns "in" and "out" which
	         * corresponds to two measurements per timestamp. You could use this function to
	         * obtain a new TimeSeries which was the sum of the the three measurements using
	         * the `sum()` reducer function and an ["in", "out"] fieldSpec.
	         *
	         * ```
	         * const totalSeries = TimeSeries.timeSeriesListReduce({
	         *     name: "totals",
	         *     seriesList: [inTraffic, outTraffic],
	         *     reducer: sum(),
	         *     fieldSpec: [ "in", "out" ]
	         * });
	         * ```
	         *
	         * @param                  options                An object containing options. Additional key
	         *                                                values in the options will be added as meta data
	         *                                                to the resulting TimeSeries.
	         * @param {array}          options.seriesList     A list of `TimeSeries` (required)
	         * @param {function}       options.reducer        The reducer function e.g. `max()` (required)
	         * @param {array | string} options.fieldSpec      Column or columns to reduce. If you
	         *                                                need to retrieve multiple deep
	         *                                                nested values that ['can.be', 'done.with',
	         *                                                'this.notation']. A single deep value with a
	         *                                                string.like.this.
	         *
	         * @return {TimeSeries}                           The reduced TimeSeries
	         */

	    }, {
	        key: "timeSeriesListReduce",
	        value: function timeSeriesListReduce(options) {
	            var fieldSpec = options.fieldSpec,
	                reducer = options.reducer,
	                data = (0, _objectWithoutProperties3.default)(options, ["fieldSpec", "reducer"]);

	            var combiner = _event2.default.combiner(fieldSpec, reducer);
	            return TimeSeries.timeSeriesListEventReduce((0, _extends3.default)({
	                fieldSpec: fieldSpec,
	                reducer: combiner
	            }, data));
	        }

	        /**
	         * Takes a list of TimeSeries and merges them together to form a new
	         * Timeseries.
	         *
	         * Merging will produce a new Event;
	        only when events are conflict free, so
	         * it is useful in the following cases:
	         *  * to combine multiple TimeSeries which have different time ranges, essentially
	         *  concatenating them together
	         *  * combine TimeSeries which have different columns, for example inTraffic has
	         *  a column "in" and outTraffic has a column "out" and you want to produce a merged
	         *  trafficSeries with columns "in" and "out".
	         *
	         * @example
	         * ```
	         * const inTraffic = new TimeSeries(trafficDataIn);
	         * const outTraffic = new TimeSeries(trafficDataOut);
	         * const trafficSeries = TimeSeries.timeSeriesListMerge({
	         *     name: "traffic",
	         *     seriesList: [inTraffic, outTraffic]
	         * });
	         * ```
	         *
	         * @param                  options                An object containing options. Additional key
	         *                                                values in the options will be added as meta data
	         *                                                to the resulting TimeSeries.
	         * @param {array}          options.seriesList     A list of `TimeSeries` (required)
	         * @param {array | string} options.fieldSpec      Column or columns to merge. If you
	         *                                                need to retrieve multiple deep
	         *                                                nested values that ['can.be', 'done.with',
	         *                                                'this.notation']. A single deep value with a
	         *                                                string.like.this.
	         *
	         * @return {TimeSeries}                           The merged TimeSeries
	         */

	    }, {
	        key: "timeSeriesListMerge",
	        value: function timeSeriesListMerge(options) {
	            var fieldSpec = options.fieldSpec,
	                data = (0, _objectWithoutProperties3.default)(options, ["fieldSpec"]);

	            var merger = _event2.default.merger(fieldSpec);
	            return TimeSeries.timeSeriesListEventReduce((0, _extends3.default)({
	                fieldSpec: fieldSpec,
	                reducer: merger
	            }, data));
	        }

	        /**
	         * @private
	         */

	    }, {
	        key: "timeSeriesListEventReduce",
	        value: function timeSeriesListEventReduce(options) {
	            var seriesList = options.seriesList,
	                fieldSpec = options.fieldSpec,
	                reducer = options.reducer,
	                data = (0, _objectWithoutProperties3.default)(options, ["seriesList", "fieldSpec", "reducer"]);


	            if (!seriesList || !_underscore2.default.isArray(seriesList)) {
	                throw new Error("A list of TimeSeries must be supplied to reduce");
	            }

	            if (!reducer || !_underscore2.default.isFunction(reducer)) {
	                throw new Error("reducer function must be supplied, for example avg()");
	            }

	            // for each series, make a map from timestamp to the
	            // list of events with that timestamp
	            var eventList = [];
	            seriesList.forEach(function (series) {
	                var _iteratorNormalCompletion3 = true;
	                var _didIteratorError3 = false;
	                var _iteratorError3 = undefined;

	                try {
	                    for (var _iterator3 = (0, _getIterator3.default)(series.events()), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                        var event$$1 = _step3.value;

	                        eventList.push(event$$1);
	                    }
	                } catch (err) {
	                    _didIteratorError3 = true;
	                    _iteratorError3 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                            _iterator3.return();
	                        }
	                    } finally {
	                        if (_didIteratorError3) {
	                            throw _iteratorError3;
	                        }
	                    }
	                }
	            });

	            var events = reducer(eventList, fieldSpec);

	            // Make a collection. If the events are out of order, sort them.
	            // It's always possible that events are out of order here, depending
	            // on the start times of the series, along with it the series
	            // have missing data, so I think we don't have a choice here.
	            var collection$$1 = new _collection2.default(events);
	            if (!collection$$1.isChronological()) {
	                collection$$1 = collection$$1.sortByTime();
	            }

	            var timeseries = new TimeSeries((0, _extends3.default)({}, data, { collection: collection$$1 }));

	            return timeseries;
	        }
	    }]);
	    return TimeSeries;
	}();

	exports.default = TimeSeries;
	});

	unwrapExports(timeseries);

	var collector = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _keys2 = _interopRequireDefault(keys$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _collection2 = _interopRequireDefault(collection);



	var _index2 = _interopRequireDefault(lib$9);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A Collector is used to accumulate events into multiple collections,
	 * based on potentially many strategies. In this current implementation
	 * a collection is partitioned based on the window that it falls in
	 * and the group it is part of.
	 *
	 * Collections are emitted from this class to the supplied onTrigger
	 * callback.
	 */
	var Collector = function () {
	    function Collector(options, onTrigger) {
	        (0, _classCallCheck3.default)(this, Collector);
	        var windowType = options.windowType,
	            windowDuration = options.windowDuration,
	            groupBy = options.groupBy,
	            emitOn = options.emitOn;


	        this._groupBy = groupBy;
	        this._emitOn = emitOn;
	        this._windowType = windowType;
	        this._windowDuration = windowDuration;

	        // Callback for trigger
	        this._onTrigger = onTrigger;

	        // Maintained collections
	        this._collections = {};
	    }

	    (0, _createClass3.default)(Collector, [{
	        key: "flushCollections",
	        value: function flushCollections() {
	            this.emitCollections(this._collections);
	        }
	    }, {
	        key: "emitCollections",
	        value: function emitCollections(collections) {
	            var _this = this;

	            if (this._onTrigger) {
	                _underscore2.default.each(collections, function (c) {
	                    var collection$$1 = c.collection,
	                        windowKey = c.windowKey,
	                        groupByKey = c.groupByKey;

	                    _this._onTrigger && _this._onTrigger(collection$$1, windowKey, groupByKey);
	                });
	            }
	        }
	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            var _this2 = this;

	            var timestamp = event.timestamp();

	            //
	            // Window key
	            //
	            var windowType = this._windowType;
	            var windowKey = void 0;
	            if (windowType === "fixed") {
	                windowKey = _index2.default.getIndexString(this._windowDuration, timestamp);
	            } else if (windowType === "daily") {
	                windowKey = _index2.default.getDailyIndexString(timestamp);
	            } else if (windowType === "monthly") {
	                windowKey = _index2.default.getMonthlyIndexString(timestamp);
	            } else if (windowType === "yearly") {
	                windowKey = _index2.default.getYearlyIndexString(timestamp);
	            } else {
	                windowKey = windowType;
	            }

	            //
	            // Groupby key
	            //
	            var groupByKey = this._groupBy(event);

	            //
	            // Collection key
	            //
	            var collectionKey = groupByKey ? windowKey + "::" + groupByKey : windowKey;

	            var discard = false;
	            if (!_underscore2.default.has(this._collections, collectionKey)) {
	                this._collections[collectionKey] = {
	                    windowKey: windowKey,
	                    groupByKey: groupByKey,
	                    collection: new _collection2.default()
	                };
	                discard = true;
	            }
	            this._collections[collectionKey].collection = this._collections[collectionKey].collection.addEvent(event);

	            //
	            // If fixed windows, collect together old collections that
	            // will be discarded
	            //
	            var discards = {};
	            if (discard && windowType === "fixed") {
	                _underscore2.default.each(this._collections, function (c, k) {
	                    if (windowKey !== c.windowKey) {
	                        discards[k] = c;
	                    }
	                });
	            }

	            //
	            // Emit
	            //
	            var emitOn = this._emitOn;
	            if (emitOn === "eachEvent") {
	                this.emitCollections(this._collections);
	            } else if (emitOn === "discard") {
	                this.emitCollections(discards);
	                _underscore2.default.each((0, _keys2.default)(discards), function (k) {
	                    delete _this2._collections[k];
	                });
	            } else if (emitOn === "flush") {
	                // pass
	            } else {
	                throw new Error("Unknown emit type supplied to Collector");
	            }
	        }
	    }]);
	    return Collector;
	}(); /*
	      *  Copyright (c) 2016-2017, The Regents of the University of California,
	      *  through Lawrence Berkeley National Laboratory (subject to receipt
	      *  of any required approvals from the U.S. Dept. of Energy).
	      *  All rights reserved.
	      *
	      *  This source code is licensed under the BSD-style license found in the
	      *  LICENSE file in the root directory of this source tree.
	      */

	exports.default = Collector;
	});

	unwrapExports(collector);

	var pipelineout = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _underscore2 = _interopRequireDefault(underscore);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var PipelineOut = function PipelineOut(pipeline) {
	    (0, _classCallCheck3.default)(this, PipelineOut);

	    this._id = _underscore2.default.uniqueId("id-");
	    this._pipeline = pipeline;
	}; /**
	    *  Copyright (c) 2016-2017, The Regents of the University of California,
	    *  through Lawrence Berkeley National Laboratory (subject to receipt
	    *  of any required approvals from the U.S. Dept. of Energy).
	    *  All rights reserved.
	    *
	    *  This source code is licensed under the BSD-style license found in the
	    *  LICENSE file in the root directory of this source tree.
	    */

	exports.default = PipelineOut;
	});

	unwrapExports(pipelineout);

	var collectionout = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _collector2 = _interopRequireDefault(collector);



	var _pipelineout2 = _interopRequireDefault(pipelineout);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var CollectionOut = function (_PipelineOut) {
	    (0, _inherits3.default)(CollectionOut, _PipelineOut);

	    function CollectionOut(pipeline, options, callback) {
	        (0, _classCallCheck3.default)(this, CollectionOut);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (CollectionOut.__proto__ || (0, _getPrototypeOf2.default)(CollectionOut)).call(this, pipeline));

	        _this._callback = callback;
	        _this._collector = new _collector2.default({
	            windowType: pipeline.getWindowType(),
	            windowDuration: pipeline.getWindowDuration(),
	            groupBy: pipeline.getGroupBy(),
	            emitOn: pipeline.getEmitOn()
	        }, function (collection, windowKey, groupByKey) {
	            var groupBy = groupByKey ? groupByKey : "all";
	            if (_this._callback) {
	                _this._callback(collection, windowKey, groupBy);
	            } else {
	                var keys = [];
	                if (windowKey !== "global") {
	                    keys.push(windowKey);
	                }
	                if (groupBy !== "all") {
	                    keys.push(groupBy);
	                }
	                var k = keys.length > 0 ? keys.join("--") : "all";
	                _this._pipeline.addResult(k, collection);
	            }
	        });
	        return _this;
	    }

	    (0, _createClass3.default)(CollectionOut, [{
	        key: "addEvent",
	        value: function addEvent(event) {
	            this._collector.addEvent(event);
	        }
	    }, {
	        key: "onEmit",
	        value: function onEmit(cb) {
	            this._callback = cb;
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            this._collector.flushCollections();
	            if (!this._callback) {
	                this._pipeline.resultsDone();
	            }
	        }
	    }]);
	    return CollectionOut;
	}(_pipelineout2.default);

	exports.default = CollectionOut;
	});

	unwrapExports(collectionout);

	var eventout = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _pipelineout2 = _interopRequireDefault(pipelineout);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var EventOut = function (_PipelineOut) {
	    (0, _inherits3.default)(EventOut, _PipelineOut);

	    function EventOut(pipeline, options, callback) {
	        (0, _classCallCheck3.default)(this, EventOut);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (EventOut.__proto__ || (0, _getPrototypeOf2.default)(EventOut)).call(this, pipeline));

	        _this._callback = callback;
	        return _this;
	    }

	    (0, _createClass3.default)(EventOut, [{
	        key: "addEvent",
	        value: function addEvent(event) {
	            if (this._callback) {
	                this._callback(event);
	            } else {
	                this._pipeline.addResult(event);
	            }
	        }
	    }, {
	        key: "onEmit",
	        value: function onEmit(cb) {
	            this._callback = cb;
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            if (!this._callback) {
	                this._pipeline.resultsDone();
	            }
	        }
	    }]);
	    return EventOut;
	}(_pipelineout2.default); /**
	                           *  Copyright (c) 2016-2017, The Regents of the University of California,
	                           *  through Lawrence Berkeley National Laboratory (subject to receipt
	                           *  of any required approvals from the U.S. Dept. of Energy).
	                           *  All rights reserved.
	                           *
	                           *  This source code is licensed under the BSD-style license found in the
	                           *  LICENSE file in the root directory of this source tree.
	                           */

	exports.default = EventOut;
	});

	unwrapExports(eventout);

	var stream = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _regenerator2 = _interopRequireDefault(regenerator);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _pipelinein2 = _interopRequireDefault(pipelinein);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var Stream = function (_PipelineIn) {
	    (0, _inherits3.default)(Stream, _PipelineIn);

	    function Stream() {
	        (0, _classCallCheck3.default)(this, Stream);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Stream.__proto__ || (0, _getPrototypeOf2.default)(Stream)).call(this));

	        _this._running = true;
	        return _this;
	    }

	    /**
	     * Start listening to events
	     */


	    (0, _createClass3.default)(Stream, [{
	        key: "start",
	        value: function start() {
	            this._running = true;
	        }

	        /**
	         * Stop listening to events
	         */

	    }, {
	        key: "stop",
	        value: function stop() {
	            this._running = false;
	            this.flush(); // emit a flush to let processors cleanly exit.
	        }

	        /**
	         * Add an incoming event to the source
	         */

	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            this._check(event);
	            if (this.hasObservers() && this._running) {
	                this.emit(event);
	            }
	        }
	    }, {
	        key: "events",
	        value: _regenerator2.default.mark(function events() {
	            return _regenerator2.default.wrap(function events$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            throw new Error("Iteration across unbounded sources is not supported.");

	                        case 1:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, events, this);
	        })
	    }]);
	    return Stream;
	}(_pipelinein2.default); /**
	                          *  Copyright (c) 2016-2017, The Regents of the University of California,
	                          *  through Lawrence Berkeley National Laboratory (subject to receipt
	                          *  of any required approvals from the U.S. Dept. of Energy).
	                          *  All rights reserved.
	                          *
	                          *  This source code is licensed under the BSD-style license found in the
	                          *  LICENSE file in the root directory of this source tree.
	                          */

	exports.default = Stream;
	});

	unwrapExports(stream);

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

	var $getOwnPropertyDescriptor$1 = _objectGopd.f;

	_objectSap('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor$1(_toIobject(it), key);
	  };
	});

	var $Object$2 = _core.Object;
	var getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  return $Object$2.getOwnPropertyDescriptor(it, key);
	};

	var getOwnPropertyDescriptor$1 = createCommonjsModule(function (module) {
	module.exports = { "default": getOwnPropertyDescriptor, __esModule: true };
	});

	unwrapExports(getOwnPropertyDescriptor$1);

	var get$4 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _getOwnPropertyDescriptor2 = _interopRequireDefault(getOwnPropertyDescriptor$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function get(object, property, receiver) {
	  if (object === null) object = Function.prototype;
	  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

	  if (desc === undefined) {
	    var parent = (0, _getPrototypeOf2.default)(object);

	    if (parent === null) {
	      return undefined;
	    } else {
	      return get(parent, property, receiver);
	    }
	  } else if ("value" in desc) {
	    return desc.value;
	  } else {
	    var getter = desc.get;

	    if (getter === undefined) {
	      return undefined;
	    }

	    return getter.call(receiver);
	  }
	};
	});

	unwrapExports(get$4);

	var processor = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _get3 = _interopRequireDefault(get$4);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _observable2 = _interopRequireDefault(observable);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	function addPrevToChain(n, chain) {
	    chain.push(n);
	    if ((0, pipeline_1.isPipeline)(n.prev())) {
	        chain.push(n.prev().in());
	        return chain;
	    } else {
	        return addPrevToChain(n.prev(), chain);
	    }
	}

	/**
	 * Base class for all Pipeline processors
	 */

	var Processor = function (_Observable) {
	    (0, _inherits3.default)(Processor, _Observable);

	    function Processor(arg1, options) {
	        (0, _classCallCheck3.default)(this, Processor);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Processor.__proto__ || (0, _getPrototypeOf2.default)(Processor)).call(this));

	        if ((0, pipeline_1.isPipeline)(arg1)) {
	            _this._pipeline = arg1;
	            _this._prev = options.prev;
	        }
	        return _this;
	    }

	    (0, _createClass3.default)(Processor, [{
	        key: "prev",
	        value: function prev() {
	            return this._prev;
	        }
	    }, {
	        key: "pipeline",
	        value: function pipeline() {
	            return this._pipeline;
	        }
	    }, {
	        key: "chain",
	        value: function chain() {
	            var chain = [this];
	            if ((0, pipeline_1.isPipeline)(this.prev())) {
	                chain.push(this.prev().in());
	                return chain;
	            } else {
	                return addPrevToChain(this.prev(), chain);
	            }
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            (0, _get3.default)(Processor.prototype.__proto__ || (0, _getPrototypeOf2.default)(Processor.prototype), "flush", this).call(this);
	        }
	    }]);
	    return Processor;
	}(_observable2.default);

	exports.default = Processor;
	});

	unwrapExports(processor);

	var aggregator = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _keys2 = _interopRequireDefault(keys$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _get3 = _interopRequireDefault(get$4);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _processor2 = _interopRequireDefault(processor);



	var _collector2 = _interopRequireDefault(collector);



	var _indexedevent2 = _interopRequireDefault(indexedevent);



	var _timerangeevent2 = _interopRequireDefault(timerangeevent);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * An Aggregator takes incoming events and adds them to a Collector
	 * with given windowing and grouping parameters. As each Collection is
	 * emitted from the Collector it is aggregated into a new event
	 * and emitted from this Processor.
	 */
	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var Aggregator = function (_Processor) {
	    (0, _inherits3.default)(Aggregator, _Processor);

	    function Aggregator(arg1, options) {
	        (0, _classCallCheck3.default)(this, Aggregator);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Aggregator.__proto__ || (0, _getPrototypeOf2.default)(Aggregator)).call(this, arg1, options));

	        if (arg1 instanceof Aggregator) {
	            var other = arg1;

	            _this._fields = other._fields;
	            _this._windowType = other._windowType;
	            _this._windowDuration = other._windowDuration;
	            _this._groupBy = other._groupBy;
	            _this._emitOn = other._emitOn;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            var pipeline = arg1;

	            _this._windowType = pipeline.getWindowType();
	            _this._windowDuration = pipeline.getWindowDuration();
	            _this._groupBy = pipeline.getGroupBy();
	            _this._emitOn = pipeline.getEmitOn();

	            if (!_underscore2.default.has(options, "fields")) {
	                throw new Error("Aggregator: constructor needs an aggregator field mapping");
	            }

	            // Check each of the aggregator -> field mappings
	            _underscore2.default.forEach(options.fields, function (operator, field) {
	                // Field should either be an array or a string
	                if (!_underscore2.default.isString(field) && !_underscore2.default.isArray(field)) {
	                    throw new Error("Aggregator: field of unknown type: " + field);
	                }
	            });

	            if (pipeline.mode() === "stream") {
	                if (!pipeline.getWindowType() || !pipeline.getWindowDuration()) {
	                    throw new Error("Unable to aggregate because no windowing strategy was specified in pipeline");
	                }
	            }
	            _this._fields = options.fields;
	        } else {
	            throw new Error("Unknown arg to Filter constructor", arg1);
	        }

	        _this._collector = new _collector2.default({
	            windowType: _this._windowType,
	            windowDuration: _this._windowDuration,
	            groupBy: _this._groupBy,
	            emitOn: _this._emitOn
	        }, function (collection, windowKey, groupByKey) {
	            return _this.handleTrigger(collection, windowKey, groupByKey);
	        });
	        return _this;
	    }

	    (0, _createClass3.default)(Aggregator, [{
	        key: "clone",
	        value: function clone() {
	            return new Aggregator(this);
	        }
	    }, {
	        key: "handleTrigger",
	        value: function handleTrigger(collection, windowKey) {
	            var d = {};
	            _underscore2.default.each(this._fields, function (f, fieldName) {
	                var keys = (0, _keys2.default)(f);
	                if (keys.length !== 1) {
	                    throw new Error("Fields should contain exactly one field", f);
	                }
	                var field = keys[0];
	                var operator = f[field];

	                d[fieldName] = collection.aggregate(operator, field);
	            });

	            var event = void 0;
	            if (windowKey === "global") {
	                event = new _timerangeevent2.default(collection.range(), d);
	            } else {
	                //TODO: Specify UTC (or local) pipeline
	                var utc = this._windowType === "fixed";
	                event = new _indexedevent2.default(windowKey, d, utc);
	            }

	            this.emit(event);
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            this._collector.flushCollections();
	            (0, _get3.default)(Aggregator.prototype.__proto__ || (0, _getPrototypeOf2.default)(Aggregator.prototype), "flush", this).call(this);
	        }
	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            if (this.hasObservers()) {
	                this._collector.addEvent(event);
	            }
	        }
	    }]);
	    return Aggregator;
	}(_processor2.default);

	exports.default = Aggregator;
	});

	unwrapExports(aggregator);

	// 20.1.2.3 Number.isInteger(number)

	var floor$1 = Math.floor;
	var _isInteger = function isInteger(it) {
	  return !_isObject(it) && isFinite(it) && floor$1(it) === it;
	};

	// 20.1.2.3 Number.isInteger(number)


	_export(_export.S, 'Number', { isInteger: _isInteger });

	var isInteger = _core.Number.isInteger;

	var isInteger$1 = createCommonjsModule(function (module) {
	module.exports = { "default": isInteger, __esModule: true };
	});

	unwrapExports(isInteger$1);

	var aligner = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _isInteger2 = _interopRequireDefault(isInteger$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _immutable2 = _interopRequireDefault(immutable);



	var _index2 = _interopRequireDefault(lib$9);



	var _indexedevent2 = _interopRequireDefault(indexedevent);



	var _processor2 = _interopRequireDefault(processor);



	var _timeevent2 = _interopRequireDefault(timeevent);



	var _timerange2 = _interopRequireDefault(timerange);



	var _timerangeevent2 = _interopRequireDefault(timerangeevent);





	var _util2 = _interopRequireDefault(util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A processor to align the data into bins of regular time period.
	 */
	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	/*eslint no-console: 0 */

	var Aligner = function (_Processor) {
	    (0, _inherits3.default)(Aligner, _Processor);

	    function Aligner(arg1, options) {
	        (0, _classCallCheck3.default)(this, Aligner);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Aligner.__proto__ || (0, _getPrototypeOf2.default)(Aligner)).call(this, arg1, options));

	        if (arg1 instanceof Aligner) {
	            var other = arg1;
	            _this._fieldSpec = other._fieldSpec;
	            _this._window = other._window;
	            _this._method = other._method;
	            _this._limit = other._limit;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            var fieldSpec = options.fieldSpec,
	                window = options.window,
	                _options$method = options.method,
	                method = _options$method === undefined ? "hold" : _options$method,
	                _options$limit = options.limit,
	                limit = _options$limit === undefined ? null : _options$limit;


	            _this._fieldSpec = fieldSpec;
	            _this._window = window;
	            _this._method = method;
	            _this._limit = limit;
	        } else {
	            throw new Error("Unknown arg to Aligner constructor", arg1);
	        }

	        //
	        // Internal members
	        //
	        _this._previous = null;

	        // work out field specs
	        if (_underscore2.default.isString(_this._fieldSpec)) {
	            _this._fieldSpec = [_this._fieldSpec];
	        }

	        // check input of method
	        if (!_underscore2.default.contains(["linear", "hold"], _this._method)) {
	            throw new Error("Unknown method '" + _this._method + "' passed to Aligner");
	        }

	        // check limit
	        if (_this._limit && !(0, _isInteger2.default)(_this._limit)) {
	            throw new Error("Limit passed to Aligner is not an integer");
	        }
	        return _this;
	    }

	    (0, _createClass3.default)(Aligner, [{
	        key: "clone",
	        value: function clone() {
	            return new Aligner(this);
	        }

	        /**
	         * Test to see if an event is perfectly aligned. Used on first event.
	         */

	    }, {
	        key: "isAligned",
	        value: function isAligned(event) {
	            var bound = _index2.default.getIndexString(this._window, event.timestamp());
	            return this.getBoundaryTime(bound) === event.timestamp().getTime();
	        }

	        /**
	         * Returns a list of indexes of window boundaries if the current
	         * event and the previous event do not lie in the same window. If
	         * they are in the same window, return an empty list.
	         */

	    }, {
	        key: "getBoundaries",
	        value: function getBoundaries(event) {
	            var prevIndex = _index2.default.getIndexString(this._window, this._previous.timestamp());
	            var currentIndex = _index2.default.getIndexString(this._window, event.timestamp());
	            if (prevIndex !== currentIndex) {
	                var range = new _timerange2.default(this._previous.timestamp(), event.timestamp());
	                return _index2.default.getIndexStringList(this._window, range).slice(1);
	            } else {
	                return [];
	            }
	        }

	        /**
	         * We are dealing in UTC only with the Index because the events
	         * all have internal timestamps in UTC and that's what we're
	         * aligning. Let the user display in local time if that's
	         * what they want.
	         */

	    }, {
	        key: "getBoundaryTime",
	        value: function getBoundaryTime(boundaryIndex) {
	            var index = new _index2.default(boundaryIndex);
	            return index.begin().getTime();
	        }

	        /**
	         * Generate a new event on the requested boundary and carry over the
	         * value from the previous event.
	         *
	         * A variation just sets the values to null, this is used when the
	         * limit is hit.
	         */

	    }, {
	        key: "interpolateHold",
	        value: function interpolateHold(boundary) {
	            var _this2 = this;

	            var setNone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	            var d = new _immutable2.default.Map();
	            var t = this.getBoundaryTime(boundary);
	            this._fieldSpec.forEach(function (path) {
	                var fieldPath = _util2.default.fieldPathToArray(path);
	                if (!setNone) {
	                    d = d.setIn(fieldPath, _this2._previous.get(fieldPath));
	                } else {
	                    d = d.setIn(fieldPath, null);
	                }
	            });
	            return new _timeevent2.default(t, d);
	        }

	        /**
	          * Generate a linear differential between two counter values that lie
	          * on either side of a window boundary.
	          */

	    }, {
	        key: "interpolateLinear",
	        value: function interpolateLinear(boundary, event) {
	            var _this3 = this;

	            var d = new _immutable2.default.Map();

	            var previousTime = this._previous.timestamp().getTime();
	            var boundaryTime = this.getBoundaryTime(boundary);
	            var currentTime = event.timestamp().getTime();

	            // This ratio will be the same for all values being processed
	            var f = (boundaryTime - previousTime) / (currentTime - previousTime);

	            this._fieldSpec.forEach(function (path) {
	                var fieldPath = _util2.default.fieldPathToArray(path);

	                //
	                // Generate the delta beteen the values and
	                // bulletproof against non-numeric or bad paths
	                //
	                var previousVal = _this3._previous.get(fieldPath);
	                var currentVal = event.get(fieldPath);

	                var interpolatedVal = null;
	                if (!_underscore2.default.isNumber(previousVal) || !_underscore2.default.isNumber(currentVal)) {
	                    console.warn("Path " + fieldPath + " contains a non-numeric value or does not exist");
	                } else {
	                    interpolatedVal = previousVal + f * (currentVal - previousVal);
	                }
	                d = d.setIn(fieldPath, interpolatedVal);
	            });

	            return new _timeevent2.default(boundaryTime, d);
	        }

	        /**
	         * Perform the fill operation on the event and emit.
	         */

	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            var _this4 = this;

	            if (event instanceof _timerangeevent2.default || event instanceof _indexedevent2.default) {
	                throw new Error("TimeRangeEvent and IndexedEvent series can not be aligned.");
	            }

	            if (this.hasObservers()) {
	                if (!this._previous) {
	                    this._previous = event;
	                    if (this.isAligned(event)) {
	                        this.emit(event);
	                    }
	                    return;
	                }

	                var boundaries = this.getBoundaries(event);

	                //
	                // If the returned list is not empty, interpolate an event
	                // on each of the boundaries and emit them
	                //
	                var count = boundaries.length;
	                boundaries.forEach(function (boundary) {
	                    var outputEvent = void 0;
	                    if (_this4._limit && count > _this4._limit) {
	                        outputEvent = _this4.interpolateHold(boundary, true);
	                    } else {
	                        if (_this4._method === "linear") {
	                            outputEvent = _this4.interpolateLinear(boundary, event);
	                        } else {
	                            outputEvent = _this4.interpolateHold(boundary);
	                        }
	                    }
	                    _this4.emit(outputEvent);
	                });

	                //
	                // The current event now becomes the previous event
	                //
	                this._previous = event;
	            }
	        }
	    }]);
	    return Aligner;
	}(_processor2.default);

	exports.default = Aligner;
	});

	unwrapExports(aligner);

	var collapser = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _processor2 = _interopRequireDefault(processor);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A processor which takes a fieldSpec and returns a new event
	 * with a new column that is a collapsed result of the selected
	 * columns. To collapse the columns it uses the supplied reducer
	 * function. Optionally the new column can completely replace
	 * the existing columns in the event.
	 */
	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var Collapser = function (_Processor) {
	    (0, _inherits3.default)(Collapser, _Processor);

	    function Collapser(arg1, options) {
	        (0, _classCallCheck3.default)(this, Collapser);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Collapser.__proto__ || (0, _getPrototypeOf2.default)(Collapser)).call(this, arg1, options));

	        if (arg1 instanceof Collapser) {
	            var other = arg1;
	            _this._fieldSpecList = other._fieldSpecList;
	            _this._name = other._name;
	            _this._reducer = other._reducer;
	            _this._append = other._append;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            _this._fieldSpecList = options.fieldSpecList;
	            _this._name = options.name;
	            _this._reducer = options.reducer;
	            _this._append = options.append;
	        } else {
	            throw new Error("Unknown arg to Collapser constructor", arg1);
	        }
	        return _this;
	    }

	    (0, _createClass3.default)(Collapser, [{
	        key: "clone",
	        value: function clone() {
	            return new Collapser(this);
	        }
	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            if (this.hasObservers()) {
	                this.emit(event.collapse(this._fieldSpecList, this._name, this._reducer, this._append));
	            }
	        }
	    }]);
	    return Collapser;
	}(_processor2.default);

	exports.default = Collapser;
	});

	unwrapExports(collapser);

	var converter = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _processor2 = _interopRequireDefault(processor);



	var _index2 = _interopRequireDefault(lib$9);



	var _timeevent2 = _interopRequireDefault(timeevent);



	var _indexedevent2 = _interopRequireDefault(indexedevent);



	var _timerange2 = _interopRequireDefault(timerange);



	var _timerangeevent2 = _interopRequireDefault(timerangeevent);





	var _util2 = _interopRequireDefault(util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function isSubclass(Base, X) {
	    return Base === X || X.prototype === Base;
	} /**
	   *  Copyright (c) 2016-2017, The Regents of the University of California,
	   *  through Lawrence Berkeley National Laboratory (subject to receipt
	   *  of any required approvals from the U.S. Dept. of Energy).
	   *  All rights reserved.
	   *
	   *  This source code is licensed under the BSD-style license found in the
	   *  LICENSE file in the root directory of this source tree.
	   */

	var Converter = function (_Processor) {
	    (0, _inherits3.default)(Converter, _Processor);

	    function Converter(arg1, options) {
	        (0, _classCallCheck3.default)(this, Converter);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Converter.__proto__ || (0, _getPrototypeOf2.default)(Converter)).call(this, arg1, options));

	        if (arg1 instanceof Converter) {
	            var other = arg1;
	            _this._convertTo = other._convertTo;
	            _this._duration = other._duration;
	            _this._durationString = other._durationString;
	            _this._alignment = other._alignment;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            if (!_underscore2.default.has(options, "type")) {
	                throw new Error("Converter: constructor needs 'type' in options");
	            }
	            if (isSubclass(_timeevent2.default, options.type)) {
	                _this._convertTo = options.type;
	            } else if (isSubclass(_timerangeevent2.default, options.type) || isSubclass(_indexedevent2.default, options.type)) {
	                _this._convertTo = options.type;
	                if (options.duration && _underscore2.default.isString(options.duration)) {
	                    _this._duration = _util2.default.windowDuration(options.duration);
	                    _this._durationString = options.duration;
	                }
	            } else {
	                throw Error("Unable to interpret type argument passed to Converter constructor");
	            }
	            _this._alignment = options.alignment || "center";
	        } else {
	            throw new Error("Unknown arg to Converter constructor", arg1);
	        }
	        return _this;
	    }

	    (0, _createClass3.default)(Converter, [{
	        key: "clone",
	        value: function clone() {
	            return new Converter(this);
	        }
	    }, {
	        key: "convertEvent",
	        value: function convertEvent(event) {
	            var T = this._convertTo;
	            if (isSubclass(_timeevent2.default, T)) {
	                return event;
	            } else if (isSubclass(_timerangeevent2.default, T)) {
	                var alignment = this._alignment;
	                var begin = void 0,
	                    end = void 0;
	                if (!this._duration) {
	                    throw new Error("Duration expected in converter");
	                }
	                switch (alignment) {
	                    case "front":
	                        begin = event.timestamp();
	                        end = new Date(+event.timestamp() + this._duration);
	                        break;
	                    case "center":
	                        begin = new Date(+event.timestamp() - parseInt(this._duration / 2, 10));
	                        end = new Date(+event.timestamp() + parseInt(this._duration / 2, 10));
	                        break;
	                    case "behind":
	                        end = event.timestamp();
	                        begin = new Date(+event.timestamp() - this._duration);
	                        break;
	                    default:
	                        throw new Error("Unknown alignment of converter");
	                }
	                var timeRange = new _timerange2.default([begin, end]);
	                return new T(timeRange, event.data());
	            } else if (isSubclass(_indexedevent2.default, T)) {
	                var timestamp = event.timestamp();
	                var indexString = _index2.default.getIndexString(this._durationString, timestamp);
	                return new this._convertTo(indexString, event.data(), null);
	            }
	        }
	    }, {
	        key: "convertTimeRangeEvent",
	        value: function convertTimeRangeEvent(event) {
	            var T = this._convertTo;
	            if (isSubclass(_timerangeevent2.default, T)) {
	                return event;
	            }
	            if (isSubclass(_timeevent2.default, T)) {
	                var alignment = this._alignment;
	                var beginTime = event.begin();
	                var endTime = event.end();
	                var timestamp = void 0;
	                switch (alignment) {
	                    case "lag":
	                        timestamp = beginTime;
	                        break;
	                    case "center":
	                        timestamp = new Date(parseInt((beginTime.getTime() + endTime.getTime()) / 2, 10));
	                        break;
	                    case "lead":
	                        timestamp = endTime;
	                        break;
	                }
	                return new T(timestamp, event.data());
	            }
	            if (isSubclass(_indexedevent2.default, T)) {
	                throw new Error("Cannot convert TimeRangeEvent to an IndexedEvent");
	            }
	        }
	    }, {
	        key: "convertIndexedEvent",
	        value: function convertIndexedEvent(event) {
	            var T = this._convertTo;
	            if (isSubclass(_indexedevent2.default, T)) {
	                return event;
	            }
	            if (isSubclass(_timeevent2.default, T)) {
	                var alignment = this._alignment;
	                var beginTime = event.begin();
	                var endTime = event.end();
	                var timestamp = void 0;
	                switch (alignment) {
	                    case "lag":
	                        timestamp = beginTime;
	                        break;
	                    case "center":
	                        timestamp = new Date(parseInt((beginTime.getTime() + endTime.getTime()) / 2, 10));
	                        break;
	                    case "lead":
	                        timestamp = endTime;
	                        break;
	                }
	                return new T(timestamp, event.data());
	            }
	            if (isSubclass(_timerangeevent2.default, T)) {
	                return new T(event.timerange(), event.data());
	            }
	        }

	        /**
	         * Output a converted event
	         */

	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            if (this.hasObservers()) {
	                var outputEvent = void 0;
	                if (event instanceof _timerangeevent2.default) {
	                    outputEvent = this.convertTimeRangeEvent(event);
	                } else if (event instanceof _indexedevent2.default) {
	                    outputEvent = this.convertIndexedEvent(event);
	                } else if (event instanceof _timeevent2.default) {
	                    outputEvent = this.convertEvent(event);
	                } else {
	                    throw new Error("Unknown event type received");
	                }
	                this.emit(outputEvent);
	            }
	        }
	    }]);
	    return Converter;
	}(_processor2.default);

	exports.default = Converter;
	});

	unwrapExports(converter);

	var derivator = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _immutable2 = _interopRequireDefault(immutable);



	var _processor2 = _interopRequireDefault(processor);



	var _indexedevent2 = _interopRequireDefault(indexedevent);



	var _timerangeevent2 = _interopRequireDefault(timerangeevent);





	var _util2 = _interopRequireDefault(util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Simple processor generate the Rate of two Event objects and
	 * emit them as a TimeRangeEvent. Can be used alone or chained
	 * with the Align processor for snmp rates, etc.
	 */
	var Derivator = function (_Processor) {
	    (0, _inherits3.default)(Derivator, _Processor);

	    function Derivator(arg1, options) {
	        (0, _classCallCheck3.default)(this, Derivator);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Derivator.__proto__ || (0, _getPrototypeOf2.default)(Derivator)).call(this, arg1, options));

	        if (arg1 instanceof Derivator) {
	            var other = arg1;
	            _this._fieldSpec = other._fieldSpec;
	            _this._allowNegative = other._allowNegative;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            var fieldSpec = options.fieldSpec,
	                allowNegative = options.allowNegative;

	            _this._fieldSpec = fieldSpec;
	            _this._allowNegative = allowNegative;
	        } else {
	            throw new Error("Unknown arg to Derivator constructor", arg1);
	        }

	        //
	        // Internal members
	        //
	        _this._previous = null;

	        // work out field specs
	        if (_underscore2.default.isString(_this._fieldSpec)) {
	            _this._fieldSpec = [_this._fieldSpec];
	        } else if (!_this._fieldSpec) {
	            _this._fieldSpec = ["value"];
	        }
	        return _this;
	    }

	    (0, _createClass3.default)(Derivator, [{
	        key: "clone",
	        value: function clone() {
	            return new Derivator(this);
	        }

	        /**
	         * Generate a new TimeRangeEvent containing the rate per second
	         * between two events.
	         */

	    }, {
	        key: "getRate",
	        value: function getRate(event) {
	            var _this2 = this;

	            var d = new _immutable2.default.Map();

	            var previousTime = this._previous.timestamp().getTime();
	            var currentTime = event.timestamp().getTime();
	            var deltaTime = (currentTime - previousTime) / 1000;

	            this._fieldSpec.forEach(function (path) {
	                var fieldPath = _util2.default.fieldPathToArray(path);
	                var ratePath = fieldPath.slice();
	                ratePath[ratePath.length - 1] += "_rate";

	                var previousVal = _this2._previous.get(fieldPath);
	                var currentVal = event.get(fieldPath);

	                var rate = null;
	                if (!_underscore2.default.isNumber(previousVal) || !_underscore2.default.isNumber(currentVal)) {
	                    console.warn("Path " + fieldPath + " contains a non-numeric value or does not exist");
	                } else {
	                    rate = (currentVal - previousVal) / deltaTime;
	                }

	                if (_this2._allowNegative === false && rate < 0) {
	                    // don't allow negative differentials in certain cases
	                    d = d.setIn(ratePath, null);
	                } else {
	                    d = d.setIn(ratePath, rate);
	                }
	            });

	            return new _timerangeevent2.default([previousTime, currentTime], d);
	        }

	        /**
	         * Perform the fill operation on the event and emit.
	         */

	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            if (event instanceof _timerangeevent2.default || event instanceof _indexedevent2.default) {
	                throw new Error("TimeRangeEvent and IndexedEvent series can not be aligned.");
	            }

	            if (this.hasObservers()) {
	                if (!this._previous) {
	                    this._previous = event;
	                    return;
	                }

	                var outputEvent = this.getRate(event);
	                this.emit(outputEvent);

	                // The current event now becomes the previous event
	                this._previous = event;
	            }
	        }
	    }]);
	    return Derivator;
	}(_processor2.default); /**
	                         *  Copyright (c) 2016-2017, The Regents of the University of California,
	                         *  through Lawrence Berkeley National Laboratory (subject to receipt
	                         *  of any required approvals from the U.S. Dept. of Energy).
	                         *  All rights reserved.
	                         *
	                         *  This source code is licensed under the BSD-style license found in the
	                         *  LICENSE file in the root directory of this source tree.
	                         */

	/*eslint no-console: 0 */

	exports.default = Derivator;
	});

	unwrapExports(derivator);

	var filler = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _toConsumableArray3 = _interopRequireDefault(toConsumableArray$1);



	var _getIterator3 = _interopRequireDefault(getIterator$1);



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _get3 = _interopRequireDefault(get$4);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _processor2 = _interopRequireDefault(processor);





	var _util2 = _interopRequireDefault(util);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A processor that fills missing/invalid values in the event with
	 * new values (zero, interpolated or padded).
	 *
	 * When doing a linear fill, Filler instances should be chained.
	 *
	 * If no fieldSpec is supplied, the default field "value" will be used.
	 */
	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	/*eslint no-console: 0 */

	var Filler = function (_Processor) {
	    (0, _inherits3.default)(Filler, _Processor);

	    function Filler(arg1, options) {
	        (0, _classCallCheck3.default)(this, Filler);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Filler.__proto__ || (0, _getPrototypeOf2.default)(Filler)).call(this, arg1, options));

	        if (arg1 instanceof Filler) {
	            var other = arg1;
	            _this._fieldSpec = other._fieldSpec;
	            _this._method = other._method;
	            _this._limit = other._limit;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            var _options$fieldSpec = options.fieldSpec,
	                fieldSpec = _options$fieldSpec === undefined ? null : _options$fieldSpec,
	                _options$method = options.method,
	                method = _options$method === undefined ? "zero" : _options$method,
	                _options$limit = options.limit,
	                limit = _options$limit === undefined ? null : _options$limit;

	            _this._fieldSpec = fieldSpec;
	            _this._method = method;
	            _this._limit = limit;
	        } else {
	            throw new Error("Unknown arg to Filler constructor", arg1);
	        }

	        //
	        // Internal members
	        //
	        // state for pad to refer to previous event
	        _this._previousEvent = null;

	        // key count for zero and pad fill
	        _this._keyCount = {};

	        // special state for linear fill
	        _this._lastGoodLinear = null;

	        // cache of events pending linear fill
	        _this._linearFillCache = [];

	        //
	        // Sanity checks
	        //
	        if (!_underscore2.default.contains(["zero", "pad", "linear"], _this._method)) {
	            throw new Error("Unknown method " + _this._method + " passed to Filler");
	        }

	        if (_this._limit && !_underscore2.default.isNumber(_this._limit)) {
	            throw new Error("Limit supplied to fill() should be a number");
	        }

	        if (_underscore2.default.isString(_this._fieldSpec)) {
	            _this._fieldSpec = [_this._fieldSpec];
	        } else if (_underscore2.default.isNull(_this._fieldSpec)) {
	            _this._fieldSpec = ["value"];
	        }

	        // Special case: when using linear mode, only a single
	        // column will be processed per instance
	        if (_this._method === "linear" && _this._fieldSpec.length > 1) {
	            throw new Error("Linear fill takes a path to a single column");
	        }
	        return _this;
	    }

	    (0, _createClass3.default)(Filler, [{
	        key: "clone",
	        value: function clone() {
	            return new Filler(this);
	        }

	        /**
	         * Process and fill the values at the paths as apropos when the fill
	         * method is either pad or zero.
	         */

	    }, {
	        key: "constFill",
	        value: function constFill(data) {
	            var newData = data;

	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = (0, _getIterator3.default)(this._fieldSpec), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var path = _step.value;

	                    var fieldPath = _util2.default.fieldPathToArray(path);
	                    var pathKey = fieldPath.join(":");

	                    //initialize a counter for this column
	                    if (!_underscore2.default.has(this._keyCount, pathKey)) {
	                        this._keyCount[pathKey] = 0;
	                    }

	                    // this is pointing at a path that does not exist
	                    if (!newData.hasIn(fieldPath)) {
	                        continue;
	                    }

	                    // Get the next value using the fieldPath
	                    var val = newData.getIn(fieldPath);

	                    if (_util2.default.isMissing(val)) {
	                        // Have we hit the limit?
	                        if (this._limit && this._keyCount[pathKey] >= this._limit) {
	                            continue;
	                        }

	                        if (this._method === "zero") {
	                            // set to zero
	                            newData = newData.setIn(fieldPath, 0);
	                            this._keyCount[pathKey]++;
	                        } else if (this._method === "pad") {
	                            // set to previous value
	                            if (!_underscore2.default.isNull(this._previousEvent)) {
	                                var prevVal = this._previousEvent.data().getIn(fieldPath);

	                                if (!_util2.default.isMissing(prevVal)) {
	                                    newData = newData.setIn(fieldPath, prevVal);
	                                    this._keyCount[pathKey]++;
	                                }
	                            }
	                        } else if (this._method === "linear") {
	                            //noop
	                        }
	                    } else {
	                        this._keyCount[pathKey] = 0;
	                    }
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            return newData;
	        }

	        /**
	         * Check to see if an event has good values when doing
	         * linear fill since we need to keep a completely intact
	         * event for the values.
	         * While we are inspecting the data payload, make a note if
	         * any of the paths are pointing at a list. Then it
	         * will trigger that filling code later.
	         */

	    }, {
	        key: "isValidLinearEvent",
	        value: function isValidLinearEvent(event) {
	            var valid = true;
	            var fieldPath = _util2.default.fieldPathToArray(this._fieldSpec[0]);

	            // Detect path that doesn't exist
	            if (!event.data().hasIn(fieldPath)) {
	                console.warn("path does not exist: " + fieldPath);
	                return valid;
	            }

	            var val = event.data().getIn(fieldPath);

	            // Detect if missing or not a number
	            if (_util2.default.isMissing(val) || !_underscore2.default.isNumber(val)) {
	                valid = false;
	            }
	            return valid;
	        }

	        /**
	         * This handles the linear filling. It returns a list of
	         * zero or more events to be emitted.
	         *
	         * If an event is valid - it has valid values for all of
	         * the field paths - it is cached as "last good" and
	         * returned to be emitted. The return value is then a list
	         * of one event.
	         *
	         * If an event has invalid values, it is cached to be
	         * processed later and an empty list is returned.
	         *
	         * Additional invalid events will continue to be cached until
	         * a new valid value is seen, then the cached events will
	         * be filled and returned. That will be a list of indeterminate
	         * length.
	         */

	    }, {
	        key: "linearFill",
	        value: function linearFill(event) {
	            var _this2 = this;

	            // See if the event is valid and also if it has any
	            // list values to be filled.
	            var isValidEvent = this.isValidLinearEvent(event);

	            var events = [];
	            if (isValidEvent && !this._linearFillCache.length) {
	                // Valid event, no cached events, use as last good val
	                this._lastGoodLinear = event;
	                events.push(event);
	            } else if (!isValidEvent && !_underscore2.default.isNull(this._lastGoodLinear)) {
	                this._linearFillCache.push(event);

	                // Check limit
	                if (!_underscore2.default.isNull(this._limit) && this._linearFillCache.length >= this._limit) {
	                    // Flush the cache now because limit is reached
	                    this._linearFillCache.forEach(function (e) {
	                        _this2.emit(e);
	                    });

	                    // Reset
	                    this._linearFillCache = [];
	                    this._lastGoodLinear = null;
	                }
	            } else if (!isValidEvent && _underscore2.default.isNull(this._lastGoodLinear)) {
	                //
	                // An invalid event but we have not seen a good
	                // event yet so there is nothing to start filling "from"
	                // so just return and live with it.
	                //
	                events.push(event);
	            } else if (isValidEvent && this._linearFillCache) {
	                // Linear interpolation between last good and this event
	                var eventList = [this._lastGoodLinear].concat((0, _toConsumableArray3.default)(this._linearFillCache), [event]);
	                var interpolatedEvents = this.interpolateEventList(eventList);

	                //
	                // The first event in the returned list from interpolatedEvents
	                // is our last good event. This event has already been emitted so
	                // it is sliced off.
	                //
	                interpolatedEvents.slice(1).forEach(function (e) {
	                    events.push(e);
	                });

	                // Reset
	                this._linearFillCache = [];
	                this._lastGoodLinear = event;
	            }

	            return events;
	        }

	        /**
	         * The fundamental linear interpolation workhorse code.  Process
	         * a list of events and return a new list. Does a pass for
	         * every fieldSpec.
	         *
	         * This is abstracted out like this because we probably want
	         * to interpolate a list of events not tied to a Collection.
	         * A Pipeline result list, etc etc.
	         *
	        **/

	    }, {
	        key: "interpolateEventList",
	        value: function interpolateEventList(events) {
	            var prevValue = void 0;
	            var prevTime = void 0;

	            // new array of interpolated events for each field path
	            var newEvents = [];

	            var fieldPath = _util2.default.fieldPathToArray(this._fieldSpec[0]);

	            // setup done, loop through the events
	            for (var i = 0; i < events.length; i++) {
	                var e = events[i];

	                // Can't interpolate first or last event so just save it
	                // as is and move on.
	                if (i === 0) {
	                    prevValue = e.get(fieldPath);
	                    prevTime = e.timestamp().getTime();
	                    newEvents.push(e);
	                    continue;
	                }

	                if (i === events.length - 1) {
	                    newEvents.push(e);
	                    continue;
	                }

	                // Detect non-numeric value
	                if (!_util2.default.isMissing(e.get(fieldPath)) && !_underscore2.default.isNumber(e.get(fieldPath))) {
	                    console.warn("linear requires numeric values - skipping this field_spec");
	                    return events;
	                }

	                // Found a missing value so start calculating.
	                if (_util2.default.isMissing(e.get(fieldPath))) {
	                    // Find the next valid value in the original events
	                    var ii = i + 1;
	                    var nextValue = null;
	                    var nextTime = null;
	                    while (_underscore2.default.isNull(nextValue) && ii < events.length) {
	                        var val = events[ii].get(fieldPath);
	                        if (!_util2.default.isMissing(val)) {
	                            nextValue = val;
	                            // exits loop
	                            nextTime = events[ii].timestamp().getTime();
	                        }
	                        ii++;
	                    }

	                    // Interpolate a new value to fill
	                    if (!_underscore2.default.isNull(prevValue) && ~_underscore2.default.isNull(nextValue)) {
	                        var currentTime = e.timestamp().getTime();
	                        if (nextTime === prevTime) {
	                            // If times are the same, just avg
	                            var newValue = (prevValue + nextValue) / 2;
	                            newEvents.push(e.setData(newValue));
	                        } else {
	                            var f = (currentTime - prevTime) / (nextTime - prevTime);
	                            var _newValue = prevValue + f * (nextValue - prevValue);
	                            var d = e.data().setIn(fieldPath, _newValue);
	                            newEvents.push(e.setData(d));
	                        }
	                    } else {
	                        newEvents.push(e);
	                    }
	                } else {
	                    newEvents.push(e);
	                }
	            }

	            return newEvents;
	        }

	        /**
	         * Perform the fill operation on the event and emit.
	         */

	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            if (this.hasObservers()) {
	                var emitList = [];
	                var d = event.data();
	                if (this._method === "zero" || this._method === "pad") {
	                    var dd = this.constFill(d);
	                    var e = event.setData(dd);
	                    emitList.push(e);
	                    this._previousEvent = e;
	                } else if (this._method === "linear") {
	                    this.linearFill(event).forEach(function (e) {
	                        emitList.push(e);
	                    });
	                }
	                var _iteratorNormalCompletion2 = true;
	                var _didIteratorError2 = false;
	                var _iteratorError2 = undefined;

	                try {
	                    for (var _iterator2 = (0, _getIterator3.default)(emitList), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                        var _event = _step2.value;

	                        this.emit(_event);
	                    }
	                } catch (err) {
	                    _didIteratorError2 = true;
	                    _iteratorError2 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                            _iterator2.return();
	                        }
	                    } finally {
	                        if (_didIteratorError2) {
	                            throw _iteratorError2;
	                        }
	                    }
	                }
	            }
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            if (this.hasObservers() && this._method == "linear") {
	                var _iteratorNormalCompletion3 = true;
	                var _didIteratorError3 = false;
	                var _iteratorError3 = undefined;

	                try {
	                    for (var _iterator3 = (0, _getIterator3.default)(this._linearFillCache), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                        var event = _step3.value;

	                        this.emit(event);
	                    }
	                } catch (err) {
	                    _didIteratorError3 = true;
	                    _iteratorError3 = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                            _iterator3.return();
	                        }
	                    } finally {
	                        if (_didIteratorError3) {
	                            throw _iteratorError3;
	                        }
	                    }
	                }
	            }
	            (0, _get3.default)(Filler.prototype.__proto__ || (0, _getPrototypeOf2.default)(Filler.prototype), "flush", this).call(this);
	        }
	    }]);
	    return Filler;
	}(_processor2.default);

	exports.default = Filler;
	});

	unwrapExports(filler);

	var filter = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _processor2 = _interopRequireDefault(processor);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A processor which takes an operator as its only option
	 * and uses that to either output the event or skip the
	 * event
	 */
	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var Filter = function (_Processor) {
	    (0, _inherits3.default)(Filter, _Processor);

	    function Filter(arg1, options) {
	        (0, _classCallCheck3.default)(this, Filter);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Filter.__proto__ || (0, _getPrototypeOf2.default)(Filter)).call(this, arg1, options));

	        if (arg1 instanceof Filter) {
	            var other = arg1;
	            _this._op = other._op;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            _this._op = options.op;
	        } else {
	            throw new Error("Unknown arg to Filter constructor", arg1);
	        }
	        return _this;
	    }

	    (0, _createClass3.default)(Filter, [{
	        key: "clone",
	        value: function clone() {
	            return new Filter(this);
	        }

	        /**
	         * Output an event that is offset
	         */

	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            if (this.hasObservers()) {
	                if (this._op(event)) {
	                    this.emit(event);
	                }
	            }
	        }
	    }]);
	    return Filter;
	}(_processor2.default);

	exports.default = Filter;
	});

	unwrapExports(filter);

	var mapper = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _processor2 = _interopRequireDefault(processor);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A processor which takes an operator as its only option
	 * and uses that to either output a new event
	 */
	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var Mapper = function (_Processor) {
	    (0, _inherits3.default)(Mapper, _Processor);

	    function Mapper(arg1, options) {
	        (0, _classCallCheck3.default)(this, Mapper);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Mapper.__proto__ || (0, _getPrototypeOf2.default)(Mapper)).call(this, arg1, options));

	        if (arg1 instanceof Mapper) {
	            var other = arg1;
	            _this._op = other._op;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            _this._op = options.op;
	        } else {
	            throw new Error("Unknown arg to Mapper constructor", arg1);
	        }
	        return _this;
	    }

	    (0, _createClass3.default)(Mapper, [{
	        key: "clone",
	        value: function clone() {
	            return new Mapper(this);
	        }

	        /**
	         * Output an event that is remapped
	         */

	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            if (this.hasObservers()) {
	                this.emit(this._op(event));
	            }
	        }
	    }]);
	    return Mapper;
	}(_processor2.default);

	exports.default = Mapper;
	});

	unwrapExports(mapper);

	var offset$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _processor2 = _interopRequireDefault(processor);



	var _event2 = _interopRequireDefault(event);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A simple processor used by the testing code to verify Pipeline behavior
	 */
	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var Offset = function (_Processor) {
	    (0, _inherits3.default)(Offset, _Processor);

	    function Offset(arg1, options) {
	        (0, _classCallCheck3.default)(this, Offset);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Offset.__proto__ || (0, _getPrototypeOf2.default)(Offset)).call(this, arg1, options));

	        if (arg1 instanceof Offset) {
	            var other = arg1;
	            _this._by = other._by;
	            _this._fieldSpec = other._fieldSpec;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            _this._by = options.by || 1;
	            _this._fieldSpec = options.fieldSpec;
	        } else {
	            throw new Error("Unknown arg to Offset constructor", arg1);
	        }
	        return _this;
	    }

	    (0, _createClass3.default)(Offset, [{
	        key: "clone",
	        value: function clone() {
	            return new Offset(this);
	        }

	        /**
	         * Output an event that is offset
	         */

	    }, {
	        key: "addEvent",
	        value: function addEvent(event$$1) {
	            var _this2 = this;

	            if (this.hasObservers()) {
	                var selected = _event2.default.selector(event$$1, this._fieldSpec);
	                var data = {};
	                _underscore2.default.each(selected.data().toJSON(), function (value, key) {
	                    var offsetValue = value + _this2._by;
	                    data[key] = offsetValue;
	                });
	                var outputEvent = event$$1.setData(data);

	                this.emit(outputEvent);
	            }
	        }
	    }]);
	    return Offset;
	}(_processor2.default);

	exports.default = Offset;
	});

	unwrapExports(offset$1);

	var selector = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _processor2 = _interopRequireDefault(processor);



	var _event2 = _interopRequireDefault(event);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A processor which takes a fieldSpec as its only argument
	 * and returns a new event with only those selected columns
	 */
	var Selector = function (_Processor) {
	    (0, _inherits3.default)(Selector, _Processor);

	    function Selector(arg1, options) {
	        (0, _classCallCheck3.default)(this, Selector);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Selector.__proto__ || (0, _getPrototypeOf2.default)(Selector)).call(this, arg1, options));

	        if (arg1 instanceof Selector) {
	            var other = arg1;
	            _this._fieldSpec = other._fieldSpec;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            _this._fieldSpec = options.fieldSpec;
	        } else {
	            throw new Error("Unknown arg to filter constructor", arg1);
	        }
	        return _this;
	    }

	    (0, _createClass3.default)(Selector, [{
	        key: "clone",
	        value: function clone() {
	            return new Selector(this);
	        }
	    }, {
	        key: "addEvent",
	        value: function addEvent(event$$1) {
	            if (this.hasObservers()) {
	                this.emit(_event2.default.selector(event$$1, this._fieldSpec));
	            }
	        }
	    }]);
	    return Selector;
	}(_processor2.default); /**
	                         *  Copyright (c) 2016-2017, The Regents of the University of California,
	                         *  through Lawrence Berkeley National Laboratory (subject to receipt
	                         *  of any required approvals from the U.S. Dept. of Energy).
	                         *  All rights reserved.
	                         *
	                         *  This source code is licensed under the BSD-style license found in the
	                         *  LICENSE file in the root directory of this source tree.
	                         */

	exports.default = Selector;
	});

	unwrapExports(selector);

	var taker = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _get3 = _interopRequireDefault(get$4);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _underscore2 = _interopRequireDefault(underscore);



	var _processor2 = _interopRequireDefault(processor);



	var _index2 = _interopRequireDefault(lib$9);



	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A processor which takes an operator as its only option
	 * and uses that to either output the event or skip the
	 * event
	 */
	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var Taker = function (_Processor) {
	    (0, _inherits3.default)(Taker, _Processor);

	    function Taker(arg1, options) {
	        (0, _classCallCheck3.default)(this, Taker);

	        var _this = (0, _possibleConstructorReturn3.default)(this, (Taker.__proto__ || (0, _getPrototypeOf2.default)(Taker)).call(this, arg1, options));

	        if (arg1 instanceof Taker) {
	            var other = arg1;
	            _this._limit = other._limit;
	            _this._windowType = other._windowType;
	            _this._windowDuration = other._windowDuration;
	            _this._groupBy = other._groupBy;
	        } else if ((0, pipeline_1.isPipeline)(arg1)) {
	            var pipeline = arg1;
	            _this._limit = options.limit;
	            _this._windowType = pipeline.getWindowType();
	            _this._windowDuration = pipeline.getWindowDuration();
	            _this._groupBy = pipeline.getGroupBy();
	        } else {
	            throw new Error("Unknown arg to Taker constructor", arg1);
	        }

	        _this._count = {};
	        return _this;
	    }

	    (0, _createClass3.default)(Taker, [{
	        key: "clone",
	        value: function clone() {
	            return new Taker(this);
	        }
	    }, {
	        key: "flush",
	        value: function flush() {
	            (0, _get3.default)(Taker.prototype.__proto__ || (0, _getPrototypeOf2.default)(Taker.prototype), "flush", this).call(this);
	        }

	        /**
	         * Output an event that is offset
	         */

	    }, {
	        key: "addEvent",
	        value: function addEvent(event) {
	            if (this.hasObservers()) {
	                var timestamp = event.timestamp();

	                var windowType = this._windowType;
	                var windowKey = void 0;
	                if (windowType === "fixed") {
	                    windowKey = _index2.default.getIndexString(this._windowDuration, timestamp);
	                } else {
	                    windowKey = windowType;
	                }
	                var groupByKey = this._groupBy(event);
	                var collectionKey = groupByKey ? windowKey + "::" + groupByKey : windowKey;

	                if (!_underscore2.default.has(this._count, collectionKey)) {
	                    this._count[collectionKey] = 0;
	                }

	                if (this._count[collectionKey] < this._limit) {
	                    this.emit(event);
	                }

	                this._count[collectionKey]++;
	            }
	        }
	    }]);
	    return Taker;
	}(_processor2.default);

	exports.default = Taker;
	});

	unwrapExports(taker);

	var pipeline_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.isPipeline = exports.Pipeline = undefined;



	var _extends3 = _interopRequireDefault(_extends$6);



	var _getIterator3 = _interopRequireDefault(getIterator$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _immutable2 = _interopRequireDefault(immutable);



	var _underscore2 = _interopRequireDefault(underscore);



	var _timeevent2 = _interopRequireDefault(timeevent);



	var _indexedevent2 = _interopRequireDefault(indexedevent);



	var _timerangeevent2 = _interopRequireDefault(timerangeevent);



	var _timeseries2 = _interopRequireDefault(timeseries);



	var _bounded2 = _interopRequireDefault(bounded);



	var _collectionout2 = _interopRequireDefault(collectionout);



	var _eventout2 = _interopRequireDefault(eventout);



	var _stream2 = _interopRequireDefault(stream);



	var _aggregator2 = _interopRequireDefault(aggregator);



	var _aligner2 = _interopRequireDefault(aligner);



	var _collapser2 = _interopRequireDefault(collapser);



	var _converter2 = _interopRequireDefault(converter);



	var _derivator2 = _interopRequireDefault(derivator);



	var _filler2 = _interopRequireDefault(filler);



	var _filter2 = _interopRequireDefault(filter);



	var _mapper2 = _interopRequireDefault(mapper);



	var _offset2 = _interopRequireDefault(offset$1);



	var _processor2 = _interopRequireDefault(processor);



	var _selector2 = _interopRequireDefault(selector);



	var _taker2 = _interopRequireDefault(taker);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * A runner is used to extract the chain of processing operations
	 * from a Pipeline given an Output. The idea here is to traverse
	 * back up the Pipeline(s) and build an execution chain.
	 *
	 * When the runner is started, events from the "in" are streamed
	 * into the execution chain and outputed into the "out".
	 *
	 * Rebuilding in this way enables us to handle connected pipelines:
	 *
	 *                     |--
	 *  in --> pipeline ---.
	 *                     |----pipeline ---| -> out
	 *
	 * The runner breaks this into the following for execution:
	 *
	 *   _input        - the "in" or from() bounded input of
	 *                   the upstream pipeline
	 *   _processChain - the process nodes in the pipelines
	 *                   leading to the out
	 *   _output       - the supplied output destination for
	 *                   the batch process
	 *
	 * NOTE: There's no current way to merge multiple sources, though
	 *       a time series has a TimeSeries.merge() static method for
	 *       this purpose.
	 */


	// Processors


	// I/O
	/*
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var Runner = function () {
	    /**
	     * Create a new batch runner.
	     * @param  {Pipeline} pipeline The pipeline to run
	     * @param  {PipelineOut} output   The output driving this runner
	     */
	    function Runner(pipeline, output) {
	        var _this = this;

	        (0, _classCallCheck3.default)(this, Runner);

	        this._output = output;
	        this._pipeline = pipeline;

	        //
	        // We use the pipeline's chain() function to walk the
	        // DAG back up the tree to the "in" to:
	        // 1) assemble a list of process nodes that feed into
	        //    this pipeline, the processChain
	        // 2) determine the _input
	        //
	        // TODO: we do not currently support merging, so this is
	        // a linear chain.
	        //
	        var processChain = [];
	        if (pipeline.last()) {
	            processChain = pipeline.last().chain();
	            this._input = processChain[0].pipeline().in();
	        } else {
	            this._input = pipeline.in();
	        }

	        //
	        // Using the list of nodes in the tree that will be involved in
	        // our processing we can build an execution chain. This is the
	        // chain of processor clones, linked together, for our specific
	        // processing pipeline. We run this execution chain later by
	        // evoking start().
	        //
	        this._executionChain = [this._output];
	        var prev = this._output;
	        processChain.forEach(function (p) {
	            if (p instanceof _processor2.default) {
	                var processor$$1 = p.clone();
	                if (prev) processor$$1.addObserver(prev);
	                _this._executionChain.push(processor$$1);
	                prev = processor$$1;
	            }
	        });
	    }

	    /**
	     * Start the runner
	     * @param  {Boolean} force Force a flush at the end of the batch source
	     *                         to cause any buffers to emit.
	     */


	    (0, _createClass3.default)(Runner, [{
	        key: "start",
	        value: function start() {
	            var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

	            // Clear any results ready for the run
	            this._pipeline.clearResults();

	            //
	            // The head is the first process node in the execution chain.
	            // To process the source through the execution chain we add
	            // each event from the input to the head.
	            //
	            var head = this._executionChain.pop();
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = (0, _getIterator3.default)(this._input.events()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var e = _step.value;

	                    head.addEvent(e);
	                }

	                //
	                // The runner indicates that it is finished with the bounded
	                // data by sending a flush() call down the chain. If force is
	                // set to false (the default) this is never called.
	                //
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }

	            if (force) {
	                head.flush();
	            }
	        }
	    }]);
	    return Runner;
	}();

	/**
	 * A pipeline manages a processing chain, for either batch or stream processing
	 * of collection data.
	 */


	var Pipeline = function () {
	    /**
	     * Build a new Pipeline.
	     *
	     * @param  {Pipeline|Immutable.Map|null} [arg] May be either:
	     *  * a Pipeline (copy contructor)
	     *  * an Immutable.Map, in which case the internal state of the
	     *    Pipeline will be contructed from the Map
	     *  * not specified
	     *
	     * Usually you would initialize a Pipeline using the factory
	     * function, rather than this object directly with `new`.
	     *
	     * @example
	     * ```
	     * import { Pipeline } from "pondjs";
	     * const p = Pipeline()...`
	     * ```
	     *
	     * @return {Pipeline} The Pipeline
	     */
	    function Pipeline(arg) {
	        (0, _classCallCheck3.default)(this, Pipeline);

	        if (arg instanceof Pipeline) {
	            var other = arg;
	            this._d = other._d;
	        } else if (arg instanceof _immutable2.default.Map) {
	            this._d = arg;
	        } else {
	            this._d = new _immutable2.default.Map({
	                type: null,
	                in: null,
	                first: null,
	                last: null,
	                groupBy: function groupBy() {
	                    return "";
	                },
	                windowType: "global",
	                windowDuration: null,
	                emitOn: "eachEvent"
	            });
	        }
	        this._results = [];
	    }

	    //
	    // Accessors to the current Pipeline state
	    //


	    (0, _createClass3.default)(Pipeline, [{
	        key: "in",
	        value: function _in() {
	            return this._d.get("in");
	        }
	    }, {
	        key: "mode",
	        value: function mode() {
	            return this._d.get("mode");
	        }
	    }, {
	        key: "first",
	        value: function first() {
	            return this._d.get("first");
	        }
	    }, {
	        key: "last",
	        value: function last() {
	            return this._d.get("last");
	        }
	    }, {
	        key: "getWindowType",
	        value: function getWindowType() {
	            return this._d.get("windowType");
	        }
	    }, {
	        key: "getWindowDuration",
	        value: function getWindowDuration() {
	            return this._d.get("windowDuration");
	        }
	    }, {
	        key: "getGroupBy",
	        value: function getGroupBy() {
	            return this._d.get("groupBy");
	        }
	    }, {
	        key: "getEmitOn",
	        value: function getEmitOn() {
	            return this._d.get("emitOn");
	        }

	        //
	        // Results
	        //

	    }, {
	        key: "clearResults",
	        value: function clearResults() {
	            this._resultsDone = false;
	            this._results = null;
	        }
	    }, {
	        key: "addResult",
	        value: function addResult(arg1, arg2) {
	            if (!this._results) {
	                if (_underscore2.default.isString(arg1) && arg2) {
	                    this._results = {};
	                } else {
	                    this._results = [];
	                }
	            }

	            if (_underscore2.default.isString(arg1) && arg2) {
	                this._results[arg1] = arg2;
	            } else {
	                this._results.push(arg1);
	            }
	            this._resultsDone = false;
	        }
	    }, {
	        key: "resultsDone",
	        value: function resultsDone() {
	            this._resultsDone = true;
	        }

	        //
	        // Pipeline mutations
	        //
	        /**
	         * Setting the In for the Pipeline returns a new Pipeline
	         *
	         * @private
	         */

	    }, {
	        key: "_setIn",
	        value: function _setIn(input) {
	            var mode = void 0;
	            var source = input;
	            if (input instanceof _timeseries2.default) {
	                mode = "batch";
	                source = input.collection();
	            } else if (input instanceof _bounded2.default) {
	                mode = "batch";
	            } else if (input instanceof _stream2.default) {
	                mode = "stream";
	            } else {
	                throw new Error("Unknown input type", input);
	            }

	            var d = this._d.withMutations(function (map) {
	                map.set("in", source).set("mode", mode);
	            });

	            return new Pipeline(d);
	        }

	        /**
	         * Set the first processing node pointed to, returning
	         * a new Pipeline. The original pipeline will still point
	         * to its orginal processing node.
	         *
	         * @private
	         */

	    }, {
	        key: "_setFirst",
	        value: function _setFirst(n) {
	            var d = this._d.set("first", n);
	            return new Pipeline(d);
	        }

	        /**
	         * Set the last processing node pointed to, returning
	         * a new Pipeline. The original pipeline will still point
	         * to its orginal processing node.
	         *
	         * @private
	         */

	    }, {
	        key: "_setLast",
	        value: function _setLast(n) {
	            var d = this._d.set("last", n);
	            return new Pipeline(d);
	        }

	        /**
	         * @private
	         */

	    }, {
	        key: "_append",
	        value: function _append(processor$$1) {
	            var first = this.first();
	            var last = this.last();

	            if (!first) first = processor$$1;
	            if (last) last.addObserver(processor$$1);
	            last = processor$$1;

	            var d = this._d.withMutations(function (map) {
	                map.set("first", first).set("last", last);
	            });
	            return new Pipeline(d);
	        }
	    }, {
	        key: "_chainPrev",
	        value: function _chainPrev() {
	            return this.last() || this;
	        }

	        //
	        // Pipeline state chained methods
	        //
	        /**
	         * Set the window, returning a new Pipeline. A new window will
	         * have a type and duration associated with it. Current available
	         * types are:
	         *   * fixed (e.g. every 5m)
	         *   * calendar based windows (e.g. every month)
	         *
	         * Windows are a type of grouping. Typically you'd define a window
	         * on the pipeline before doing an aggregation or some other operation
	         * on the resulting grouped collection. You can combine window-based
	         * grouping with key-grouping (see groupBy()).
	         *
	         * There are several ways to define a window. The general format is
	         * an options object containing a `type` field and a `duration` field.
	         *
	         * Currently the only accepted type is `fixed`, but others are planned.
	         * For duration, this is a duration string, for example "30s" or "1d".
	         * Supported are: seconds (s), minutes (m), hours (h) and days (d).
	         *
	         * If no arg is supplied, the window type is set to 'global' and there
	         * is no duration.
	         *
	         * There is also a short-cut notation for a fixed window or a calendar
	         * window. Simply supplying the duration string ("30s" for example) will
	         * result in a `fixed` window type with the supplied duration.
	         *
	         * Calendar types are specified by simply specifying "daily", "monthly"
	         * or "yearly".
	         *
	         * @param {string|object} w Window or duration - See above
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "windowBy",
	        value: function windowBy(w) {
	            var type = void 0,
	                duration = void 0;
	            if (_underscore2.default.isString(w)) {
	                if (w === "daily" || w === "monthly" || w === "yearly") {
	                    type = w;
	                } else {
	                    // assume fixed window with size w
	                    type = "fixed";
	                    duration = w;
	                }
	            } else if (_underscore2.default.isObject(w)) {
	                type = w.type;
	                duration = w.duration;
	            } else {
	                type = "global";
	                duration = null;
	            }

	            var d = this._d.withMutations(function (map) {
	                map.set("windowType", type).set("windowDuration", duration);
	            });

	            return new Pipeline(d);
	        }

	        /**
	         * Remove windowing from the Pipeline. This will
	         * return the pipeline to no window grouping. This is
	         * useful if you have first done some aggregated by
	         * some window size and then wish to collect together
	         * the all resulting events.
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "clearWindow",
	        value: function clearWindow() {
	            return this.windowBy();
	        }

	        /**
	         * Sets a new key grouping. Returns a new Pipeline.
	         *
	         * Grouping is a state set on the Pipeline. Operations downstream
	         * of the group specification will use that state. For example, an
	         * aggregation would occur over any grouping specified. You can
	         * combine a key grouping with windowing (see windowBy()).
	         *
	         * Note: the key, if it is a field path, is not a list of multiple
	         * columns, it is the path to a single column to pull group by keys
	         * from. For example, a column called 'status' that contains the
	         * values 'OK' and 'FAIL' - then the key would be 'status' and two
	         * collections OK and FAIL will be generated.
	         *
	         * @param {function|array|string}   k   The key to group by.
	         *                                      You can groupBy using a function
	         *                                      `(event) => return key`,
	         *                                      a field path (a field name, or dot
	         *                                      delimitted path to a field),
	         *                                      or a array of field paths.
	         *
	         * @return {Pipeline}                   The Pipeline
	         */

	    }, {
	        key: "groupBy",
	        value: function groupBy(k) {
	            var grp = void 0;
	            var groupBy = k || "value";
	            if (_underscore2.default.isFunction(groupBy)) {
	                // group using a user defined function
	                // (event) => key
	                grp = groupBy;
	            } else if (_underscore2.default.isArray(groupBy)) {
	                // group by several column values
	                grp = function grp(e) {
	                    return _underscore2.default.map(groupBy, function (c) {
	                        return "" + e.get(c);
	                    }).join("::");
	                };
	            } else if (_underscore2.default.isString(groupBy)) {
	                // group by a column value
	                grp = function grp(e) {
	                    return "" + e.get(groupBy);
	                };
	            } else {
	                // Reset to no grouping
	                grp = function grp() {
	                    return "";
	                };
	            }

	            var d = this._d.withMutations(function (map) {
	                map.set("groupBy", grp);
	            });

	            return new Pipeline(d);
	        }

	        /**
	         * Remove the grouping from the pipeline. In other words
	         * recombine the events.
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "clearGroupBy",
	        value: function clearGroupBy() {
	            return this.groupBy();
	        }

	        /**
	         * Sets the condition under which an accumulated collection will
	         * be emitted. If specified before an aggregation this will control
	         * when the resulting event will be emitted relative to the
	         * window accumulation. Current options are:
	         *  * to emit on every event, or
	         *  * just when the collection is complete, or
	         *  * when a flush signal is received, either manually calling done(),
	         *    or at the end of a bounded source
	         *
	         * The difference will depend on the output you want, how often
	         * you want to get updated, and if you need to get a partial state.
	         * There's currently no support for late data or watermarks. If an
	         * event passes comes in after a collection window, that collection
	         * is considered finished.
	         *
	         * @param {string} trigger A string indicating how to trigger a
	         * Collection should be emitted. May be:
	         *     * "eachEvent" - when a new event comes in, all currently
	         *                     maintained collections will emit their result
	         *     * "discard"   - when a collection is to be discarded,
	         *                     first it will emit. But only then.
	         *     * "flush"     - when a flush signal is received
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "emitOn",
	        value: function emitOn(trigger) {
	            var d = this._d.set("emitOn", trigger);
	            return new Pipeline(d);
	        }

	        //
	        // I/O
	        //
	        /**
	         * The source to get events from. The source needs to be able to
	         * iterate its events using `for..of` loop for bounded Ins, or
	         * be able to emit() for unbounded Ins. The actual batch, or stream
	         * connection occurs when an output is defined with `to()`.
	         *
	         * Pipelines can be chained together since a source may be another
	         * Pipeline.
	         *
	         * @param {Bounded|Stream} src The source for the Pipeline
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "from",
	        value: function from(src) {
	            return this._setIn(src);
	        }

	        /**
	         * Directly return the results from the processor rather than
	         * feeding to a callback. This breaks the chain, causing a result to
	         * be returned (the array of events) rather than a reference to the
	         * Pipeline itself. This function is only available for sync batch
	         * processing.
	         *
	         * @return {array|map}     Returns the _results attribute from a Pipeline
	         *                         object after processing. Will contain Collection
	         *                         objects.
	         */

	    }, {
	        key: "toEventList",
	        value: function toEventList() {
	            return this.to(_eventout2.default);
	        }

	        /**
	         * Directly return the results from the processor rather than
	         * passing a callback in. This breaks the chain, causing a result to
	         * be returned (the collections) rather than a reference to the
	         * Pipeline itself. This function is only available for sync batch
	         * processing.
	         *
	         * @return {array|map}     Returns the _results attribute from a Pipeline
	         *                         object after processing. Will contain Collection
	         *                         objects.
	         */

	    }, {
	        key: "toKeyedCollections",
	        value: function toKeyedCollections() {
	            var result = this.to(_collectionout2.default);
	            if (result) {
	                return result;
	            } else {
	                return {};
	            }
	        }

	        /**
	         * Sets up the destination sink for the pipeline.
	         *
	         * For a batch mode connection, i.e. one with a Bounded source,
	         * the output is connected to a clone of the parts of the Pipeline dependencies
	         * that lead to this output. This is done by a Runner. The source input is
	         * then iterated over to process all events into the pipeline and though to the Out.
	         *
	         * For stream mode connections, the output is connected and from then on
	         * any events added to the input will be processed down the pipeline to
	         * the out.
	         *
	         * @example
	         * ```
	         * const p = Pipeline()
	         *  ...
	         *  .to(EventOut, {}, event => {
	         *      result[`${event.index()}`] = event;
	         *  });
	         * ```
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "to",
	        value: function to(arg1, arg2, arg3) {
	            var Out = arg1;
	            var observer = void 0;
	            var options = {};

	            if (_underscore2.default.isFunction(arg2)) {
	                observer = arg2;
	            } else if (_underscore2.default.isObject(arg2)) {
	                options = arg2;
	                observer = arg3;
	            }

	            if (!this.in()) {
	                throw new Error("Tried to eval pipeline without a In. Missing from() in chain?");
	            }

	            var out = new Out(this, options, observer);

	            if (this.mode() === "batch") {
	                var runner = new Runner(this, out);
	                runner.start(true);
	                if (this._resultsDone && !observer) {
	                    return this._results;
	                }
	            } else if (this.mode() === "stream") {
	                var _out = new Out(this, options, observer);
	                if (this.first()) {
	                    this.in().addObserver(this.first());
	                }
	                if (this.last()) {
	                    this.last().addObserver(_out);
	                } else {
	                    this.in().addObserver(_out);
	                }
	            }

	            return this;
	        }

	        /**
	         * Outputs the count of events
	         *
	         * @param  {function}  observer The callback function. This will be
	         *                              passed the count, the windowKey and
	         *                              the groupByKey
	         * @param  {Boolean} force    Flush at the end of processing batch
	         *                            events, output again with possibly partial
	         *                            result.
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "count",
	        value: function count(observer) {
	            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            return this.to(_collectionout2.default, function (collection, windowKey, groupByKey) {
	                observer(collection.size(), windowKey, groupByKey);
	            }, force);
	        }

	        //
	        // Processors
	        //
	        /**
	         * Processor to offset a set of fields by a value. Mostly used for
	         * testing processor and pipeline operations with a simple operation.
	         *
	         * @param  {number} by              The amount to offset by
	         * @param  {string|array} fieldSpec The field(s)
	         *
	         * @return {Pipeline}               The modified Pipeline
	         */

	    }, {
	        key: "offsetBy",
	        value: function offsetBy(by, fieldSpec) {
	            var p = new _offset2.default(this, { by: by, fieldSpec: fieldSpec, prev: this._chainPrev() });

	            return this._append(p);
	        }

	        /**
	         * Uses the current Pipeline windowing and grouping
	         * state to build collections of events and aggregate them.
	         *
	         * `IndexedEvent`s will be emitted out of the aggregator based
	         * on the `emitOn` state of the Pipeline.
	         *
	         * To specify what part of the incoming events should
	         * be aggregated together you specify a `fields`
	         * object. This is a map from fieldName to operator.
	         *
	         * @example
	         *
	         * ```
	         * import { Pipeline, EventOut, functions } from "pondjs";
	         * const { avg } = functions;
	         *
	         * const p = Pipeline()
	         *   .from(input)
	         *   .windowBy("1h")           // 1 day fixed windows
	         *   .emitOn("eachEvent")      // emit result on each event
	         *   .aggregate({
	         *      in_avg: {in: avg},
	         *      out_avg: {in: avg}
	         *   })
	         *   .asTimeEvents()
	         *   .to(EventOut, {}, event => {
	         *      result[`${event.index()}`] = event; // Result
	         *   });
	         * ```
	         *
	         * @param  {object} fields Fields and operators to be aggregated
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "aggregate",
	        value: function aggregate(fields) {
	            var p = new _aggregator2.default(this, { fields: fields, prev: this._chainPrev() });
	            return this._append(p);
	        }

	        /**
	         * Converts incoming TimeRangeEvents or IndexedEvents to
	         * TimeEvents. This is helpful since some processors,
	         * especially aggregators, will emit TimeRangeEvents or
	         * IndexedEvents, which may be unsuitable for some applications.
	         *
	         * @param  {object} options To convert to an TimeEvent you need
	         * to convert a time range to a single time. There are three options:
	         *  1. use the beginning time (options = {alignment: "lag"})
	         *  2. use the center time (options = {alignment: "center"})
	         *  3. use the end time (options = {alignment: "lead"})
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "asTimeEvents",
	        value: function asTimeEvents(options) {
	            var type = _timeevent2.default;
	            var p = new _converter2.default(this, (0, _extends3.default)({
	                type: type
	            }, options, {
	                prev: this._chainPrev()
	            }));

	            return this._append(p);
	        }

	        /**
	         * Map the event stream using an operator
	         *
	         * @param  {function} op A function that returns a new Event
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "map",
	        value: function map(op) {
	            var p = new _mapper2.default(this, { op: op, prev: this._chainPrev() });

	            return this._append(p);
	        }

	        /**
	         * Filter the event stream using an operator
	         *
	         * @param  {function} op A function that returns true or false
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "filter",
	        value: function filter$$1(op) {
	            var p = new _filter2.default(this, { op: op, prev: this._chainPrev() });

	            return this._append(p);
	        }

	        /**
	         * Select a subset of columns
	         *
	         * @param {string|array} fieldSpec  Column or columns to look up. If you need
	         *                                  to retrieve multiple deep nested values that
	         *                                  ['can.be', 'done.with', 'this.notation'].
	         *                                  A single deep value with a string.like.this.
	         *                                  If not supplied, the 'value' column will be used.
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "select",
	        value: function select(fieldSpec) {
	            var p = new _selector2.default(this, { fieldSpec: fieldSpec, prev: this._chainPrev() });

	            return this._append(p);
	        }

	        /**
	         * Collapse a subset of columns using a reducer function
	         *
	         * @example
	         *
	         * ```
	         *  const timeseries = new TimeSeries(inOutData);
	         *  Pipeline()
	         *      .from(timeseries)
	         *      .collapse(["in", "out"], "in_out_sum", sum)
	         *      .emitOn("flush")
	         *      .to(CollectionOut, c => {
	         *           const ts = new TimeSeries({name: "subset", collection: c});
	         *           ...
	         *      }, true);
	         * ```
	         * @param {string|array} fieldSpecList  Column or columns to collapse. If you need
	         *                                      to retrieve multiple deep nested values that
	         *                                      ['can.be', 'done.with', 'this.notation'].
	         * @param {string}       name       The resulting output column's name
	         * @param {function}     reducer    Function to use to do the reduction
	         * @param {boolean}      append     Add the new column to the existing ones,
	         *                                  or replace them.
	         *
	         * @return {Pipeline}               The Pipeline
	         */

	    }, {
	        key: "collapse",
	        value: function collapse(fieldSpecList, name, reducer, append) {
	            var p = new _collapser2.default(this, {
	                fieldSpecList: fieldSpecList,
	                name: name,
	                reducer: reducer,
	                append: append,
	                prev: this._chainPrev()
	            });

	            return this._append(p);
	        }

	        /**
	         * Take the data in this event steam and "fill" any missing
	         * or invalid values. This could be setting `null` values to `0`
	         * so mathematical operations will succeed, interpolate a new
	         * value, or pad with the previously given value.
	         *
	         * If one wishes to limit the number of filled events in the result
	         * set, use Pipeline.keep() in the chain. See: TimeSeries.fill()
	         * for an example.
	         *
	         * Fill takes a single arg `options` which should be composed of:
	         *  * fieldSpec - Column or columns to look up. If you need
	         *                to retrieve multiple deep nested values that
	         *                ['can.be', 'done.with', 'this.notation'].
	         *                A single deep value with a string.like.this.
	         *  * method -    Filling method: zero | linear | pad
	         *
	         * @return {Pipeline}               The Pipeline
	         */

	    }, {
	        key: "fill",
	        value: function fill(_ref) {
	            var _ref$fieldSpec = _ref.fieldSpec,
	                fieldSpec = _ref$fieldSpec === undefined ? null : _ref$fieldSpec,
	                _ref$method = _ref.method,
	                method = _ref$method === undefined ? "linear" : _ref$method,
	                _ref$limit = _ref.limit,
	                limit = _ref$limit === undefined ? null : _ref$limit;

	            var prev = this._chainPrev();
	            return this._append(new _filler2.default(this, {
	                fieldSpec: fieldSpec,
	                method: method,
	                limit: limit,
	                prev: prev
	            }));
	        }
	    }, {
	        key: "align",
	        value: function align(fieldSpec, window, method, limit) {
	            var prev = this._chainPrev();
	            return this._append(new _aligner2.default(this, {
	                fieldSpec: fieldSpec,
	                window: window,
	                method: method,
	                limit: limit,
	                prev: prev
	            }));
	        }
	    }, {
	        key: "rate",
	        value: function rate(fieldSpec) {
	            var allowNegative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

	            var p = new _derivator2.default(this, {
	                fieldSpec: fieldSpec,
	                allowNegative: allowNegative,
	                prev: this._chainPrev()
	            });

	            return this._append(p);
	        }

	        /**
	         * Take events up to the supplied limit, per key.
	         *
	         * @param  {number} limit Integer number of events to take
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "take",
	        value: function take(limit) {
	            var p = new _taker2.default(this, { limit: limit, prev: this._chainPrev() });

	            return this._append(p);
	        }

	        /**
	         * Converts incoming Events or IndexedEvents to TimeRangeEvents.
	         *
	         * @param {object} options To convert from an Event you need
	         * to convert a single time to a time range. To control this you
	         * need to specify the duration of that time range, along with
	         * the positioning (alignment) of the time range with respect to
	         * the time stamp of the Event.
	         *
	         * There are three option for alignment:
	         *  1. time range will be in front of the timestamp (options = {alignment: "front"})
	         *  2. time range will be centered on the timestamp (options = {alignment: "center"})
	         *  3. time range will be positoned behind the timestamp (options = {alignment: "behind"})
	         *
	         * The duration is of the form "1h" for one hour, "30s" for 30 seconds and so on.
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "asTimeRangeEvents",
	        value: function asTimeRangeEvents(options) {
	            var type = _timerangeevent2.default;
	            var p = new _converter2.default(this, (0, _extends3.default)({
	                type: type
	            }, options, {
	                prev: this._chainPrev()
	            }));

	            return this._append(p);
	        }

	        /**
	         * Converts incoming Events to IndexedEvents.
	         *
	         * Note: It isn't possible to convert TimeRangeEvents to IndexedEvents.
	         *
	         * @param {Object} options            An object containing the conversion
	         * options. In this case the duration string of the Index is expected.
	         * @param {string} options.duration   The duration string is of the form "1h" for one hour, "30s"
	         * for 30 seconds and so on.
	         *
	         * @return {Pipeline} The Pipeline
	         */

	    }, {
	        key: "asIndexedEvents",
	        value: function asIndexedEvents(options) {
	            var type = _indexedevent2.default;
	            var p = new _converter2.default(this, (0, _extends3.default)({
	                type: type
	            }, options, {
	                prev: this._chainPrev()
	            }));
	            return this._append(p);
	        }
	    }]);
	    return Pipeline;
	}();

	function pipeline(args) {
	    return new Pipeline(args);
	}

	function is(p) {
	    return p instanceof Pipeline;
	}

	exports.Pipeline = pipeline;
	exports.isPipeline = is;
	});

	unwrapExports(pipeline_1);
	var pipeline_2 = pipeline_1.isPipeline;
	var pipeline_3 = pipeline_1.Pipeline;

	var dist=function(n){function r(e){if(t[e])return t[e].exports;var o=t[e]={exports:{},id:e,loaded:!1};return n[e].call(o.exports,o,o.exports,r), o.loaded=!0, o.exports}var t={};return r.m=n, r.c=t, r.p="", r(0)}([function(n,r,t){var e=t(1);"undefined"!=typeof Immutable&&(Immutable.installDevTools=install.bind(null,Immutable));var o=!1;n.exports=function(n){if("undefined"==typeof window)throw new Error("Can only install immutable-devtools in a browser environment.");o!==!0&&(window.devtoolsFormatters=window.devtoolsFormatters||[], window.devtoolsFormatters.push(e(n)), o=!0);};},function(n,r){function t(n){if(Array.isArray(n)){for(var r=0,t=Array(n.length);r<n.length;r++)t[r]=n[r];return t}return Array.from(n)}var e={style:"list-style-type: none; padding: 0; margin: 0 0 0 12px"},o={style:"color:#881391"};n.exports=function(n){function r(n,r){return["object",{object:n,config:r}]}function u(n){return n.size>0}function a(n){return["span",o,n+": "]}function i(n){var o=n.map(function(n,t){return["li",a(t),r(n)]}).toList().toJS();return["ol",e].concat(t(o))}function d(n){var o=n.map(function(n){return["li",r(n)]}).toJS();return["ol",e].concat(t(o))}function s(r){return r instanceof n.Record?v:Object.keys(w).filter(function(t){return n[t]["is"+t](r)}).map(function(n){return w[n]}).concat(f)[0]}var c={},f={header:function(n,t){return t===c?null:r(n,c)},hasBody:function(n,r){return!1},body:function(n,r){return null}},l={header:function(){return["span","Map"]},hasBody:u,body:i},y={header:function(){return["span","OrderedMap"]},hasBody:u,body:i},p={header:function(){return["span","List"]},hasBody:u,body:i},h={header:function(){return["span","Stack"]},hasBody:u,body:d},m={header:function(){return["span","Set"]},hasBody:u,body:d},b={header:function(){return["span","OrderedSet"]},hasBody:u,body:d},v={header:function(){return["span","Record"]},hasBody:u,body:function(n){var o=n.keySeq().map(function(t){return["li",a(t),r(n.get(t))]}).toJS();return["ol",e].concat(t(o))}},w={OrderedMap:y,OrderedSet:b,List:p,Map:l,Set:m,Stack:h};return{header:function(n,r){return s(n).header(n,r)},hasBody:function(n,r){return s(n).hasBody(n,r)},body:function(n,r){return s(n).body(n,r)}}};}]);

	var entry = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.filter = exports.percentile = exports.stdev = exports.median = exports.difference = exports.last = exports.first = exports.count = exports.min = exports.max = exports.avg = exports.sum = exports.keep = exports.CollectionOut = exports.EventOut = exports.PipelineOut = exports.Bounded = exports.Stream = exports.Pipeline = exports.TimeSeries = exports.Collection = exports.TimeRange = exports.Index = exports.IndexedEvent = exports.TimeRangeEvent = exports.TimeEvent = exports.Event = undefined;



	Object.defineProperty(exports, "Pipeline", {
	    enumerable: true,
	    get: function get() {
	        return pipeline_1.Pipeline;
	    }
	});



	Object.defineProperty(exports, "keep", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.keep;
	    }
	});
	Object.defineProperty(exports, "sum", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.sum;
	    }
	});
	Object.defineProperty(exports, "avg", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.avg;
	    }
	});
	Object.defineProperty(exports, "max", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.max;
	    }
	});
	Object.defineProperty(exports, "min", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.min;
	    }
	});
	Object.defineProperty(exports, "count", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.count;
	    }
	});
	Object.defineProperty(exports, "first", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.first;
	    }
	});
	Object.defineProperty(exports, "last", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.last;
	    }
	});
	Object.defineProperty(exports, "difference", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.difference;
	    }
	});
	Object.defineProperty(exports, "median", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.median;
	    }
	});
	Object.defineProperty(exports, "stdev", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.stdev;
	    }
	});
	Object.defineProperty(exports, "percentile", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.percentile;
	    }
	});
	Object.defineProperty(exports, "filter", {
	    enumerable: true,
	    get: function get() {
	        return functions$2.filter;
	    }
	});



	var _event2 = _interopRequireDefault(event);



	var _timeevent2 = _interopRequireDefault(timeevent);



	var _timerangeevent2 = _interopRequireDefault(timerangeevent);



	var _indexedevent2 = _interopRequireDefault(indexedevent);



	var _index2 = _interopRequireDefault(lib$9);



	var _timerange2 = _interopRequireDefault(timerange);



	var _collection2 = _interopRequireDefault(collection);



	var _timeseries2 = _interopRequireDefault(timeseries);



	var _stream2 = _interopRequireDefault(stream);



	var _bounded2 = _interopRequireDefault(bounded);



	var _pipelineout2 = _interopRequireDefault(pipelineout);



	var _eventout2 = _interopRequireDefault(eventout);



	var _collectionout2 = _interopRequireDefault(collectionout);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 *  Copyright (c) 2016-2017, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	// Chrome debugging for immutable.js structures


	if (typeof window !== "undefined") {
	    dist(immutable);
	}

	// Structures
	exports.Event = _event2.default;
	exports.TimeEvent = _timeevent2.default;
	exports.TimeRangeEvent = _timerangeevent2.default;
	exports.IndexedEvent = _indexedevent2.default;
	exports.Index = _index2.default;
	exports.TimeRange = _timerange2.default;
	exports.Collection = _collection2.default;
	exports.TimeSeries = _timeseries2.default;

	// Pipeline


	// I/O

	exports.Stream = _stream2.default;
	exports.Bounded = _bounded2.default;
	exports.PipelineOut = _pipelineout2.default;
	exports.EventOut = _eventout2.default;
	exports.CollectionOut = _collectionout2.default;

	// Functions
	});

	unwrapExports(entry);
	var entry_1 = entry.filter;
	var entry_2 = entry.percentile;
	var entry_3 = entry.stdev;
	var entry_4 = entry.median;
	var entry_5 = entry.difference;
	var entry_6 = entry.last;
	var entry_7 = entry.first;
	var entry_8 = entry.count;
	var entry_9 = entry.min;
	var entry_10 = entry.max;
	var entry_11 = entry.avg;
	var entry_12 = entry.sum;
	var entry_13 = entry.keep;
	var entry_14 = entry.CollectionOut;
	var entry_15 = entry.EventOut;
	var entry_16 = entry.PipelineOut;
	var entry_17 = entry.Bounded;
	var entry_18 = entry.Stream;
	var entry_19 = entry.Pipeline;
	var entry_20 = entry.TimeSeries;
	var entry_21 = entry.Collection;
	var entry_22 = entry.TimeRange;
	var entry_23 = entry.Index;
	var entry_24 = entry.IndexedEvent;
	var entry_25 = entry.TimeRangeEvent;
	var entry_26 = entry.TimeEvent;
	var entry_27 = entry.Event;

	var util$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.scaleAsString = scaleAsString;
	exports.getElementOffset = getElementOffset;
	/**
	 *  Copyright (c) 2016, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	function scaleAsString(scale) {
	    return scale.domain() + "-" + scale.range();
	}

	// http://stackoverflow.com/a/28857255
	function getElementOffset(element) {
	    var de = document.documentElement;
	    var box = element.getBoundingClientRect();
	    var top = box.top + window.pageYOffset - de.clientTop;
	    var left = box.left + window.pageXOffset - de.clientLeft;
	    return { top: top, left: left };
	}
	});

	unwrapExports(util$2);
	var util_1 = util$2.scaleAsString;
	var util_2 = util$2.getElementOffset;

	var colorbrewer = createCommonjsModule(function (module) {
	// This product includes color specifications and designs developed by Cynthia Brewer (http://colorbrewer.org/).
	// JavaScript specs as packaged in the D3 library (d3js.org). Please see license at http://colorbrewer.org/export/LICENSE.txt
	!function() {

	var colorbrewer = {YlGn: {
	3: ["#f7fcb9","#addd8e","#31a354"],
	4: ["#ffffcc","#c2e699","#78c679","#238443"],
	5: ["#ffffcc","#c2e699","#78c679","#31a354","#006837"],
	6: ["#ffffcc","#d9f0a3","#addd8e","#78c679","#31a354","#006837"],
	7: ["#ffffcc","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#005a32"],
	8: ["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#005a32"],
	9: ["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529"]
	},YlGnBu: {
	3: ["#edf8b1","#7fcdbb","#2c7fb8"],
	4: ["#ffffcc","#a1dab4","#41b6c4","#225ea8"],
	5: ["#ffffcc","#a1dab4","#41b6c4","#2c7fb8","#253494"],
	6: ["#ffffcc","#c7e9b4","#7fcdbb","#41b6c4","#2c7fb8","#253494"],
	7: ["#ffffcc","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#0c2c84"],
	8: ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#0c2c84"],
	9: ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"]
	},GnBu: {
	3: ["#e0f3db","#a8ddb5","#43a2ca"],
	4: ["#f0f9e8","#bae4bc","#7bccc4","#2b8cbe"],
	5: ["#f0f9e8","#bae4bc","#7bccc4","#43a2ca","#0868ac"],
	6: ["#f0f9e8","#ccebc5","#a8ddb5","#7bccc4","#43a2ca","#0868ac"],
	7: ["#f0f9e8","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#08589e"],
	8: ["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#08589e"],
	9: ["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#0868ac","#084081"]
	},BuGn: {
	3: ["#e5f5f9","#99d8c9","#2ca25f"],
	4: ["#edf8fb","#b2e2e2","#66c2a4","#238b45"],
	5: ["#edf8fb","#b2e2e2","#66c2a4","#2ca25f","#006d2c"],
	6: ["#edf8fb","#ccece6","#99d8c9","#66c2a4","#2ca25f","#006d2c"],
	7: ["#edf8fb","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#005824"],
	8: ["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#005824"],
	9: ["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#006d2c","#00441b"]
	},PuBuGn: {
	3: ["#ece2f0","#a6bddb","#1c9099"],
	4: ["#f6eff7","#bdc9e1","#67a9cf","#02818a"],
	5: ["#f6eff7","#bdc9e1","#67a9cf","#1c9099","#016c59"],
	6: ["#f6eff7","#d0d1e6","#a6bddb","#67a9cf","#1c9099","#016c59"],
	7: ["#f6eff7","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016450"],
	8: ["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016450"],
	9: ["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016c59","#014636"]
	},PuBu: {
	3: ["#ece7f2","#a6bddb","#2b8cbe"],
	4: ["#f1eef6","#bdc9e1","#74a9cf","#0570b0"],
	5: ["#f1eef6","#bdc9e1","#74a9cf","#2b8cbe","#045a8d"],
	6: ["#f1eef6","#d0d1e6","#a6bddb","#74a9cf","#2b8cbe","#045a8d"],
	7: ["#f1eef6","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#034e7b"],
	8: ["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#034e7b"],
	9: ["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#045a8d","#023858"]
	},BuPu: {
	3: ["#e0ecf4","#9ebcda","#8856a7"],
	4: ["#edf8fb","#b3cde3","#8c96c6","#88419d"],
	5: ["#edf8fb","#b3cde3","#8c96c6","#8856a7","#810f7c"],
	6: ["#edf8fb","#bfd3e6","#9ebcda","#8c96c6","#8856a7","#810f7c"],
	7: ["#edf8fb","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#6e016b"],
	8: ["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#6e016b"],
	9: ["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#810f7c","#4d004b"]
	},RdPu: {
	3: ["#fde0dd","#fa9fb5","#c51b8a"],
	4: ["#feebe2","#fbb4b9","#f768a1","#ae017e"],
	5: ["#feebe2","#fbb4b9","#f768a1","#c51b8a","#7a0177"],
	6: ["#feebe2","#fcc5c0","#fa9fb5","#f768a1","#c51b8a","#7a0177"],
	7: ["#feebe2","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177"],
	8: ["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177"],
	9: ["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177","#49006a"]
	},PuRd: {
	3: ["#e7e1ef","#c994c7","#dd1c77"],
	4: ["#f1eef6","#d7b5d8","#df65b0","#ce1256"],
	5: ["#f1eef6","#d7b5d8","#df65b0","#dd1c77","#980043"],
	6: ["#f1eef6","#d4b9da","#c994c7","#df65b0","#dd1c77","#980043"],
	7: ["#f1eef6","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#91003f"],
	8: ["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#91003f"],
	9: ["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#980043","#67001f"]
	},OrRd: {
	3: ["#fee8c8","#fdbb84","#e34a33"],
	4: ["#fef0d9","#fdcc8a","#fc8d59","#d7301f"],
	5: ["#fef0d9","#fdcc8a","#fc8d59","#e34a33","#b30000"],
	6: ["#fef0d9","#fdd49e","#fdbb84","#fc8d59","#e34a33","#b30000"],
	7: ["#fef0d9","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#990000"],
	8: ["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#990000"],
	9: ["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000"]
	},YlOrRd: {
	3: ["#ffeda0","#feb24c","#f03b20"],
	4: ["#ffffb2","#fecc5c","#fd8d3c","#e31a1c"],
	5: ["#ffffb2","#fecc5c","#fd8d3c","#f03b20","#bd0026"],
	6: ["#ffffb2","#fed976","#feb24c","#fd8d3c","#f03b20","#bd0026"],
	7: ["#ffffb2","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#b10026"],
	8: ["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#b10026"],
	9: ["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#bd0026","#800026"]
	},YlOrBr: {
	3: ["#fff7bc","#fec44f","#d95f0e"],
	4: ["#ffffd4","#fed98e","#fe9929","#cc4c02"],
	5: ["#ffffd4","#fed98e","#fe9929","#d95f0e","#993404"],
	6: ["#ffffd4","#fee391","#fec44f","#fe9929","#d95f0e","#993404"],
	7: ["#ffffd4","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#8c2d04"],
	8: ["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#8c2d04"],
	9: ["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#993404","#662506"]
	},Purples: {
	3: ["#efedf5","#bcbddc","#756bb1"],
	4: ["#f2f0f7","#cbc9e2","#9e9ac8","#6a51a3"],
	5: ["#f2f0f7","#cbc9e2","#9e9ac8","#756bb1","#54278f"],
	6: ["#f2f0f7","#dadaeb","#bcbddc","#9e9ac8","#756bb1","#54278f"],
	7: ["#f2f0f7","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#4a1486"],
	8: ["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#4a1486"],
	9: ["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#54278f","#3f007d"]
	},Blues: {
	3: ["#deebf7","#9ecae1","#3182bd"],
	4: ["#eff3ff","#bdd7e7","#6baed6","#2171b5"],
	5: ["#eff3ff","#bdd7e7","#6baed6","#3182bd","#08519c"],
	6: ["#eff3ff","#c6dbef","#9ecae1","#6baed6","#3182bd","#08519c"],
	7: ["#eff3ff","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#084594"],
	8: ["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#084594"],
	9: ["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]
	},Greens: {
	3: ["#e5f5e0","#a1d99b","#31a354"],
	4: ["#edf8e9","#bae4b3","#74c476","#238b45"],
	5: ["#edf8e9","#bae4b3","#74c476","#31a354","#006d2c"],
	6: ["#edf8e9","#c7e9c0","#a1d99b","#74c476","#31a354","#006d2c"],
	7: ["#edf8e9","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#005a32"],
	8: ["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#005a32"],
	9: ["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#006d2c","#00441b"]
	},Oranges: {
	3: ["#fee6ce","#fdae6b","#e6550d"],
	4: ["#feedde","#fdbe85","#fd8d3c","#d94701"],
	5: ["#feedde","#fdbe85","#fd8d3c","#e6550d","#a63603"],
	6: ["#feedde","#fdd0a2","#fdae6b","#fd8d3c","#e6550d","#a63603"],
	7: ["#feedde","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#8c2d04"],
	8: ["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#8c2d04"],
	9: ["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#a63603","#7f2704"]
	},Reds: {
	3: ["#fee0d2","#fc9272","#de2d26"],
	4: ["#fee5d9","#fcae91","#fb6a4a","#cb181d"],
	5: ["#fee5d9","#fcae91","#fb6a4a","#de2d26","#a50f15"],
	6: ["#fee5d9","#fcbba1","#fc9272","#fb6a4a","#de2d26","#a50f15"],
	7: ["#fee5d9","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#99000d"],
	8: ["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#99000d"],
	9: ["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15","#67000d"]
	},Greys: {
	3: ["#f0f0f0","#bdbdbd","#636363"],
	4: ["#f7f7f7","#cccccc","#969696","#525252"],
	5: ["#f7f7f7","#cccccc","#969696","#636363","#252525"],
	6: ["#f7f7f7","#d9d9d9","#bdbdbd","#969696","#636363","#252525"],
	7: ["#f7f7f7","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525"],
	8: ["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525"],
	9: ["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525","#000000"]
	},PuOr: {
	3: ["#f1a340","#f7f7f7","#998ec3"],
	4: ["#e66101","#fdb863","#b2abd2","#5e3c99"],
	5: ["#e66101","#fdb863","#f7f7f7","#b2abd2","#5e3c99"],
	6: ["#b35806","#f1a340","#fee0b6","#d8daeb","#998ec3","#542788"],
	7: ["#b35806","#f1a340","#fee0b6","#f7f7f7","#d8daeb","#998ec3","#542788"],
	8: ["#b35806","#e08214","#fdb863","#fee0b6","#d8daeb","#b2abd2","#8073ac","#542788"],
	9: ["#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788"],
	10: ["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"],
	11: ["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"]
	},BrBG: {
	3: ["#d8b365","#f5f5f5","#5ab4ac"],
	4: ["#a6611a","#dfc27d","#80cdc1","#018571"],
	5: ["#a6611a","#dfc27d","#f5f5f5","#80cdc1","#018571"],
	6: ["#8c510a","#d8b365","#f6e8c3","#c7eae5","#5ab4ac","#01665e"],
	7: ["#8c510a","#d8b365","#f6e8c3","#f5f5f5","#c7eae5","#5ab4ac","#01665e"],
	8: ["#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e"],
	9: ["#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e"],
	10: ["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"],
	11: ["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"]
	},PRGn: {
	3: ["#af8dc3","#f7f7f7","#7fbf7b"],
	4: ["#7b3294","#c2a5cf","#a6dba0","#008837"],
	5: ["#7b3294","#c2a5cf","#f7f7f7","#a6dba0","#008837"],
	6: ["#762a83","#af8dc3","#e7d4e8","#d9f0d3","#7fbf7b","#1b7837"],
	7: ["#762a83","#af8dc3","#e7d4e8","#f7f7f7","#d9f0d3","#7fbf7b","#1b7837"],
	8: ["#762a83","#9970ab","#c2a5cf","#e7d4e8","#d9f0d3","#a6dba0","#5aae61","#1b7837"],
	9: ["#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837"],
	10: ["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"],
	11: ["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"]
	},PiYG: {
	3: ["#e9a3c9","#f7f7f7","#a1d76a"],
	4: ["#d01c8b","#f1b6da","#b8e186","#4dac26"],
	5: ["#d01c8b","#f1b6da","#f7f7f7","#b8e186","#4dac26"],
	6: ["#c51b7d","#e9a3c9","#fde0ef","#e6f5d0","#a1d76a","#4d9221"],
	7: ["#c51b7d","#e9a3c9","#fde0ef","#f7f7f7","#e6f5d0","#a1d76a","#4d9221"],
	8: ["#c51b7d","#de77ae","#f1b6da","#fde0ef","#e6f5d0","#b8e186","#7fbc41","#4d9221"],
	9: ["#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221"],
	10: ["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"],
	11: ["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"]
	},RdBu: {
	3: ["#ef8a62","#f7f7f7","#67a9cf"],
	4: ["#ca0020","#f4a582","#92c5de","#0571b0"],
	5: ["#ca0020","#f4a582","#f7f7f7","#92c5de","#0571b0"],
	6: ["#b2182b","#ef8a62","#fddbc7","#d1e5f0","#67a9cf","#2166ac"],
	7: ["#b2182b","#ef8a62","#fddbc7","#f7f7f7","#d1e5f0","#67a9cf","#2166ac"],
	8: ["#b2182b","#d6604d","#f4a582","#fddbc7","#d1e5f0","#92c5de","#4393c3","#2166ac"],
	9: ["#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac"],
	10: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"],
	11: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"]
	},RdGy: {
	3: ["#ef8a62","#ffffff","#999999"],
	4: ["#ca0020","#f4a582","#bababa","#404040"],
	5: ["#ca0020","#f4a582","#ffffff","#bababa","#404040"],
	6: ["#b2182b","#ef8a62","#fddbc7","#e0e0e0","#999999","#4d4d4d"],
	7: ["#b2182b","#ef8a62","#fddbc7","#ffffff","#e0e0e0","#999999","#4d4d4d"],
	8: ["#b2182b","#d6604d","#f4a582","#fddbc7","#e0e0e0","#bababa","#878787","#4d4d4d"],
	9: ["#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d"],
	10: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"],
	11: ["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"]
	},RdYlBu: {
	3: ["#fc8d59","#ffffbf","#91bfdb"],
	4: ["#d7191c","#fdae61","#abd9e9","#2c7bb6"],
	5: ["#d7191c","#fdae61","#ffffbf","#abd9e9","#2c7bb6"],
	6: ["#d73027","#fc8d59","#fee090","#e0f3f8","#91bfdb","#4575b4"],
	7: ["#d73027","#fc8d59","#fee090","#ffffbf","#e0f3f8","#91bfdb","#4575b4"],
	8: ["#d73027","#f46d43","#fdae61","#fee090","#e0f3f8","#abd9e9","#74add1","#4575b4"],
	9: ["#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4"],
	10: ["#a50026","#d73027","#f46d43","#fdae61","#fee090","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"],
	11: ["#a50026","#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"]
	},Spectral: {
	3: ["#fc8d59","#ffffbf","#99d594"],
	4: ["#d7191c","#fdae61","#abdda4","#2b83ba"],
	5: ["#d7191c","#fdae61","#ffffbf","#abdda4","#2b83ba"],
	6: ["#d53e4f","#fc8d59","#fee08b","#e6f598","#99d594","#3288bd"],
	7: ["#d53e4f","#fc8d59","#fee08b","#ffffbf","#e6f598","#99d594","#3288bd"],
	8: ["#d53e4f","#f46d43","#fdae61","#fee08b","#e6f598","#abdda4","#66c2a5","#3288bd"],
	9: ["#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd"],
	10: ["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"],
	11: ["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"]
	},RdYlGn: {
	3: ["#fc8d59","#ffffbf","#91cf60"],
	4: ["#d7191c","#fdae61","#a6d96a","#1a9641"],
	5: ["#d7191c","#fdae61","#ffffbf","#a6d96a","#1a9641"],
	6: ["#d73027","#fc8d59","#fee08b","#d9ef8b","#91cf60","#1a9850"],
	7: ["#d73027","#fc8d59","#fee08b","#ffffbf","#d9ef8b","#91cf60","#1a9850"],
	8: ["#d73027","#f46d43","#fdae61","#fee08b","#d9ef8b","#a6d96a","#66bd63","#1a9850"],
	9: ["#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850"],
	10: ["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"],
	11: ["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"]
	},Accent: {
	3: ["#7fc97f","#beaed4","#fdc086"],
	4: ["#7fc97f","#beaed4","#fdc086","#ffff99"],
	5: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0"],
	6: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f"],
	7: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17"],
	8: ["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17","#666666"]
	},Dark2: {
	3: ["#1b9e77","#d95f02","#7570b3"],
	4: ["#1b9e77","#d95f02","#7570b3","#e7298a"],
	5: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e"],
	6: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02"],
	7: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d"],
	8: ["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"]
	},Paired: {
	3: ["#a6cee3","#1f78b4","#b2df8a"],
	4: ["#a6cee3","#1f78b4","#b2df8a","#33a02c"],
	5: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99"],
	6: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c"],
	7: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f"],
	8: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00"],
	9: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6"],
	10: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a"],
	11: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99"],
	12: ["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928"]
	},Pastel1: {
	3: ["#fbb4ae","#b3cde3","#ccebc5"],
	4: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4"],
	5: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6"],
	6: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc"],
	7: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd"],
	8: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec"],
	9: ["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec","#f2f2f2"]
	},Pastel2: {
	3: ["#b3e2cd","#fdcdac","#cbd5e8"],
	4: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4"],
	5: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9"],
	6: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae"],
	7: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc"],
	8: ["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc","#cccccc"]
	},Set1: {
	3: ["#e41a1c","#377eb8","#4daf4a"],
	4: ["#e41a1c","#377eb8","#4daf4a","#984ea3"],
	5: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00"],
	6: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33"],
	7: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628"],
	8: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf"],
	9: ["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf","#999999"]
	},Set2: {
	3: ["#66c2a5","#fc8d62","#8da0cb"],
	4: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3"],
	5: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854"],
	6: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f"],
	7: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494"],
	8: ["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494","#b3b3b3"]
	},Set3: {
	3: ["#8dd3c7","#ffffb3","#bebada"],
	4: ["#8dd3c7","#ffffb3","#bebada","#fb8072"],
	5: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3"],
	6: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462"],
	7: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69"],
	8: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5"],
	9: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9"],
	10: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd"],
	11: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5"],
	12: ["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5","#ffed6f"]
	}};

	if (typeof undefined === "function" && undefined.amd) {
	    undefined(colorbrewer);
	} else if ('object' === "object" && module.exports) {
	    module.exports = colorbrewer;
	} else {
	    this.colorbrewer = colorbrewer;
	}

	}();
	});

	var styler_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.Styler = undefined;

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})(); /**
	 *  Copyright (c) 2016, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	exports.default = styler;



	var _underscore2 = _interopRequireDefault(underscore);



	var _colorbrewer2 = _interopRequireDefault(colorbrewer);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _objectWithoutProperties(obj, keys) {
	    var target = {};
	    for (var i in obj) {
	        if (keys.indexOf(i) >= 0) continue;
	        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	        target[i] = obj[i];
	    }
	    return target;
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	/**
	 * For our Style we want to represent two things:
	 *
	 *   1. The overall style of an AreaChart should be consistent across a site
	 *   2. The specific style of a columnName (e.g. "pressure") should be consistent
	 *
	 * The overall style is implemented with methods specific to
	 * each chart type or entity:
	 *
	 *   - lineChartStyle()
	 *   - areaChartStyle()
	 *   - legendStyle()
	 *   - etc
	 *
	 * These will render out an object that can be passed into the
	 * charts themselves and will control the visual appearance,
	 * keyed by columnName. This abstracts away the SVG details of the
	 * underlying DOM elements.
	 *
	 * For the specific style we define here three out of the box parameters
	 * by which one column can be different from another when rendered:
	 *   - color
	 *   - width (of a line)
	 *   - dashed or not
	 *
	 */
	var Styler = (exports.Styler = (function() {
	    /**
	     * The columns define the style associated with a particular
	     * quantity, such as "inTraffic" or "temperature". The columns
	     * are an array, with each element being either a string, or
	     * and object defining the style.
	     *
	     *  * Using a string makes the assumption that you want to use a
	     * color scheme, so you need to define that if you don't want the
	     * default. A color will be then assigned to each column based
	     * on the scheme. The string is the column name.
	     *
	     *  * In the second case of providing an object, you define properties
	     * of the style yourself. Each object should contain a "key" property
	     * which is the column name and optionally the `width` and `dashed`
	     * property. If you don't supply the color, then the color
	     * will come from the scheme.
	     *
	     */
	    function Styler(columns) {
	        var _this = this;

	        var scheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "Paired";

	        _classCallCheck(this, Styler);

	        this.columnStyles = {};
	        if (_underscore2.default.isArray(columns)) {
	            columns.forEach(function(column) {
	                if (_underscore2.default.isString(column)) {
	                    _this.columnStyles[column] = { key: column };
	                } else if (_underscore2.default.isObject(column)) {
	                    var key = column.key,
	                        style = _objectWithoutProperties(column, ["key"]);

	                    _this.columnStyles[key] = style;
	                }
	            });
	        }
	        this.columnNames = _underscore2.default.map(columns, function(c) {
	            var cc = _underscore2.default.isString(c) ? c : c.key;
	            return cc;
	        });

	        if (scheme && !_underscore2.default.has(_colorbrewer2.default, scheme)) {
	            throw new Error("Unknown scheme '" + scheme + "' supplied to Style constructor");
	        }
	        this.colorScheme = scheme;
	    }

	    _createClass(Styler, [
	        {
	            key: "numColumns",
	            value: function numColumns() {
	                return this.columnNames.length;
	            }

	            /**
	             * Returns the color scheme with the appropiate number of colors.
	             * If there are more columns than the largest set in the scheme then
	             * just the largest scheme set will be returned.
	             * If there are less columns than the smallest set in the scheme then
	             * just the smallest scheme will be returned.
	             * @param  {number} columnCount The number of columns to apply the scheme to
	             * @return {array}              An array with the scheme colors in it.
	             */
	        },
	        {
	            key: "colorLookup",
	            value: function colorLookup(columnCount) {
	                var colorSchemeKeys = _underscore2.default.keys(
	                    _colorbrewer2.default[this.colorScheme]
	                );
	                var minSchemeSize = _underscore2.default.min(colorSchemeKeys);
	                var maxSchemeSize = _underscore2.default.max(colorSchemeKeys);
	                var colorLookupSize = columnCount > maxSchemeSize ? maxSchemeSize : columnCount;
	                colorLookupSize = _underscore2.default.max([colorLookupSize, minSchemeSize]);
	                return this.colorScheme
	                    ? _colorbrewer2.default[this.colorScheme][colorLookupSize]
	                    : [];
	            }

	            /**
	             */
	        },
	        {
	            key: "legendStyle",
	            value: function legendStyle(column, type) {
	                var numColumns = this.numColumns();
	                var colorLookup = this.colorLookup(numColumns);
	                var i = _underscore2.default.indexOf(this.columnNames, column);
	                var columnName = this.columnNames[i];
	                var _columnStyles$columnN = this.columnStyles[columnName],
	                    color = _columnStyles$columnN.color,
	                    _columnStyles$columnN2 = _columnStyles$columnN.width,
	                    width = _columnStyles$columnN2 === undefined ? 1 : _columnStyles$columnN2,
	                    _columnStyles$columnN3 = _columnStyles$columnN.dashed,
	                    dashed = _columnStyles$columnN3 === undefined ? false : _columnStyles$columnN3;

	                var c = color || colorLookup[i % colorLookup.length];

	                var styleSymbol = {};
	                if (type === "swatch" || type === "dot") {
	                    styleSymbol = {
	                        fill: c,
	                        opacity: 0.9,
	                        stroke: c,
	                        cursor: "pointer"
	                    };
	                } else if (type === "line") {
	                    styleSymbol = {
	                        opacity: 0.9,
	                        stroke: c,
	                        strokeWidth: width,
	                        cursor: "pointer"
	                    };
	                    if (dashed) {
	                        styleSymbol.strokeDasharray = "4,2";
	                    }
	                }

	                var labelStyle = {
	                    fontSize: "normal",
	                    color: "#333",
	                    paddingRight: 10,
	                    cursor: "pointer"
	                };
	                var valueStyle = {
	                    fontSize: "smaller",
	                    color: "#999",
	                    cursor: "pointer"
	                };
	                var legendStyle = {
	                    symbol: {
	                        normal: _extends({}, styleSymbol, { opacity: 0.7 }),
	                        highlighted: _extends({}, styleSymbol, { opacity: 0.8 }),
	                        selected: _extends({}, styleSymbol, { opacity: 0.8 }),
	                        muted: _extends({}, styleSymbol, { opacity: 0.2 })
	                    },
	                    label: {
	                        normal: _extends({}, labelStyle, { opacity: 0.7 }),
	                        highlighted: _extends({}, labelStyle, { opacity: 0.8 }),
	                        selected: _extends({}, labelStyle, { opacity: 0.8 }),
	                        muted: _extends({}, labelStyle, { opacity: 0.5 })
	                    },
	                    value: {
	                        normal: _extends({}, valueStyle, { opacity: 0.7 }),
	                        highlighted: _extends({}, valueStyle, { opacity: 0.8 }),
	                        selected: _extends({}, valueStyle, { opacity: 0.8 }),
	                        muted: _extends({}, valueStyle, { opacity: 0.5 })
	                    }
	                };
	                return legendStyle;
	            }
	        },
	        {
	            key: "areaChartStyle",
	            value: function areaChartStyle() {
	                var style = {};

	                var numColumns = this.numColumns();
	                var colorLookup = this.colorLookup(numColumns);

	                var i = 0;
	                _underscore2.default.forEach(this.columnStyles, function(_ref, column) {
	                    var color = _ref.color,
	                        selected = _ref.selected,
	                        _ref$width = _ref.width,
	                        width = _ref$width === undefined ? 1 : _ref$width,
	                        _ref$dashed = _ref.dashed,
	                        dashed = _ref$dashed === undefined ? false : _ref$dashed;

	                    var c = color || colorLookup[i % colorLookup.length];
	                    var styleLine = {
	                        stroke: c,
	                        fill: "none",
	                        strokeWidth: width
	                    };
	                    var styleSelectedLine = {
	                        stroke: selected || color,
	                        fill: "none",
	                        strokeWidth: width
	                    };
	                    if (dashed) {
	                        styleLine.strokeDasharray = "4,2";
	                    }
	                    var styleArea = {
	                        fill: c,
	                        stroke: "none"
	                    };
	                    var styleSelectedArea = {
	                        fill: selected || color,
	                        stroke: "none"
	                    };
	                    style[column] = {
	                        line: {
	                            normal: _extends({}, styleLine, { opacity: 0.9 }),
	                            highlighted: _extends({}, styleLine, { opacity: 1.0 }),
	                            selected: _extends({}, styleSelectedLine, { opacity: 1.0 }),
	                            muted: _extends({}, styleLine, { opacity: 0.4 })
	                        },
	                        area: {
	                            normal: _extends({}, styleArea, { opacity: 0.7 }),
	                            highlighted: _extends({}, styleArea, { opacity: 0.8 }),
	                            selected: _extends({}, styleSelectedArea, { opacity: 0.8 }),
	                            muted: _extends({}, styleArea, { opacity: 0.2 })
	                        }
	                    };
	                    i += 1;
	                });
	                return style;
	            }
	        },
	        {
	            key: "lineChartStyle",
	            value: function lineChartStyle() {
	                var _this2 = this;

	                var numColumns = this.numColumns();
	                var colorLookup = this.colorLookup(numColumns);
	                var style = {};
	                _underscore2.default.forEach(this.columnStyles, function(_ref2, column) {
	                    var color = _ref2.color,
	                        selected = _ref2.selected,
	                        _ref2$width = _ref2.width,
	                        width = _ref2$width === undefined ? 1 : _ref2$width,
	                        _ref2$dashed = _ref2.dashed,
	                        dashed = _ref2$dashed === undefined ? false : _ref2$dashed;

	                    var i = _underscore2.default.indexOf(_this2.columnNames, column);
	                    var c = color || colorLookup[i % colorLookup.length];
	                    var styleLine = {
	                        stroke: c,
	                        strokeWidth: width,
	                        fill: "none"
	                    };
	                    var styleSelectedLine = {
	                        stroke: selected || c,
	                        strokeWidth: width,
	                        fill: "none"
	                    };

	                    if (dashed) {
	                        styleLine.strokeDasharray = "4,2";
	                    }
	                    style[column] = {
	                        normal: _extends({}, styleLine, { opacity: 0.8, strokeWidth: width }),
	                        highlighted: _extends({}, styleLine, { opacity: 1.0, strokeWidth: width }),
	                        selected: _extends({}, styleSelectedLine, {
	                            opacity: 1.0,
	                            strokeWidth: width
	                        }),
	                        muted: _extends({}, styleLine, { opacity: 0.2, strokeWidth: width })
	                    };
	                });
	                return style;
	            }
	        },
	        {
	            key: "barChartStyle",
	            value: function barChartStyle() {
	                var _this3 = this;

	                var numColumns = this.numColumns();
	                var colorLookup = this.colorLookup(numColumns);
	                var style = {};
	                _underscore2.default.forEach(this.columnStyles, function(_ref3, column) {
	                    var color = _ref3.color,
	                        selected = _ref3.selected;

	                    var i = _underscore2.default.indexOf(_this3.columnNames, column);
	                    var c = color || colorLookup[i % colorLookup.length];
	                    var fillStyle = {
	                        fill: c
	                    };
	                    var selectedStyle = {
	                        fill: selected || c
	                    };
	                    style[column] = {
	                        normal: _extends({}, fillStyle, { opacity: 0.8 }),
	                        highlighted: _extends({}, fillStyle, { opacity: 1.0 }),
	                        selected: _extends({}, selectedStyle, { opacity: 1.0 }),
	                        muted: _extends({}, fillStyle, { opacity: 0.2 })
	                    };
	                });
	                return style;
	            }
	        },
	        {
	            key: "scatterChartStyle",
	            value: function scatterChartStyle() {
	                var _this4 = this;

	                var numColumns = this.numColumns();
	                var colorLookup = this.colorLookup(numColumns);
	                var style = {};
	                _underscore2.default.forEach(this.columnStyles, function(_ref4, column) {
	                    var color = _ref4.color,
	                        selected = _ref4.selected;

	                    var i = _underscore2.default.indexOf(_this4.columnNames, column);
	                    var c = color || colorLookup[i % colorLookup.length];
	                    var fillStyle = {
	                        fill: c
	                    };
	                    var selectedStyle = {
	                        fill: selected || c
	                    };
	                    style[column] = {
	                        normal: _extends({}, fillStyle, { opacity: 0.8 }),
	                        highlighted: _extends({}, fillStyle, { opacity: 1.0 }),
	                        selected: _extends({}, selectedStyle, { opacity: 1.0 }),
	                        muted: _extends({}, fillStyle, { opacity: 0.2 })
	                    };
	                });
	                return style;
	            }
	        },
	        {
	            key: "axisStyle",
	            value: function axisStyle(column) {
	                var numColumns = this.numColumns();
	                var colorLookup = this.colorLookup(numColumns);
	                var i = _underscore2.default.indexOf(this.columnNames, column);
	                var columnName = this.columnNames[i];
	                var color = this.columnStyles[columnName].color;

	                var c = color || colorLookup[i % colorLookup.length];
	                return {
	                    labelColor: c
	                };
	            }
	        },
	        {
	            key: "boxChartStyle",
	            value: function boxChartStyle() {
	                var style = {};

	                var numColumns = this.numColumns();
	                var colorLookup = this.colorLookup(numColumns);

	                var i = 0;
	                _underscore2.default.forEach(this.columnStyles, function(_ref5, column) {
	                    var color = _ref5.color,
	                        selected = _ref5.selected;

	                    var c = color || colorLookup[i % colorLookup.length];
	                    var styleArea = {
	                        fill: c,
	                        stroke: "none"
	                    };
	                    var styleSelectedArea = {
	                        fill: selected || color,
	                        stroke: "none"
	                    };
	                    style[column] = [
	                        {
	                            normal: _extends({}, styleArea, { opacity: 0.2 }),
	                            highlighted: _extends({}, styleArea, { opacity: 0.3 }),
	                            selected: _extends({}, styleSelectedArea, { opacity: 0.3 }),
	                            muted: _extends({}, styleArea, { opacity: 0.1 })
	                        },
	                        {
	                            normal: _extends({}, styleArea, { opacity: 0.5 }),
	                            highlighted: _extends({}, styleArea, { opacity: 0.6 }),
	                            selected: _extends({}, styleSelectedArea, { opacity: 0.6 }),
	                            muted: _extends({}, styleArea, { opacity: 0.2 })
	                        },
	                        {
	                            normal: _extends({}, styleArea, { opacity: 0.9 }),
	                            highlighted: _extends({}, styleArea, { opacity: 1.0 }),
	                            selected: _extends({}, styleSelectedArea, { opacity: 1.0 }),
	                            muted: _extends({}, styleArea, { opacity: 0.2 })
	                        }
	                    ];
	                    i += 1;
	                });
	                return style;
	            }
	        }
	    ]);

	    return Styler;
	})());

	function styler(columns, scheme) {
	    return new Styler(columns, scheme);
	}
	});

	unwrapExports(styler_1);
	var styler_2 = styler_1.Styler;

	var curve = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	exports.default = {
	    curveBasisClosed: _d3Shape.curveBasisClosed,
	    curveBasisOpen: _d3Shape.curveBasisOpen,
	    curveBasis: _d3Shape.curveBasis,
	    curveBundle: _d3Shape.curveBundle,
	    curveCardinalClosed: _d3Shape.curveCardinalClosed,
	    curveCardinalOpen: _d3Shape.curveCardinalOpen,
	    curveCardinal: _d3Shape.curveCardinal,
	    curveCatmullRomClosed: _d3Shape.curveCatmullRomClosed,
	    curveCatmullRomOpen: _d3Shape.curveCatmullRomOpen,
	    curveCatmullRom: _d3Shape.curveCatmullRom,
	    curveLinearClosed: _d3Shape.curveLinearClosed,
	    curveLinear: _d3Shape.curveLinear,
	    curveMonotoneX: _d3Shape.curveMonotoneX,
	    curveMonotoneY: _d3Shape.curveMonotoneY,
	    curveNatural: _d3Shape.curveNatural,
	    curveStep: _d3Shape.curveStep,
	    curveStepAfter: _d3Shape.curveStepAfter,
	    curveStepBefore: _d3Shape.curveStepBefore
	}; /**
	    *  Copyright (c) 2017, The Regents of the University of California,
	    *  through Lawrence Berkeley National Laboratory (subject to receipt
	    *  of any required approvals from the U.S. Dept. of Energy).
	    *  All rights reserved.
	    *
	    *  This source code is licensed under the BSD-style license found in the
	    *  LICENSE file in the root directory of this source tree.
	    */
	});

	unwrapExports(curve);

	var AreaChart_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();





	var _underscore2 = _interopRequireDefault(underscore);





	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);









	var _curve2 = _interopRequireDefault(curve);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var defaultStyle = {
	    line: {
	        normal: { stroke: "steelblue", fill: "none", strokeWidth: 1 },
	        highlighted: { stroke: "#5a98cb", fill: "none", strokeWidth: 1 },
	        selected: { stroke: "steelblue", fill: "none", strokeWidth: 1 },
	        muted: { stroke: "steelblue", fill: "none", opacity: 0.4, strokeWidth: 1 }
	    },
	    area: {
	        normal: { fill: "steelblue", stroke: "none", opacity: 0.75 },
	        highlighted: { fill: "#5a98cb", stroke: "none", opacity: 0.75 },
	        selected: { fill: "steelblue", stroke: "none", opacity: 0.75 },
	        muted: { fill: "steelblue", stroke: "none", opacity: 0.25 }
	    }
	};

	/**
	 * The `<AreaChart>` component is able to display single or multiple stacked
	 * areas above or below the axis. It used throughout the
	 * [My ESnet Portal](http://my.es.net).

	 * The `<AreaChart>` should be used within a `<ChartContainer>` structure,
	 * as this will construct the horizontal and vertical axis, and manage
	 * other elements. Here is an example of an `<AreaChart>` with an up and down
	 * network traffic visualization:
	 *
	 *  ```
	 *   render() {
	 *      return (
	 *          ...
	 *          <ChartContainer timeRange={trafficSeries.timerange()} width="1080">
	 *              <ChartRow height="150">
	 *                  <Charts>
	 *                      <AreaChart
	 *                          axis="traffic"
	 *                          series={trafficSeries}
	 *                          columns={{up: ["in"], down: ["out"]}}
	 *                       />
	 *                  </Charts>
	 *                  <YAxis
	 *                      id="traffic"
	 *                      label="Traffic (bps)"
	 *                      min={-max} max={max}
	 *                      absolute={true}
	 *                      width="60"
	 *                      type="linear"
	 *                  />
	 *              </ChartRow>
	 *          </ChartContainer>
	 *          ...
	 *      );
	 *  }
	 *  ```
	 * The `<AreaChart>` takes a single `TimeSeries` object into its `series` prop. This
	 * series can contain multiple columns and those columns can be referenced using the `columns`
	 * prop. The `columns` props allows you to map columns in the series to the chart,
	 * letting you specify the stacking and orientation of the data. In the above example
	 * we map the "in" column in `trafficSeries` to the up direction and the "out" column to
	 * the down direction. Each direction is specified as an array, so adding multiple
	 * columns into a direction will stack the areas in that direction.
	 *
	 * Note: It is recommended that `<ChartContainer>`s be placed within a <Resizable> tag,
	 * rather than hard coding the width as in the above example.
	 */

	var AreaChart = (function(_React$Component) {
	    _inherits(AreaChart, _React$Component);

	    function AreaChart() {
	        _classCallCheck(this, AreaChart);

	        return _possibleConstructorReturn(
	            this,
	            (AreaChart.__proto__ || Object.getPrototypeOf(AreaChart)).apply(this, arguments)
	        );
	    }

	    _createClass(AreaChart, [
	        {
	            key: "shouldComponentUpdate",
	            value: function shouldComponentUpdate(nextProps) {
	                var newSeries = nextProps.series;
	                var oldSeries = this.props.series;
	                var width = nextProps.width;
	                var timeScale = nextProps.timeScale;
	                var yScale = nextProps.yScale;
	                var interpolation = nextProps.interpolation;
	                var columns = nextProps.columns;
	                var style = nextProps.style;
	                var highlight = nextProps.highlight;
	                var selection = nextProps.selection;

	                var widthChanged = this.props.width !== width;
	                var timeScaleChanged =
	                    (0, util$2.scaleAsString)(this.props.timeScale) !==
	                    (0, util$2.scaleAsString)(timeScale);
	                var yAxisScaleChanged = this.props.yScale !== yScale;
	                var interpolationChanged = this.props.interpolation !== interpolation;
	                var columnsChanged = JSON.stringify(this.props.columns) !== JSON.stringify(columns);
	                var styleChanged = JSON.stringify(this.props.style) !== JSON.stringify(style);
	                var highlightChanged = this.props.highlight !== highlight;
	                var selectionChanged = this.props.selection !== selection;

	                var seriesChanged = false;
	                if (oldSeries.length !== newSeries.length) {
	                    seriesChanged = true;
	                } else {
	                    seriesChanged = !entry.TimeSeries.is(oldSeries, newSeries);
	                }

	                return (
	                    seriesChanged ||
	                    timeScaleChanged ||
	                    widthChanged ||
	                    interpolationChanged ||
	                    columnsChanged ||
	                    styleChanged ||
	                    yAxisScaleChanged ||
	                    highlightChanged ||
	                    selectionChanged
	                );
	            }
	        },
	        {
	            key: "handleHover",
	            value: function handleHover(e, column) {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(column);
	                }
	            }
	        },
	        {
	            key: "handleHoverLeave",
	            value: function handleHoverLeave() {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(null);
	                }
	            }
	        },
	        {
	            key: "handleClick",
	            value: function handleClick(e, column) {
	                e.stopPropagation();
	                if (this.props.onSelectionChange) {
	                    this.props.onSelectionChange(column);
	                }
	            }
	        },
	        {
	            key: "providedAreaStyleMap",
	            value: function providedAreaStyleMap(column) {
	                var style = defaultStyle;
	                if (this.props.style) {
	                    if (this.props.style instanceof styler_1.Styler) {
	                        style = this.props.style.areaChartStyle()[column];
	                    } else if (_underscore2.default.isObject(this.props.style)) {
	                        style = this.props.style[column];
	                    } else if (_underscore2.default.isFunction(this.props.style)) {
	                        style = this.props.style(column);
	                    }
	                }
	                return style;
	            }

	            /**
	             * Returns the style used for drawing the path
	             */
	        },
	        {
	            key: "style",
	            value: function style(column, type) {
	                var style = void 0;

	                var styleMap = this.providedAreaStyleMap(column);
	                var isHighlighted = this.props.highlight && column === this.props.highlight;
	                var isSelected = this.props.selection && column === this.props.selection;

	                if (!_underscore2.default.has(styleMap, "line")) {
	                    console.error(
	                        "Provided style for AreaChart does not define a style for the outline:",
	                        styleMap,
	                        column
	                    );
	                }

	                if (!_underscore2.default.has(styleMap, "area")) {
	                    console.error(
	                        "Provided style for AreaChart does not define a style for the area:",
	                        styleMap
	                    );
	                }

	                if (this.props.selection) {
	                    if (isSelected) {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle[type].selected,
	                            styleMap[type].selected ? styleMap[type].selected : {}
	                        );
	                    } else if (isHighlighted) {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle[type].highlighted,
	                            styleMap[type].highlighted ? styleMap[type].highlighted : {}
	                        );
	                    } else {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle[type].muted,
	                            styleMap[type].muted ? styleMap[type].muted : {}
	                        );
	                    }
	                } else if (isHighlighted) {
	                    style = (0, _merge2.default)(
	                        true,
	                        defaultStyle[type].highlighted,
	                        styleMap[type].highlighted ? styleMap[type].highlighted : {}
	                    );
	                } else {
	                    style = (0, _merge2.default)(
	                        true,
	                        defaultStyle[type].normal,
	                        styleMap[type].normal ? styleMap[type].normal : {}
	                    );
	                }
	                return style;
	            }
	        },
	        {
	            key: "pathStyle",
	            value: function pathStyle(column) {
	                return this.style(column, "line");
	            }
	        },
	        {
	            key: "areaStyle",
	            value: function areaStyle(column) {
	                return this.style(column, "area");
	            }
	        },
	        {
	            key: "renderPaths",
	            value: function renderPaths(columnList, direction) {
	                var _this2 = this;

	                var dir = direction === "up" ? 1 : -1;
	                var size = this.props.series.size();
	                var offsets = new Array(size).fill(0);

	                return columnList.map(function(column, i) {
	                    var style = _this2.areaStyle(column);
	                    var pathStyle = _this2.pathStyle(column);

	                    // Stack the series columns to get our data in x0, y0, y1 format
	                    var data = [];
	                    for (var j = 0; j < _this2.props.series.size(); j += 1) {
	                        var seriesPoint = _this2.props.series.at(j);
	                        data.push({
	                            x0: _this2.props.timeScale(seriesPoint.timestamp()),
	                            y0: _this2.props.yScale(offsets[j]),
	                            y1: _this2.props.yScale(offsets[j] + dir * seriesPoint.get(column))
	                        });
	                        if (_this2.props.stack) {
	                            offsets[j] += dir * seriesPoint.get(column);
	                        }
	                    }

	                    // Use D3 to build an area generation function
	                    var areaGenerator = (0, _d3Shape.area)()
	                        .curve(_curve2.default[_this2.props.interpolation])
	                        .x(function(d) {
	                            return d.x0;
	                        })
	                        .y0(function(d) {
	                            return d.y0;
	                        })
	                        .y1(function(d) {
	                            return d.y1;
	                        });

	                    // Use the area generation function with our stacked data
	                    // to get an SVG path
	                    var areaPath = areaGenerator(data);

	                    // Outline the top of the curve
	                    var lineGenerator = (0, _d3Shape.line)()
	                        .curve(_curve2.default[_this2.props.interpolation])
	                        .x(function(d) {
	                            return d.x0;
	                        })
	                        .y(function(d) {
	                            return d.y1;
	                        });
	                    var outlinePath = lineGenerator(data);

	                    return _react2.default.createElement(
	                        "g",
	                        { key: "area-" + i },
	                        _react2.default.createElement("path", {
	                            d: areaPath,
	                            style: style,
	                            onClick: function onClick(e) {
	                                return _this2.handleClick(e, column);
	                            },
	                            onMouseLeave: function onMouseLeave() {
	                                return _this2.handleHoverLeave();
	                            },
	                            onMouseMove: function onMouseMove(e) {
	                                return _this2.handleHover(e, column);
	                            }
	                        }),
	                        _react2.default.createElement("path", {
	                            d: outlinePath,
	                            style: pathStyle,
	                            onClick: function onClick(e) {
	                                return _this2.handleClick(e, column);
	                            },
	                            onMouseLeave: function onMouseLeave() {
	                                return _this2.handleHoverLeave();
	                            },
	                            onMouseMove: function onMouseMove(e) {
	                                return _this2.handleHover(e, column);
	                            }
	                        })
	                    );
	                });
	            }
	        },
	        {
	            key: "renderAreas",
	            value: function renderAreas() {
	                var up = this.props.columns.up || [];
	                var down = this.props.columns.down || [];
	                return _react2.default.createElement(
	                    "g",
	                    null,
	                    this.renderPaths(up, "up"),
	                    this.renderPaths(down, "down")
	                );
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                return _react2.default.createElement("g", null, this.renderAreas());
	            }
	        }
	    ]);

	    return AreaChart;
	})(_react2.default.Component);

	exports.default = AreaChart;

	AreaChart.propTypes = {
	    /**
	     * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize
	     */
	    series: _propTypes2.default.instanceOf(entry.TimeSeries).isRequired,

	    /**
	     * Reference to the axis which provides the vertical scale for ## drawing. e.g.
	     * specifying axis="trafficRate" would refer the y-scale to the YAxis of id="trafficRate".
	     */
	    axis: _propTypes2.default.string.isRequired, // eslint-disable-line

	    /**
	     * Show or hide this chart
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * The series series columns mapped to stacking up and down.
	     * Has the format:
	     * ```
	     *  "columns": {
	     *      up: ["in", ...],
	     *      down: ["out", ...]
	     *  }
	     *  ```
	     */
	    columns: _propTypes2.default.shape({
	        up: _propTypes2.default.arrayOf(_propTypes2.default.string),
	        down: _propTypes2.default.arrayOf(_propTypes2.default.string)
	    }),

	    /**
	     * Stack areas on top of each other
	     */
	    stack: _propTypes2.default.bool,

	    /**
	     * The styles to apply to the underlying SVG lines. This is a mapping
	     * of column names to objects with style attributes, in the following
	     * format:
	     *
	     * ```
	     * const style = {
	     *     in: {
	     *         line: {
	     *             normal: {stroke: "steelblue", fill: "none", strokeWidth: 1},
	     *             highlighted: {stroke: "#5a98cb", fill: "none", strokeWidth: 1},
	     *             selected: {stroke: "steelblue", fill: "none", strokeWidth: 1},
	     *             muted: {stroke: "steelblue", fill: "none", opacity: 0.4, strokeWidth: 1}
	     *         },
	     *         area: {
	     *             normal: {fill: "steelblue", stroke: "none", opacity: 0.75},
	     *             highlighted: {fill: "#5a98cb", stroke: "none", opacity: 0.75},
	     *             selected: {fill: "steelblue", stroke: "none", opacity: 0.75},
	     *             muted: {fill: "steelblue", stroke: "none", opacity: 0.25}
	     *         }
	     *     },
	     *     out: {
	     *         ...
	     *     }
	     * };
	     *
	     * <AreaChart style={style} ... />
	     * ```
	     *
	     * Alternatively, you can pass in a Styler. For example:
	     *
	     * ```
	     * const upDownStyler = styler([
	     *     {key: "in", color: "#C8D5B8"},
	     *     {key: "out", color: "#9BB8D7"}
	     * ]);
	     *
	     * <AreaChart columns={["in", "out"]} style={upDownStyler} ... />
	     *
	     * ```
	     */
	    style: _propTypes2.default.oneOfType([
	        _propTypes2.default.object,
	        _propTypes2.default.func,
	        _propTypes2.default.instanceOf(styler_1.Styler)
	    ]),

	    /**
	     * Any of D3's interpolation modes.
	     */
	    interpolation: _propTypes2.default.oneOf([
	        "curveBasis",
	        "curveBasisOpen",
	        "curveBundle",
	        "curveCardinal",
	        "curveCardinalOpen",
	        "curveCatmullRom",
	        "curveCatmullRomOpen",
	        "curveLinear",
	        "curveMonotoneX",
	        "curveMonotoneY",
	        "curveNatural",
	        "curveRadial",
	        "curveStep",
	        "curveStepAfter",
	        "curveStepBefore"
	    ]),

	    /**
	     * The currenly highlighted column
	     */
	    highlight: _propTypes2.default.string,

	    /**
	     * Callback called when the highlight changes, i.e. hover event
	     */
	    onHighlightChange: _propTypes2.default.func,

	    /**
	     * The currenly selected column
	     */
	    selection: _propTypes2.default.string,

	    /**
	     * Callback called when the selection changes, i.e. area is clicked
	     */
	    onSelectionChange: _propTypes2.default.func,

	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func,

	    /**
	     * [Internal] The yScale supplied by the associated YAxis
	     */
	    yScale: _propTypes2.default.func,

	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number
	};

	AreaChart.defaultProps = {
	    visible: true,
	    interpolation: "curveLinear",
	    columns: {
	        up: ["value"],
	        down: []
	    },
	    stack: true
	};
	});

	unwrapExports(AreaChart_1);

	var t0 = new Date,
	    t1 = new Date;

	function newInterval(floori, offseti, count, field) {

	  function interval(date) {
	    return floori(date = new Date(+date)), date;
	  }

	  interval.floor = interval;

	  interval.ceil = function(date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };

	  interval.round = function(date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };

	  interval.offset = function(date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };

	  interval.range = function(start, stop, step) {
	    var range = [], previous;
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
	    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
	    while (previous < start && start < stop);
	    return range;
	  };

	  interval.filter = function(test) {
	    return newInterval(function(date) {
	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
	    }, function(date, step) {
	      if (date >= date) {
	        if (step < 0) while (++step <= 0) {
	          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
	        } else while (--step >= 0) {
	          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
	        }
	      }
	    });
	  };

	  if (count) {
	    interval.count = function(start, end) {
	      t0.setTime(+start), t1.setTime(+end);
	      floori(t0), floori(t1);
	      return Math.floor(count(t0, t1));
	    };

	    interval.every = function(step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null
	          : !(step > 1) ? interval
	          : interval.filter(field
	              ? function(d) { return field(d) % step === 0; }
	              : function(d) { return interval.count(0, d) % step === 0; });
	    };
	  }

	  return interval;
	}

	var millisecond = newInterval(function() {
	  // noop
	}, function(date, step) {
	  date.setTime(+date + step);
	}, function(start, end) {
	  return end - start;
	});

	// An optimized implementation for this simple case.
	millisecond.every = function(k) {
	  k = Math.floor(k);
	  if (!isFinite(k) || !(k > 0)) return null;
	  if (!(k > 1)) return millisecond;
	  return newInterval(function(date) {
	    date.setTime(Math.floor(date / k) * k);
	  }, function(date, step) {
	    date.setTime(+date + step * k);
	  }, function(start, end) {
	    return (end - start) / k;
	  });
	};
	var milliseconds$1 = millisecond.range;

	var durationSecond = 1e3;
	var durationMinute = 6e4;
	var durationHour = 36e5;
	var durationDay = 864e5;
	var durationWeek = 6048e5;

	var second = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationSecond) * durationSecond);
	}, function(date, step) {
	  date.setTime(+date + step * durationSecond);
	}, function(start, end) {
	  return (end - start) / durationSecond;
	}, function(date) {
	  return date.getUTCSeconds();
	});
	var seconds$1 = second.range;

	var minute = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationMinute) * durationMinute);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getMinutes();
	});
	var minutes$1 = minute.range;

	var hour = newInterval(function(date) {
	  var offset = date.getTimezoneOffset() * durationMinute % durationHour;
	  if (offset < 0) offset += durationHour;
	  date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getHours();
	});
	var hours$1 = hour.range;

	var day = newInterval(function(date) {
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setDate(date.getDate() + step);
	}, function(start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
	}, function(date) {
	  return date.getDate() - 1;
	});
	var days$1 = day.range;

	function weekday(i) {
	  return newInterval(function(date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function(start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
	  });
	}

	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);

	var sundays = sunday.range;
	var mondays = monday.range;
	var tuesdays = tuesday.range;
	var wednesdays = wednesday.range;
	var thursdays = thursday.range;
	var fridays = friday.range;
	var saturdays = saturday.range;

	var month = newInterval(function(date) {
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setMonth(date.getMonth() + step);
	}, function(start, end) {
	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
	}, function(date) {
	  return date.getMonth();
	});
	var months$1 = month.range;

	var year = newInterval(function(date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function(start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function(date) {
	  return date.getFullYear();
	});

	// An optimized implementation for this simple case.
	year.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};
	var years$1 = year.range;

	var utcMinute = newInterval(function(date) {
	  date.setUTCSeconds(0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getUTCMinutes();
	});
	var utcMinutes = utcMinute.range;

	var utcHour = newInterval(function(date) {
	  date.setUTCMinutes(0, 0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getUTCHours();
	});
	var utcHours = utcHour.range;

	var utcDay = newInterval(function(date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function(start, end) {
	  return (end - start) / durationDay;
	}, function(date) {
	  return date.getUTCDate() - 1;
	});
	var utcDays = utcDay.range;

	function utcWeekday(i) {
	  return newInterval(function(date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function(start, end) {
	    return (end - start) / durationWeek;
	  });
	}

	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);

	var utcSundays = utcSunday.range;
	var utcMondays = utcMonday.range;
	var utcTuesdays = utcTuesday.range;
	var utcWednesdays = utcWednesday.range;
	var utcThursdays = utcThursday.range;
	var utcFridays = utcFriday.range;
	var utcSaturdays = utcSaturday.range;

	var utcMonth = newInterval(function(date) {
	  date.setUTCDate(1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCMonth(date.getUTCMonth() + step);
	}, function(start, end) {
	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
	}, function(date) {
	  return date.getUTCMonth();
	});
	var utcMonths = utcMonth.range;

	var utcYear = newInterval(function(date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function(start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function(date) {
	  return date.getUTCFullYear();
	});

	// An optimized implementation for this simple case.
	utcYear.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};
	var utcYears = utcYear.range;



	var d3Time = /*#__PURE__*/Object.freeze({
		timeInterval: newInterval,
		timeMillisecond: millisecond,
		timeMilliseconds: milliseconds$1,
		utcMillisecond: millisecond,
		utcMilliseconds: milliseconds$1,
		timeSecond: second,
		timeSeconds: seconds$1,
		utcSecond: second,
		utcSeconds: seconds$1,
		timeMinute: minute,
		timeMinutes: minutes$1,
		timeHour: hour,
		timeHours: hours$1,
		timeDay: day,
		timeDays: days$1,
		timeWeek: sunday,
		timeWeeks: sundays,
		timeSunday: sunday,
		timeSundays: sundays,
		timeMonday: monday,
		timeMondays: mondays,
		timeTuesday: tuesday,
		timeTuesdays: tuesdays,
		timeWednesday: wednesday,
		timeWednesdays: wednesdays,
		timeThursday: thursday,
		timeThursdays: thursdays,
		timeFriday: friday,
		timeFridays: fridays,
		timeSaturday: saturday,
		timeSaturdays: saturdays,
		timeMonth: month,
		timeMonths: months$1,
		timeYear: year,
		timeYears: years$1,
		utcMinute: utcMinute,
		utcMinutes: utcMinutes,
		utcHour: utcHour,
		utcHours: utcHours,
		utcDay: utcDay,
		utcDays: utcDays,
		utcWeek: utcSunday,
		utcWeeks: utcSundays,
		utcSunday: utcSunday,
		utcSundays: utcSundays,
		utcMonday: utcMonday,
		utcMondays: utcMondays,
		utcTuesday: utcTuesday,
		utcTuesdays: utcTuesdays,
		utcWednesday: utcWednesday,
		utcWednesdays: utcWednesdays,
		utcThursday: utcThursday,
		utcThursdays: utcThursdays,
		utcFriday: utcFriday,
		utcFridays: utcFridays,
		utcSaturday: utcSaturday,
		utcSaturdays: utcSaturdays,
		utcMonth: utcMonth,
		utcMonths: utcMonths,
		utcYear: utcYear,
		utcYears: utcYears
	});

	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }
	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}

	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }
	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}

	function newYear(y) {
	  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
	}

	function formatLocale(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;

	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);

	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "f": formatMicroseconds,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatSeconds,
	    "u": formatWeekdayNumberMonday,
	    "U": formatWeekNumberSunday,
	    "V": formatWeekNumberISO,
	    "w": formatWeekdayNumberSunday,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };

	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "f": formatUTCMicroseconds,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatUTCSeconds,
	    "u": formatUTCWeekdayNumberMonday,
	    "U": formatUTCWeekNumberSunday,
	    "V": formatUTCWeekNumberISO,
	    "w": formatUTCWeekdayNumberSunday,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };

	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "f": parseMicroseconds,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "Q": parseUnixTimestamp,
	    "s": parseUnixTimestampSeconds,
	    "S": parseSeconds,
	    "u": parseWeekdayNumberMonday,
	    "U": parseWeekNumberSunday,
	    "V": parseWeekNumberISO,
	    "w": parseWeekdayNumberSunday,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  };

	  // These recursive directive definitions must be deferred.
	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);

	  function newFormat(specifier, formats) {
	    return function(date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;

	      if (!(date instanceof Date)) date = new Date(+date);

	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
	          else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }

	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }

	  function newParse(specifier, newDate) {
	    return function(string) {
	      var d = newYear(1900),
	          i = parseSpecifier(d, specifier, string += "", 0),
	          week, day$$1;
	      if (i != string.length) return null;

	      // If a UNIX timestamp is specified, return it.
	      if ("Q" in d) return new Date(d.Q);

	      // The am-pm flag is 0 for AM, and 1 for PM.
	      if ("p" in d) d.H = d.H % 12 + d.p * 12;

	      // Convert day-of-week and week-of-year to day-of-year.
	      if ("V" in d) {
	        if (d.V < 1 || d.V > 53) return null;
	        if (!("w" in d)) d.w = 1;
	        if ("Z" in d) {
	          week = utcDate(newYear(d.y)), day$$1 = week.getUTCDay();
	          week = day$$1 > 4 || day$$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
	          week = utcDay.offset(week, (d.V - 1) * 7);
	          d.y = week.getUTCFullYear();
	          d.m = week.getUTCMonth();
	          d.d = week.getUTCDate() + (d.w + 6) % 7;
	        } else {
	          week = newDate(newYear(d.y)), day$$1 = week.getDay();
	          week = day$$1 > 4 || day$$1 === 0 ? monday.ceil(week) : monday(week);
	          week = day.offset(week, (d.V - 1) * 7);
	          d.y = week.getFullYear();
	          d.m = week.getMonth();
	          d.d = week.getDate() + (d.w + 6) % 7;
	        }
	      } else if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
	        day$$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;
	      }

	      // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.
	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      }

	      // Otherwise, all fields are in local time.
	      return newDate(d);
	    };
	  }

	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;

	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);
	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }

	    return j;
	  }

	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }

	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }

	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }

	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }

	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }

	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }

	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }

	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }

	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }

	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }

	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }

	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }

	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }

	  return {
	    format: function(specifier) {
	      var f = newFormat(specifier += "", formats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    parse: function(specifier) {
	      var p = newParse(specifier += "", localDate);
	      p.toString = function() { return specifier; };
	      return p;
	    },
	    utcFormat: function(specifier) {
	      var f = newFormat(specifier += "", utcFormats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    utcParse: function(specifier) {
	      var p = newParse(specifier, utcDate);
	      p.toString = function() { return specifier; };
	      return p;
	    }
	  };
	}

	var pads = {"-": "", "_": " ", "0": "0"},
	    numberRe = /^\s*\d+/, // note: ignores next directive
	    percentRe = /^%/,
	    requoteRe = /[\\^$*+?|[\]().{}]/g;

	function pad(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}

	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}

	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}

	function formatLookup(names) {
	  var map = {}, i = -1, n = names.length;
	  while (++i < n) map[names[i].toLowerCase()] = i;
	  return map;
	}

	function parseWeekdayNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}

	function parseWeekdayNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.u = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberISO(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.V = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}

	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}

	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}

	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}

	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}

	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}

	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}

	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}

	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}

	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}

	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}

	function parseMicroseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 6));
	  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
	}

	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}

	function parseUnixTimestamp(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.Q = +n[0], i + n[0].length) : -1;
	}

	function parseUnixTimestampSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;
	}

	function formatDayOfMonth(d, p) {
	  return pad(d.getDate(), p, 2);
	}

	function formatHour24(d, p) {
	  return pad(d.getHours(), p, 2);
	}

	function formatHour12(d, p) {
	  return pad(d.getHours() % 12 || 12, p, 2);
	}

	function formatDayOfYear(d, p) {
	  return pad(1 + day.count(year(d), d), p, 3);
	}

	function formatMilliseconds(d, p) {
	  return pad(d.getMilliseconds(), p, 3);
	}

	function formatMicroseconds(d, p) {
	  return formatMilliseconds(d, p) + "000";
	}

	function formatMonthNumber(d, p) {
	  return pad(d.getMonth() + 1, p, 2);
	}

	function formatMinutes(d, p) {
	  return pad(d.getMinutes(), p, 2);
	}

	function formatSeconds(d, p) {
	  return pad(d.getSeconds(), p, 2);
	}

	function formatWeekdayNumberMonday(d) {
	  var day$$1 = d.getDay();
	  return day$$1 === 0 ? 7 : day$$1;
	}

	function formatWeekNumberSunday(d, p) {
	  return pad(sunday.count(year(d), d), p, 2);
	}

	function formatWeekNumberISO(d, p) {
	  var day$$1 = d.getDay();
	  d = (day$$1 >= 4 || day$$1 === 0) ? thursday(d) : thursday.ceil(d);
	  return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
	}

	function formatWeekdayNumberSunday(d) {
	  return d.getDay();
	}

	function formatWeekNumberMonday(d, p) {
	  return pad(monday.count(year(d), d), p, 2);
	}

	function formatYear(d, p) {
	  return pad(d.getFullYear() % 100, p, 2);
	}

	function formatFullYear(d, p) {
	  return pad(d.getFullYear() % 10000, p, 4);
	}

	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+"))
	      + pad(z / 60 | 0, "0", 2)
	      + pad(z % 60, "0", 2);
	}

	function formatUTCDayOfMonth(d, p) {
	  return pad(d.getUTCDate(), p, 2);
	}

	function formatUTCHour24(d, p) {
	  return pad(d.getUTCHours(), p, 2);
	}

	function formatUTCHour12(d, p) {
	  return pad(d.getUTCHours() % 12 || 12, p, 2);
	}

	function formatUTCDayOfYear(d, p) {
	  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
	}

	function formatUTCMilliseconds(d, p) {
	  return pad(d.getUTCMilliseconds(), p, 3);
	}

	function formatUTCMicroseconds(d, p) {
	  return formatUTCMilliseconds(d, p) + "000";
	}

	function formatUTCMonthNumber(d, p) {
	  return pad(d.getUTCMonth() + 1, p, 2);
	}

	function formatUTCMinutes(d, p) {
	  return pad(d.getUTCMinutes(), p, 2);
	}

	function formatUTCSeconds(d, p) {
	  return pad(d.getUTCSeconds(), p, 2);
	}

	function formatUTCWeekdayNumberMonday(d) {
	  var dow = d.getUTCDay();
	  return dow === 0 ? 7 : dow;
	}

	function formatUTCWeekNumberSunday(d, p) {
	  return pad(utcSunday.count(utcYear(d), d), p, 2);
	}

	function formatUTCWeekNumberISO(d, p) {
	  var day$$1 = d.getUTCDay();
	  d = (day$$1 >= 4 || day$$1 === 0) ? utcThursday(d) : utcThursday.ceil(d);
	  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
	}

	function formatUTCWeekdayNumberSunday(d) {
	  return d.getUTCDay();
	}

	function formatUTCWeekNumberMonday(d, p) {
	  return pad(utcMonday.count(utcYear(d), d), p, 2);
	}

	function formatUTCYear(d, p) {
	  return pad(d.getUTCFullYear() % 100, p, 2);
	}

	function formatUTCFullYear(d, p) {
	  return pad(d.getUTCFullYear() % 10000, p, 4);
	}

	function formatUTCZone() {
	  return "+0000";
	}

	function formatLiteralPercent() {
	  return "%";
	}

	function formatUnixTimestamp(d) {
	  return +d;
	}

	function formatUnixTimestampSeconds(d) {
	  return Math.floor(+d / 1000);
	}

	var locale$1;
	var timeFormat;
	var timeParse;
	var utcFormat;
	var utcParse;

	defaultLocale({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});

	function defaultLocale(definition) {
	  locale$1 = formatLocale(definition);
	  timeFormat = locale$1.format;
	  timeParse = locale$1.parse;
	  utcFormat = locale$1.utcFormat;
	  utcParse = locale$1.utcParse;
	  return locale$1;
	}

	var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

	function formatIsoNative(date) {
	  return date.toISOString();
	}

	var formatIso = Date.prototype.toISOString
	    ? formatIsoNative
	    : utcFormat(isoSpecifier);

	function parseIsoNative(string) {
	  var date = new Date(string);
	  return isNaN(date) ? null : date;
	}

	var parseIso$1 = +new Date("2000-01-01T00:00:00.000Z")
	    ? parseIsoNative
	    : utcParse(isoSpecifier);



	var _d3TimeFormat = /*#__PURE__*/Object.freeze({
		timeFormatDefaultLocale: defaultLocale,
		get timeFormat () { return timeFormat; },
		get timeParse () { return timeParse; },
		get utcFormat () { return utcFormat; },
		get utcParse () { return utcParse; },
		timeFormatLocale: formatLocale,
		isoFormat: formatIso,
		isoParse: parseIso$1
	});

	var Label_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Renders a simple label surrounded by a box within in svg
	 *
	 *      +----------------+
	 *      | My label       |
	 *      |                |
	 *      +----------------+
	 */

	/**
	 *  Copyright (c) 2016, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var Label = function Label(_ref) {
	    var label = _ref.label,
	        style = _ref.style,
	        align = _ref.align,
	        width = _ref.width,
	        height = _ref.height;

	    var textStyle = {
	        fontSize: 11,
	        textAnchor: "left",
	        fill: "#b0b0b0",
	        pointerEvents: "none"
	    };

	    var textStyleCentered = {
	        fontSize: 11,
	        textAnchor: "middle",
	        fill: "#bdbdbd",
	        pointerEvents: "none"
	    };

	    var tstyle = align === "center" ? textStyleCentered : textStyle;
	    var posx = align === "center" ? parseInt(width / 2, 10) : 10;

	    var text = _react2.default.createElement(
	        "text",
	        { x: posx, y: 5, dy: "1.2em", style: tstyle },
	        label
	    );

	    var box = _react2.default.createElement("rect", {
	        x: 0,
	        y: 0,
	        style: style,
	        width: width,
	        height: height
	    });

	    return _react2.default.createElement("g", null, box, text);
	};

	Label.defaultProps = {
	    align: "center",
	    width: 100,
	    height: 100,
	    pointerEvents: "none",
	    style: { fill: "#FEFEFE", stroke: "#DDD", opacity: 0.8 }
	};

	Label.propTypes = {
	    /**
	     * Where to position the label, either "left" or "center" within the box
	     */
	    align: _propTypes2.default.oneOf(["center", "left"]),

	    /**
	     * The label to render
	     */
	    label: _propTypes2.default.string.isRequired,

	    /**
	     * The style of the label. This is the inline CSS applied directly
	     * to the label box
	     */
	    style: _propTypes2.default.object, // eslint-disable-line

	    /**
	     * The width of the rectangle to render into
	     */
	    width: _propTypes2.default.number,

	    /**
	     * The height of the rectangle to render into
	     */
	    height: _propTypes2.default.number
	};

	exports.default = Label;
	});

	unwrapExports(Label_1);

	var ValueList_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Renders a list of values in svg
	 *
	 *      +----------------+
	 *      | Max 100 Gbps   |
	 *      | Avg 26 Gbps    |
	 *      +----------------+
	 */
	/**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var ValueList = function ValueList(props) {
	    var align = props.align,
	        style = props.style,
	        width = props.width,
	        height = props.height;

	    if (!props.values.length) {
	        return _react2.default.createElement("g", null);
	    }

	    var textStyle = {
	        fontSize: 11,
	        textAnchor: "left",
	        fill: "#b0b0b0",
	        pointerEvents: "none"
	    };

	    var textStyleCentered = {
	        fontSize: 11,
	        textAnchor: "middle",
	        fill: "#bdbdbd",
	        pointerEvents: "none"
	    };

	    var values = props.values.map(function(item, i) {
	        if (align === "left") {
	            return _react2.default.createElement(
	                "g",
	                { key: i },
	                _react2.default.createElement(
	                    "text",
	                    { x: 10, y: 5, dy: (i + 1) * 1.2 + "em", style: textStyle },
	                    _react2.default.createElement(
	                        "tspan",
	                        { style: { fontWeight: 700 } },
	                        item.label + ": "
	                    ),
	                    _react2.default.createElement("tspan", null, "" + item.value)
	                )
	            );
	        }

	        var posx = parseInt(props.width / 2, 10);
	        return _react2.default.createElement(
	            "g",
	            { key: i },
	            _react2.default.createElement(
	                "text",
	                { x: posx, y: 5, dy: (i + 1) * 1.2 + "em", style: textStyleCentered },
	                _react2.default.createElement(
	                    "tspan",
	                    { style: { fontWeight: 700 } },
	                    item.label + ": "
	                ),
	                _react2.default.createElement("tspan", null, "" + item.value)
	            )
	        );
	    });

	    var box = _react2.default.createElement("rect", {
	        style: style,
	        x: 0,
	        y: 0,
	        width: width,
	        height: height
	    });

	    return _react2.default.createElement("g", null, box, values);
	};

	ValueList.defaultProps = {
	    align: "center",
	    width: 100,
	    height: 100,
	    pointerEvents: "none",
	    style: { fill: "#FEFEFE", stroke: "#DDD", opacity: 0.8 }
	};

	ValueList.propTypes = {
	    align: _propTypes2.default.oneOf(["center", "left"]),
	    /**
	     * An array of label value pairs to render
	     */
	    values: _propTypes2.default.arrayOf(
	        _propTypes2.default.shape({
	            label: _propTypes2.default.string, // eslint-disable-line
	            value: _propTypes2.default.oneOfType([
	                // eslint-disable-line
	                _propTypes2.default.number,
	                _propTypes2.default.string
	            ])
	        })
	    ).isRequired,
	    /**
	     * CSS object to be applied to the ValueList surrounding box
	     */
	    style: _propTypes2.default.object, // eslint-disable-line
	    /**
	     * The width of the rectangle to render into
	     */
	    width: _propTypes2.default.number,
	    /**
	     * The height of the rectangle to render into
	     */
	    height: _propTypes2.default.number
	};

	exports.default = ValueList;
	});

	unwrapExports(ValueList_1);

	var EventMarker_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _underscore2 = _interopRequireDefault(underscore);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _merge2 = _interopRequireDefault(merge);







	var _Label2 = _interopRequireDefault(Label_1);



	var _ValueList2 = _interopRequireDefault(ValueList_1);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2016, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var EventTime = function EventTime(_ref) {
	    var time = _ref.time,
	        _ref$format = _ref.format,
	        format = _ref$format === undefined ? "%m/%d/%y %X" : _ref$format;

	    var textStyle = {
	        fontSize: 11,
	        textAnchor: "left",
	        fill: "#bdbdbd",
	        pointerEvents: "none"
	    };

	    var text = void 0;
	    if (_underscore2.default.isFunction(format)) {
	        text = format(time);
	    } else {
	        var fmt = (0, _d3TimeFormat.timeFormat)(format);
	        text = fmt(time);
	    }

	    return _react2.default.createElement(
	        "text",
	        { x: 0, y: 0, dy: "1.2em", style: textStyle },
	        text
	    );
	};
	EventTime.propTypes = {
	    time: _propTypes2.default.instanceOf(Date),
	    format: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string])
	};
	EventTime.defaultProps = {
	    infoTimeFormat: "%m/%d/%y %X"
	};

	var EventTimeRange = function EventTimeRange(_ref2) {
	    var timerange = _ref2.timerange,
	        _ref2$format = _ref2.format,
	        format = _ref2$format === undefined ? "%m/%d/%y %X" : _ref2$format;

	    var textStyle = {
	        fontSize: 11,
	        textAnchor: "left",
	        fill: "#bdbdbd",
	        pointerEvents: "none"
	    };
	    var d1 = timerange.begin();
	    var d2 = timerange.end();

	    var beginText = void 0;
	    var endText = void 0;

	    if (_underscore2.default.isFunction(format)) {
	        beginText = format(d1);
	        endText = format(d2);
	    } else {
	        var fmt = (0, _d3TimeFormat.timeFormat)(format);
	        beginText = fmt(d1);
	        endText = fmt(d2);
	    }

	    return _react2.default.createElement(
	        "text",
	        { x: 0, y: 0, dy: "1.2em", style: textStyle },
	        beginText + " to " + endText
	    );
	};
	EventTimeRange.propTypes = {
	    timerange: _propTypes2.default.instanceOf(entry.TimeRange),
	    format: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string])
	};
	EventTimeRange.defaultProps = {
	    infoTimeFormat: "%m/%d/%y %X"
	};

	var EventIndex = function EventIndex(_ref3) {
	    var index = _ref3.index,
	        format = _ref3.format;

	    var textStyle = {
	        fontSize: 11,
	        textAnchor: "left",
	        fill: "#bdbdbd",
	        pointerEvents: "none"
	    };

	    var text = void 0;
	    if (_underscore2.default.isFunction(format)) {
	        text = format(index);
	    } else if (_underscore2.default.isString(format)) {
	        var fmt = (0, _d3TimeFormat.timeFormat)(format);
	        text = fmt(index.begin());
	    } else {
	        text = index.toString();
	    }

	    return _react2.default.createElement(
	        "text",
	        { x: 0, y: 0, dy: "1.2em", style: textStyle },
	        text
	    );
	};
	EventIndex.propTypes = {
	    index: _propTypes2.default.instanceOf(entry.Index),
	    format: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string])
	};

	/**
	 * Renders a marker at a specific event on the chart.
	 *
	 * To explain how EventMarkers work, it's useful to explain a little
	 * terminology used here. A marker has several parts:
	 *
	 *  * the "marker" itself which appears at the (value, time) of the event.
	 *    This is a dot which whose radius is defined by markerRadius, and
	 *    whose style is set with markerStyle
	 *  * the "markerLabel" which is a string that will be rendered next to
	 *    the marker. The label can be aligned with markerAlign and also
	 *    styled with markerLabelStyle
	 *  * the "info box" which is a box containing values that hovers that the
	 *    top of the chart. Optionally it can show the time above the box.
	 *    The values themselves are supplied as an array of objects using
	 *    the `info` prop. The info box can be styled with `infoStyle`,
	 *    sized with `infoWidth` and `infoHeight`, and the time formatted
	 *    with `infoTimeFormat`
	 *  * the "stem" which is a connector between the marker and the
	 *    info box to visually link the two
	 *
	 * Combining these attributes, Event markers fall into two flavors, either
	 * you want to omit the infoBox and mark the event with a dot and optionally
	 * a label, or you want to omit the label (and perhaps marker dot) and show
	 * a flag style marker with the infoBox connected to the event with the stem.
	 *
	 * As with other IndexedEvents or TimeRangeEvents, the marker will appear at
	 * the center of the timerange represented by that event. You can, however,
	 * override either the x or y position by a number of pixels.
	 */

	var EventMarker = (function(_React$Component) {
	    _inherits(EventMarker, _React$Component);

	    function EventMarker() {
	        _classCallCheck(this, EventMarker);

	        return _possibleConstructorReturn(
	            this,
	            (EventMarker.__proto__ || Object.getPrototypeOf(EventMarker)).apply(this, arguments)
	        );
	    }

	    _createClass(EventMarker, [
	        {
	            key: "renderTime",
	            value: function renderTime(event) {
	                if (event instanceof entry.TimeEvent) {
	                    return _react2.default.createElement(EventTime, {
	                        time: event.timestamp(),
	                        format: this.props.infoTimeFormat
	                    });
	                } else if (event instanceof entry.IndexedEvent) {
	                    return _react2.default.createElement(EventIndex, {
	                        index: event.index(),
	                        format: this.props.infoTimeFormat
	                    });
	                } else if (event instanceof entry.TimeRangeEvent) {
	                    return _react2.default.createElement(EventTimeRange, {
	                        timerange: event.timerange(),
	                        format: this.props.infoTimeFormat
	                    });
	                }
	                return _react2.default.createElement("g", null);
	            }
	        },
	        {
	            key: "renderMarker",
	            value: function renderMarker(event, column, info) {
	                var t = void 0;
	                if (event instanceof entry.TimeEvent) {
	                    t = event.timestamp();
	                } else {
	                    t = new Date(
	                        event.begin().getTime() +
	                            (event.end().getTime() - event.begin().getTime()) / 2
	                    );
	                }

	                var value = void 0;
	                if (this.props.yValueFunc) {
	                    value = this.props.yValueFunc(event, column);
	                } else {
	                    value = event.get(column);
	                }

	                // Allow overrides on the x and y position. This is useful for the barchart
	                // tracker because bars maybe be offset from their actual event position in
	                // order to display them side by side.
	                var posx = this.props.timeScale(t) + this.props.offsetX;
	                var posy = this.props.yScale(value) - this.props.offsetY;

	                var infoBoxProps = {
	                    align: "left",
	                    style: this.props.infoStyle,
	                    width: this.props.infoWidth,
	                    height: this.props.infoHeight
	                };

	                var w = this.props.infoWidth;
	                var lineBottom = posy - 10;

	                var verticalStem = void 0;
	                var horizontalStem = void 0;
	                var dot = void 0;
	                var infoBox = void 0;
	                var transform = void 0;
	                var label = void 0;

	                if (info) {
	                    if (_underscore2.default.isString(this.props.info)) {
	                        infoBox = _react2.default.createElement(
	                            _Label2.default,
	                            _extends({}, infoBoxProps, { label: info })
	                        );
	                    } else {
	                        infoBox = _react2.default.createElement(
	                            _ValueList2.default,
	                            _extends({}, infoBoxProps, { values: info })
	                        );
	                    }
	                }

	                //
	                // Marker on right of event
	                //

	                if (this.props.type === "point") {
	                    var textDefaultStyle = {
	                        fontSize: 11,
	                        pointerEvents: "none",
	                        paintOrder: "stroke",
	                        fill: "#b0b0b0",
	                        strokeWidth: 2,
	                        strokeLinecap: "butt",
	                        strokeLinejoin: "miter",
	                        fontWeight: 800
	                    };

	                    var dx = 0;
	                    var dy = 0;
	                    switch (this.props.markerLabelAlign) {
	                        case "left":
	                            dx = 5;
	                            textDefaultStyle.textAnchor = "start";
	                            textDefaultStyle.alignmentBaseline = "central";
	                            break;
	                        case "right":
	                            dx = -5;
	                            textDefaultStyle.textAnchor = "end";
	                            textDefaultStyle.alignmentBaseline = "central";
	                            break;
	                        case "top":
	                            dy = -5;
	                            textDefaultStyle.textAnchor = "middle";
	                            textDefaultStyle.alignmentBaseline = "bottom";
	                            break;
	                        case "bottom":
	                            dy = 5;
	                            textDefaultStyle.textAnchor = "middle";
	                            textDefaultStyle.alignmentBaseline = "hanging";
	                            break;
	                        default:
	                        //pass
	                    }

	                    var tstyle = (0, _merge2.default)(
	                        true,
	                        textDefaultStyle,
	                        this.props.markerLabelStyle
	                    );

	                    dot = _react2.default.createElement("circle", {
	                        cx: posx,
	                        cy: posy,
	                        r: this.props.markerRadius,
	                        pointerEvents: "none",
	                        style: this.props.markerStyle
	                    });
	                    label = _react2.default.createElement(
	                        "text",
	                        { x: posx, y: posy, dx: dx, dy: dy, style: tstyle },
	                        this.props.markerLabel
	                    );

	                    return _react2.default.createElement("g", null, dot, label);
	                } else {
	                    if (posx + 10 + w < this.props.width * 3 / 4) {
	                        if (info) {
	                            verticalStem = _react2.default.createElement("line", {
	                                pointerEvents: "none",
	                                style: this.props.stemStyle,
	                                x1: -10,
	                                y1: lineBottom,
	                                x2: -10,
	                                y2: 20
	                            });
	                            horizontalStem = _react2.default.createElement("line", {
	                                pointerEvents: "none",
	                                style: this.props.stemStyle,
	                                x1: -10,
	                                y1: 20,
	                                x2: -2,
	                                y2: 20
	                            });
	                        }
	                        dot = _react2.default.createElement("circle", {
	                            cx: -10,
	                            cy: lineBottom,
	                            r: this.props.markerRadius,
	                            pointerEvents: "none",
	                            style: this.props.markerStyle
	                        });
	                        transform = "translate(" + (posx + 10) + "," + 10 + ")";
	                    } else {
	                        if (info) {
	                            verticalStem = _react2.default.createElement("line", {
	                                pointerEvents: "none",
	                                style: this.props.stemStyle,
	                                x1: w + 10,
	                                y1: lineBottom,
	                                x2: w + 10,
	                                y2: 20
	                            });
	                            horizontalStem = _react2.default.createElement("line", {
	                                pointerEvents: "none",
	                                style: this.props.stemStyle,
	                                x1: w + 10,
	                                y1: 20,
	                                x2: w + 2,
	                                y2: 20
	                            });
	                        }
	                        dot = _react2.default.createElement("circle", {
	                            cx: w + 10,
	                            cy: lineBottom,
	                            r: this.props.markerRadius,
	                            pointerEvents: "none",
	                            style: this.props.markerStyle
	                        });
	                        transform = "translate(" + (posx - w - 10) + "," + 10 + ")";
	                    }

	                    return _react2.default.createElement(
	                        "g",
	                        { transform: transform },
	                        verticalStem,
	                        horizontalStem,
	                        dot,
	                        this.renderTime(event),
	                        _react2.default.createElement(
	                            "g",
	                            { transform: "translate(0," + 20 + ")" },
	                            infoBox
	                        )
	                    );
	                }
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                var _props = this.props,
	                    event = _props.event,
	                    column = _props.column,
	                    info = _props.info;

	                if (!event) {
	                    return _react2.default.createElement("g", null);
	                }
	                return _react2.default.createElement(
	                    "g",
	                    null,
	                    this.renderMarker(event, column, info)
	                );
	            }
	        }
	    ]);

	    return EventMarker;
	})(_react2.default.Component);

	exports.default = EventMarker;

	EventMarker.propTypes = {
	    type: _propTypes2.default.oneOf(["point", "flag"]),

	    /**
	     * What [Pond Event](https://esnet-pondjs.appspot.com/#/event) to mark
	     */
	    event: _propTypes2.default.oneOfType([
	        _propTypes2.default.instanceOf(entry.TimeEvent),
	        _propTypes2.default.instanceOf(entry.IndexedEvent),
	        _propTypes2.default.instanceOf(entry.TimeRangeEvent)
	    ]),

	    /**
	     * Which column in the Event to use
	     */
	    column: _propTypes2.default.string,

	    /**
	     * The values to show in the info box. This is either an array of
	     * objects, with each object specifying the label and value
	     * to be shown in the info box, or a simple string label. If this
	     * prop is not supplied, no infoBox will be displayed.
	     */
	    info: _propTypes2.default.oneOfType([
	        _propTypes2.default.string,
	        _propTypes2.default.arrayOf(
	            _propTypes2.default.shape({
	                label: _propTypes2.default.string, // eslint-disable-line
	                value: _propTypes2.default.string // eslint-disable-line
	            })
	        )
	    ]),

	    /**
	     * The style of the info box itself. Typically you'd want to
	     * specify a fill color, and stroke color/width here.
	     */
	    infoStyle: _propTypes2.default.object,

	    /**
	     * The width of the info box
	     */
	    infoWidth: _propTypes2.default.number,

	    /**
	     * The height of the info box
	     */
	    infoHeight: _propTypes2.default.number,

	    /**
	     * Alter the format of the timestamp shown on the info box.
	     * This may be either a function or a string. If you provide a function
	     * that will be passed an Index and should return a string. For example:
	     * ```
	     *     index => moment(index.begin()).format("Do MMM 'YY")
	     * ```
	     * Alternatively you can pass in a d3 format string. That will be applied
	     * to the begin time of the Index range.
	     */
	    infoTimeFormat: _propTypes2.default.oneOfType([
	        _propTypes2.default.func,
	        _propTypes2.default.string
	    ]),

	    /**
	     * Show a label to the left or right of the marker
	     */
	    markerLabelAlign: _propTypes2.default.oneOf(["left", "right", "top", "bottom"]),

	    /**
	     * The radius of the dot at the end of the marker
	     */
	    markerRadius: _propTypes2.default.number,

	    /**
	     * The style of the event marker dot
	     */
	    markerStyle: _propTypes2.default.object,

	    /**
	     * The y value is calculated by the column and event, but if
	     * this prop is provided this will be used instead.
	     */
	    yValueFunc: _propTypes2.default.func,

	    /**
	     * Offset the marker position in the x direction.
	     */
	    offsetX: _propTypes2.default.number,

	    /**
	     * Offset the marker position in the y direction
	     */
	    offsetY: _propTypes2.default.number,

	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func,

	    /**
	     * [Internal] The yScale supplied by the associated YAxis
	     */
	    yScale: _propTypes2.default.func,

	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number
	};

	EventMarker.defaultProps = {
	    type: "flag",
	    column: "value",
	    infoWidth: 90,
	    infoHeight: 25,
	    infoStyle: {
	        fill: "white",
	        opacity: 0.9,
	        stroke: "#999",
	        pointerEvents: "none"
	    },
	    stemStyle: {
	        stroke: "#999",
	        cursor: "crosshair",
	        pointerEvents: "none"
	    },
	    markerStyle: {
	        fill: "#999"
	    },
	    markerRadius: 2,
	    markerLabelAlign: "left",
	    markerLabelStyle: {
	        fill: "#999"
	    },
	    offsetX: 0,
	    offsetY: 0
	};
	});

	unwrapExports(EventMarker_1);

	var BarChart_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _underscore2 = _interopRequireDefault(underscore);



	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _EventMarker2 = _interopRequireDefault(EventMarker_1);



	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var defaultStyle = {
	    normal: { fill: "steelblue", opacity: 0.8 },
	    highlighted: { fill: "steelblue", opacity: 1.0 },
	    selected: { fill: "steelblue", opacity: 1.0 },
	    muted: { fill: "steelblue", opacity: 0.4 }
	};

	/**
	 * Renders a bar chart based on IndexedEvents within a TimeSeries.
	 *
	 * This BarChart implementation is a little different that other time axis
	 * bar charts in that it will render across a the time range of the event
	 * rather than rendering to specific categories. As a result,
	 * a Aug-2014 bar will render between the Aug 2014 tick mark and
	 * the Sept 2014 tickmark. However, this allows it to play well with other
	 * types of charts that maybe integrated into the same visualization.
	 *
	 * The BarChart will render a single TimeSeries. You can specify the columns
	 * you want to render with the `columns` prop. Each column will be stacked on
	 * the other, in the order specified in the `columns` array.
	 *
	 * ### IndexedEvents
	 *
	 * BarCharts are supposed to be for aggregated values (e.g. average of
	 * many points over an hour), so the hours themselves are specified
	 * with an "Index". An Index is a string that represents that range of time,
	 * rather than a specific time like a timestamp would.
	 *
	 * Pond provides several mechanisms for building aggregated series from
	 * a TimeSeries, and the BarChart code is suited to visualizing that
	 * output. See Pond for more details (especially TimeSeries.fixedWindowRollup
	 * and the Pipeline processing facilities). The realtime example in this
	 * library also shows how to do this on incoming streams of data.
	 *
	 * If you have one timestamped point per hour and really want to represent
	 * those with a BarChart, you can use the Pond static method
	 * `Index.getIndexString(period, date)` to take the Date and return an
	 * Index string. Say if those points were hourly, you'll end up with
	 * strings that look like "1h-412715". This represents a specific hour
	 * in time (the 412,715th hour since midnight 1 Jan 1970, actually).
	 * Note that for larger time periods, index strings can be partial
	 * dates, like "2016-08-31" for Aug 31st, 2016 or "2016-08" for Aug 2016.
	 *
	 * Use those index strings to build your timeseries instead of timestamps.
	 * Here's the Pond code needed to convert a date to an index string:
	 *
	 * ```
	 *   import { Index } from "pondjs";
	 *   const d = new Date("2017-01-30T11:58:38.741Z");
	 *   const index = Index.getIndexString("1h", d);   // '1h-412715'
	 * ```
	 *
	 * With either the aggregated approach, or the above timestamped
	 * conversion, you will want a `TimeSeries` of `IndexedEvent`s that
	 * looks like this:
	 * ```
	 *   const series = new TimeSeries({
	 *     name: "myseries",
	 *     columns: ["index", "value"],
	 *     points: [
	 *       ["1h-41275", 22],
	 *       ["1h-41276", 35],
	 *       ["1h-41277", 72],
	 *       ...
	 *     ]
	 *   })
	 * ```
	 *
	 * Note: the first column of the timeseries should be "index" (not "time")
	 * and each point should have an index string at the beginning.
	 *
	 * ### Interactivity
	 *
	 * The BarChart supports selection of individual bars. To control this use
	 * `onSelectionChange` to get a callback of selection changed. Your callback
	 * will be called with the selection (an object containing the event
	 * and column). You can pass this back into the BarChart as `selection`. For
	 * example:
	 *
	 * ```
	 *  <BarChart
	 *      ...
	 *      selection={this.state.selection}
	 *      onSelectionChange={selection => this.setState({selection})} />
	 * ```
	 *
	 * Similarly you can monitor which bar is being hovered over with the
	 * `onHighlightChange` callback. This can be used to determine the info box
	 * to display. Info box will display a box (like a tooltip) with a line
	 * connecting it to the bar. You use the `info` prop to evoke this and to
	 * supply the text for the info box. See the styling notes below for more
	 * information on this.
	 *
	 * ### Styling
	 *
	 * A BarChart supports per-column or per-event styling. Styles can be set for
	 * each of the four states that are possible: normal, highlighted,
	 * selected and muted. To style per-column, supply an object. For per-event styling
	 * supply a function: `(event, column) => {}` The functon should return a style object.
	 *
	 * See the `style` prop in the API documentation for more information.
	 *
	 * Separately the size of the bars can be controlled with the `spacing` and
	 * `offset` props. Spacing controls the gap between the bars. Offset moves the
	 * bars left or right by the given number of pixels. You can use this to place
	 * bars along side each other. Alternatively, you can give each column a fixed width
	 * using the `size` prop. In this case this size will be used in preference to the size
	 * determined from the timerange of the event and the `spacing`.
	 *
	 * The info box is also able to be styled using `infoStyle`, `stemStyle` and
	 * `markerStyle` This enables you to control the drawing of the box, the connecting
	 * lines (stem) and dot respectively. Using the `infoWidth` and `infoHeight`
	 * props you can control the size of the box, which is fixed. For the info inside
	 * the box, it's up to you: it can either be a simple string or an array of
	 * {label, value} pairs.
	 */

	var BarChart = (function(_React$Component) {
	    _inherits(BarChart, _React$Component);

	    function BarChart() {
	        _classCallCheck(this, BarChart);

	        return _possibleConstructorReturn(
	            this,
	            (BarChart.__proto__ || Object.getPrototypeOf(BarChart)).apply(this, arguments)
	        );
	    }

	    _createClass(BarChart, [
	        {
	            key: "handleHover",
	            value: function handleHover(e, event, column) {
	                var bar = { event: event, column: column };
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(bar);
	                }
	            }
	        },
	        {
	            key: "handleHoverLeave",
	            value: function handleHoverLeave() {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(null);
	                }
	            }
	        },
	        {
	            key: "handleClick",
	            value: function handleClick(e, event, column) {
	                var bar = { event: event, column: column };
	                if (this.props.onSelectionChange) {
	                    this.props.onSelectionChange(bar);
	                }
	                e.stopPropagation();
	            }
	        },
	        {
	            key: "providedStyleMap",
	            value: function providedStyleMap(column) {
	                var style = {};
	                if (this.props.style) {
	                    if (this.props.style instanceof styler_1.Styler) {
	                        style = this.props.style.barChartStyle()[column];
	                    } else if (_underscore2.default.isFunction(this.props.style)) {
	                        style = this.props.style(column);
	                    } else if (_underscore2.default.isObject(this.props.style)) {
	                        style = this.props.style ? this.props.style[column] : defaultStyle;
	                    }
	                }
	                return style;
	            }

	            /**
	             * Returns the style used for drawing the path
	             */
	        },
	        {
	            key: "style",
	            value: function style(column, event) {
	                var style = void 0;
	                var styleMap = this.providedStyleMap(column);

	                var isHighlighted =
	                    this.props.highlighted &&
	                    column === this.props.highlighted.column &&
	                    entry.Event.is(this.props.highlighted.event, event);

	                var isSelected =
	                    this.props.selected &&
	                    column === this.props.selected.column &&
	                    entry.Event.is(this.props.selected.event, event);

	                if (this.props.selected) {
	                    if (isSelected) {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle.selected,
	                            styleMap.selected ? styleMap.selected : {}
	                        );
	                    } else if (isHighlighted) {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle.highlighted,
	                            styleMap.highlighted ? styleMap.highlighted : {}
	                        );
	                    } else {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle.muted,
	                            styleMap.muted ? styleMap.muted : {}
	                        );
	                    }
	                } else if (isHighlighted) {
	                    style = (0, _merge2.default)(
	                        true,
	                        defaultStyle.highlighted,
	                        styleMap.highlighted ? styleMap.highlighted : {}
	                    );
	                } else {
	                    style = (0, _merge2.default)(
	                        true,
	                        defaultStyle.normal,
	                        styleMap.normal ? styleMap.normal : {}
	                    );
	                }

	                return style;
	            }
	        },
	        {
	            key: "renderBars",
	            value: function renderBars() {
	                var _this2 = this;

	                var spacing = +this.props.spacing;
	                var offset = +this.props.offset;
	                var minBarHeight = this.props.minBarHeight;
	                var series = this.props.series;
	                var timeScale = this.props.timeScale;
	                var yScale = this.props.yScale;
	                var columns = this.props.columns || ["value"];

	                var bars = [];
	                var eventMarker = void 0;

	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    var _loop = function _loop() {
	                        var event = _step.value;

	                        var begin = event.begin();
	                        var end = event.end();
	                        var beginPos = timeScale(begin) + spacing;
	                        var endPos = timeScale(end) - spacing;

	                        var width = void 0;
	                        if (_this2.props.size) {
	                            width = _this2.props.size;
	                        } else {
	                            width = endPos - beginPos;
	                        }

	                        if (width < 1) {
	                            width = 1;
	                        }

	                        var x = void 0;
	                        if (_this2.props.size) {
	                            var center = timeScale(begin) + (timeScale(end) - timeScale(begin)) / 2;
	                            x = center - _this2.props.size / 2 + offset;
	                        } else {
	                            x = timeScale(begin) + spacing + offset;
	                        }

	                        var yBase = yScale(0);
	                        var yposPositive = yBase;
	                        var yposNegative = yBase;
	                        if (columns) {
	                            var _iteratorNormalCompletion2 = true;
	                            var _didIteratorError2 = false;
	                            var _iteratorError2 = undefined;

	                            try {
	                                var _loop2 = function _loop2() {
	                                    var column = _step2.value;

	                                    var index = event.index();
	                                    var key = series.name() + "-" + index + "-" + column;
	                                    var value = event.get(column);
	                                    var style = _this2.style(column, event);

	                                    var height = yScale(0) - yScale(value);
	                                    // Allow negative values. Minimum bar height = 1 pixel.
	                                    // Stack negative bars below X-axis and positive above X-Axis
	                                    var positiveBar = height >= 0;
	                                    height = Math.max(Math.abs(height), minBarHeight);
	                                    var y = positiveBar ? yposPositive - height : yposNegative;

	                                    // Event marker if info provided and hovering
	                                    var isHighlighted =
	                                        _this2.props.highlighted &&
	                                        column === _this2.props.highlighted.column &&
	                                        entry.Event.is(_this2.props.highlighted.event, event);
	                                    if (isHighlighted && _this2.props.info) {
	                                        eventMarker = _react2.default.createElement(
	                                            _EventMarker2.default,
	                                            _extends({}, _this2.props, {
	                                                event: event,
	                                                column: column,
	                                                offsetX: offset,
	                                                offsetY:
	                                                    yBase -
	                                                    (positiveBar ? yposPositive : yposNegative)
	                                            })
	                                        );
	                                    }

	                                    var box = { x: x, y: y, width: width, height: height };
	                                    var barProps = _extends({ key: key }, box, { style: style });

	                                    if (_this2.props.onSelectionChange) {
	                                        barProps.onClick = function(e) {
	                                            return _this2.handleClick(e, event, column);
	                                        };
	                                    }
	                                    if (_this2.props.onHighlightChange) {
	                                        barProps.onMouseMove = function(e) {
	                                            return _this2.handleHover(e, event, column);
	                                        };
	                                        barProps.onMouseLeave = function() {
	                                            return _this2.handleHoverLeave();
	                                        };
	                                    }

	                                    bars.push(_react2.default.createElement("rect", barProps));

	                                    if (positiveBar) {
	                                        yposPositive -= height;
	                                    } else {
	                                        yposNegative += height;
	                                    }
	                                };

	                                for (
	                                    var _iterator2 = columns[Symbol.iterator](), _step2;
	                                    !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next())
	                                        .done);
	                                    _iteratorNormalCompletion2 = true
	                                ) {
	                                    _loop2();
	                                }
	                            } catch (err) {
	                                _didIteratorError2 = true;
	                                _iteratorError2 = err;
	                            } finally {
	                                try {
	                                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                        _iterator2.return();
	                                    }
	                                } finally {
	                                    if (_didIteratorError2) {
	                                        throw _iteratorError2;
	                                    }
	                                }
	                            }
	                        }
	                    };

	                    for (
	                        var _iterator = series.events()[Symbol.iterator](), _step;
	                        !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
	                        _iteratorNormalCompletion = true
	                    ) {
	                        _loop();
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                return _react2.default.createElement("g", null, bars, eventMarker);
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                return _react2.default.createElement("g", null, this.renderBars());
	            }
	        }
	    ]);

	    return BarChart;
	})(_react2.default.Component);

	exports.default = BarChart;

	BarChart.propTypes = {
	    /**
	     * Show or hide this chart
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries)
	     * data to visualize
	     */
	    series: _propTypes2.default.instanceOf(entry.TimeSeries).isRequired,

	    /**
	     * The distance in pixels to inset the bar chart from its actual timerange
	     */
	    spacing: _propTypes2.default.number,

	    /**
	     * The distance in pixels to offset the bar from its center position within the timerange
	     * it represents
	     */
	    offset: _propTypes2.default.number,

	    /**
	     * The minimum height of a bar given in pixels.
	     * By default, the minimum height of a bar is 1 pixel
	     */
	    minBarHeight: _propTypes2.default.number,

	    /**
	     * A list of columns within the series that will be stacked on top of each other
	     */
	    columns: _propTypes2.default.arrayOf(_propTypes2.default.string),

	    /**
	     * The style of the bar chart drawing (using SVG CSS properties).
	     * This is an object with a key for each column which is being drawn,
	     * per the `columns` prop. For each column a style is defined for
	     * each state the bar may be in. This style is the CSS properties for
	     * the underlying SVG <Rect>, so most likely you'll define fill and
	     * opacity.
	     *
	     * For example:
	     * ```
	     * style = {
	     *     columnName: {
	     *         normal: {
	     *             fill: "steelblue",
	     *             opacity: 0.8,
	     *         },
	     *         highlighted: {
	     *             fill: "#a7c4dd",
	     *             opacity: 1.0,
	     *         },
	     *         selected: {
	     *             fill: "orange",
	     *             opacity: 1.0,
	     *         },
	     *         muted: {
	     *             fill: "grey",
	     *             opacity: 0.5
	     *         }
	     *     }
	     * }
	     * ```
	     *
	     * You can also supply a function, which will be called with an event
	     * and column. The function should return an object containing the
	     * four states (normal, highlighted, selected and muted) and the corresponding
	     * CSS properties.
	     */
	    style: _propTypes2.default.oneOfType([
	        _propTypes2.default.object,
	        _propTypes2.default.func,
	        _propTypes2.default.instanceOf(styler_1.Styler)
	    ]),

	    /**
	     * The values to show in the info box. This is an array of
	     * objects, with each object specifying the label and value
	     * to be shown in the info box.
	     */
	    info: _propTypes2.default.arrayOf(
	        _propTypes2.default.shape({
	            label: _propTypes2.default.string, //eslint-disable-line
	            value: _propTypes2.default.string //eslint-disable-line
	        })
	    ),

	    /**
	     * The style of the info box itself. Typically you'd want to
	     * specify a fill color, and stroke color / width here.
	     */
	    infoStyle: _propTypes2.default.object, //eslint-disable-line

	    /**
	     * The width of the info box
	     */
	    infoWidth: _propTypes2.default.number, //eslint-disable-line

	    /**
	     * The height of the info box
	     */
	    infoHeight: _propTypes2.default.number, //eslint-disable-line

	    /**
	     * Alter the format of the timestamp shown on the info box.
	     * This may be either a function or a string. If you provide a function
	     * that will be passed an Index and should return a string. For example:
	     * ```
	     *     index => moment(index.begin()).format("Do MMM 'YY")
	     * ```
	     * Alternatively you can pass in a d3 format string. That will be applied
	     * to the begin time of the Index range.
	     */
	    infoTimeFormat: _propTypes2.default.oneOfType([
	        //eslint-disable-line
	        _propTypes2.default.string, //eslint-disable-line
	        _propTypes2.default.func //eslint-disable-line
	    ]),

	    /**
	     * The radius of the infoBox dot at the end of the marker
	     */
	    markerRadius: _propTypes2.default.number,

	    /**
	     * The style of the infoBox dot at the end of the marker
	     */
	    markerStyle: _propTypes2.default.object,

	    /**
	     * If size is specified, then the bar will be this number of pixels wide. This
	     * prop takes priority over "spacing".
	     */
	    size: _propTypes2.default.number,

	    /**
	     * The selected item, which will be rendered in the "selected" style.
	     * If a bar is selected, all other bars will be rendered in the "muted" style.
	     *
	     * See also `onSelectionChange`
	     */
	    selected: _propTypes2.default.shape({
	        event: _propTypes2.default.instanceOf(entry.IndexedEvent),
	        column: _propTypes2.default.string
	    }),

	    /**
	     * A callback that will be called when the selection changes. It will be called
	     * with an object containing the event and column.
	     */
	    onSelectionChange: _propTypes2.default.func,

	    /**
	     * The highlighted item, which will be rendered in the "highlighted" style.
	     *
	     * See also `onHighlightChange`
	     */
	    highlighted: _propTypes2.default.shape({
	        event: _propTypes2.default.instanceOf(entry.IndexedEvent),
	        column: _propTypes2.default.string
	    }),

	    /**
	     * A callback that will be called when the hovered over bar changes.
	     * It will be called with an object containing the event and column.
	     */
	    onHighlightChange: _propTypes2.default.func,

	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func,

	    /**
	     * [Internal] The yScale supplied by the associated YAxis
	     */
	    yScale: _propTypes2.default.func
	};

	BarChart.defaultProps = {
	    visible: true,
	    columns: ["value"],
	    spacing: 1.0,
	    offset: 0,
	    minBarHeight: 1,
	    infoStyle: {
	        stroke: "#999",
	        fill: "white",
	        opacity: 0.9,
	        pointerEvents: "none"
	    },
	    stemStyle: {
	        stroke: "#999",
	        cursor: "crosshair",
	        pointerEvents: "none"
	    },
	    markerStyle: {
	        fill: "#999"
	    },
	    markerRadius: 2,
	    infoWidth: 90,
	    infoHeight: 30
	};
	});

	unwrapExports(BarChart_1);

	var BoxChart_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    }; /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */



	var _underscore2 = _interopRequireDefault(underscore);



	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _EventMarker2 = _interopRequireDefault(EventMarker_1);





	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	}

	var defaultFillStyle = {
	    fill: "steelblue",
	    stroke: "none"
	};

	var defaultMutedStyle = {
	    fill: "grey",
	    stroke: "none"
	};

	var defaultStyle = [
	    {
	        normal: _extends({}, defaultFillStyle, { opacity: 0.2 }),
	        highlighted: _extends({}, defaultFillStyle, { opacity: 0.3 }),
	        selected: _extends({}, defaultFillStyle, { opacity: 0.3 }),
	        muted: _extends({}, defaultMutedStyle, { opacity: 0.1 })
	    },
	    {
	        normal: _extends({}, defaultFillStyle, { opacity: 0.5 }),
	        highlighted: _extends({}, defaultFillStyle, { opacity: 0.6 }),
	        selected: _extends({}, defaultFillStyle, { opacity: 0.6 }),
	        muted: _extends({}, defaultMutedStyle, { opacity: 0.2 })
	    },
	    {
	        normal: _extends({}, defaultFillStyle, { opacity: 0.9 }),
	        highlighted: _extends({}, defaultFillStyle, { opacity: 1.0 }),
	        selected: _extends({}, defaultFillStyle, { opacity: 1.0 }),
	        muted: _extends({}, defaultMutedStyle, { opacity: 0.2 })
	    }
	];

	var defaultAggregation = {
	    size: "5m",
	    reducers: {
	        outer: [(0, entry.min)(), (0, entry.max)()],
	        inner: [(0, entry.percentile)(25), (0, entry.percentile)(75)],
	        center: (0, entry.median)()
	    }
	};

	function getSeries(series, column) {
	    return series.map(function(e) {
	        var v = e.get(column);
	        var d = {};
	        switch (v.length) {
	            case 1:
	                d.center = v[0];
	                break;
	            case 2:
	                d.innerMin = v[0];
	                d.innerMax = v[1];
	                break;
	            case 3:
	                d.innerMin = v[0];
	                d.center = v[1];
	                d.innerMax = v[2];
	                break;
	            case 4:
	                d.outerMin = v[0];
	                d.innerMin = v[1];
	                d.innerMax = v[2];
	                d.outerMax = v[3];
	                break;
	            case 5:
	                d.outerMin = v[0];
	                d.innerMin = v[1];
	                d.center = v[2];
	                d.innerMax = v[3];
	                d.outerMax = v[4];
	                break;
	            default:
	                console.error("Tried to make boxchart from invalid array");
	        }
	        var ee = new entry.IndexedEvent(e.index(), d);
	        return ee;
	    });
	}

	function getAggregatedSeries(series, column) {
	    var aggregation =
	        arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultAggregation;
	    var size = aggregation.size,
	        reducers = aggregation.reducers;
	    var inner = reducers.inner,
	        outer = reducers.outer,
	        center = reducers.center;

	    function mapColumn(c, r) {
	        var obj = {};
	        obj[c] = r;
	        return obj;
	    }

	    var fixedWindowAggregation = {};

	    if (inner) {
	        fixedWindowAggregation.innerMin = mapColumn(column, inner[0]);
	        fixedWindowAggregation.innerMax = mapColumn(column, inner[1]);
	    }

	    if (outer) {
	        fixedWindowAggregation.outerMin = mapColumn(column, outer[0]);
	        fixedWindowAggregation.outerMax = mapColumn(column, outer[1]);
	    }

	    if (center) {
	        fixedWindowAggregation.center = mapColumn(column, center);
	    }

	    var aggregatedSeries = series.fixedWindowRollup({
	        windowSize: size,
	        aggregation: fixedWindowAggregation
	    });

	    return aggregatedSeries;
	}

	/**
	 * Renders a boxplot chart.
	 *
	 * The TimeSeries supplied to the boxplot, as the `series` prop can be one of two types:
	 *
	 *  1) It can be a TimeSeries containing IndexedEvents or TimeRangeEvents.
	 *     In this case a `column` prop should be supplied to specify the
	 *     data column containing the dimensions of the boxes. This props
	 *     should be an array of size 1 to 5 elements. e.g. [12, 18, 22, 28]. The
	 *     numbers should be ordered, lowest to greatest.
	 *
	 *  2) A TimeSeries containing timestamp based Events. In this case the
	 *     boxplot will be aggregated for you. To control the aggregation you can supply
	 *     an `aggregation` prop: a structure to specify the window size and
	 *     reducers used to determine the boxes.
	 *
	 * In both cases you are generating up to two ranges and a center marker. In the
	 * first case you are defining this based on the array of numbers. The outer numbers
	 * specify the outerRange, the inner numbers specify the innerRange and the middle
	 * number specifies the center marker. In the second case you are building those ranges
	 * from denser data, specifying a window and aggregation functions to build each
	 * of the ranges and center maker.
	 *
	 * In both cases you do not need to supply all the values. For example if you
	 * provide an array of 2 elements, that would define a single range, with no outer range
	 * and no center marker. The BoxChart is pretty flexible in that way, so you
	 * can use it in many situations.
	 *
	 * Here is an example of using it to display temperature ranges. The series
	 * passed to this code would be a TimeSeries containing IndexedEvents. For
	 * each event, the column `temp` contains an array of values used for the
	 * box plot ranges:
	 *
	 * ```
	 *     <BoxChart
	 *       axis="temperatureAxis"
	 *       style={style}
	 *       column="temp"
	 *       series={series} />
	 * ```
	 *
	 * While here is an example with a dense TimeSeries of Events supplied,
	 * along with an aggregation specification. This code would produce an
	 * outer range from the 5th percentile to the 95th, along with an inner
	 * range for the interquantile, and a center marker at the median:
	 *
	 * ```
	 *    <BoxChart
	 *      axis="speedaxis"
	 *      series={speed}
	 *      column="speed"
	 *      style={style}
	 *      aggregation={{
	 *        size: this.state.rollup,
	 *        reducers: {
	 *          outer: [percentile(5), percentile(95)],
	 *          inner: [percentile(25), percentile(75)],
	 *          center: median(),
	 *        },
	 *      }}
	 *    />
	 * ```
	 *
	 * The BoxChart supports Info boxes, highlighting and selection.
	 *
	 * Note: selection and highlighting is on the whole event, not individual ranges.
	 * Also note that since the box chart builds an internal TimeSeries for performance
	 * reasons, selection will give you and IndexedEvent, but it won't be the same
	 * IndexedEvent in your `series`. Similarly if you are using the aggregation
	 * specification you will get events for the rollup, not your original data.
	 */

	var BoxChart = (function(_React$Component) {
	    _inherits(BoxChart, _React$Component);

	    function BoxChart(props) {
	        _classCallCheck(this, BoxChart);

	        var _this = _possibleConstructorReturn(
	            this,
	            (BoxChart.__proto__ || Object.getPrototypeOf(BoxChart)).call(this, props)
	        );

	        if (
	            props.series._collection._type === entry.TimeEvent // eslint-disable-line
	        ) {
	            _this.series = getAggregatedSeries(props.series, props.column, props.aggregation);
	        } else {
	            _this.series = getSeries(props.series, props.column);
	        }
	        return _this;
	    }

	    _createClass(BoxChart, [
	        {
	            key: "componentWillReceiveProps",
	            value: function componentWillReceiveProps(nextProps) {
	                var aggregation = nextProps.aggregation;

	                var aggregationChanged = false;
	                if (
	                    _underscore2.default.isUndefined(aggregation) !==
	                    _underscore2.default.isUndefined(this.props.aggregation)
	                ) {
	                    aggregationChanged = true;
	                }

	                if (aggregation && this.props.aggregation) {
	                    if (aggregation.size !== this.props.aggregation.size) {
	                        aggregationChanged = true;
	                    }
	                }

	                if (aggregationChanged) {
	                    this.series = getAggregatedSeries(
	                        nextProps.series,
	                        nextProps.column,
	                        nextProps.aggregation
	                    );
	                }
	            }
	        },
	        {
	            key: "shouldComponentUpdate",
	            value: function shouldComponentUpdate(nextProps) {
	                var newSeries = nextProps.series;
	                var oldSeries = this.props.series;
	                var width = nextProps.width;
	                var timeScale = nextProps.timeScale;
	                var yScale = nextProps.yScale;
	                var column = nextProps.column;
	                var style = nextProps.style;
	                var aggregation = nextProps.aggregation;
	                var highlighted = nextProps.highlighted;
	                var selected = nextProps.selected;

	                var widthChanged = this.props.width !== width;
	                var timeScaleChanged =
	                    (0, util$2.scaleAsString)(this.props.timeScale) !==
	                    (0, util$2.scaleAsString)(timeScale);
	                var yAxisScaleChanged = this.props.yScale !== yScale;
	                var columnChanged = this.props.column !== column;
	                var styleChanged = JSON.stringify(this.props.style) !== JSON.stringify(style);
	                var highlightedChanged = this.props.highlighted !== highlighted;
	                var selectedChanged = this.props.selected !== selected;

	                var aggregationChanged = false;
	                if (
	                    _underscore2.default.isUndefined(aggregation) !==
	                    _underscore2.default.isUndefined(this.props.aggregation)
	                ) {
	                    aggregationChanged = true;
	                }

	                if (aggregation && this.props.aggregation) {
	                    if (aggregation.size !== this.props.aggregation.size) {
	                        aggregationChanged = true;
	                    }
	                }

	                var seriesChanged = false;
	                if (oldSeries.length !== newSeries.length) {
	                    seriesChanged = true;
	                } else {
	                    seriesChanged = !entry.TimeSeries.is(oldSeries, newSeries);
	                }

	                // If the series changes we need to rebuild this.series with
	                // the incoming props
	                if (seriesChanged) {
	                    if (
	                        nextProps.series._collection._type === entry.TimeEvent // eslint-disable-line
	                    ) {
	                        this.series = getAggregatedSeries(
	                            nextProps.series,
	                            nextProps.column,
	                            nextProps.aggregation
	                        );
	                    } else {
	                        this.series = getSeries(nextProps.series, nextProps.column);
	                    }
	                }

	                return (
	                    seriesChanged ||
	                    timeScaleChanged ||
	                    widthChanged ||
	                    columnChanged ||
	                    styleChanged ||
	                    yAxisScaleChanged ||
	                    aggregationChanged ||
	                    highlightedChanged ||
	                    selectedChanged
	                );
	            }
	        },
	        {
	            key: "handleHover",
	            value: function handleHover(e, event) {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(event);
	                }
	            }
	        },
	        {
	            key: "handleHoverLeave",
	            value: function handleHoverLeave() {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(null);
	                }
	            }
	        },
	        {
	            key: "handleClick",
	            value: function handleClick(e, event) {
	                if (this.props.onSelectionChange) {
	                    this.props.onSelectionChange(event);
	                }
	                e.stopPropagation();
	            }
	        },
	        {
	            key: "providedStyleArray",
	            value: function providedStyleArray(column) {
	                var style = defaultStyle;
	                if (this.props.style) {
	                    if (this.props.style instanceof styler_1.Styler) {
	                        style = this.props.style.boxChartStyle()[column];
	                    } else if (_underscore2.default.isFunction(this.props.style)) {
	                        style = this.props.style(column);
	                    } else if (_underscore2.default.isObject(this.props.style)) {
	                        style = this.props.style ? this.props.style[column] : defaultStyle;
	                    }
	                }
	                return style;
	            }

	            /**
	             * Returns the style used for drawing the path
	             */
	        },
	        {
	            key: "style",
	            value: function style(column, event, level) {
	                var style = void 0;
	                if (!this.providedStyle) {
	                    this.providedStyle = this.providedStyleArray(this.props.column);
	                }

	                if (
	                    !_underscore2.default.isNull(this.providedStyle) &&
	                    (!_underscore2.default.isArray(this.providedStyle) ||
	                        this.providedStyle.length !== 3)
	                ) {
	                    console.warn("Provided style to BoxChart should be an array of 3 objects");
	                    return defaultStyle;
	                }

	                var isHighlighted =
	                    this.props.highlighted && entry.Event.is(this.props.highlighted, event);

	                var isSelected =
	                    this.props.selected && entry.Event.is(this.props.selected, event);

	                if (this.props.selected) {
	                    if (isSelected) {
	                        if (!this.selectedStyle || !this.selectedStyle[level]) {
	                            if (!this.selectedStyle) {
	                                this.selectedStyle = [];
	                            }
	                            this.selectedStyle[level] = (0, _merge2.default)(
	                                true,
	                                defaultStyle[level].selected,
	                                this.providedStyle[level].selected
	                                    ? this.providedStyle[level].selected
	                                    : {}
	                            );
	                        }
	                        style = this.selectedStyle[level];
	                    } else if (isHighlighted) {
	                        if (!this.highlightedStyle || !this.highlightedStyle[level]) {
	                            if (!this.highlightedStyle) {
	                                this.highlightedStyle = [];
	                            }
	                            this.highlightedStyle[level] = (0, _merge2.default)(
	                                true,
	                                defaultStyle[level].highlighted,
	                                this.providedStyle[level].highlighted
	                                    ? this.providedStyle[level].highlighted
	                                    : {}
	                            );
	                        }
	                        style = this.highlightedStyle[level];
	                    } else {
	                        if (!this.mutedStyle) {
	                            this.mutedStyle = [];
	                        }
	                        if (!this.mutedStyle[level]) {
	                            this.mutedStyle[level] = (0, _merge2.default)(
	                                true,
	                                defaultStyle[level].muted,
	                                this.providedStyle[level].muted
	                                    ? this.providedStyle[level].muted
	                                    : {}
	                            );
	                        }
	                        style = this.mutedStyle[level];
	                    }
	                } else if (isHighlighted) {
	                    style = (0, _merge2.default)(
	                        true,
	                        defaultStyle[level].highlighted,
	                        this.providedStyle[level].highlighted
	                            ? this.providedStyle[level].highlighted
	                            : {}
	                    );
	                } else {
	                    if (!this.normalStyle) {
	                        this.normalStyle = [];
	                    }
	                    if (!this.normalStyle[level]) {
	                        this.normalStyle[level] = (0, _merge2.default)(
	                            true,
	                            defaultStyle[level].normal,
	                            this.providedStyle[level].normal ? this.providedStyle[level].normal : {}
	                        );
	                    }
	                    style = this.normalStyle[level];
	                }
	                return style;
	            }
	        },
	        {
	            key: "renderBars",
	            value: function renderBars() {
	                var _this2 = this;

	                var _props = this.props,
	                    timeScale = _props.timeScale,
	                    yScale = _props.yScale,
	                    column = _props.column;

	                var innerSpacing = +this.props.innerSpacing;
	                var outerSpacing = +this.props.outerSpacing;
	                var innerSize = +this.props.innerSize;
	                var outerSize = +this.props.outerSize;

	                var bars = [];
	                var eventMarker = void 0;

	                var scaled = function scaled(d, field) {
	                    return d.has(field) &&
	                        !_underscore2.default.isUndefined(d.get(field)) &&
	                        !_underscore2.default.isNaN(d.get(field))
	                        ? yScale(d.get(field))
	                        : null;
	                };

	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    var _loop = function _loop() {
	                        var event = _step.value;

	                        var index = event.index();
	                        var begin = event.begin();
	                        var end = event.end();
	                        var d = event.data();

	                        var beginPosInner = timeScale(begin) + innerSpacing;
	                        var endPosInner = timeScale(end) - innerSpacing;

	                        var beginPosOuter = timeScale(begin) + outerSpacing;
	                        var endPosOuter = timeScale(end) - outerSpacing;

	                        var innerWidth = innerSize || endPosInner - beginPosInner;
	                        if (innerWidth < 1) {
	                            innerWidth = 1;
	                        }

	                        var outerWidth = outerSize || endPosOuter - beginPosOuter;
	                        if (outerWidth < 1) {
	                            outerWidth = 1;
	                        }

	                        var c = timeScale(begin) + (timeScale(end) - timeScale(begin)) / 2;

	                        var xInner = timeScale(begin) + innerSpacing;
	                        if (innerSize) {
	                            xInner = c - innerSize / 2;
	                        }

	                        var xOuter = timeScale(begin) + outerSpacing;
	                        if (outerSize) {
	                            xOuter = c - outerSize / 2;
	                        }

	                        var styles = [];
	                        styles[0] = _this2.style(column, event, 0);
	                        styles[1] = _this2.style(column, event, 1);
	                        styles[2] = _this2.style(column, event, 2);

	                        var innerMin = scaled(d, "innerMin");
	                        var innerMax = scaled(d, "innerMax");
	                        var outerMin = scaled(d, "outerMin");
	                        var outerMax = scaled(d, "outerMax");
	                        var center = scaled(d, "center");

	                        var hasInner = true;
	                        var hasOuter = true;
	                        var hasCenter = true;
	                        if (
	                            _underscore2.default.isNull(innerMin) ||
	                            _underscore2.default.isNull(innerMax)
	                        ) {
	                            hasInner = false;
	                        }
	                        if (
	                            _underscore2.default.isNull(outerMin) ||
	                            _underscore2.default.isNull(outerMax)
	                        ) {
	                            hasOuter = false;
	                        }
	                        if (_underscore2.default.isNull(center)) {
	                            hasCenter = false;
	                        }

	                        var ymax = 0;
	                        if (hasOuter) {
	                            var level = 0;
	                            if (!hasInner) {
	                                level += 1;
	                            }
	                            if (!hasCenter) {
	                                level += 1;
	                            }
	                            var keyOuter =
	                                (_this2.series.name() ? _this2.series.name() : "series") +
	                                "-" +
	                                index +
	                                "-outer";
	                            var boxOuter = {
	                                x: xOuter,
	                                y: outerMax,
	                                width: outerWidth,
	                                height: outerMin - outerMax,
	                                rx: 2,
	                                ry: 2
	                            };
	                            var barOuterProps = _extends(
	                                {
	                                    key: keyOuter
	                                },
	                                boxOuter,
	                                {
	                                    style: styles[level]
	                                }
	                            );

	                            if (_this2.props.onSelectionChange) {
	                                barOuterProps.onClick = function(e) {
	                                    return _this2.handleClick(e, event);
	                                };
	                            }
	                            if (_this2.props.onHighlightChange) {
	                                barOuterProps.onMouseMove = function(e) {
	                                    return _this2.handleHover(e, event);
	                                };
	                                barOuterProps.onMouseLeave = function() {
	                                    return _this2.handleHoverLeave();
	                                };
	                            }

	                            bars.push(_react2.default.createElement("rect", barOuterProps));
	                            ymax = "outerMax";
	                        }

	                        if (hasInner) {
	                            var _level = 1;
	                            if (!hasCenter) {
	                                _level += 1;
	                            }
	                            var keyInner = _this2.series.name() + "-" + index + "-inner";
	                            var boxInner = {
	                                x: xInner,
	                                y: innerMax,
	                                width: innerWidth,
	                                height: innerMin - innerMax,
	                                rx: 1,
	                                ry: 1
	                            };
	                            var barInnerProps = _extends(
	                                {
	                                    key: keyInner
	                                },
	                                boxInner,
	                                {
	                                    style: styles[_level]
	                                }
	                            );
	                            if (_this2.props.onSelectionChange) {
	                                barInnerProps.onClick = function(e) {
	                                    return _this2.handleClick(e, event);
	                                };
	                            }
	                            if (_this2.props.onHighlightChange) {
	                                barInnerProps.onMouseMove = function(e) {
	                                    return _this2.handleHover(e, event);
	                                };
	                                barInnerProps.onMouseLeave = function() {
	                                    return _this2.handleHoverLeave();
	                                };
	                            }

	                            bars.push(_react2.default.createElement("rect", barInnerProps));
	                            ymax = ymax || "innerMax";
	                        }

	                        if (hasCenter) {
	                            var _level2 = 2;
	                            var keyCenter = _this2.series.name() + "-" + index + "-center";
	                            var boxCenter = {
	                                x: xInner,
	                                y: center,
	                                width: innerWidth,
	                                height: 1
	                            };
	                            var barCenterProps = _extends(
	                                {
	                                    key: keyCenter
	                                },
	                                boxCenter,
	                                {
	                                    style: styles[_level2]
	                                }
	                            );
	                            if (_this2.props.onSelectionChange) {
	                                barCenterProps.onClick = function(e) {
	                                    return _this2.handleClick(e, event);
	                                };
	                            }
	                            if (_this2.props.onHighlightChange) {
	                                barCenterProps.onMouseMove = function(e) {
	                                    return _this2.handleHover(e, event);
	                                };
	                                barCenterProps.onMouseLeave = function() {
	                                    return _this2.handleHoverLeave();
	                                };
	                            }
	                            if (_underscore2.default.isNaN(barCenterProps.y)) {
	                                console.log(d.toString());
	                            }
	                            bars.push(_react2.default.createElement("rect", barCenterProps));
	                            ymax = ymax || "center";
	                        }

	                        // Event marker if info provided and hovering
	                        var isHighlighted =
	                            _this2.props.highlighted &&
	                            entry.Event.is(_this2.props.highlighted, event);
	                        if (isHighlighted && _this2.props.info) {
	                            eventMarker = _react2.default.createElement(
	                                _EventMarker2.default,
	                                _extends({}, _this2.props, {
	                                    yValueFunc: function yValueFunc(e) {
	                                        return e.get(ymax);
	                                    },
	                                    event: event,
	                                    column: column,
	                                    marker: "circle",
	                                    markerRadius: 2
	                                })
	                            );
	                        }
	                    };

	                    for (
	                        var _iterator = this.series.events()[Symbol.iterator](), _step;
	                        !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
	                        _iteratorNormalCompletion = true
	                    ) {
	                        _loop();
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                return _react2.default.createElement("g", null, bars, eventMarker);
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                return _react2.default.createElement("g", null, this.renderBars());
	            }
	        }
	    ]);

	    return BoxChart;
	})(_react2.default.Component);

	exports.default = BoxChart;

	BoxChart.propTypes = {
	    /**
	     * Show or hide this chart
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries)
	     * data to visualize. See general notes on the BoxChart.
	     */
	    series: function series(props, propName, componentName) {
	        var value = props[propName];
	        if (!(value instanceof entry.TimeSeries)) {
	            return new Error(
	                "A TimeSeries needs to be passed to " + componentName + " as the 'series' prop."
	            );
	        }

	        // TODO: Better detection of errors

	        // everything ok
	        return null;
	    },

	    /**
	     * The column within the TimeSeries to plot. Unlike other charts, the BoxChart
	     * works on just a single column.
	     */
	    column: _propTypes2.default.string,

	    /**
	     * The aggregation specification. This object should contain:
	     *   - innerMax
	     *   - innerMin
	     *   - outerMax
	     *   - outerMin
	     *   - center
	     * Though each of the pairs, and center, is optional.
	     * For each of these keys you should supply the function you
	     * want to use to calculate these. You can import common functions
	     * from Pond, e.g. min(), avg(), percentile(95), etc.
	     *
	     * For example:
	     * ```
	     *     {
	     *       size: this.state.rollup,
	     *       reducers: {
	     *         outer: [min(), max()],
	     *         inner: [percentile(25), percentile(75)],
	     *         center: median(),
	     *       },
	     *     }
	     * ```
	     */
	    aggregation: _propTypes2.default.shape({
	        size: _propTypes2.default.string,
	        reducers: _propTypes2.default.shape({
	            inner: _propTypes2.default.arrayOf(_propTypes2.default.func), // eslint-disable-line
	            outer: _propTypes2.default.arrayOf(_propTypes2.default.func), // eslint-disable-line
	            center: _propTypes2.default.func // eslint-disable-line
	        })
	    }), // eslint-disable-line

	    /**
	     * The style of the box chart drawing (using SVG CSS properties) or
	     * a styler object. It is recommended to user the styler unless you need
	     * detailed customization.
	     */
	    style: _propTypes2.default.oneOfType([
	        _propTypes2.default.object,
	        _propTypes2.default.func,
	        _propTypes2.default.instanceOf(styler_1.Styler)
	    ]),

	    /**
	     * The style of the info box and connecting lines
	     */
	    infoStyle: _propTypes2.default.object, //eslint-disable-line

	    /**
	     * The width of the hover info box
	     */
	    infoWidth: _propTypes2.default.number, //eslint-disable-line

	    /**
	     * The height of the hover info box
	     */
	    infoHeight: _propTypes2.default.number, //eslint-disable-line

	    /**
	     * The values to show in the info box. This is an array of
	     * objects, with each object specifying the label and value
	     * to be shown in the info box.
	     */
	    info: _propTypes2.default.arrayOf(
	        _propTypes2.default.shape({
	            //eslint-disable-line
	            label: _propTypes2.default.string, //eslint-disable-line
	            value: _propTypes2.default.string //eslint-disable-line
	        })
	    ),

	    /**
	     * If spacing is specified, then the boxes will be separated from the
	     * timerange boundary by this number of pixels. Use this to space out
	     * the boxes from each other. Inner and outer boxes are controlled
	     * separately.
	     */
	    innerSpacing: _propTypes2.default.number,

	    /**
	     * If spacing is specified, then the boxes will be separated from the
	     * timerange boundary by this number of pixels. Use this to space out
	     * the boxes from each other. Inner and outer boxes are controlled
	     * separately.
	     */
	    outerSpacing: _propTypes2.default.number,

	    /**
	     * If size is specified, then the innerBox will be this number of pixels wide. This
	     * prop takes priority over "spacing".
	     */
	    innerSize: _propTypes2.default.number,

	    /**
	     * If size is specified, then the outer box will be this number of pixels wide. This
	     * prop takes priority over "spacing".
	     */
	    outerSize: _propTypes2.default.number,

	    /**
	     * The selected item, which will be rendered in the "selected" style.
	     * If a bar is selected, all other bars will be rendered in the "muted" style.
	     *
	     * See also `onSelectionChange`
	     */
	    selected: _propTypes2.default.instanceOf(entry.IndexedEvent),

	    /**
	     * The highlighted item, which will be rendered in the "highlighted" style.
	     *
	     * See also `onHighlightChange`
	     */
	    highlighted: _propTypes2.default.instanceOf(entry.IndexedEvent),

	    /**
	     * A callback that will be called when the selection changes. It will be called
	     * with the event corresponding to the box clicked as its only arg.
	     */
	    onSelectionChange: _propTypes2.default.func,

	    /**
	     * A callback that will be called when the hovered over box changes.
	     * It will be called with the event corresponding to the box hovered over.
	     */
	    onHighlightChange: _propTypes2.default.func,

	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func,

	    /**
	     * [Internal] The yScale supplied by the associated YAxis
	     */
	    yScale: _propTypes2.default.func,

	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number
	};

	BoxChart.defaultProps = {
	    visible: true,
	    column: "value",
	    innerSpacing: 1.0,
	    outerSpacing: 2.0,
	    infoStyle: {
	        stroke: "#999",
	        fill: "white",
	        opacity: 0.9,
	        pointerEvents: "none"
	    },
	    stemStyle: {
	        stroke: "#999",
	        cursor: "crosshair",
	        pointerEvents: "none"
	    },
	    markerStyle: {
	        fill: "#999"
	    },
	    markerRadius: 2,
	    infoWidth: 90,
	    infoHeight: 30
	};
	});

	unwrapExports(BoxChart_1);

	var Baseline_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _underscore2 = _interopRequireDefault(underscore);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var defaultStyle = {
	    label: {
	        fill: "#8B7E7E", // Default label color
	        fontWeight: 100,
	        fontSize: 11,
	        pointerEvents: "none"
	    },
	    line: {
	        stroke: "#626262",
	        strokeWidth: 1,
	        strokeDasharray: "5,3",
	        pointerEvents: "none"
	    }
	};

	/**
	 *
	 * The BaseLine component displays a simple horizontal line at a value.
	 *
	 * For example the following code overlays Baselines for the mean and stdev
	 * of a series on top of another chart.
	 *
	 * ```
	 * <ChartContainer timeRange={series.timerange()} >
	 *     <ChartRow height="150">
	 *         <YAxis
	 *           id="price"
	 *           label="Price ($)"
	 *           min={series.min()} max={series.max()}
	 *           width="60" format="$,.2f"
	 *         />
	 *         <Charts>
	 *             <LineChart axis="price" series={series} style={style} />
	 *             <Baseline axis="price" value={series.avg()} label="Avg" position="right" />
	 *             <Baseline axis="price" value={series.avg()-series.stdev()} />
	 *             <Baseline axis="price" value={series.avg()+series.stdev()} />
	 *         </Charts>
	 *     </ChartRow>
	 * </ChartContainer>
	 * ```
	 */

	var Baseline = (function(_React$Component) {
	    _inherits(Baseline, _React$Component);

	    function Baseline() {
	        _classCallCheck(this, Baseline);

	        return _possibleConstructorReturn(
	            this,
	            (Baseline.__proto__ || Object.getPrototypeOf(Baseline)).apply(this, arguments)
	        );
	    }

	    _createClass(Baseline, [
	        {
	            key: "render",
	            value: function render() {
	                var _props = this.props,
	                    vposition = _props.vposition,
	                    yScale = _props.yScale,
	                    value = _props.value,
	                    position = _props.position,
	                    style = _props.style,
	                    width = _props.width;

	                if (!yScale || _underscore2.default.isUndefined(value)) {
	                    return null;
	                }

	                var y = yScale(value);
	                var transform = "translate(0 " + y + ")";
	                var textAnchor = void 0;
	                var textPositionX = void 0;
	                var pts = [];

	                var labelBelow = (vposition === "auto" && y < 15) || vposition === "below";
	                var textPositionY = labelBelow ? 2 : -2;
	                var alignmentBaseline = labelBelow ? "hanging" : "auto";

	                if (position === "left") {
	                    textAnchor = "start";
	                    textPositionX = 5;
	                }
	                if (position === "right") {
	                    textAnchor = "end";
	                    textPositionX = width - 5;
	                }

	                pts.push("0 0");
	                pts.push(width + " 0");
	                var points = pts.join(" ");

	                //
	                // Style
	                //

	                var baseLabelStyle = _extends({}, defaultStyle.label, {
	                    alignmentBaseline: alignmentBaseline
	                });

	                var labelStyle = (0, _merge2.default)(
	                    true,
	                    baseLabelStyle,
	                    style.label ? style.label : {}
	                );
	                var lineStyle = (0, _merge2.default)(
	                    true,
	                    defaultStyle.line,
	                    style.line ? style.line : {}
	                );

	                return _react2.default.createElement(
	                    "g",
	                    { className: "baseline", transform: transform },
	                    _react2.default.createElement("polyline", { points: points, style: lineStyle }),
	                    _react2.default.createElement(
	                        "text",
	                        {
	                            style: labelStyle,
	                            x: textPositionX,
	                            y: textPositionY,
	                            textAnchor: textAnchor
	                        },
	                        this.props.label
	                    )
	                );
	            }
	        }
	    ]);

	    return Baseline;
	})(_react2.default.Component);

	exports.default = Baseline;

	Baseline.defaultProps = {
	    visible: true,
	    value: 0,
	    label: "",
	    position: "left",
	    vposition: "auto",
	    style: defaultStyle
	};

	Baseline.propTypes = {
	    /**
	     * Show or hide this chart
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * Reference to the axis which provides the vertical scale for drawing. e.g.
	     * specifying axis="trafficRate" would refer the y-scale to the YAxis of id="trafficRate".
	     */
	    axis: _propTypes2.default.string.isRequired, // eslint-disable-line

	    /**
	     * An object describing the style of the baseline of the form
	     * { label, line }. "label" and "line" are both objects containing
	     * the inline CSS for that part of the baseline.
	     */
	    style: _propTypes2.default.shape({
	        label: _propTypes2.default.object, // eslint-disable-line
	        line: _propTypes2.default.object // eslint-disable-line
	    }),

	    /**
	     * The y-value to display the line at.
	     */
	    value: _propTypes2.default.number,

	    /**
	     * The label to display with the axis.
	     */
	    label: _propTypes2.default.string,

	    /**
	     * Whether to display the label on the "left" or "right".
	     */
	    position: _propTypes2.default.oneOf(["left", "right"]),

	    /**
	     * Whether to display the label above or below the line. The default is "auto",
	     * which will show it above the line unless the position is near to the top
	     * of the chart.
	     */
	    vposition: _propTypes2.default.oneOf(["above", "below", "auto"]),

	    /**
	     * [Internal] The yScale supplied by the associated YAxis
	     */
	    yScale: _propTypes2.default.func,

	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number
	};
	});

	unwrapExports(Baseline_1);

	var Brush_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _slicedToArray = (function() {
	    function sliceIterator(arr, i) {
	        var _arr = [];
	        var _n = true;
	        var _d = false;
	        var _e = undefined;
	        try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	                _arr.push(_s.value);
	                if (i && _arr.length === i) break;
	            }
	        } catch (err) {
	            _d = true;
	            _e = err;
	        } finally {
	            try {
	                if (!_n && _i["return"]) _i["return"]();
	            } finally {
	                if (_d) throw _e;
	            }
	        }
	        return _arr;
	    }
	    return function(arr, i) {
	        if (Array.isArray(arr)) {
	            return arr;
	        } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	        } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	        }
	    };
	})();

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);





	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2016, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Renders a brush with the range defined in the prop `timeRange`.
	 */
	var Brush = (function(_React$Component) {
	    _inherits(Brush, _React$Component);

	    function Brush(props) {
	        _classCallCheck(this, Brush);

	        var _this = _possibleConstructorReturn(
	            this,
	            (Brush.__proto__ || Object.getPrototypeOf(Brush)).call(this, props)
	        );

	        _this.state = {
	            isBrushing: false
	        };

	        _this.handleBrushMouseDown = _this.handleBrushMouseDown.bind(_this);
	        _this.handleOverlayMouseDown = _this.handleOverlayMouseDown.bind(_this);
	        _this.handleHandleMouseDown = _this.handleHandleMouseDown.bind(_this);
	        _this.handleMouseUp = _this.handleMouseUp.bind(_this);
	        _this.handleClick = _this.handleClick.bind(_this);
	        _this.handleMouseMove = _this.handleMouseMove.bind(_this);
	        return _this;
	    }

	    _createClass(Brush, [
	        {
	            key: "viewport",
	            value: function viewport() {
	                var _props = this.props,
	                    width = _props.width,
	                    timeScale = _props.timeScale;

	                var viewBeginTime = timeScale.invert(0);
	                var viewEndTime = timeScale.invert(width);
	                return new entry.TimeRange(viewBeginTime, viewEndTime);
	            }

	            //
	            // Event handlers
	            //
	        },
	        {
	            key: "handleBrushMouseDown",
	            value: function handleBrushMouseDown(e) {
	                e.preventDefault();

	                var x = e.pageX,
	                    y = e.pageY;

	                var xy0 = [Math.round(x), Math.round(y)];
	                var begin = +this.props.timeRange.begin();
	                var end = +this.props.timeRange.end();

	                document.addEventListener("mouseup", this.handleMouseUp);

	                this.setState({
	                    isBrushing: true,
	                    brushingInitializationSite: "brush",
	                    initialBrushBeginTime: begin,
	                    initialBrushEndTime: end,
	                    initialBrushXYPosition: xy0
	                });
	            }
	        },
	        {
	            key: "handleOverlayMouseDown",
	            value: function handleOverlayMouseDown(e) {
	                e.preventDefault();

	                var offset = (0, util$2.getElementOffset)(this.overlay);
	                var x = e.pageX - offset.left;
	                var t = this.props.timeScale.invert(x).getTime();

	                document.addEventListener("mouseup", this.handleMouseUp);

	                this.setState({
	                    isBrushing: true,
	                    brushingInitializationSite: "overlay",
	                    initialBrushBeginTime: t,
	                    initialBrushEndTime: t,
	                    initialBrushXYPosition: null
	                });
	            }
	        },
	        {
	            key: "handleHandleMouseDown",
	            value: function handleHandleMouseDown(e, handle) {
	                e.preventDefault();

	                var x = e.pageX,
	                    y = e.pageY;

	                var xy0 = [Math.round(x), Math.round(y)];
	                var begin = this.props.timeRange.begin().getTime();
	                var end = this.props.timeRange.end().getTime();

	                document.addEventListener("mouseover", this.handleMouseMove);
	                document.addEventListener("mouseup", this.handleMouseUp);

	                this.setState({
	                    isBrushing: true,
	                    brushingInitializationSite: "handle-" + handle,
	                    initialBrushBeginTime: begin,
	                    initialBrushEndTime: end,
	                    initialBrushXYPosition: xy0
	                });
	            }
	        },
	        {
	            key: "handleMouseUp",
	            value: function handleMouseUp(e) {
	                e.preventDefault();

	                document.removeEventListener("mouseover", this.handleMouseMove);
	                document.removeEventListener("mouseup", this.handleMouseUp);

	                this.setState({
	                    isBrushing: false,
	                    brushingInitializationSite: null,
	                    initialBrushBeginTime: null,
	                    initialBrushEndTime: null,
	                    initialBrushXYPosition: null
	                });
	            }

	            /**
	             * Handles clearing the TimeRange if the user clicks on the overlay (but
	             * doesn't drag to create a new brush). This will send a null as the
	             * new TimeRange. The user of this code can react to that however they
	             * see fit, but the most logical response is to reset the timerange to
	             * some initial value. This behavior is optional.
	             */
	        },
	        {
	            key: "handleClick",
	            value: function handleClick() {
	                if (this.props.allowSelectionClear && this.props.onTimeRangeChanged) {
	                    this.props.onTimeRangeChanged(null);
	                }
	            }
	        },
	        {
	            key: "handleMouseMove",
	            value: function handleMouseMove(e) {
	                e.preventDefault();

	                var x = e.pageX;
	                var y = e.pageY;
	                var xy = [Math.round(x), Math.round(y)];
	                var viewport = this.viewport();

	                if (this.state.isBrushing) {
	                    var newBegin = void 0;
	                    var newEnd = void 0;

	                    var tb = this.state.initialBrushBeginTime;
	                    var te = this.state.initialBrushEndTime;

	                    if (this.state.brushingInitializationSite === "overlay") {
	                        var offset = (0, util$2.getElementOffset)(this.overlay);
	                        var xx = e.pageX - offset.left;
	                        var t = this.props.timeScale.invert(xx).getTime();
	                        if (t < tb) {
	                            newBegin = t < viewport.begin().getTime() ? viewport.begin() : t;
	                            newEnd = tb > viewport.end().getTime() ? viewport.end() : tb;
	                        } else {
	                            newBegin = tb < viewport.begin().getTime() ? viewport.begin() : tb;
	                            newEnd = t > viewport.end().getTime() ? viewport.end() : t;
	                        }
	                    } else {
	                        var xy0 = this.state.initialBrushXYPosition;
	                        var timeOffset =
	                            this.props.timeScale.invert(xy0[0]).getTime() -
	                            this.props.timeScale.invert(xy[0]).getTime();

	                        // Constrain
	                        var startOffsetConstraint = timeOffset;
	                        var endOffsetConstrain = timeOffset;
	                        if (tb - timeOffset < viewport.begin()) {
	                            startOffsetConstraint = tb - viewport.begin().getTime();
	                        }
	                        if (te - timeOffset > viewport.end()) {
	                            endOffsetConstrain = te - viewport.end().getTime();
	                        }

	                        newBegin =
	                            this.state.brushingInitializationSite === "brush" ||
	                            this.state.brushingInitializationSite === "handle-left"
	                                ? parseInt(tb - startOffsetConstraint, 10)
	                                : tb;
	                        newEnd =
	                            this.state.brushingInitializationSite === "brush" ||
	                            this.state.brushingInitializationSite === "handle-right"
	                                ? parseInt(te - endOffsetConstrain, 10)
	                                : te;

	                        // Swap if needed
	                        if (newBegin > newEnd) {
	                            var _ref = [newEnd, newBegin];
	                            newBegin = _ref[0];
	                            newEnd = _ref[1];
	                        }
	                    }

	                    if (this.props.onTimeRangeChanged) {
	                        this.props.onTimeRangeChanged(new entry.TimeRange(newBegin, newEnd));
	                    }
	                }
	            }

	            //
	            // Render
	            //
	        },
	        {
	            key: "renderOverlay",
	            value: function renderOverlay() {
	                var _this2 = this;

	                var _props2 = this.props,
	                    width = _props2.width,
	                    height = _props2.height;

	                var cursor = void 0;
	                switch (this.state.brushingInitializationSite) {
	                    case "handle-right":
	                    case "handle-left":
	                        cursor = "ew-resize";
	                        break;
	                    case "brush":
	                        cursor = "move";
	                        break;
	                    default:
	                        cursor = "crosshair";
	                }

	                var overlayStyle = {
	                    fill: "white",
	                    opacity: 0,
	                    cursor: cursor
	                };
	                return _react2.default.createElement("rect", {
	                    ref: function ref(c) {
	                        _this2.overlay = c;
	                    },
	                    x: 0,
	                    y: 0,
	                    width: width,
	                    height: height,
	                    style: overlayStyle,
	                    onMouseDown: this.handleOverlayMouseDown,
	                    onMouseUp: this.handleMouseUp,
	                    onClick: this.handleClick
	                });
	            }
	        },
	        {
	            key: "renderBrush",
	            value: function renderBrush() {
	                var _props3 = this.props,
	                    timeRange = _props3.timeRange,
	                    timeScale = _props3.timeScale,
	                    height = _props3.height,
	                    style = _props3.style;

	                if (!timeRange) {
	                    return _react2.default.createElement("g", null);
	                }

	                var cursor = void 0;
	                switch (this.state.brushingInitializationSite) {
	                    case "handle-right":
	                    case "handle-left":
	                        cursor = "ew-resize";
	                        break;
	                    case "overlay":
	                        cursor = "crosshair";
	                        break;
	                    default:
	                        cursor = "move";
	                }

	                // Style of the brush area
	                var brushDefaultStyle = {
	                    fill: "#777",
	                    fillOpacity: 0.3,
	                    stroke: "#fff",
	                    shapeRendering: "crispEdges",
	                    cursor: cursor
	                };
	                var brushStyle = (0, _merge2.default)(true, brushDefaultStyle, style);

	                if (!this.viewport().disjoint(timeRange)) {
	                    var range = timeRange.intersection(this.viewport());
	                    var begin = range.begin();
	                    var end = range.end();
	                    var _ref2 = [timeScale(begin), 0],
	                        x = _ref2[0],
	                        y = _ref2[1];

	                    var endPos = timeScale(end);
	                    var width = endPos - x;
	                    if (width < 1) {
	                        width = 1;
	                    }

	                    var bounds = { x: x, y: y, width: width, height: height };

	                    return _react2.default.createElement(
	                        "rect",
	                        _extends({}, bounds, {
	                            style: brushStyle,
	                            pointerEvents: "all",
	                            onMouseDown: this.handleBrushMouseDown,
	                            onMouseUp: this.handleMouseUp
	                        })
	                    );
	                }
	                return _react2.default.createElement("g", null);
	            }
	        },
	        {
	            key: "renderHandles",
	            value: function renderHandles() {
	                var _this3 = this;

	                var _props4 = this.props,
	                    timeRange = _props4.timeRange,
	                    timeScale = _props4.timeScale,
	                    height = _props4.height;

	                if (!timeRange) {
	                    return _react2.default.createElement("g", null);
	                }

	                // Style of the handles
	                var handleStyle = {
	                    fill: "white",
	                    opacity: 0,
	                    cursor: "ew-resize"
	                };

	                if (!this.viewport().disjoint(timeRange)) {
	                    var range = timeRange.intersection(this.viewport());

	                    var _range$toJSON = range.toJSON(),
	                        _range$toJSON2 = _slicedToArray(_range$toJSON, 2),
	                        begin = _range$toJSON2[0],
	                        end = _range$toJSON2[1];

	                    var _ref3 = [timeScale(begin), 0],
	                        x = _ref3[0],
	                        y = _ref3[1];

	                    var endPos = timeScale(end);

	                    var width = endPos - x;
	                    if (width < 1) {
	                        width = 1;
	                    }

	                    var handleSize = this.props.handleSize;

	                    var leftHandleBounds = { x: x - 1, y: y, width: handleSize, height: height };
	                    var rightHandleBounds = {
	                        x: x + (width - handleSize),
	                        y: y,
	                        width: handleSize + 1,
	                        height: height
	                    };

	                    return _react2.default.createElement(
	                        "g",
	                        null,
	                        _react2.default.createElement(
	                            "rect",
	                            _extends({}, leftHandleBounds, {
	                                style: handleStyle,
	                                pointerEvents: "all",
	                                onMouseDown: function onMouseDown(e) {
	                                    return _this3.handleHandleMouseDown(e, "left");
	                                },
	                                onMouseUp: this.handleMouseUp
	                            })
	                        ),
	                        _react2.default.createElement(
	                            "rect",
	                            _extends({}, rightHandleBounds, {
	                                style: handleStyle,
	                                pointerEvents: "all",
	                                onMouseDown: function onMouseDown(e) {
	                                    return _this3.handleHandleMouseDown(e, "right");
	                                },
	                                onMouseUp: this.handleMouseUp
	                            })
	                        )
	                    );
	                }
	                return _react2.default.createElement("g", null);
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                return _react2.default.createElement(
	                    "g",
	                    { onMouseMove: this.handleMouseMove },
	                    this.renderOverlay(),
	                    this.renderBrush(),
	                    this.renderHandles()
	                );
	            }
	        }
	    ]);

	    return Brush;
	})(_react2.default.Component);

	exports.default = Brush;

	Brush.propTypes = {
	    /**
	     * The timerange for the brush. Typically you would maintain this
	     * as state on the surrounding page, since it would likely control
	     * another page element, such as the range of the main chart. See
	     * also `onTimeRangeChanged()` for receiving notification of the
	     * brush range being changed by the user.
	     *
	     * Takes a Pond TimeRange object.
	     */
	    timeRange: _propTypes2.default.instanceOf(entry.TimeRange),
	    /**
	     * The brush is rendered as an SVG rect. You can specify the style
	     * of this rect using this prop.
	     */
	    style: _propTypes2.default.object, //eslint-disable-line
	    /**
	     * The size of the invisible side handles. Defaults to 6 pixels.
	     */
	    handleSize: _propTypes2.default.number,
	    allowSelectionClear: _propTypes2.default.bool,
	    /**
	     * A callback which will be called if the brush range is changed by
	     * the user. It is called with a Pond TimeRange object. Note that if
	     * `allowSelectionClear` is set to true, then this can also be called
	     * when the user performs a simple click outside the brush area. In
	     * this case it will be called with null as the TimeRange. You can
	     * use this to reset the selection, perhaps to some initial range.
	     */
	    onTimeRangeChanged: _propTypes2.default.func,
	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func,
	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number,
	    /**
	     * [Internal] The height supplied by the surrounding ChartContainer
	     */
	    height: _propTypes2.default.number
	};

	Brush.defaultProps = {
	    handleSize: 6,
	    allowSelectionClear: false
	};
	});

	unwrapExports(Brush_1);

	var MultiBrush_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _slicedToArray = (function() {
	    function sliceIterator(arr, i) {
	        var _arr = [];
	        var _n = true;
	        var _d = false;
	        var _e = undefined;
	        try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	                _arr.push(_s.value);
	                if (i && _arr.length === i) break;
	            }
	        } catch (err) {
	            _d = true;
	            _e = err;
	        } finally {
	            try {
	                if (!_n && _i["return"]) _i["return"]();
	            } finally {
	                if (_d) throw _e;
	            }
	        }
	        return _arr;
	    }
	    return function(arr, i) {
	        if (Array.isArray(arr)) {
	            return arr;
	        } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	        } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	        }
	    };
	})();

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);





	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2016, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Renders a brush with the range defined in the prop `timeRange`.
	 */
	var MultiBrush = (function(_React$Component) {
	    _inherits(MultiBrush, _React$Component);

	    function MultiBrush(props) {
	        _classCallCheck(this, MultiBrush);

	        var _this = _possibleConstructorReturn(
	            this,
	            (MultiBrush.__proto__ || Object.getPrototypeOf(MultiBrush)).call(this, props)
	        );

	        _this.hasNullBrush = function() {
	            return (
	                (_this.props.timeRanges || []).length > 0 &&
	                _this.props.timeRanges[_this.props.timeRanges.length - 1] == null
	            );
	        };

	        _this.handleMouseClick = function(e, brushIndex) {
	            if (_this.props.onTimeRangeClicked) {
	                _this.props.onTimeRangeClicked(brushIndex);
	            }
	        };

	        _this.state = {
	            isBrushing: false
	        };

	        _this.handleBrushMouseDown = _this.handleBrushMouseDown.bind(_this);
	        _this.handleOverlayMouseDown = _this.handleOverlayMouseDown.bind(_this);
	        _this.handleHandleMouseDown = _this.handleHandleMouseDown.bind(_this);
	        _this.handleMouseUp = _this.handleMouseUp.bind(_this);
	        _this.handleMouseMove = _this.handleMouseMove.bind(_this);
	        return _this;
	    }

	    _createClass(MultiBrush, [
	        {
	            key: "viewport",
	            value: function viewport() {
	                var _props = this.props,
	                    width = _props.width,
	                    timeScale = _props.timeScale;

	                var viewBeginTime = timeScale.invert(0);
	                var viewEndTime = timeScale.invert(width);
	                return new entry.TimeRange(viewBeginTime, viewEndTime);
	            }

	            //
	            // Event handlers
	            //
	        },
	        {
	            key: "handleBrushMouseDown",
	            value: function handleBrushMouseDown(e, brush_idx) {
	                e.preventDefault();

	                var x = e.pageX,
	                    y = e.pageY;

	                var xy0 = [Math.round(x), Math.round(y)];
	                var begin = +this.props.timeRanges[brush_idx].begin();
	                var end = +this.props.timeRanges[brush_idx].end();

	                document.addEventListener("mouseup", this.handleMouseUp);

	                this.setState({
	                    isBrushing: true,
	                    brushingInitializationSite: "brush",
	                    initialBrushBeginTime: begin,
	                    initialBrushEndTime: end,
	                    initialBrushXYPosition: xy0,
	                    brushIndex: brush_idx
	                });
	            }
	        },
	        {
	            key: "handleOverlayMouseDown",
	            value: function handleOverlayMouseDown(e) {
	                if (this.props.allowFreeDrawing || this.hasNullBrush()) {
	                    e.preventDefault();

	                    var offset = (0, util$2.getElementOffset)(this.overlay);
	                    var x = e.pageX - offset.left;
	                    var t = this.props.timeScale.invert(x).getTime();

	                    document.addEventListener("mouseup", this.handleMouseUp);

	                    var drawingPosition = this.props.allowFreeDrawing
	                        ? this.props.timeRanges.length
	                        : this.props.timeRanges.length - 1;

	                    this.setState({
	                        isBrushing: true,
	                        brushingInitializationSite: "overlay",
	                        initialBrushBeginTime: t,
	                        initialBrushEndTime: t,
	                        initialBrushXYPosition: null,
	                        brushIndex: drawingPosition
	                    });
	                }
	            }
	        },
	        {
	            key: "handleHandleMouseDown",
	            value: function handleHandleMouseDown(e, handle, brushIndex) {
	                e.preventDefault();

	                var x = e.pageX,
	                    y = e.pageY;

	                var xy0 = [Math.round(x), Math.round(y)];
	                var begin = this.props.timeRanges[brushIndex].begin().getTime();
	                var end = this.props.timeRanges[brushIndex].end().getTime();

	                document.addEventListener("mouseover", this.handleMouseMove);
	                document.addEventListener("mouseup", this.handleMouseUp);

	                this.setState({
	                    isBrushing: true,
	                    brushingInitializationSite: "handle-" + handle,
	                    initialBrushBeginTime: begin,
	                    initialBrushEndTime: end,
	                    initialBrushXYPosition: xy0,
	                    brushIndex: brushIndex
	                });
	            }
	        },
	        {
	            key: "handleMouseUp",
	            value: function handleMouseUp(e) {
	                var _this2 = this;

	                e.preventDefault();

	                document.removeEventListener("mouseover", this.handleMouseMove);
	                document.removeEventListener("mouseup", this.handleMouseUp);

	                var brushing_is = this.state.brushIndex;
	                this.setState(
	                    {
	                        isBrushing: false,
	                        brushingInitializationSite: null,
	                        initialBrushBeginTime: null,
	                        initialBrushEndTime: null,
	                        initialBrushXYPosition: null,
	                        brushIndex: null
	                    },
	                    function() {
	                        if (_this2.props.onUserMouseUp) {
	                            _this2.props.onUserMouseUp(brushing_is);
	                        }
	                    }
	                );
	            }
	        },
	        {
	            key: "handleMouseMove",
	            value: function handleMouseMove(e) {
	                e.preventDefault();

	                var x = e.pageX;
	                var y = e.pageY;
	                var xy = [Math.round(x), Math.round(y)];
	                var viewport = this.viewport();

	                if (this.state.isBrushing) {
	                    var newBegin = void 0;
	                    var newEnd = void 0;

	                    var tb = this.state.initialBrushBeginTime;
	                    var te = this.state.initialBrushEndTime;

	                    if (this.state.brushingInitializationSite === "overlay") {
	                        var offset = (0, util$2.getElementOffset)(this.overlay);
	                        var xx = e.pageX - offset.left;
	                        var t = this.props.timeScale.invert(xx).getTime();
	                        if (t < tb) {
	                            newBegin = t < viewport.begin().getTime() ? viewport.begin() : t;
	                            newEnd = tb > viewport.end().getTime() ? viewport.end() : tb;
	                        } else {
	                            newBegin = tb < viewport.begin().getTime() ? viewport.begin() : tb;
	                            newEnd = t > viewport.end().getTime() ? viewport.end() : t;
	                        }
	                    } else {
	                        var xy0 = this.state.initialBrushXYPosition;
	                        var timeOffset =
	                            this.props.timeScale.invert(xy0[0]).getTime() -
	                            this.props.timeScale.invert(xy[0]).getTime();

	                        // Constrain
	                        var startOffsetConstraint = timeOffset;
	                        var endOffsetConstrain = timeOffset;
	                        if (tb - timeOffset < viewport.begin()) {
	                            startOffsetConstraint = tb - viewport.begin().getTime();
	                        }
	                        if (te - timeOffset > viewport.end()) {
	                            endOffsetConstrain = te - viewport.end().getTime();
	                        }

	                        newBegin =
	                            this.state.brushingInitializationSite === "brush" ||
	                            this.state.brushingInitializationSite === "handle-left"
	                                ? parseInt(tb - startOffsetConstraint, 10)
	                                : tb;
	                        newEnd =
	                            this.state.brushingInitializationSite === "brush" ||
	                            this.state.brushingInitializationSite === "handle-right"
	                                ? parseInt(te - endOffsetConstrain, 10)
	                                : te;

	                        // Swap if needed
	                        if (newBegin > newEnd) {
	                            var _ref = [newEnd, newBegin];
	                            newBegin = _ref[0];
	                            newEnd = _ref[1];
	                        }
	                    }

	                    if (this.props.onTimeRangeChanged) {
	                        this.props.onTimeRangeChanged(
	                            new entry.TimeRange(newBegin, newEnd),
	                            this.state.brushIndex
	                        );
	                    }
	                }
	            }

	            //
	            // Render
	            //
	        },
	        {
	            key: "renderOverlay",
	            value: function renderOverlay() {
	                var _this3 = this;

	                var _props2 = this.props,
	                    width = _props2.width,
	                    height = _props2.height;

	                var cursor = void 0;
	                switch (this.state.brushingInitializationSite) {
	                    case "handle-right":
	                    case "handle-left":
	                        cursor = "ew-resize";
	                        break;
	                    case "brush":
	                        cursor = "move";
	                        break;
	                    default:
	                        cursor =
	                            this.props.allowFreeDrawing || this.hasNullBrush()
	                                ? "crosshair"
	                                : "default";
	                }

	                var overlayStyle = {
	                    fill: "white",
	                    opacity: 0,
	                    cursor: cursor
	                };
	                return _react2.default.createElement("rect", {
	                    ref: function ref(c) {
	                        _this3.overlay = c;
	                    },
	                    x: 0,
	                    y: 0,
	                    width: width,
	                    height: height,
	                    style: overlayStyle,
	                    onClick: this.handleMouseClick,
	                    onMouseDown: this.handleOverlayMouseDown,
	                    onMouseUp: this.handleMouseUp
	                });
	            }
	        },
	        {
	            key: "renderBrush",
	            value: function renderBrush(timeRange, idx) {
	                var _this4 = this;

	                var _props3 = this.props,
	                    timeScale = _props3.timeScale,
	                    height = _props3.height;

	                if (!timeRange) {
	                    return _react2.default.createElement("g", null);
	                }

	                var cursor = void 0;
	                switch (this.state.brushingInitializationSite) {
	                    case "handle-right":
	                    case "handle-left":
	                        cursor = "ew-resize";
	                        break;
	                    case "overlay":
	                        cursor =
	                            this.props.allowFreeDrawing || this.hasNullBrush()
	                                ? "crosshair"
	                                : "default";
	                        break;
	                    default:
	                        cursor = "move";
	                }

	                // Style of the brush area
	                var brushDefaultStyle = {
	                    fill: "#777",
	                    fillOpacity: 0.3,
	                    stroke: "#fff",
	                    shapeRendering: "crispEdges",
	                    cursor: cursor
	                };
	                var userStyle = this.props.style ? this.props.style(idx) : {};
	                var brushStyle = (0, _merge2.default)(true, brushDefaultStyle, userStyle);

	                if (!this.viewport().disjoint(timeRange)) {
	                    var range = timeRange.intersection(this.viewport());
	                    var begin = range.begin();
	                    var end = range.end();
	                    var _ref2 = [timeScale(begin), 0],
	                        x = _ref2[0],
	                        y = _ref2[1];

	                    var endPos = timeScale(end);
	                    var width = endPos - x;
	                    if (width < 1) {
	                        width = 1;
	                    }

	                    var bounds = { x: x, y: y, width: width, height: height };

	                    return _react2.default.createElement(
	                        "rect",
	                        _extends({}, bounds, {
	                            key: idx + "-" + brushStyle,
	                            style: brushStyle,
	                            pointerEvents: "all",
	                            onClick: function onClick(e) {
	                                return _this4.handleMouseClick(e, idx);
	                            },
	                            onMouseDown: function onMouseDown(e) {
	                                return _this4.handleBrushMouseDown(e, idx);
	                            },
	                            onMouseUp: this.handleMouseUp
	                        })
	                    );
	                }
	                return _react2.default.createElement("g", null);
	            }
	        },
	        {
	            key: "renderHandles",
	            value: function renderHandles(timeRange, idx) {
	                var _this5 = this;

	                var _props4 = this.props,
	                    timeScale = _props4.timeScale,
	                    height = _props4.height;

	                if (!timeRange) {
	                    return _react2.default.createElement("g", null);
	                }

	                // Style of the handles
	                var handleStyle = {
	                    fill: "white",
	                    opacity: 0,
	                    cursor: "ew-resize"
	                };

	                if (!this.viewport().disjoint(timeRange)) {
	                    var range = timeRange.intersection(this.viewport());

	                    var _range$toJSON = range.toJSON(),
	                        _range$toJSON2 = _slicedToArray(_range$toJSON, 2),
	                        begin = _range$toJSON2[0],
	                        end = _range$toJSON2[1];

	                    var _ref3 = [timeScale(begin), 0],
	                        x = _ref3[0],
	                        y = _ref3[1];

	                    var endPos = timeScale(end);

	                    var width = endPos - x;
	                    if (width < 1) {
	                        width = 1;
	                    }

	                    var handleSize = this.props.handleSize;

	                    var leftHandleBounds = { x: x - 1, y: y, width: handleSize, height: height };
	                    var rightHandleBounds = {
	                        x: x + (width - handleSize),
	                        y: y,
	                        width: handleSize + 1,
	                        height: height
	                    };

	                    return _react2.default.createElement(
	                        "g",
	                        null,
	                        _react2.default.createElement(
	                            "rect",
	                            _extends({}, leftHandleBounds, {
	                                style: handleStyle,
	                                pointerEvents: "all",
	                                onMouseDown: function onMouseDown(e) {
	                                    return _this5.handleHandleMouseDown(e, "left", idx);
	                                },
	                                onMouseUp: this.handleMouseUp
	                            })
	                        ),
	                        _react2.default.createElement(
	                            "rect",
	                            _extends({}, rightHandleBounds, {
	                                style: handleStyle,
	                                pointerEvents: "all",
	                                onMouseDown: function onMouseDown(e) {
	                                    return _this5.handleHandleMouseDown(e, "right", idx);
	                                },
	                                onMouseUp: this.handleMouseUp
	                            })
	                        )
	                    );
	                }
	                return _react2.default.createElement("g", null);
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                var _this6 = this;

	                return _react2.default.createElement(
	                    "g",
	                    { onMouseMove: this.handleMouseMove },
	                    this.renderOverlay(),
	                    (this.props.timeRanges || []).map(function(timeRange, idx) {
	                        return _react2.default.createElement(
	                            "g",
	                            { key: "multibrush_" + idx },
	                            _this6.renderBrush(timeRange, idx),
	                            _this6.renderHandles(timeRange, idx)
	                        );
	                    })
	                );
	            }
	        }
	    ]);

	    return MultiBrush;
	})(_react2.default.Component);

	exports.default = MultiBrush;

	MultiBrush.propTypes = {
	    /**
	     * The timeranges for the brushes. Typically you would maintain this
	     * as state on the surrounding page, since it would likely control
	     * another page element, such as the range of the main chart. See
	     * also `onTimeRangeChanged()` for receiving notification of the
	     * brush range being changed by the user.
	     *
	     * Takes an array of Pond TimeRange object.
	     */
	    timeRanges: _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(entry.TimeRange)),

	    /**
	     * The brush is rendered as an SVG rect. You can specify the style
	     * of this rect using this prop. The brush style is a function that you
	     * provide. It will be called with the index of the TimeRange, corresponding
	     * to those in the `timeRanges` prop.
	     */
	    style: _propTypes2.default.func, //eslint-disable-line

	    /**
	     * The size of the invisible side handles. Defaults to 6 pixels.
	     */
	    handleSize: _propTypes2.default.number,

	    /**
	     * If this prop is false, you will only be able to draw a new brush if the last position of the timeRanges
	     * array is equal to null, otherwise it will allow the free drawing and the index passed to onTimeRangeChanged
	     * will the equal to the length of the timeRanges array
	     */
	    allowFreeDrawing: _propTypes2.default.bool,

	    /**
	     * A callback which will be called if the brush range is changed by
	     * the user. It is called with a Pond TimeRange object and the index position of
	     * the brush in the timeRanges prop.
	     */
	    onTimeRangeChanged: _propTypes2.default.func,

	    /**
	     * when user stop drawing or dragging box
	     */
	    onUserMouseUp: _propTypes2.default.func,

	    /**
	     * When the user clicks one of the TimeRanges
	     */
	    onTimeRangeClicked: _propTypes2.default.func,

	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func,

	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number,

	    /**
	     * [Internal] The height supplied by the surrounding ChartContainer
	     */
	    height: _propTypes2.default.number
	};

	MultiBrush.defaultProps = {
	    handleSize: 6,
	    allowFreeDrawing: true
	};
	});

	unwrapExports(MultiBrush_1);

	function ascending$1(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	function bisector(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	}

	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending$1(f(d), x);
	  };
	}

	var ascendingBisect = bisector(ascending$1);
	var bisectRight = ascendingBisect.right;
	var bisectLeft = ascendingBisect.left;

	function pairs(array, f) {
	  if (f == null) f = pair;
	  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
	  while (i < n) pairs[i] = f(p, p = array[++i]);
	  return pairs;
	}

	function pair(a, b) {
	  return [a, b];
	}

	function cross$1(values0, values1, reduce) {
	  var n0 = values0.length,
	      n1 = values1.length,
	      values = new Array(n0 * n1),
	      i0,
	      i1,
	      i,
	      value0;

	  if (reduce == null) reduce = pair;

	  for (i0 = i = 0; i0 < n0; ++i0) {
	    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
	      values[i] = reduce(value0, values1[i1]);
	    }
	  }

	  return values;
	}

	function descending$2(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	}

	function number(x) {
	  return x === null ? NaN : +x;
	}

	function variance(values, valueof) {
	  var n = values.length,
	      m = 0,
	      i = -1,
	      mean = 0,
	      value,
	      delta,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }

	  if (m > 1) return sum / (m - 1);
	}

	function deviation(array, f) {
	  var v = variance(array, f);
	  return v ? Math.sqrt(v) : v;
	}

	function extent(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min,
	      max;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }

	  return [min, max];
	}

	var array = Array.prototype;

	var slice$1 = array.slice;
	var map$4 = array.map;

	function constant$1(x) {
	  return function() {
	    return x;
	  };
	}

	function identity$1(x) {
	  return x;
	}

	function range(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);

	  while (++i < n) {
	    range[i] = start + i * step;
	  }

	  return range;
	}

	var e10 = Math.sqrt(50),
	    e5 = Math.sqrt(10),
	    e2 = Math.sqrt(2);

	function ticks(start, stop, count) {
	  var reverse,
	      i = -1,
	      n,
	      ticks,
	      step;

	  stop = +stop, start = +start, count = +count;
	  if (start === stop && count > 0) return [start];
	  if (reverse = stop < start) n = start, start = stop, stop = n;
	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

	  if (step > 0) {
	    start = Math.ceil(start / step);
	    stop = Math.floor(stop / step);
	    ticks = new Array(n = Math.ceil(stop - start + 1));
	    while (++i < n) ticks[i] = (start + i) * step;
	  } else {
	    start = Math.floor(start * step);
	    stop = Math.ceil(stop * step);
	    ticks = new Array(n = Math.ceil(start - stop + 1));
	    while (++i < n) ticks[i] = (start - i) / step;
	  }

	  if (reverse) ticks.reverse();

	  return ticks;
	}

	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0
	      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
	      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
	}

	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}

	function sturges(values) {
	  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
	}

	function histogram() {
	  var value = identity$1,
	      domain = extent,
	      threshold = sturges;

	  function histogram(data) {
	    var i,
	        n = data.length,
	        x,
	        values = new Array(n);

	    for (i = 0; i < n; ++i) {
	      values[i] = value(data[i], i, data);
	    }

	    var xz = domain(values),
	        x0 = xz[0],
	        x1 = xz[1],
	        tz = threshold(values, x0, x1);

	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      tz = tickStep(x0, x1, tz);
	      tz = range(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
	    }

	    // Remove any thresholds outside the domain.
	    var m = tz.length;
	    while (tz[0] <= x0) tz.shift(), --m;
	    while (tz[m - 1] > x1) tz.pop(), --m;

	    var bins = new Array(m + 1),
	        bin;

	    // Initialize bins.
	    for (i = 0; i <= m; ++i) {
	      bin = bins[i] = [];
	      bin.x0 = i > 0 ? tz[i - 1] : x0;
	      bin.x1 = i < m ? tz[i] : x1;
	    }

	    // Assign data to bins by value, ignoring any outside the domain.
	    for (i = 0; i < n; ++i) {
	      x = values[i];
	      if (x0 <= x && x <= x1) {
	        bins[bisectRight(tz, x, 0, m)].push(data[i]);
	      }
	    }

	    return bins;
	  }

	  histogram.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(_), histogram) : value;
	  };

	  histogram.domain = function(_) {
	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant$1([_[0], _[1]]), histogram) : domain;
	  };

	  histogram.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant$1(slice$1.call(_)) : constant$1(_), histogram) : threshold;
	  };

	  return histogram;
	}

	function threshold(values, p, valueof) {
	  if (valueof == null) valueof = number;
	  if (!(n = values.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
	  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
	  var n,
	      i = (n - 1) * p,
	      i0 = Math.floor(i),
	      value0 = +valueof(values[i0], i0, values),
	      value1 = +valueof(values[i0 + 1], i0 + 1, values);
	  return value0 + (value1 - value0) * (i - i0);
	}

	function freedmanDiaconis(values, min, max) {
	  values = map$4.call(values, number).sort(ascending$1);
	  return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
	}

	function scott(values, min, max) {
	  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
	}

	function max$3(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      max;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }

	  return max;
	}

	function mean(values, valueof) {
	  var n = values.length,
	      m = n,
	      i = -1,
	      value,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) sum += value;
	      else --m;
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
	      else --m;
	    }
	  }

	  if (m) return sum / m;
	}

	function median(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      numbers = [];

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        numbers.push(value);
	      }
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        numbers.push(value);
	      }
	    }
	  }

	  return threshold(numbers.sort(ascending$1), 0.5);
	}

	function merge$1(arrays) {
	  var n = arrays.length,
	      m,
	      i = -1,
	      j = 0,
	      merged,
	      array;

	  while (++i < n) j += arrays[i].length;
	  merged = new Array(j);

	  while (--n >= 0) {
	    array = arrays[n];
	    m = array.length;
	    while (--m >= 0) {
	      merged[--j] = array[m];
	    }
	  }

	  return merged;
	}

	function min$4(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }

	  return min;
	}

	function permute(array, indexes) {
	  var i = indexes.length, permutes = new Array(i);
	  while (i--) permutes[i] = array[indexes[i]];
	  return permutes;
	}

	function scan(values, compare) {
	  if (!(n = values.length)) return;
	  var n,
	      i = 0,
	      j = 0,
	      xi,
	      xj = values[j];

	  if (compare == null) compare = ascending$1;

	  while (++i < n) {
	    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
	      xj = xi, j = i;
	    }
	  }

	  if (compare(xj, xj) === 0) return j;
	}

	function shuffle(array, i0, i1) {
	  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
	      t,
	      i;

	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m + i0];
	    array[m + i0] = array[i + i0];
	    array[i + i0] = t;
	  }

	  return array;
	}

	function sum$1(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
	    }
	  }

	  else {
	    while (++i < n) {
	      if (value = +valueof(values[i], i, values)) sum += value;
	    }
	  }

	  return sum;
	}

	function transpose(matrix) {
	  if (!(n = matrix.length)) return [];
	  for (var i = -1, m = min$4(matrix, length), transpose = new Array(m); ++i < m;) {
	    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
	      row[j] = matrix[j][i];
	    }
	  }
	  return transpose;
	}

	function length(d) {
	  return d.length;
	}

	function zip() {
	  return transpose(arguments);
	}



	var d3Array = /*#__PURE__*/Object.freeze({
		bisect: bisectRight,
		bisectRight: bisectRight,
		bisectLeft: bisectLeft,
		ascending: ascending$1,
		bisector: bisector,
		cross: cross$1,
		descending: descending$2,
		deviation: deviation,
		extent: extent,
		histogram: histogram,
		thresholdFreedmanDiaconis: freedmanDiaconis,
		thresholdScott: scott,
		thresholdSturges: sturges,
		max: max$3,
		mean: mean,
		median: median,
		merge: merge$1,
		min: min$4,
		pairs: pairs,
		permute: permute,
		quantile: threshold,
		range: range,
		scan: scan,
		shuffle: shuffle,
		sum: sum$1,
		ticks: ticks,
		tickIncrement: tickIncrement,
		tickStep: tickStep,
		transpose: transpose,
		variance: variance,
		zip: zip
	});

	var prefix$2 = "$";

	function Map$2() {}

	Map$2.prototype = map$5.prototype = {
	  constructor: Map$2,
	  has: function(key) {
	    return (prefix$2 + key) in this;
	  },
	  get: function(key) {
	    return this[prefix$2 + key];
	  },
	  set: function(key, value) {
	    this[prefix$2 + key] = value;
	    return this;
	  },
	  remove: function(key) {
	    var property = prefix$2 + key;
	    return property in this && delete this[property];
	  },
	  clear: function() {
	    for (var property in this) if (property[0] === prefix$2) delete this[property];
	  },
	  keys: function() {
	    var keys = [];
	    for (var property in this) if (property[0] === prefix$2) keys.push(property.slice(1));
	    return keys;
	  },
	  values: function() {
	    var values = [];
	    for (var property in this) if (property[0] === prefix$2) values.push(this[property]);
	    return values;
	  },
	  entries: function() {
	    var entries = [];
	    for (var property in this) if (property[0] === prefix$2) entries.push({key: property.slice(1), value: this[property]});
	    return entries;
	  },
	  size: function() {
	    var size = 0;
	    for (var property in this) if (property[0] === prefix$2) ++size;
	    return size;
	  },
	  empty: function() {
	    for (var property in this) if (property[0] === prefix$2) return false;
	    return true;
	  },
	  each: function(f) {
	    for (var property in this) if (property[0] === prefix$2) f(this[property], property.slice(1), this);
	  }
	};

	function map$5(object, f) {
	  var map = new Map$2;

	  // Copy constructor.
	  if (object instanceof Map$2) object.each(function(value, key) { map.set(key, value); });

	  // Index array by numeric index or specified key function.
	  else if (Array.isArray(object)) {
	    var i = -1,
	        n = object.length,
	        o;

	    if (f == null) while (++i < n) map.set(i, object[i]);
	    else while (++i < n) map.set(f(o = object[i], i, object), o);
	  }

	  // Convert object to map.
	  else if (object) for (var key in object) map.set(key, object[key]);

	  return map;
	}

	function Set$1() {}

	var proto$4 = map$5.prototype;

	Set$1.prototype = set$4.prototype = {
	  constructor: Set$1,
	  has: proto$4.has,
	  add: function(value) {
	    value += "";
	    this[prefix$2 + value] = value;
	    return this;
	  },
	  remove: proto$4.remove,
	  clear: proto$4.clear,
	  values: proto$4.keys,
	  size: proto$4.size,
	  empty: proto$4.empty,
	  each: proto$4.each
	};

	function set$4(object, f) {
	  var set = new Set$1;

	  // Copy constructor.
	  if (object instanceof Set$1) object.each(function(value) { set.add(value); });

	  // Otherwise, assume it’s an array.
	  else if (object) {
	    var i = -1, n = object.length;
	    if (f == null) while (++i < n) set.add(object[i]);
	    else while (++i < n) set.add(f(object[i], i, object));
	  }

	  return set;
	}

	var array$1 = Array.prototype;

	var map$6 = array$1.map;
	var slice$2 = array$1.slice;

	var implicit = {name: "implicit"};

	function ordinal$1(range) {
	  var index = map$5(),
	      domain = [],
	      unknown = implicit;

	  range = range == null ? [] : slice$2.call(range);

	  function scale(d) {
	    var key = d + "", i = index.get(key);
	    if (!i) {
	      if (unknown !== implicit) return unknown;
	      index.set(key, i = domain.push(d));
	    }
	    return range[(i - 1) % range.length];
	  }

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [], index = map$5();
	    var i = -1, n = _.length, d, key;
	    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
	    return scale;
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = slice$2.call(_), scale) : range.slice();
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  scale.copy = function() {
	    return ordinal$1()
	        .domain(domain)
	        .range(range)
	        .unknown(unknown);
	  };

	  return scale;
	}

	function band() {
	  var scale = ordinal$1().unknown(undefined),
	      domain = scale.domain,
	      ordinalRange = scale.range,
	      range$$1 = [0, 1],
	      step,
	      bandwidth,
	      round = false,
	      paddingInner = 0,
	      paddingOuter = 0,
	      align = 0.5;

	  delete scale.unknown;

	  function rescale() {
	    var n = domain().length,
	        reverse = range$$1[1] < range$$1[0],
	        start = range$$1[reverse - 0],
	        stop = range$$1[1 - reverse];
	    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
	    if (round) step = Math.floor(step);
	    start += (stop - start - step * (n - paddingInner)) * align;
	    bandwidth = step * (1 - paddingInner);
	    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
	    var values = range(n).map(function(i) { return start + step * i; });
	    return ordinalRange(reverse ? values.reverse() : values);
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();
	  };

	  scale.rangeRound = function(_) {
	    return range$$1 = [+_[0], +_[1]], round = true, rescale();
	  };

	  scale.bandwidth = function() {
	    return bandwidth;
	  };

	  scale.step = function() {
	    return step;
	  };

	  scale.round = function(_) {
	    return arguments.length ? (round = !!_, rescale()) : round;
	  };

	  scale.padding = function(_) {
	    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };

	  scale.paddingInner = function(_) {
	    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };

	  scale.paddingOuter = function(_) {
	    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
	  };

	  scale.align = function(_) {
	    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
	  };

	  scale.copy = function() {
	    return band()
	        .domain(domain())
	        .range(range$$1)
	        .round(round)
	        .paddingInner(paddingInner)
	        .paddingOuter(paddingOuter)
	        .align(align);
	  };

	  return rescale();
	}

	function pointish(scale) {
	  var copy = scale.copy;

	  scale.padding = scale.paddingOuter;
	  delete scale.paddingInner;
	  delete scale.paddingOuter;

	  scale.copy = function() {
	    return pointish(copy());
	  };

	  return scale;
	}

	function point$4() {
	  return pointish(band().paddingInner(1));
	}

	function define(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	}

	function extend$1(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}

	function Color() {}

	var darker = 0.7;
	var brighter = 1 / darker;

	var reI = "\\s*([+-]?\\d+)\\s*",
	    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
	    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
	    reHex3 = /^#([0-9a-f]{3})$/,
	    reHex6 = /^#([0-9a-f]{6})$/,
	    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
	    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
	    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
	    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
	    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
	    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};

	define(Color, color, {
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  toString: function() {
	    return this.rgb() + "";
	  }
	});

	function color(format) {
	  var m;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
	      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format])
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}

	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}

	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}

	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}

	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}

	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Rgb, rgb, extend$1(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (0 <= this.r && this.r <= 255)
	        && (0 <= this.g && this.g <= 255)
	        && (0 <= this.b && this.b <= 255)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  toString: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "rgb(" : "rgba(")
	        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));

	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}

	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}

	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}

	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hsl, hsl, extend$1(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  }
	}));

	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}

	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;

	var Kn = 18,
	    Xn = 0.950470, // D65 standard referent
	    Yn = 1,
	    Zn = 1.088830,
	    t0$1 = 4 / 29,
	    t1$1 = 6 / 29,
	    t2 = 3 * t1$1 * t1$1,
	    t3 = t1$1 * t1$1 * t1$1;

	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) {
	    var h = o.h * deg2rad;
	    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	  }
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var b = rgb2xyz(o.r),
	      a = rgb2xyz(o.g),
	      l = rgb2xyz(o.b),
	      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}

	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}

	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Lab, lab, extend$1(Color, {
	  brighter: function(k) {
	    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function(k) {
	    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    y = Yn * lab2xyz(y);
	    x = Xn * lab2xyz(x);
	    z = Zn * lab2xyz(z);
	    return new Rgb(
	      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
	      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
	      this.opacity
	    );
	  }
	}));

	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0$1;
	}

	function lab2xyz(t) {
	  return t > t1$1 ? t * t * t : t2 * (t - t0$1);
	}

	function xyz2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}

	function rgb2xyz(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}

	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  var h = Math.atan2(o.b, o.a) * rad2deg;
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}

	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}

	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hcl, hcl, extend$1(Color, {
	  brighter: function(k) {
	    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function(k) {
	    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function() {
	    return labConvert(this).rgb();
	  }
	}));

	var A = -0.14861,
	    B = +1.78277,
	    C = -0.29227,
	    D = -0.90649,
	    E = +1.97294,
	    ED = E * D,
	    EB = E * B,
	    BC_DA = B * C - D * A;

	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
	      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}

	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}

	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Cubehelix, cubehelix, extend$1(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new Rgb(
	      255 * (l + a * (A * cosh + B * sinh)),
	      255 * (l + a * (C * cosh + D * sinh)),
	      255 * (l + a * (E * cosh)),
	      this.opacity
	    );
	  }
	}));

	function constant$2(x) {
	  return function() {
	    return x;
	  };
	}

	function linear(a, d) {
	  return function(t) {
	    return a + t * d;
	  };
	}

	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
	    return Math.pow(a + t * b, y);
	  };
	}

	function hue(a, b) {
	  var d = b - a;
	  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);
	}

	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function(a, b) {
	    return b - a ? exponential(a, b, y) : constant$2(isNaN(a) ? b : a);
	  };
	}

	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : constant$2(isNaN(a) ? b : a);
	}

	var interpolateRgb = (function rgbGamma(y) {
	  var color$$1 = gamma(y);

	  function rgb$$1(start, end) {
	    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),
	        g = color$$1(start.g, end.g),
	        b = color$$1(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }

	  rgb$$1.gamma = rgbGamma;

	  return rgb$$1;
	})(1);

	function array$2(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(na),
	      c = new Array(nb),
	      i;

	  for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);
	  for (; i < nb; ++i) c[i] = b[i];

	  return function(t) {
	    for (i = 0; i < na; ++i) c[i] = x[i](t);
	    return c;
	  };
	}

	function date(a, b) {
	  var d = new Date;
	  return a = +a, b -= a, function(t) {
	    return d.setTime(a + b * t), d;
	  };
	}

	function interpolateNumber(a, b) {
	  return a = +a, b -= a, function(t) {
	    return a + b * t;
	  };
	}

	function object(a, b) {
	  var i = {},
	      c = {},
	      k;

	  if (a === null || typeof a !== "object") a = {};
	  if (b === null || typeof b !== "object") b = {};

	  for (k in b) {
	    if (k in a) {
	      i[k] = interpolateValue(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }

	  return function(t) {
	    for (k in i) c[k] = i[k](t);
	    return c;
	  };
	}

	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
	    reB = new RegExp(reA.source, "g");

	function zero(b) {
	  return function() {
	    return b;
	  };
	}

	function one(b) {
	  return function(t) {
	    return b(t) + "";
	  };
	}

	function interpolateString(a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
	      am, // current match in a
	      bm, // current match in b
	      bs, // string preceding current number in b, if any
	      i = -1, // index in s
	      s = [], // string constants and placeholders
	      q = []; // number interpolators

	  // Coerce inputs to strings.
	  a = a + "", b = b + "";

	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a))
	      && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) { // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else { // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({i: i, x: interpolateNumber(am, bm)});
	    }
	    bi = reB.lastIndex;
	  }

	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }

	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? (q[0]
	      ? one(q[0].x)
	      : zero(b))
	      : (b = q.length, function(t) {
	          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	          return s.join("");
	        });
	}

	function interpolateValue(a, b) {
	  var t = typeof b, c;
	  return b == null || t === "boolean" ? constant$2(b)
	      : (t === "number" ? interpolateNumber
	      : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
	      : b instanceof color ? interpolateRgb
	      : b instanceof Date ? date
	      : Array.isArray(b) ? array$2
	      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
	      : interpolateNumber)(a, b);
	}

	function interpolateRound(a, b) {
	  return a = +a, b -= a, function(t) {
	    return Math.round(a + b * t);
	  };
	}

	var degrees = 180 / Math.PI;

	var identity$2 = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};

	function decompose(a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	}

	var cssNode,
	    cssRoot,
	    cssView,
	    svgNode;

	function parseCss(value) {
	  if (value === "none") return identity$2;
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}

	function parseSvg(value) {
	  if (value == null) return identity$2;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}

	function interpolateTransform(parse, pxComma, pxParen, degParen) {

	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }

	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }

	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
	      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }

	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }

	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }

	  return function(a, b) {
	    var s = [], // string constants and placeholders
	        q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  };
	}

	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

	var rho = Math.SQRT2;

	function cubehelix$1(hue$$1) {
	  return (function cubehelixGamma(y) {
	    y = +y;

	    function cubehelix$$1(start, end) {
	      var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h),
	          s = nogamma(start.s, end.s),
	          l = nogamma(start.l, end.l),
	          opacity = nogamma(start.opacity, end.opacity);
	      return function(t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }

	    cubehelix$$1.gamma = cubehelixGamma;

	    return cubehelix$$1;
	  })(1);
	}

	cubehelix$1(hue);
	var cubehelixLong = cubehelix$1(nogamma);

	function constant$3(x) {
	  return function() {
	    return x;
	  };
	}

	function number$1(x) {
	  return +x;
	}

	var unit = [0, 1];

	function deinterpolateLinear(a, b) {
	  return (b -= (a = +a))
	      ? function(x) { return (x - a) / b; }
	      : constant$3(b);
	}

	function deinterpolateClamp(deinterpolate) {
	  return function(a, b) {
	    var d = deinterpolate(a = +a, b = +b);
	    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
	  };
	}

	function reinterpolateClamp(reinterpolate) {
	  return function(a, b) {
	    var r = reinterpolate(a = +a, b = +b);
	    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
	  };
	}

	function bimap(domain, range$$1, deinterpolate, reinterpolate) {
	  var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
	  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
	  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
	  return function(x) { return r0(d0(x)); };
	}

	function polymap(domain, range$$1, deinterpolate, reinterpolate) {
	  var j = Math.min(domain.length, range$$1.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1;

	  // Reverse descending domains.
	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range$$1 = range$$1.slice().reverse();
	  }

	  while (++i < j) {
	    d[i] = deinterpolate(domain[i], domain[i + 1]);
	    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);
	  }

	  return function(x) {
	    var i = bisectRight(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}

	function copy(source, target) {
	  return target
	      .domain(source.domain())
	      .range(source.range())
	      .interpolate(source.interpolate())
	      .clamp(source.clamp());
	}

	// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
	function continuous(deinterpolate, reinterpolate) {
	  var domain = unit,
	      range$$1 = unit,
	      interpolate$$1 = interpolateValue,
	      clamp = false,
	      piecewise,
	      output,
	      input;

	  function rescale() {
	    piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }

	  function scale(x) {
	    return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
	  }

	  scale.invert = function(y) {
	    return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
	  };

	  scale.domain = function(_) {
	    return arguments.length ? (domain = map$6.call(_, number$1), rescale()) : domain.slice();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$2.call(_), rescale()) : range$$1.slice();
	  };

	  scale.rangeRound = function(_) {
	    return range$$1 = slice$2.call(_), interpolate$$1 = interpolateRound, rescale();
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, rescale()) : clamp;
	  };

	  scale.interpolate = function(_) {
	    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
	  };

	  return rescale();
	}

	// Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimal(1.23) returns ["123", 0].
	function formatDecimal(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
	  var i, coefficient = x.slice(0, i);

	  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
	  return [
	    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
	    +x.slice(i + 1)
	  ];
	}

	function exponent(x) {
	  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
	}

	function formatGroup(grouping, thousands) {
	  return function(value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;

	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }

	    return t.reverse().join(thousands);
	  };
	}

	function formatNumerals(numerals) {
	  return function(value) {
	    return value.replace(/[0-9]/g, function(i) {
	      return numerals[+i];
	    });
	  };
	}

	function formatDefault(x, p) {
	  x = x.toPrecision(p);

	  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (x[i]) {
	      case ".": i0 = i1 = i; break;
	      case "0": if (i0 === 0) i0 = i; i1 = i; break;
	      case "e": break out;
	      default: if (i0 > 0) i0 = 0; break;
	    }
	  }

	  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
	}

	var prefixExponent;

	function formatPrefixAuto(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient
	      : i > n ? coefficient + new Array(i - n + 1).join("0")
	      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
	      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	}

	function formatRounded(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
	      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
	      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	}

	var formatTypes = {
	  "": formatDefault,
	  "%": function(x, p) { return (x * 100).toFixed(p); },
	  "b": function(x) { return Math.round(x).toString(2); },
	  "c": function(x) { return x + ""; },
	  "d": function(x) { return Math.round(x).toString(10); },
	  "e": function(x, p) { return x.toExponential(p); },
	  "f": function(x, p) { return x.toFixed(p); },
	  "g": function(x, p) { return x.toPrecision(p); },
	  "o": function(x) { return Math.round(x).toString(8); },
	  "p": function(x, p) { return formatRounded(x * 100, p); },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
	  "x": function(x) { return Math.round(x).toString(16); }
	};

	// [[fill]align][sign][symbol][0][width][,][.precision][type]
	var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

	function formatSpecifier(specifier) {
	  return new FormatSpecifier(specifier);
	}

	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

	function FormatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);

	  var match,
	      fill = match[1] || " ",
	      align = match[2] || ">",
	      sign = match[3] || "-",
	      symbol = match[4] || "",
	      zero = !!match[5],
	      width = match[6] && +match[6],
	      comma = !!match[7],
	      precision = match[8] && +match[8].slice(1),
	      type = match[9] || "";

	  // The "n" type is an alias for ",g".
	  if (type === "n") comma = true, type = "g";

	  // Map invalid types to the default format.
	  else if (!formatTypes[type]) type = "";

	  // If zero fill is specified, padding goes after sign and before digits.
	  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

	  this.fill = fill;
	  this.align = align;
	  this.sign = sign;
	  this.symbol = symbol;
	  this.zero = zero;
	  this.width = width;
	  this.comma = comma;
	  this.precision = precision;
	  this.type = type;
	}

	FormatSpecifier.prototype.toString = function() {
	  return this.fill
	      + this.align
	      + this.sign
	      + this.symbol
	      + (this.zero ? "0" : "")
	      + (this.width == null ? "" : Math.max(1, this.width | 0))
	      + (this.comma ? "," : "")
	      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
	      + this.type;
	};

	function identity$3(x) {
	  return x;
	}

	var prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

	function formatLocale$1(locale) {
	  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,
	      currency = locale.currency,
	      decimal = locale.decimal,
	      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$3,
	      percent = locale.percent || "%";

	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);

	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        type = specifier.type;

	    // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.
	    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";

	    // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?
	    var formatType = formatTypes[type],
	        maybeSuffix = !type || /[defgprs%]/.test(type);

	    // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].
	    precision = precision == null ? (type ? 6 : 12)
	        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
	        : Math.max(0, Math.min(20, precision));

	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i, n, c;

	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value;

	        // Perform the initial formatting.
	        var valueNegative = value < 0;
	        value = formatType(Math.abs(value), precision);

	        // If a negative value rounds to zero during formatting, treat as positive.
	        if (valueNegative && +value === 0) valueNegative = false;

	        // Compute the prefix and suffix.
	        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

	        // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.
	        if (maybeSuffix) {
	          i = -1, n = value.length;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      }

	      // If the fill character is not "0", grouping is applied before padding.
	      if (comma && !zero) value = group(value, Infinity);

	      // Compute the padding.
	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : "";

	      // If the fill character is "0", grouping is applied after padding.
	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

	      // Reconstruct the final output based on the desired alignment.
	      switch (align) {
	        case "<": value = valuePrefix + value + valueSuffix + padding; break;
	        case "=": value = valuePrefix + padding + value + valueSuffix; break;
	        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
	        default: value = padding + valuePrefix + value + valueSuffix; break;
	      }

	      return numerals(value);
	    }

	    format.toString = function() {
	      return specifier + "";
	    };

	    return format;
	  }

	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function(value) {
	      return f(k * value) + prefix;
	    };
	  }

	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	}

	var locale$2;
	var format$1;
	var formatPrefix;

	defaultLocale$1({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""]
	});

	function defaultLocale$1(definition) {
	  locale$2 = formatLocale$1(definition);
	  format$1 = locale$2.format;
	  formatPrefix = locale$2.formatPrefix;
	  return locale$2;
	}

	function precisionFixed(step) {
	  return Math.max(0, -exponent(Math.abs(step)));
	}

	function precisionPrefix(step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
	}

	function precisionRound(step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent(max) - exponent(step)) + 1;
	}



	var _d3Format = /*#__PURE__*/Object.freeze({
		formatDefaultLocale: defaultLocale$1,
		get format () { return format$1; },
		get formatPrefix () { return formatPrefix; },
		formatLocale: formatLocale$1,
		formatSpecifier: formatSpecifier,
		precisionFixed: precisionFixed,
		precisionPrefix: precisionPrefix,
		precisionRound: precisionRound
	});

	function tickFormat(domain, count, specifier) {
	  var start = domain[0],
	      stop = domain[domain.length - 1],
	      step = tickStep(start, stop, count == null ? 10 : count),
	      precision;
	  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
	  switch (specifier.type) {
	    case "s": {
	      var value = Math.max(Math.abs(start), Math.abs(stop));
	      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
	      return formatPrefix(specifier, value);
	    }
	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r": {
	      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	      break;
	    }
	    case "f":
	    case "%": {
	      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	      break;
	    }
	  }
	  return format$1(specifier);
	}

	function linearish(scale) {
	  var domain = scale.domain;

	  scale.ticks = function(count) {
	    var d = domain();
	    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };

	  scale.tickFormat = function(count, specifier) {
	    return tickFormat(domain(), count, specifier);
	  };

	  scale.nice = function(count) {
	    if (count == null) count = 10;

	    var d = domain(),
	        i0 = 0,
	        i1 = d.length - 1,
	        start = d[i0],
	        stop = d[i1],
	        step;

	    if (stop < start) {
	      step = start, start = stop, stop = step;
	      step = i0, i0 = i1, i1 = step;
	    }

	    step = tickIncrement(start, stop, count);

	    if (step > 0) {
	      start = Math.floor(start / step) * step;
	      stop = Math.ceil(stop / step) * step;
	      step = tickIncrement(start, stop, count);
	    } else if (step < 0) {
	      start = Math.ceil(start * step) / step;
	      stop = Math.floor(stop * step) / step;
	      step = tickIncrement(start, stop, count);
	    }

	    if (step > 0) {
	      d[i0] = Math.floor(start / step) * step;
	      d[i1] = Math.ceil(stop / step) * step;
	      domain(d);
	    } else if (step < 0) {
	      d[i0] = Math.ceil(start * step) / step;
	      d[i1] = Math.floor(stop * step) / step;
	      domain(d);
	    }

	    return scale;
	  };

	  return scale;
	}

	function linear$1() {
	  var scale = continuous(deinterpolateLinear, interpolateNumber);

	  scale.copy = function() {
	    return copy(scale, linear$1());
	  };

	  return linearish(scale);
	}

	function identity$4() {
	  var domain = [0, 1];

	  function scale(x) {
	    return +x;
	  }

	  scale.invert = scale;

	  scale.domain = scale.range = function(_) {
	    return arguments.length ? (domain = map$6.call(_, number$1), scale) : domain.slice();
	  };

	  scale.copy = function() {
	    return identity$4().domain(domain);
	  };

	  return linearish(scale);
	}

	function nice(domain, interval) {
	  domain = domain.slice();

	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;

	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }

	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	}

	function deinterpolate(a, b) {
	  return (b = Math.log(b / a))
	      ? function(x) { return Math.log(x / a) / b; }
	      : constant$3(b);
	}

	function reinterpolate(a, b) {
	  return a < 0
	      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
	      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
	}

	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}

	function powp(base) {
	  return base === 10 ? pow10
	      : base === Math.E ? Math.exp
	      : function(x) { return Math.pow(base, x); };
	}

	function logp(base) {
	  return base === Math.E ? Math.log
	      : base === 10 && Math.log10
	      || base === 2 && Math.log2
	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
	}

	function reflect(f) {
	  return function(x) {
	    return -f(-x);
	  };
	}

	function log() {
	  var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]),
	      domain = scale.domain,
	      base = 10,
	      logs = logp(10),
	      pows = powp(10);

	  function rescale() {
	    logs = logp(base), pows = powp(base);
	    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
	    return scale;
	  }

	  scale.base = function(_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };

	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.ticks = function(count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;

	    if (r = v < u) i = u, u = v, v = i;

	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];

	    if (!(base % 1) && j - i < n) {
	      i = Math.round(i) - 1, j = Math.round(j) + 1;
	      if (u > 0) for (; i < j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i < j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	    } else {
	      z = ticks(i, j, Math.min(j - i, n)).map(pows);
	    }

	    return r ? z.reverse() : z;
	  };

	  scale.tickFormat = function(count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = format$1(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
	    return function(d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };

	  scale.nice = function() {
	    return domain(nice(domain(), {
	      floor: function(x) { return pows(Math.floor(logs(x))); },
	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
	    }));
	  };

	  scale.copy = function() {
	    return copy(scale, log().base(base));
	  };

	  return scale;
	}

	function raise(x, exponent) {
	  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	}

	function pow() {
	  var exponent = 1,
	      scale = continuous(deinterpolate, reinterpolate),
	      domain = scale.domain;

	  function deinterpolate(a, b) {
	    return (b = raise(b, exponent) - (a = raise(a, exponent)))
	        ? function(x) { return (raise(x, exponent) - a) / b; }
	        : constant$3(b);
	  }

	  function reinterpolate(a, b) {
	    b = raise(b, exponent) - (a = raise(a, exponent));
	    return function(t) { return raise(a + b * t, 1 / exponent); };
	  }

	  scale.exponent = function(_) {
	    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
	  };

	  scale.copy = function() {
	    return copy(scale, pow().exponent(exponent));
	  };

	  return linearish(scale);
	}

	function sqrt$1() {
	  return pow().exponent(0.5);
	}

	function quantile$$1() {
	  var domain = [],
	      range$$1 = [],
	      thresholds = [];

	  function rescale() {
	    var i = 0, n = Math.max(1, range$$1.length);
	    thresholds = new Array(n - 1);
	    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
	    return scale;
	  }

	  function scale(x) {
	    if (!isNaN(x = +x)) return range$$1[bisectRight(thresholds, x)];
	  }

	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN] : [
	      i > 0 ? thresholds[i - 1] : domain[0],
	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
	    ];
	  };

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(ascending$1);
	    return rescale();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$2.call(_), rescale()) : range$$1.slice();
	  };

	  scale.quantiles = function() {
	    return thresholds.slice();
	  };

	  scale.copy = function() {
	    return quantile$$1()
	        .domain(domain)
	        .range(range$$1);
	  };

	  return scale;
	}

	function quantize$1() {
	  var x0 = 0,
	      x1 = 1,
	      n = 1,
	      domain = [0.5],
	      range$$1 = [0, 1];

	  function scale(x) {
	    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
	  }

	  function rescale() {
	    var i = -1;
	    domain = new Array(n);
	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
	    return scale;
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
	  };

	  scale.range = function(_) {
	    return arguments.length ? (n = (range$$1 = slice$2.call(_)).length - 1, rescale()) : range$$1.slice();
	  };

	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN]
	        : i < 1 ? [x0, domain[0]]
	        : i >= n ? [domain[n - 1], x1]
	        : [domain[i - 1], domain[i]];
	  };

	  scale.copy = function() {
	    return quantize$1()
	        .domain([x0, x1])
	        .range(range$$1);
	  };

	  return linearish(scale);
	}

	function threshold$1() {
	  var domain = [0.5],
	      range$$1 = [0, 1],
	      n = 1;

	  function scale(x) {
	    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (domain = slice$2.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$2.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();
	  };

	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return [domain[i - 1], domain[i]];
	  };

	  scale.copy = function() {
	    return threshold$1()
	        .domain(domain)
	        .range(range$$1);
	  };

	  return scale;
	}

	var durationSecond$1 = 1000,
	    durationMinute$1 = durationSecond$1 * 60,
	    durationHour$1 = durationMinute$1 * 60,
	    durationDay$1 = durationHour$1 * 24,
	    durationWeek$1 = durationDay$1 * 7,
	    durationMonth = durationDay$1 * 30,
	    durationYear = durationDay$1 * 365;

	function date$1(t) {
	  return new Date(t);
	}

	function number$2(t) {
	  return t instanceof Date ? +t : +new Date(+t);
	}

	function calendar$2(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
	  var scale = continuous(deinterpolateLinear, interpolateNumber),
	      invert = scale.invert,
	      domain = scale.domain;

	  var formatMillisecond = format(".%L"),
	      formatSecond = format(":%S"),
	      formatMinute = format("%I:%M"),
	      formatHour = format("%I %p"),
	      formatDay = format("%a %d"),
	      formatWeek = format("%b %d"),
	      formatMonth = format("%B"),
	      formatYear = format("%Y");

	  var tickIntervals = [
	    [second$$1,  1,      durationSecond$1],
	    [second$$1,  5,  5 * durationSecond$1],
	    [second$$1, 15, 15 * durationSecond$1],
	    [second$$1, 30, 30 * durationSecond$1],
	    [minute$$1,  1,      durationMinute$1],
	    [minute$$1,  5,  5 * durationMinute$1],
	    [minute$$1, 15, 15 * durationMinute$1],
	    [minute$$1, 30, 30 * durationMinute$1],
	    [  hour$$1,  1,      durationHour$1  ],
	    [  hour$$1,  3,  3 * durationHour$1  ],
	    [  hour$$1,  6,  6 * durationHour$1  ],
	    [  hour$$1, 12, 12 * durationHour$1  ],
	    [   day$$1,  1,      durationDay$1   ],
	    [   day$$1,  2,  2 * durationDay$1   ],
	    [  week,  1,      durationWeek$1  ],
	    [ month$$1,  1,      durationMonth ],
	    [ month$$1,  3,  3 * durationMonth ],
	    [  year$$1,  1,      durationYear  ]
	  ];

	  function tickFormat(date$$1) {
	    return (second$$1(date$$1) < date$$1 ? formatMillisecond
	        : minute$$1(date$$1) < date$$1 ? formatSecond
	        : hour$$1(date$$1) < date$$1 ? formatMinute
	        : day$$1(date$$1) < date$$1 ? formatHour
	        : month$$1(date$$1) < date$$1 ? (week(date$$1) < date$$1 ? formatDay : formatWeek)
	        : year$$1(date$$1) < date$$1 ? formatMonth
	        : formatYear)(date$$1);
	  }

	  function tickInterval(interval, start, stop, step) {
	    if (interval == null) interval = 10;

	    // If a desired tick count is specified, pick a reasonable tick interval
	    // based on the extent of the domain and a rough estimate of tick size.
	    // Otherwise, assume interval is already a time interval and use it.
	    if (typeof interval === "number") {
	      var target = Math.abs(stop - start) / interval,
	          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
	      if (i === tickIntervals.length) {
	        step = tickStep(start / durationYear, stop / durationYear, interval);
	        interval = year$$1;
	      } else if (i) {
	        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
	        step = i[1];
	        interval = i[0];
	      } else {
	        step = tickStep(start, stop, interval);
	        interval = millisecond$$1;
	      }
	    }

	    return step == null ? interval : interval.every(step);
	  }

	  scale.invert = function(y) {
	    return new Date(invert(y));
	  };

	  scale.domain = function(_) {
	    return arguments.length ? domain(map$6.call(_, number$2)) : domain().map(date$1);
	  };

	  scale.ticks = function(interval, step) {
	    var d = domain(),
	        t0 = d[0],
	        t1 = d[d.length - 1],
	        r = t1 < t0,
	        t;
	    if (r) t = t0, t0 = t1, t1 = t;
	    t = tickInterval(interval, t0, t1, step);
	    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
	    return r ? t.reverse() : t;
	  };

	  scale.tickFormat = function(count, specifier) {
	    return specifier == null ? tickFormat : format(specifier);
	  };

	  scale.nice = function(interval, step) {
	    var d = domain();
	    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
	        ? domain(nice(d, interval))
	        : scale;
	  };

	  scale.copy = function() {
	    return copy(scale, calendar$2(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));
	  };

	  return scale;
	}

	function time() {
	  return calendar$2(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
	}

	function utcTime() {
	  return calendar$2(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
	}

	function colors(s) {
	  return s.match(/.{6}/g).map(function(x) {
	    return "#" + x;
	  });
	}

	var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

	var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

	var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

	var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

	var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));

	var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

	var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

	var rainbow = cubehelix();

	function rainbow$1(t) {
	  if (t < 0 || t > 1) t -= Math.floor(t);
	  var ts = Math.abs(t - 0.5);
	  rainbow.h = 360 * t - 100;
	  rainbow.s = 1.5 - 1.5 * ts;
	  rainbow.l = 0.8 - 0.9 * ts;
	  return rainbow + "";
	}

	function ramp(range) {
	  var n = range.length;
	  return function(t) {
	    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
	  };
	}

	var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

	var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

	var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

	var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

	function sequential(interpolator) {
	  var x0 = 0,
	      x1 = 1,
	      clamp = false;

	  function scale(x) {
	    var t = (x - x0) / (x1 - x0);
	    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };

	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };

	  scale.copy = function() {
	    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
	  };

	  return linearish(scale);
	}



	var d3Scale = /*#__PURE__*/Object.freeze({
		scaleBand: band,
		scalePoint: point$4,
		scaleIdentity: identity$4,
		scaleLinear: linear$1,
		scaleLog: log,
		scaleOrdinal: ordinal$1,
		scaleImplicit: implicit,
		scalePow: pow,
		scaleSqrt: sqrt$1,
		scaleQuantile: quantile$$1,
		scaleQuantize: quantize$1,
		scaleThreshold: threshold$1,
		scaleTime: time,
		scaleUtc: utcTime,
		schemeCategory10: category10,
		schemeCategory20b: category20b,
		schemeCategory20c: category20c,
		schemeCategory20: category20,
		interpolateCubehelixDefault: cubehelix$3,
		interpolateRainbow: rainbow$1,
		interpolateWarm: warm,
		interpolateCool: cool,
		interpolateViridis: viridis,
		interpolateMagma: magma,
		interpolateInferno: inferno,
		interpolatePlasma: plasma,
		scaleSequential: sequential
	});

	function linear$2(t) {
	  return +t;
	}

	function quadIn(t) {
	  return t * t;
	}

	function quadOut(t) {
	  return t * (2 - t);
	}

	function quadInOut(t) {
	  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
	}

	function cubicIn(t) {
	  return t * t * t;
	}

	function cubicOut(t) {
	  return --t * t * t + 1;
	}

	function cubicInOut(t) {
	  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	}

	var exponent$1 = 3;

	var polyIn = (function custom(e) {
	  e = +e;

	  function polyIn(t) {
	    return Math.pow(t, e);
	  }

	  polyIn.exponent = custom;

	  return polyIn;
	})(exponent$1);

	var polyOut = (function custom(e) {
	  e = +e;

	  function polyOut(t) {
	    return 1 - Math.pow(1 - t, e);
	  }

	  polyOut.exponent = custom;

	  return polyOut;
	})(exponent$1);

	var polyInOut = (function custom(e) {
	  e = +e;

	  function polyInOut(t) {
	    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
	  }

	  polyInOut.exponent = custom;

	  return polyInOut;
	})(exponent$1);

	var pi$2 = Math.PI,
	    halfPi$1 = pi$2 / 2;

	function sinIn(t) {
	  return 1 - Math.cos(t * halfPi$1);
	}

	function sinOut(t) {
	  return Math.sin(t * halfPi$1);
	}

	function sinInOut(t) {
	  return (1 - Math.cos(pi$2 * t)) / 2;
	}

	function expIn(t) {
	  return Math.pow(2, 10 * t - 10);
	}

	function expOut(t) {
	  return 1 - Math.pow(2, -10 * t);
	}

	function expInOut(t) {
	  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
	}

	function circleIn(t) {
	  return 1 - Math.sqrt(1 - t * t);
	}

	function circleOut(t) {
	  return Math.sqrt(1 - --t * t);
	}

	function circleInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
	}

	var b1 = 4 / 11,
	    b2 = 6 / 11,
	    b3 = 8 / 11,
	    b4 = 3 / 4,
	    b5 = 9 / 11,
	    b6 = 10 / 11,
	    b7 = 15 / 16,
	    b8 = 21 / 22,
	    b9 = 63 / 64,
	    b0 = 1 / b1 / b1;

	function bounceIn(t) {
	  return 1 - bounceOut(1 - t);
	}

	function bounceOut(t) {
	  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
	}

	function bounceInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
	}

	var overshoot = 1.70158;

	var backIn = (function custom(s) {
	  s = +s;

	  function backIn(t) {
	    return t * t * ((s + 1) * t - s);
	  }

	  backIn.overshoot = custom;

	  return backIn;
	})(overshoot);

	var backOut = (function custom(s) {
	  s = +s;

	  function backOut(t) {
	    return --t * t * ((s + 1) * t + s) + 1;
	  }

	  backOut.overshoot = custom;

	  return backOut;
	})(overshoot);

	var backInOut = (function custom(s) {
	  s = +s;

	  function backInOut(t) {
	    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
	  }

	  backInOut.overshoot = custom;

	  return backInOut;
	})(overshoot);

	var tau$2 = 2 * Math.PI,
	    amplitude = 1,
	    period = 0.3;

	var elasticIn = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$2);

	  function elasticIn(t) {
	    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
	  }

	  elasticIn.amplitude = function(a) { return custom(a, p * tau$2); };
	  elasticIn.period = function(p) { return custom(a, p); };

	  return elasticIn;
	})(amplitude, period);

	var elasticOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$2);

	  function elasticOut(t) {
	    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
	  }

	  elasticOut.amplitude = function(a) { return custom(a, p * tau$2); };
	  elasticOut.period = function(p) { return custom(a, p); };

	  return elasticOut;
	})(amplitude, period);

	var elasticInOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau$2);

	  function elasticInOut(t) {
	    return ((t = t * 2 - 1) < 0
	        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
	        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
	  }

	  elasticInOut.amplitude = function(a) { return custom(a, p * tau$2); };
	  elasticInOut.period = function(p) { return custom(a, p); };

	  return elasticInOut;
	})(amplitude, period);



	var d3Ease = /*#__PURE__*/Object.freeze({
		easeLinear: linear$2,
		easeQuad: quadInOut,
		easeQuadIn: quadIn,
		easeQuadOut: quadOut,
		easeQuadInOut: quadInOut,
		easeCubic: cubicInOut,
		easeCubicIn: cubicIn,
		easeCubicOut: cubicOut,
		easeCubicInOut: cubicInOut,
		easePoly: polyInOut,
		easePolyIn: polyIn,
		easePolyOut: polyOut,
		easePolyInOut: polyInOut,
		easeSin: sinInOut,
		easeSinIn: sinIn,
		easeSinOut: sinOut,
		easeSinInOut: sinInOut,
		easeExp: expInOut,
		easeExpIn: expIn,
		easeExpOut: expOut,
		easeExpInOut: expInOut,
		easeCircle: circleInOut,
		easeCircleIn: circleIn,
		easeCircleOut: circleOut,
		easeCircleInOut: circleInOut,
		easeBounce: bounceOut,
		easeBounceIn: bounceIn,
		easeBounceOut: bounceOut,
		easeBounceInOut: bounceInOut,
		easeBack: backInOut,
		easeBackIn: backIn,
		easeBackOut: backOut,
		easeBackInOut: backInOut,
		easeElastic: elasticOut,
		easeElasticIn: elasticIn,
		easeElasticOut: elasticOut,
		easeElasticInOut: elasticInOut
	});

	var Charts_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



	var _react2 = _interopRequireDefault(react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  Copyright (c) 2015-present, The Regents of the University of California,
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  through Lawrence Berkeley National Laboratory (subject to receipt
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  of any required approvals from the U.S. Dept. of Energy).
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  All rights reserved.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	his source code is licensed under the BSD-style license found in the
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  LICENSE file in the root directory of this source tree.
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	/**
	 *
	 * The `<Charts>` element is a grouping for charts within a row.
	 * It takes no props. Each chart within the group will be overlaid
	 * on top of each other.
	 *
	 * Here is an example of two line charts within a `<Charts>` group:
	 *
	 * ```xml
	 * <ChartContainer timeRange={audSeries.timerange()}>
	 *     <ChartRow height="200">
	 *         <YAxis/>
	 *         <Charts>
	 *             <LineChart axis="aud" series={audSeries} style={audStyle}/>
	 *             <LineChart axis="euro" series={euroSeries} style={euroStyle}/>
	 *         </Charts>
	 *         <YAxis/>
	 *     </ChartRow>
	 * </ChartContainer>
	 * ```
	 *
	 * ## Making your own chart
	 *
	 * Anything within this grouping is considered a chart, meaning it will have
	 * certain props injected into it. As a result you can easily implement your own chart
	 * by simply expecting to have these props available and rendering as such.
	 *
	 * For your own chart, the render() method should return a SVG group `<g>` at the
	 * top level, and then your chart rendering within that.
	 *
	 * In addition to any props you add to your chart, the following props are passed into
	 * each chart automatically:
	 *
	 * #### timeScale
	 *
	 * A d3 scale for the time axis which you can use to transform your data in the x direction
	 *
	 * #### yScale
	 *
	 * A d3 scale for the y-axis which you can use to transform your data in the y direction
	 *
	 * #### width
	 *
	 * A the width your chart will render into
	 */
	var Charts = function (_React$Component) {
	  _inherits(Charts, _React$Component);

	  function Charts() {
	    _classCallCheck(this, Charts);

	    return _possibleConstructorReturn(this, (Charts.__proto__ || Object.getPrototypeOf(Charts)).apply(this, arguments));
	  }

	  _createClass(Charts, [{
	    key: "render",
	    value: function render() {
	      return this.constructor.name + " elements are for configuration only\nand should not be rendered";
	    }
	  }]);

	  return Charts;
	}(_react2.default.Component);

	exports.default = Charts;
	});

	unwrapExports(Charts_1);

	/*! Moment Duration Format v1.3.0
	 *  https://github.com/jsmreese/moment-duration-format 
	 *  Date: 2014-07-15
	 *
	 *  Duration format plugin function for the Moment.js library
	 *  http://momentjs.com/
	 *
	 *  Copyright 2014 John Madhavan-Reese
	 *  Released under the MIT license
	 */

	(function (root, undefined) {

		// repeatZero(qty)
		// returns "0" repeated qty times
		function repeatZero(qty) {
			var result = "";
			
			// exit early
			// if qty is 0 or a negative number
			// or doesn't coerce to an integer
			qty = parseInt(qty, 10);
			if (!qty || qty < 1) { return result; }
			
			while (qty) {
				result += "0";
				qty -= 1;
			}
			
			return result;
		}
		
		// padZero(str, len [, isRight])
		// pads a string with zeros up to a specified length
		// will not pad a string if its length is aready
		// greater than or equal to the specified length
		// default output pads with zeros on the left
		// set isRight to `true` to pad with zeros on the right
		function padZero(str, len, isRight) {
			if (str == null) { str = ""; }
			str = "" + str;
			
			return (isRight ? str : "") + repeatZero(len - str.length) + (isRight ? "" : str);
		}
		
		// isArray
		function isArray(array) {
			return Object.prototype.toString.call(array) === "[object Array]";
		}
		
		// isObject
		function isObject(obj) {
			return Object.prototype.toString.call(obj) === "[object Object]";
		}
		
		// findLast
		function findLast(array, callback) {
			var index = array.length;

			while (index -= 1) {
				if (callback(array[index])) { return array[index]; }
			}
		}

		// find
		function find(array, callback) {
			var index = 0,
				max = array.length,
				match;
				
			if (typeof callback !== "function") {
				match = callback;
				callback = function (item) {
					return item === match;
				};
			}

			while (index < max) {
				if (callback(array[index])) { return array[index]; }
				index += 1;
			}
		}
		
		// each
		function each(array, callback) {
			var index = 0,
				max = array.length;
				
			if (!array || !max) { return; }

			while (index < max) {
				if (callback(array[index], index) === false) { return; }
				index += 1;
			}
		}
		
		// map
		function map(array, callback) {
			var index = 0,
				max = array.length,
				ret = [];

			if (!array || !max) { return ret; }
					
			while (index < max) {
				ret[index] = callback(array[index], index);
				index += 1;
			}
			
			return ret;
		}
		
		// pluck
		function pluck(array, prop) {
			return map(array, function (item) {
				return item[prop];
			});
		}
		
		// compact
		function compact(array) {
			var ret = [];
			
			each(array, function (item) {
				if (item) { ret.push(item); }
			});
			
			return ret;
		}
		
		// unique
		function unique(array) {
			var ret = [];
			
			each(array, function (_a) {
				if (!find(ret, _a)) { ret.push(_a); }
			});
			
			return ret;
		}
		
		// intersection
		function intersection(a, b) {
			var ret = [];
			
			each(a, function (_a) {
				each(b, function (_b) {
					if (_a === _b) { ret.push(_a); }
				});
			});
			
			return unique(ret);
		}
		
		// rest
		function rest(array, callback) {
			var ret = [];
			
			each(array, function (item, index) {
				if (!callback(item)) {
					ret = array.slice(index);
					return false;
				}
			});
			
			return ret;
		}

		// initial
		function initial(array, callback) {
			var reversed = array.slice().reverse();
			
			return rest(reversed, callback).reverse();
		}
		
		// extend
		function extend(a, b) {
			for (var key in b) {
				if (b.hasOwnProperty(key)) { a[key] = b[key]; }
			}
			
			return a;
		}
				
		// define internal moment reference
		var moment;

		if (typeof commonjsRequire === "function") {
			try { moment = _moment; } 
			catch (e) {}
		} 
		
		if (!moment && root.moment) {
			moment = root.moment;
		}
		
		if (!moment) {
			throw "Moment Duration Format cannot find Moment.js";
		}
		
		// moment.duration.format([template] [, precision] [, settings])
		moment.duration.fn.format = function () {

			var tokenizer, tokens, types, typeMap, momentTypes, foundFirst, args = [].slice.call(arguments),
				settings = extend({}, this.format.defaults),
				// keep a shadow copy of this moment for calculating remainders
				remainder = moment.duration(this);

			// add a reference to this duration object to the settings for use
			// in a template function
			settings.duration = this;

			// parse arguments
			each(args, function (arg) {
				if (typeof arg === "string" || typeof arg === "function") {
					settings.template = arg;
					return;
				}

				if (typeof arg === "number") {
					settings.precision = arg;
					return;
				}

				if (isObject(arg)) {
					extend(settings, arg);
				}
			});

			// types
			types = settings.types = (isArray(settings.types) ? settings.types : settings.types.split(" "));

			// template
			if (typeof settings.template === "function") {
				settings.template = settings.template.apply(settings);
			}

			// tokenizer regexp
			tokenizer = new RegExp(map(types, function (type) {
				return settings[type].source;
			}).join("|"), "g");

			// token type map function
			typeMap = function (token) {
				return find(types, function (type) {
					return settings[type].test(token);
				});
			};

			// tokens array
			tokens = map(settings.template.match(tokenizer), function (token, index) {
				var type = typeMap(token),
					length = token.length;

				return {
					index: index,
					length: length,

					// replace escaped tokens with the non-escaped token text
					token: (type === "escape" ? token.replace(settings.escape, "$1") : token),

					// ignore type on non-moment tokens
					type: ((type === "escape" || type === "general") ? null : type)

					// calculate base value for all moment tokens
					//baseValue: ((type === "escape" || type === "general") ? null : this.as(type))
				};
			}, this);

			// unique moment token types in the template (in order of descending magnitude)
			momentTypes = intersection(types, unique(compact(pluck(tokens, "type"))));

			// exit early if there are no momentTypes
			if (!momentTypes.length) {
				return pluck(tokens, "token").join("");
			}

			// calculate values for each token type in the template
			each(momentTypes, function (momentType, index) {
				var value, wholeValue, decimalValue, isLeast, isMost;

				// calculate integer and decimal value portions
				value = remainder.as(momentType);
				wholeValue = (value > 0 ? Math.floor(value) : Math.ceil(value));
				decimalValue = value - wholeValue;

				// is this the least-significant moment token found?
				isLeast = ((index + 1) === momentTypes.length);

				// is this the most-significant moment token found?
				isMost = (!index);

				// update tokens array
				// using this algorithm to not assume anything about
				// the order or frequency of any tokens
				each(tokens, function (token) {
					if (token.type === momentType) {
						extend(token, {
							value: value,
							wholeValue: wholeValue,
							decimalValue: decimalValue,
							isLeast: isLeast,
							isMost: isMost
						});

						if (isMost) {
							// note the length of the most-significant moment token:
							// if it is greater than one and forceLength is not set, default forceLength to `true`
							if (settings.forceLength == null && token.length > 1) {
								settings.forceLength = true;
							}

							// rationale is this:
							// if the template is "h:mm:ss" and the moment value is 5 minutes, the user-friendly output is "5:00", not "05:00"
							// shouldn't pad the `minutes` token even though it has length of two
							// if the template is "hh:mm:ss", the user clearly wanted everything padded so we should output "05:00"
							// if the user wanted the full padded output, they can set `{ trim: false }` to get "00:05:00"
						}
					}
				});

				// update remainder
				remainder.subtract(wholeValue, momentType);
			});
		
			// trim tokens array
			if (settings.trim) {
				tokens = (settings.trim === "left" ? rest : initial)(tokens, function (token) {
					// return `true` if:
					// the token is not the least moment token (don't trim the least moment token)
					// the token is a moment token that does not have a value (don't trim moment tokens that have a whole value)
					return !(token.isLeast || (token.type != null && token.wholeValue));
				});
			}
			
			
			// build output

			// the first moment token can have special handling
			foundFirst = false;

			// run the map in reverse order if trimming from the right
			if (settings.trim === "right") {
				tokens.reverse();
			}

			tokens = map(tokens, function (token) {
				var val,
					decVal;

				if (!token.type) {
					// if it is not a moment token, use the token as its own value
					return token.token;
				}

				// apply negative precision formatting to the least-significant moment token
				if (token.isLeast && (settings.precision < 0)) {
					val = (Math.floor(token.wholeValue * Math.pow(10, settings.precision)) * Math.pow(10, -settings.precision)).toString();
				} else {
					val = token.wholeValue.toString();
				}
				
				// remove negative sign from the beginning
				val = val.replace(/^\-/, "");

				// apply token length formatting
				// special handling for the first moment token that is not the most significant in a trimmed template
				if (token.length > 1 && (foundFirst || token.isMost || settings.forceLength)) {
					val = padZero(val, token.length);
				}

				// add decimal value if precision > 0
				if (token.isLeast && (settings.precision > 0)) {
					decVal = token.decimalValue.toString().replace(/^\-/, "").split(/\.|e\-/);
					switch (decVal.length) {
						case 1:
							val += "." + padZero(decVal[0], settings.precision, true).slice(0, settings.precision);
							break;
							
						case 2:
							val += "." + padZero(decVal[1], settings.precision, true).slice(0, settings.precision);		
							break;
							
						case 3:
							val += "." + padZero(repeatZero((+decVal[2]) - 1) + (decVal[0] || "0") + decVal[1], settings.precision, true).slice(0, settings.precision);		
							break;
						
						default:
							throw "Moment Duration Format: unable to parse token decimal value.";
					}
				}
				
				// add a negative sign if the value is negative and token is most significant
				if (token.isMost && token.value < 0) {
					val = "-" + val;
				}

				foundFirst = true;

				return val;
			});

			// undo the reverse if trimming from the right
			if (settings.trim === "right") {
				tokens.reverse();
			}

			return tokens.join("");
		};

		moment.duration.fn.format.defaults = {
			// token definitions
			escape: /\[(.+?)\]/,
			years: /[Yy]+/,
			months: /M+/,
			weeks: /[Ww]+/,
			days: /[Dd]+/,
			hours: /[Hh]+/,
			minutes: /m+/,
			seconds: /s+/,
			milliseconds: /S+/,
			general: /.+?/,

			// token type names
			// in order of descending magnitude
			// can be a space-separated token name list or an array of token names
			types: "escape years months weeks days hours minutes seconds milliseconds general",

			// format options

			// trim
			// "left" - template tokens are trimmed from the left until the first moment token that has a value >= 1
			// "right" - template tokens are trimmed from the right until the first moment token that has a value >= 1
			// (the final moment token is not trimmed, regardless of value)
			// `false` - template tokens are not trimmed
			trim: "left",

			// precision
			// number of decimal digits to include after (to the right of) the decimal point (positive integer)
			// or the number of digits to truncate to 0 before (to the left of) the decimal point (negative integer)
			precision: 0,

			// force first moment token with a value to render at full length even when template is trimmed and first moment token has length of 1
			forceLength: null,

			// template used to format duration
			// may be a function or a string
			// template functions are executed with the `this` binding of the settings object
			// so that template strings may be dynamically generated based on the duration object
			// (accessible via `this.duration`)
			// or any of the other settings
			template: function () {
				var types = this.types,
					dur = this.duration,
					lastType = findLast(types, function (type) {
						return dur._data[type];
					});

				// default template strings for each duration dimension type
				switch (lastType) {
					case "seconds":
						return "h:mm:ss";
					case "minutes":
						return "d[d] h:mm";
					case "hours":
						return "d[d] h[h]";
					case "days":
						return "M[m] d[d]";
					case "weeks":
						return "y[y] w[w]";
					case "months":
						return "y[y] M[m]";
					case "years":
						return "y[y]";
					default:
						return "y[y] M[m] d[d] h:mm:ss";
				}
			}
		};

	})(commonjsGlobal);

	var TimeMarker_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _underscore2 = _interopRequireDefault(underscore);



	var _moment2 = _interopRequireDefault(_moment);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);







	var _ValueList2 = _interopRequireDefault(ValueList_1);



	var _Label2 = _interopRequireDefault(Label_1);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var TimeMarker = (function(_React$Component) {
	    _inherits(TimeMarker, _React$Component);

	    function TimeMarker() {
	        _classCallCheck(this, TimeMarker);

	        return _possibleConstructorReturn(
	            this,
	            (TimeMarker.__proto__ || Object.getPrototypeOf(TimeMarker)).apply(this, arguments)
	        );
	    }

	    _createClass(TimeMarker, [
	        {
	            key: "renderLine",
	            value: function renderLine(posx) {
	                return _react2.default.createElement("line", {
	                    style: this.props.infoStyle.line,
	                    x1: posx,
	                    y1: 0,
	                    x2: posx,
	                    y2: this.props.height
	                });
	            }
	        },
	        {
	            key: "renderTimeMarker",
	            value: function renderTimeMarker(d) {
	                var textStyle = {
	                    fontSize: 11,
	                    textAnchor: "left",
	                    fill: "#bdbdbd"
	                };

	                var dateStr = "" + d;
	                if (this.props.timeFormat === "day") {
	                    var formatter = (0, _d3TimeFormat.timeFormat)("%d");
	                    dateStr = formatter(d);
	                } else if (this.props.timeFormat === "month") {
	                    var _formatter = (0, _d3TimeFormat.timeFormat)("%B");
	                    dateStr = _formatter(d);
	                } else if (this.props.timeFormat === "year") {
	                    var _formatter2 = (0, _d3TimeFormat.timeFormat)("%Y");
	                    dateStr = _formatter2(d);
	                } else if (this.props.timeFormat === "relative") {
	                    dateStr = _moment2.default.duration(+d).format();
	                } else if (_underscore2.default.isString(this.props.timeFormat)) {
	                    var _formatter3 = (0, _d3TimeFormat.timeFormat)(this.props.timeFormat);
	                    dateStr = _formatter3(d);
	                } else if (_underscore2.default.isFunction(this.props.timeFormat)) {
	                    dateStr = this.props.timeFormat(d);
	                }

	                return _react2.default.createElement(
	                    "text",
	                    { x: 0, y: 0, dy: "1.2em", style: textStyle },
	                    dateStr
	                );
	            }
	        },
	        {
	            key: "renderInfoBox",
	            value: function renderInfoBox(posx) {
	                var w = this.props.infoWidth;

	                var infoBoxProps = {
	                    align: "left",
	                    style: this.props.infoStyle.box,
	                    width: this.props.infoWidth,
	                    height: this.props.infoHeight
	                };

	                if (this.props.infoValues) {
	                    var infoBox = _underscore2.default.isString(this.props.infoValues)
	                        ? _react2.default.createElement(
	                              _Label2.default,
	                              _extends({}, infoBoxProps, { label: this.props.infoValues })
	                          )
	                        : _react2.default.createElement(
	                              _ValueList2.default,
	                              _extends({}, infoBoxProps, { values: this.props.infoValues })
	                          );

	                    if (posx + 10 + w < this.props.width - 50) {
	                        return _react2.default.createElement(
	                            "g",
	                            { transform: "translate(" + (posx + 10) + "," + 5 + ")" },
	                            this.props.showTime ? this.renderTimeMarker(this.props.time) : null,
	                            _react2.default.createElement(
	                                "g",
	                                {
	                                    transform: "translate(0," + (this.props.showTime ? 20 : 0) + ")"
	                                },
	                                infoBox
	                            )
	                        );
	                    }
	                    return _react2.default.createElement(
	                        "g",
	                        { transform: "translate(" + (posx - w - 10) + "," + 5 + ")" },
	                        this.props.showTime ? this.renderTimeMarker(this.props.time) : null,
	                        _react2.default.createElement(
	                            "g",
	                            { transform: "translate(0," + (this.props.showTime ? 20 : 0) + ")" },
	                            infoBox
	                        )
	                    );
	                }
	                return _react2.default.createElement("g", null);
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                var posx = this.props.timeScale(this.props.time);
	                if (posx) {
	                    return _react2.default.createElement(
	                        "g",
	                        null,
	                        this.props.showLine ? this.renderLine(posx) : null,
	                        this.props.showInfoBox ? this.renderInfoBox(posx) : null
	                    );
	                }
	                return null;
	            }
	        }
	    ]);

	    return TimeMarker;
	})(_react2.default.Component);

	exports.default = TimeMarker;

	TimeMarker.propTypes = {
	    /**
	     * Show or hide this chart
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * The time, expressed as a Javascript `Date` object, to display the marker
	     */
	    time: _propTypes2.default.instanceOf(Date),

	    /**
	     * The values to show in the info box. This is either an array of
	     * objects, with each object specifying the label and value
	     * to be shown in the info box, or a simple string label
	     */
	    infoValues: _propTypes2.default.oneOfType([
	        _propTypes2.default.string,
	        _propTypes2.default.arrayOf(
	            _propTypes2.default.shape({
	                label: _propTypes2.default.string, // eslint-disable-line
	                value: _propTypes2.default.string // eslint-disable-line
	            })
	        )
	    ]),

	    /**
	     * The style of the info box and connecting lines. This is an
	     * object of the form { line, box, dot }. Line, box and dot
	     * are themselves objects representing inline CSS for each of
	     * the pieces of the info marker.
	     */
	    infoStyle: _propTypes2.default.shape({
	        line: _propTypes2.default.object, // eslint-disable-line
	        box: _propTypes2.default.object, // eslint-disable-line
	        dot: _propTypes2.default.object // eslint-disable-line
	    }),

	    /**
	     * The width of the hover info box
	     */
	    infoWidth: _propTypes2.default.number,

	    /**
	     * The height of the hover info box
	     */
	    infoHeight: _propTypes2.default.number,

	    /**
	     * Display the info box at all. If you don't have any values to show and just
	     * want a line and a time (for example), you can set this to false.
	     */
	    showInfoBox: _propTypes2.default.bool,

	    /**
	     * You can show the info box without the corresponding time marker. Why would
	     * you do this? I don't know. Actually, I do. You might use the ChartContainer
	     * tracker mechanism to show the line across multiple rows, then add a TimeMarker
	     * selectively to each row.
	     */
	    showLine: _propTypes2.default.bool,

	    /**
	     * You can hide the time displayed above the info box. You might do this because
	     * it is already displayed elsewhere in your UI. Or maybe you just don't like it.
	     */
	    showTime: _propTypes2.default.bool,

	    /**
	     * The time format used for display of the time above the info box.
	     */
	    timeFormat: _propTypes2.default.oneOfType([
	        _propTypes2.default.string,
	        _propTypes2.default.func
	    ]),

	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func,

	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number,

	    /**
	     * [Internal] The height supplied by the surrounding ChartContainer
	     */
	    height: _propTypes2.default.number
	};

	TimeMarker.defaultProps = {
	    visible: true,
	    showInfoBox: true,
	    showLine: true,
	    showTime: true,
	    infoStyle: {
	        line: {
	            stroke: "#999",
	            cursor: "crosshair",
	            pointerEvents: "none"
	        },
	        box: {
	            fill: "white",
	            opacity: 0.9,
	            stroke: "#999",
	            pointerEvents: "none"
	        },
	        dot: {
	            fill: "#999"
	        }
	    },
	    infoWidth: 90,
	    infoHeight: 25
	};
	});

	unwrapExports(TimeMarker_1);

	var xhtml = "http://www.w3.org/1999/xhtml";

	var namespaces = {
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	};

	function namespace(name) {
	  var prefix = name += "", i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
	}

	function creatorInherit(name) {
	  return function() {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === xhtml && document.documentElement.namespaceURI === xhtml
	        ? document.createElement(name)
	        : document.createElementNS(uri, name);
	  };
	}

	function creatorFixed(fullname) {
	  return function() {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}

	function creator(name) {
	  var fullname = namespace(name);
	  return (fullname.local
	      ? creatorFixed
	      : creatorInherit)(fullname);
	}

	function none$2() {}

	function selector$2(selector) {
	  return selector == null ? none$2 : function() {
	    return this.querySelector(selector);
	  };
	}

	function selection_select(select) {
	  if (typeof select !== "function") select = selector$2(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }

	  return new Selection(subgroups, this._parents);
	}

	function empty() {
	  return [];
	}

	function selectorAll(selector) {
	  return selector == null ? empty : function() {
	    return this.querySelectorAll(selector);
	  };
	}

	function selection_selectAll(select) {
	  if (typeof select !== "function") select = selectorAll(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }

	  return new Selection(subgroups, parents);
	}

	var matcher = function(selector) {
	  return function() {
	    return this.matches(selector);
	  };
	};

	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!element.matches) {
	    var vendorMatches = element.webkitMatchesSelector
	        || element.msMatchesSelector
	        || element.mozMatchesSelector
	        || element.oMatchesSelector;
	    matcher = function(selector) {
	      return function() {
	        return vendorMatches.call(this, selector);
	      };
	    };
	  }
	}

	var matcher$1 = matcher;

	function selection_filter(match) {
	  if (typeof match !== "function") match = matcher$1(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Selection(subgroups, this._parents);
	}

	function sparse(update) {
	  return new Array(update.length);
	}

	function selection_enter() {
	  return new Selection(this._enter || this._groups.map(sparse), this._parents);
	}

	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}

	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
	  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
	  querySelector: function(selector) { return this._parent.querySelector(selector); },
	  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
	};

	function constant$4(x) {
	  return function() {
	    return x;
	  };
	}

	var keyPrefix = "$"; // Protect against keys like “__proto__”.

	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length;

	  // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.
	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }

	  // Put any non-null nodes that don’t fit into exit.
	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}

	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = {},
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue;

	  // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
	      if (keyValue in nodeByKeyValue) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue[keyValue] = node;
	      }
	    }
	  }

	  // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.
	  for (i = 0; i < dataLength; ++i) {
	    keyValue = keyPrefix + key.call(parent, data[i], i, data);
	    if (node = nodeByKeyValue[keyValue]) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue[keyValue] = null;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }

	  // Add any remaining nodes that were not bound to data to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
	      exit[i] = node;
	    }
	  }
	}

	function selection_data(value, key) {
	  if (!value) {
	    data = new Array(this.size()), j = -1;
	    this.each(function(d) { data[++j] = d; });
	    return data;
	  }

	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;

	  if (typeof value !== "function") value = constant$4(value);

	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = value.call(parent, parent && parent.__data__, j, parents),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);

	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

	    // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.
	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;
	        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
	        previous._next = next || null;
	      }
	    }
	  }

	  update = new Selection(update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	}

	function selection_exit() {
	  return new Selection(this._exit || this._groups.map(sparse), this._parents);
	}

	function selection_merge(selection$$1) {

	  for (var groups0 = this._groups, groups1 = selection$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Selection(merges, this._parents);
	}

	function selection_order() {

	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }

	  return this;
	}

	function selection_sort(compare) {
	  if (!compare) compare = ascending$2;

	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }

	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }
	    sortgroup.sort(compareNode);
	  }

	  return new Selection(sortgroups, this._parents).order();
	}

	function ascending$2(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	function selection_call() {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	}

	function selection_nodes() {
	  var nodes = new Array(this.size()), i = -1;
	  this.each(function() { nodes[++i] = this; });
	  return nodes;
	}

	function selection_node() {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }

	  return null;
	}

	function selection_size() {
	  var size = 0;
	  this.each(function() { ++size; });
	  return size;
	}

	function selection_empty() {
	  return !this.node();
	}

	function selection_each(callback) {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }

	  return this;
	}

	function attrRemove(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, value) {
	  return function() {
	    this.setAttribute(name, value);
	  };
	}

	function attrConstantNS(fullname, value) {
	  return function() {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}

	function attrFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);
	    else this.setAttribute(name, v);
	  };
	}

	function attrFunctionNS(fullname, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
	    else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}

	function selection_attr(name, value) {
	  var fullname = namespace(name);

	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local
	        ? node.getAttributeNS(fullname.space, fullname.local)
	        : node.getAttribute(fullname);
	  }

	  return this.each((value == null
	      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
	      ? (fullname.local ? attrFunctionNS : attrFunction)
	      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
	}

	function defaultView(node) {
	  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
	      || (node.document && node) // node is a Window
	      || node.defaultView; // node is a Document
	}

	function styleRemove(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant(name, value, priority) {
	  return function() {
	    this.style.setProperty(name, value, priority);
	  };
	}

	function styleFunction(name, value, priority) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);
	    else this.style.setProperty(name, v, priority);
	  };
	}

	function selection_style(name, value, priority) {
	  return arguments.length > 1
	      ? this.each((value == null
	            ? styleRemove : typeof value === "function"
	            ? styleFunction
	            : styleConstant)(name, value, priority == null ? "" : priority))
	      : styleValue(this.node(), name);
	}

	function styleValue(node, name) {
	  return node.style.getPropertyValue(name)
	      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
	}

	function propertyRemove(name) {
	  return function() {
	    delete this[name];
	  };
	}

	function propertyConstant(name, value) {
	  return function() {
	    this[name] = value;
	  };
	}

	function propertyFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];
	    else this[name] = v;
	  };
	}

	function selection_property(name, value) {
	  return arguments.length > 1
	      ? this.each((value == null
	          ? propertyRemove : typeof value === "function"
	          ? propertyFunction
	          : propertyConstant)(name, value))
	      : this.node()[name];
	}

	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}

	function classList(node) {
	  return node.classList || new ClassList(node);
	}

	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}

	ClassList.prototype = {
	  add: function(name) {
	    var i = this._names.indexOf(name);
	    if (i < 0) {
	      this._names.push(name);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function(name) {
	    var i = this._names.indexOf(name);
	    if (i >= 0) {
	      this._names.splice(i, 1);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};

	function classedAdd(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.add(names[i]);
	}

	function classedRemove(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.remove(names[i]);
	}

	function classedTrue(names) {
	  return function() {
	    classedAdd(this, names);
	  };
	}

	function classedFalse(names) {
	  return function() {
	    classedRemove(this, names);
	  };
	}

	function classedFunction(names, value) {
	  return function() {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}

	function selection_classed(name, value) {
	  var names = classArray(name + "");

	  if (arguments.length < 2) {
	    var list = classList(this.node()), i = -1, n = names.length;
	    while (++i < n) if (!list.contains(names[i])) return false;
	    return true;
	  }

	  return this.each((typeof value === "function"
	      ? classedFunction : value
	      ? classedTrue
	      : classedFalse)(names, value));
	}

	function textRemove() {
	  this.textContent = "";
	}

	function textConstant(value) {
	  return function() {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}

	function selection_text(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? textRemove : (typeof value === "function"
	          ? textFunction
	          : textConstant)(value))
	      : this.node().textContent;
	}

	function htmlRemove() {
	  this.innerHTML = "";
	}

	function htmlConstant(value) {
	  return function() {
	    this.innerHTML = value;
	  };
	}

	function htmlFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}

	function selection_html(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? htmlRemove : (typeof value === "function"
	          ? htmlFunction
	          : htmlConstant)(value))
	      : this.node().innerHTML;
	}

	function raise$1() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}

	function selection_raise() {
	  return this.each(raise$1);
	}

	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}

	function selection_lower() {
	  return this.each(lower);
	}

	function selection_append(name) {
	  var create = typeof name === "function" ? name : creator(name);
	  return this.select(function() {
	    return this.appendChild(create.apply(this, arguments));
	  });
	}

	function constantNull() {
	  return null;
	}

	function selection_insert(name, before) {
	  var create = typeof name === "function" ? name : creator(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : selector$2(before);
	  return this.select(function() {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	}

	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}

	function selection_remove() {
	  return this.each(remove);
	}

	function selection_cloneShallow() {
	  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
	}

	function selection_cloneDeep() {
	  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
	}

	function selection_clone(deep) {
	  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
	}

	function selection_datum(value) {
	  return arguments.length
	      ? this.property("__data__", value)
	      : this.node().__data__;
	}

	var filterEvents = {};

	var event$2 = null;

	if (typeof document !== "undefined") {
	  var element$1 = document.documentElement;
	  if (!("onmouseenter" in element$1)) {
	    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
	  }
	}

	function filterContextListener(listener, index, group) {
	  listener = contextListener(listener, index, group);
	  return function(event) {
	    var related = event.relatedTarget;
	    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
	      listener.call(this, event);
	    }
	  };
	}

	function contextListener(listener, index, group) {
	  return function(event1) {
	    var event0 = event$2; // Events can be reentrant (e.g., focus).
	    event$2 = event1;
	    try {
	      listener.call(this, this.__data__, index, group);
	    } finally {
	      event$2 = event0;
	    }
	  };
	}

	function parseTypenames(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return {type: t, name: name};
	  });
	}

	function onRemove(typename) {
	  return function() {
	    var on = this.__on;
	    if (!on) return;
	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	      } else {
	        on[++i] = o;
	      }
	    }
	    if (++i) on.length = i;
	    else delete this.__on;
	  };
	}

	function onAdd(typename, value, capture) {
	  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
	  return function(d, i, group) {
	    var on = this.__on, o, listener = wrap(value, i, group);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, capture);
	    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
	    if (!on) this.__on = [o];
	    else on.push(o);
	  };
	}

	function selection_on(typename, value, capture) {
	  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

	  if (arguments.length < 2) {
	    var on = this.node().__on;
	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }

	  on = value ? onAdd : onRemove;
	  if (capture == null) capture = false;
	  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
	  return this;
	}

	function customEvent(event1, listener, that, args) {
	  var event0 = event$2;
	  event1.sourceEvent = event$2;
	  event$2 = event1;
	  try {
	    return listener.apply(that, args);
	  } finally {
	    event$2 = event0;
	  }
	}

	function dispatchEvent(node, type, params) {
	  var window = defaultView(node),
	      event = window.CustomEvent;

	  if (typeof event === "function") {
	    event = new event(type, params);
	  } else {
	    event = window.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
	    else event.initEvent(type, false, false);
	  }

	  node.dispatchEvent(event);
	}

	function dispatchConstant(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params);
	  };
	}

	function dispatchFunction(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params.apply(this, arguments));
	  };
	}

	function selection_dispatch(type, params) {
	  return this.each((typeof params === "function"
	      ? dispatchFunction
	      : dispatchConstant)(type, params));
	}

	var root$4 = [null];

	function Selection(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}

	function selection() {
	  return new Selection([[document.documentElement]], root$4);
	}

	Selection.prototype = selection.prototype = {
	  constructor: Selection,
	  select: selection_select,
	  selectAll: selection_selectAll,
	  filter: selection_filter,
	  data: selection_data,
	  enter: selection_enter,
	  exit: selection_exit,
	  merge: selection_merge,
	  order: selection_order,
	  sort: selection_sort,
	  call: selection_call,
	  nodes: selection_nodes,
	  node: selection_node,
	  size: selection_size,
	  empty: selection_empty,
	  each: selection_each,
	  attr: selection_attr,
	  style: selection_style,
	  property: selection_property,
	  classed: selection_classed,
	  text: selection_text,
	  html: selection_html,
	  raise: selection_raise,
	  lower: selection_lower,
	  append: selection_append,
	  insert: selection_insert,
	  remove: selection_remove,
	  clone: selection_clone,
	  datum: selection_datum,
	  on: selection_on,
	  dispatch: selection_dispatch
	};

	function select(selector) {
	  return typeof selector === "string"
	      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
	      : new Selection([[selector]], root$4);
	}

	function create$3(name) {
	  return select(creator(name).call(document.documentElement));
	}

	var nextId = 0;

	function local() {
	  return new Local;
	}

	function Local() {
	  this._ = "@" + (++nextId).toString(36);
	}

	Local.prototype = local.prototype = {
	  constructor: Local,
	  get: function(node) {
	    var id = this._;
	    while (!(id in node)) if (!(node = node.parentNode)) return;
	    return node[id];
	  },
	  set: function(node, value) {
	    return node[this._] = value;
	  },
	  remove: function(node) {
	    return this._ in node && delete node[this._];
	  },
	  toString: function() {
	    return this._;
	  }
	};

	function sourceEvent() {
	  var current = event$2, source;
	  while (source = current.sourceEvent) current = source;
	  return current;
	}

	function point$5(node, event) {
	  var svg = node.ownerSVGElement || node;

	  if (svg.createSVGPoint) {
	    var point = svg.createSVGPoint();
	    point.x = event.clientX, point.y = event.clientY;
	    point = point.matrixTransform(node.getScreenCTM().inverse());
	    return [point.x, point.y];
	  }

	  var rect = node.getBoundingClientRect();
	  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
	}

	function mouse(node) {
	  var event = sourceEvent();
	  if (event.changedTouches) event = event.changedTouches[0];
	  return point$5(node, event);
	}

	function selectAll(selector) {
	  return typeof selector === "string"
	      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
	      : new Selection([selector == null ? [] : selector], root$4);
	}

	function touch(node, touches, identifier) {
	  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

	  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
	    if ((touch = touches[i]).identifier === identifier) {
	      return point$5(node, touch);
	    }
	  }

	  return null;
	}

	function touches(node, touches) {
	  if (touches == null) touches = sourceEvent().touches;

	  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
	    points[i] = point$5(node, touches[i]);
	  }

	  return points;
	}



	var _d3Selection = /*#__PURE__*/Object.freeze({
		create: create$3,
		creator: creator,
		local: local,
		matcher: matcher$1,
		mouse: mouse,
		namespace: namespace,
		namespaces: namespaces,
		clientPoint: point$5,
		select: select,
		selectAll: selectAll,
		selection: selection,
		selector: selector$2,
		selectorAll: selectorAll,
		style: styleValue,
		touch: touch,
		touches: touches,
		window: defaultView,
		get event () { return event$2; },
		customEvent: customEvent
	});

	var noop$3 = {value: function() {}};

	function dispatch() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }
	  return new Dispatch(_);
	}

	function Dispatch(_) {
	  this._ = _;
	}

	function parseTypenames$1(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return {type: t, name: name};
	  });
	}

	Dispatch.prototype = dispatch.prototype = {
	  constructor: Dispatch,
	  on: function(typename, callback) {
	    var _ = this._,
	        T = parseTypenames$1(typename + "", _),
	        t,
	        i = -1,
	        n = T.length;

	    // If no callback was specified, return the callback of the given type and name.
	    if (arguments.length < 2) {
	      while (++i < n) if ((t = (typename = T[i]).type) && (t = get$6(_[t], typename.name))) return t;
	      return;
	    }

	    // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.
	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set$5(_[t], typename.name, callback);
	      else if (callback == null) for (t in _) _[t] = set$5(_[t], typename.name, null);
	    }

	    return this;
	  },
	  copy: function() {
	    var copy = {}, _ = this._;
	    for (var t in _) copy[t] = _[t].slice();
	    return new Dispatch(copy);
	  },
	  call: function(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  },
	  apply: function(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  }
	};

	function get$6(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}

	function set$5(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop$3, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }
	  if (callback != null) type.push({name: name, value: callback});
	  return type;
	}

	var frame = 0, // is an animation frame pending?
	    timeout = 0, // is a timeout pending?
	    interval$1 = 0, // are any timers active?
	    pokeDelay = 1000, // how frequently we check for clock skew
	    taskHead,
	    taskTail,
	    clockLast = 0,
	    clockNow = 0,
	    clockSkew = 0,
	    clock = typeof performance === "object" && performance.now ? performance : Date,
	    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

	function now$2() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}

	function clearNow() {
	  clockNow = 0;
	}

	function Timer() {
	  this._call =
	  this._time =
	  this._next = null;
	}

	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now$2() : +time) + (delay == null ? 0 : +delay);
	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;
	      else taskHead = this;
	      taskTail = this;
	    }
	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};

	function timer(callback, delay, time) {
	  var t = new Timer;
	  t.restart(callback, delay, time);
	  return t;
	}

	function timerFlush() {
	  now$2(); // Get the current time, if not already set.
	  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	  var t = taskHead, e;
	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	    t = t._next;
	  }
	  --frame;
	}

	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout = 0;
	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}

	function poke() {
	  var now = clock.now(), delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}

	function nap() {
	  var t0, t1 = taskHead, t2, time = Infinity;
	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }
	  taskTail = t0;
	  sleep(time);
	}

	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.
	  if (timeout) timeout = clearTimeout(timeout);
	  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
	  if (delay > 24) {
	    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
	    if (interval$1) interval$1 = clearInterval(interval$1);
	  } else {
	    if (!interval$1) clockLast = clock.now(), interval$1 = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}

	function timeout$1(callback, delay, time) {
	  var t = new Timer;
	  delay = delay == null ? 0 : +delay;
	  t.restart(function(elapsed) {
	    t.stop();
	    callback(elapsed + delay);
	  }, delay, time);
	  return t;
	}

	var emptyOn = dispatch("start", "end", "interrupt");
	var emptyTween = [];

	var CREATED = 0;
	var SCHEDULED = 1;
	var STARTING = 2;
	var STARTED = 3;
	var RUNNING = 4;
	var ENDING = 5;
	var ENDED = 6;

	function schedule(node, name, id, index, group, timing) {
	  var schedules = node.__transition;
	  if (!schedules) node.__transition = {};
	  else if (id in schedules) return;
	  create$4(node, id, {
	    name: name,
	    index: index, // For context during callback.
	    group: group, // For context during callback.
	    on: emptyOn,
	    tween: emptyTween,
	    time: timing.time,
	    delay: timing.delay,
	    duration: timing.duration,
	    ease: timing.ease,
	    timer: null,
	    state: CREATED
	  });
	}

	function init(node, id) {
	  var schedule = get$7(node, id);
	  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
	  return schedule;
	}

	function set$6(node, id) {
	  var schedule = get$7(node, id);
	  if (schedule.state > STARTING) throw new Error("too late; already started");
	  return schedule;
	}

	function get$7(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
	  return schedule;
	}

	function create$4(node, id, self) {
	  var schedules = node.__transition,
	      tween;

	  // Initialize the self timer when the transition is created.
	  // Note the actual delay is not known until the first callback!
	  schedules[id] = self;
	  self.timer = timer(schedule, 0, self.time);

	  function schedule(elapsed) {
	    self.state = SCHEDULED;
	    self.timer.restart(start, self.delay, self.time);

	    // If the elapsed delay is less than our first sleep, start immediately.
	    if (self.delay <= elapsed) start(elapsed - self.delay);
	  }

	  function start(elapsed) {
	    var i, j, n, o;

	    // If the state is not SCHEDULED, then we previously errored on start.
	    if (self.state !== SCHEDULED) return stop();

	    for (i in schedules) {
	      o = schedules[i];
	      if (o.name !== self.name) continue;

	      // While this element already has a starting transition during this frame,
	      // defer starting an interrupting transition until that transition has a
	      // chance to tick (and possibly end); see d3/d3-transition#54!
	      if (o.state === STARTED) return timeout$1(start);

	      // Interrupt the active transition, if any.
	      // Dispatch the interrupt event.
	      if (o.state === RUNNING) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("interrupt", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      }

	      // Cancel any pre-empted transitions. No interrupt event is dispatched
	      // because the cancelled transitions never started. Note that this also
	      // removes this transition from the pending list!
	      else if (+i < id) {
	        o.state = ENDED;
	        o.timer.stop();
	        delete schedules[i];
	      }
	    }

	    // Defer the first tick to end of the current frame; see d3/d3#1576.
	    // Note the transition may be canceled after start and before the first tick!
	    // Note this must be scheduled before the start event; see d3/d3-transition#16!
	    // Assuming this is successful, subsequent callbacks go straight to tick.
	    timeout$1(function() {
	      if (self.state === STARTED) {
	        self.state = RUNNING;
	        self.timer.restart(tick, self.delay, self.time);
	        tick(elapsed);
	      }
	    });

	    // Dispatch the start event.
	    // Note this must be done before the tween are initialized.
	    self.state = STARTING;
	    self.on.call("start", node, node.__data__, self.index, self.group);
	    if (self.state !== STARTING) return; // interrupted
	    self.state = STARTED;

	    // Initialize the tween, deleting null tween.
	    tween = new Array(n = self.tween.length);
	    for (i = 0, j = -1; i < n; ++i) {
	      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
	        tween[++j] = o;
	      }
	    }
	    tween.length = j + 1;
	  }

	  function tick(elapsed) {
	    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
	        i = -1,
	        n = tween.length;

	    while (++i < n) {
	      tween[i].call(null, t);
	    }

	    // Dispatch the end event.
	    if (self.state === ENDING) {
	      self.on.call("end", node, node.__data__, self.index, self.group);
	      stop();
	    }
	  }

	  function stop() {
	    self.state = ENDED;
	    self.timer.stop();
	    delete schedules[id];
	    for (var i in schedules) return; // eslint-disable-line no-unused-vars
	    delete node.__transition;
	  }
	}

	function interrupt(node, name) {
	  var schedules = node.__transition,
	      schedule$$1,
	      active,
	      empty = true,
	      i;

	  if (!schedules) return;

	  name = name == null ? null : name + "";

	  for (i in schedules) {
	    if ((schedule$$1 = schedules[i]).name !== name) { empty = false; continue; }
	    active = schedule$$1.state > STARTING && schedule$$1.state < ENDING;
	    schedule$$1.state = ENDED;
	    schedule$$1.timer.stop();
	    if (active) schedule$$1.on.call("interrupt", node, node.__data__, schedule$$1.index, schedule$$1.group);
	    delete schedules[i];
	  }

	  if (empty) delete node.__transition;
	}

	function selection_interrupt(name) {
	  return this.each(function() {
	    interrupt(this, name);
	  });
	}

	function tweenRemove(id, name) {
	  var tween0, tween1;
	  return function() {
	    var schedule$$1 = set$6(this, id),
	        tween = schedule$$1.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = tween0 = tween;
	      for (var i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1 = tween1.slice();
	          tween1.splice(i, 1);
	          break;
	        }
	      }
	    }

	    schedule$$1.tween = tween1;
	  };
	}

	function tweenFunction(id, name, value) {
	  var tween0, tween1;
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    var schedule$$1 = set$6(this, id),
	        tween = schedule$$1.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = (tween0 = tween).slice();
	      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1[i] = t;
	          break;
	        }
	      }
	      if (i === n) tween1.push(t);
	    }

	    schedule$$1.tween = tween1;
	  };
	}

	function transition_tween(name, value) {
	  var id = this._id;

	  name += "";

	  if (arguments.length < 2) {
	    var tween = get$7(this.node(), id).tween;
	    for (var i = 0, n = tween.length, t; i < n; ++i) {
	      if ((t = tween[i]).name === name) {
	        return t.value;
	      }
	    }
	    return null;
	  }

	  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
	}

	function tweenValue(transition, name, value) {
	  var id = transition._id;

	  transition.each(function() {
	    var schedule$$1 = set$6(this, id);
	    (schedule$$1.value || (schedule$$1.value = {}))[name] = value.apply(this, arguments);
	  });

	  return function(node) {
	    return get$7(node, id).value[name];
	  };
	}

	function interpolate(a, b) {
	  var c;
	  return (typeof b === "number" ? interpolateNumber
	      : b instanceof color ? interpolateRgb
	      : (c = color(b)) ? (b = c, interpolateRgb)
	      : interpolateString)(a, b);
	}

	function attrRemove$1(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS$1(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant$1(name, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function attrConstantNS$1(fullname, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function attrFunction$1(name, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttribute(name);
	    value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	function attrFunctionNS$1(fullname, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
	    value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	function transition_attr(name, value) {
	  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate;
	  return this.attrTween(name, typeof value === "function"
	      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
	      : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
	      : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value + ""));
	}

	function attrTweenNS(fullname, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttributeNS(fullname.space, fullname.local, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	function attrTween(name, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttribute(name, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	function transition_attrTween(name, value) {
	  var key = "attr." + name;
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  var fullname = namespace(name);
	  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
	}

	function delayFunction(id, value) {
	  return function() {
	    init(this, id).delay = +value.apply(this, arguments);
	  };
	}

	function delayConstant(id, value) {
	  return value = +value, function() {
	    init(this, id).delay = value;
	  };
	}

	function transition_delay(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? delayFunction
	          : delayConstant)(id, value))
	      : get$7(this.node(), id).delay;
	}

	function durationFunction(id, value) {
	  return function() {
	    set$6(this, id).duration = +value.apply(this, arguments);
	  };
	}

	function durationConstant(id, value) {
	  return value = +value, function() {
	    set$6(this, id).duration = value;
	  };
	}

	function transition_duration(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? durationFunction
	          : durationConstant)(id, value))
	      : get$7(this.node(), id).duration;
	}

	function easeConstant(id, value) {
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    set$6(this, id).ease = value;
	  };
	}

	function transition_ease(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each(easeConstant(id, value))
	      : get$7(this.node(), id).ease;
	}

	function transition_filter(match) {
	  if (typeof match !== "function") match = matcher$1(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Transition$1(subgroups, this._parents, this._name, this._id);
	}

	function transition_merge(transition$$1) {
	  if (transition$$1._id !== this._id) throw new Error;

	  for (var groups0 = this._groups, groups1 = transition$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Transition$1(merges, this._parents, this._name, this._id);
	}

	function start(name) {
	  return (name + "").trim().split(/^|\s+/).every(function(t) {
	    var i = t.indexOf(".");
	    if (i >= 0) t = t.slice(0, i);
	    return !t || t === "start";
	  });
	}

	function onFunction(id, name, listener) {
	  var on0, on1, sit = start(name) ? init : set$6;
	  return function() {
	    var schedule$$1 = sit(this, id),
	        on = schedule$$1.on;

	    // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and we’re done!
	    // Otherwise, copy-on-write.
	    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

	    schedule$$1.on = on1;
	  };
	}

	function transition_on(name, listener) {
	  var id = this._id;

	  return arguments.length < 2
	      ? get$7(this.node(), id).on.on(name)
	      : this.each(onFunction(id, name, listener));
	}

	function removeFunction(id) {
	  return function() {
	    var parent = this.parentNode;
	    for (var i in this.__transition) if (+i !== id) return;
	    if (parent) parent.removeChild(this);
	  };
	}

	function transition_remove() {
	  return this.on("end.remove", removeFunction(this._id));
	}

	function transition_select(select$$1) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select$$1 !== "function") select$$1 = selector$2(select$$1);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	        schedule(subgroup[i], name, id, i, subgroup, get$7(node, id));
	      }
	    }
	  }

	  return new Transition$1(subgroups, this._parents, name, id);
	}

	function transition_selectAll(select$$1) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select$$1 !== "function") select$$1 = selectorAll(select$$1);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get$7(node, id), k = 0, l = children.length; k < l; ++k) {
	          if (child = children[k]) {
	            schedule(child, name, id, k, children, inherit);
	          }
	        }
	        subgroups.push(children);
	        parents.push(node);
	      }
	    }
	  }

	  return new Transition$1(subgroups, parents, name, id);
	}

	var Selection$1 = selection.prototype.constructor;

	function transition_selection() {
	  return new Selection$1(this._groups, this._parents);
	}

	function styleRemove$1(name, interpolate$$1) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0 = styleValue(this, name),
	        value1 = (this.style.removeProperty(name), styleValue(this, name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	function styleRemoveEnd(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant$1(name, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = styleValue(this, name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function styleFunction$1(name, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0 = styleValue(this, name),
	        value1 = value(this);
	    if (value1 == null) value1 = (this.style.removeProperty(name), styleValue(this, name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	function transition_style(name, value, priority) {
	  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
	  return value == null ? this
	          .styleTween(name, styleRemove$1(name, i))
	          .on("end.style." + name, styleRemoveEnd(name))
	      : this.styleTween(name, typeof value === "function"
	          ? styleFunction$1(name, i, tweenValue(this, "style." + name, value))
	          : styleConstant$1(name, i, value + ""), priority);
	}

	function styleTween(name, value, priority) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.style.setProperty(name, i(t), priority);
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	function transition_styleTween(name, value, priority) {
	  var key = "style." + (name += "");
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
	}

	function textConstant$1(value) {
	  return function() {
	    this.textContent = value;
	  };
	}

	function textFunction$1(value) {
	  return function() {
	    var value1 = value(this);
	    this.textContent = value1 == null ? "" : value1;
	  };
	}

	function transition_text(value) {
	  return this.tween("text", typeof value === "function"
	      ? textFunction$1(tweenValue(this, "text", value))
	      : textConstant$1(value == null ? "" : value + ""));
	}

	function transition_transition() {
	  var name = this._name,
	      id0 = this._id,
	      id1 = newId();

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        var inherit = get$7(node, id0);
	        schedule(node, name, id1, i, group, {
	          time: inherit.time + inherit.delay + inherit.duration,
	          delay: 0,
	          duration: inherit.duration,
	          ease: inherit.ease
	        });
	      }
	    }
	  }

	  return new Transition$1(groups, this._parents, name, id1);
	}

	var id$1 = 0;

	function Transition$1(groups, parents, name, id) {
	  this._groups = groups;
	  this._parents = parents;
	  this._name = name;
	  this._id = id;
	}

	function transition(name) {
	  return selection().transition(name);
	}

	function newId() {
	  return ++id$1;
	}

	var selection_prototype = selection.prototype;

	Transition$1.prototype = transition.prototype = {
	  constructor: Transition$1,
	  select: transition_select,
	  selectAll: transition_selectAll,
	  filter: transition_filter,
	  merge: transition_merge,
	  selection: transition_selection,
	  transition: transition_transition,
	  call: selection_prototype.call,
	  nodes: selection_prototype.nodes,
	  node: selection_prototype.node,
	  size: selection_prototype.size,
	  empty: selection_prototype.empty,
	  each: selection_prototype.each,
	  on: transition_on,
	  attr: transition_attr,
	  attrTween: transition_attrTween,
	  style: transition_style,
	  styleTween: transition_styleTween,
	  text: transition_text,
	  remove: transition_remove,
	  tween: transition_tween,
	  delay: transition_delay,
	  duration: transition_duration,
	  ease: transition_ease
	};

	var defaultTiming = {
	  time: null, // Set on use.
	  delay: 0,
	  duration: 250,
	  ease: cubicInOut
	};

	function inherit(node, id) {
	  var timing;
	  while (!(timing = node.__transition) || !(timing = timing[id])) {
	    if (!(node = node.parentNode)) {
	      return defaultTiming.time = now$2(), defaultTiming;
	    }
	  }
	  return timing;
	}

	function selection_transition(name) {
	  var id,
	      timing;

	  if (name instanceof Transition$1) {
	    id = name._id, name = name._name;
	  } else {
	    id = newId(), (timing = defaultTiming).time = now$2(), name = name == null ? null : name + "";
	  }

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        schedule(node, name, id, i, group, timing || inherit(node, id));
	      }
	    }
	  }

	  return new Transition$1(groups, this._parents, name, id);
	}

	selection.prototype.interrupt = selection_interrupt;
	selection.prototype.transition = selection_transition;

	var slice$3 = Array.prototype.slice;

	function identity$5(x) {
	  return x;
	}

	var top = 1,
	    right = 2,
	    bottom = 3,
	    left = 4,
	    epsilon$2 = 1e-6;

	function translateX(x) {
	  return "translate(" + (x + 0.5) + ",0)";
	}

	function translateY(y) {
	  return "translate(0," + (y + 0.5) + ")";
	}

	function number$3(scale) {
	  return function(d) {
	    return +scale(d);
	  };
	}

	function center(scale) {
	  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.
	  if (scale.round()) offset = Math.round(offset);
	  return function(d) {
	    return +scale(d) + offset;
	  };
	}

	function entering() {
	  return !this.__axis;
	}

	function axis(orient, scale) {
	  var tickArguments = [],
	      tickValues = null,
	      tickFormat = null,
	      tickSizeInner = 6,
	      tickSizeOuter = 6,
	      tickPadding = 3,
	      k = orient === top || orient === left ? -1 : 1,
	      x = orient === left || orient === right ? "x" : "y",
	      transform = orient === top || orient === bottom ? translateX : translateY;

	  function axis(context) {
	    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
	        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5) : tickFormat,
	        spacing = Math.max(tickSizeInner, 0) + tickPadding,
	        range = scale.range(),
	        range0 = +range[0] + 0.5,
	        range1 = +range[range.length - 1] + 0.5,
	        position = (scale.bandwidth ? center : number$3)(scale.copy()),
	        selection = context.selection ? context.selection() : context,
	        path = selection.selectAll(".domain").data([null]),
	        tick = selection.selectAll(".tick").data(values, scale).order(),
	        tickExit = tick.exit(),
	        tickEnter = tick.enter().append("g").attr("class", "tick"),
	        line = tick.select("line"),
	        text = tick.select("text");

	    path = path.merge(path.enter().insert("path", ".tick")
	        .attr("class", "domain")
	        .attr("stroke", "#000"));

	    tick = tick.merge(tickEnter);

	    line = line.merge(tickEnter.append("line")
	        .attr("stroke", "#000")
	        .attr(x + "2", k * tickSizeInner));

	    text = text.merge(tickEnter.append("text")
	        .attr("fill", "#000")
	        .attr(x, k * spacing)
	        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

	    if (context !== selection) {
	      path = path.transition(context);
	      tick = tick.transition(context);
	      line = line.transition(context);
	      text = text.transition(context);

	      tickExit = tickExit.transition(context)
	          .attr("opacity", epsilon$2)
	          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });

	      tickEnter
	          .attr("opacity", epsilon$2)
	          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
	    }

	    tickExit.remove();

	    path
	        .attr("d", orient === left || orient == right
	            ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
	            : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);

	    tick
	        .attr("opacity", 1)
	        .attr("transform", function(d) { return transform(position(d)); });

	    line
	        .attr(x + "2", k * tickSizeInner);

	    text
	        .attr(x, k * spacing)
	        .text(format);

	    selection.filter(entering)
	        .attr("fill", "none")
	        .attr("font-size", 10)
	        .attr("font-family", "sans-serif")
	        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

	    selection
	        .each(function() { this.__axis = position; });
	  }

	  axis.scale = function(_) {
	    return arguments.length ? (scale = _, axis) : scale;
	  };

	  axis.ticks = function() {
	    return tickArguments = slice$3.call(arguments), axis;
	  };

	  axis.tickArguments = function(_) {
	    return arguments.length ? (tickArguments = _ == null ? [] : slice$3.call(_), axis) : tickArguments.slice();
	  };

	  axis.tickValues = function(_) {
	    return arguments.length ? (tickValues = _ == null ? null : slice$3.call(_), axis) : tickValues && tickValues.slice();
	  };

	  axis.tickFormat = function(_) {
	    return arguments.length ? (tickFormat = _, axis) : tickFormat;
	  };

	  axis.tickSize = function(_) {
	    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
	  };

	  axis.tickSizeInner = function(_) {
	    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
	  };

	  axis.tickSizeOuter = function(_) {
	    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
	  };

	  axis.tickPadding = function(_) {
	    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
	  };

	  return axis;
	}

	function axisTop(scale) {
	  return axis(top, scale);
	}

	function axisRight(scale) {
	  return axis(right, scale);
	}

	function axisBottom(scale) {
	  return axis(bottom, scale);
	}

	function axisLeft(scale) {
	  return axis(left, scale);
	}



	var _d3Axis = /*#__PURE__*/Object.freeze({
		axisTop: axisTop,
		axisRight: axisRight,
		axisBottom: axisBottom,
		axisLeft: axisLeft
	});

	var YAxis_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();





	var _underscore2 = _interopRequireDefault(underscore);



	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _reactDom2 = _interopRequireDefault(reactDom);



	var _propTypes2 = _interopRequireDefault(propTypes);













	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	// eslint-disable-line

	var MARGIN = 0;

	var defaultStyle = {
	    labels: {
	        labelColor: "#8B7E7E", // Default label color
	        labelWeight: 100,
	        labelSize: 11
	    },
	    axis: {
	        axisColor: "#C0C0C0"
	    }
	};

	/**
	 * The `YAxis` widget displays a vertical axis to the left or right
	 * of the charts. A `YAxis` always appears within a `ChartRow`, from
	 * which it gets its height and positioning. You can have more than
	 * one axis per row. You do control how wide it is.
	 *
	 * Here's a simple YAxis example:
	 *
	 * ```js
	 * <YAxis
	 *   id="price-axis"
	 *   label="Price (USD)"
	 *   min={0} max={100}
	 *   width="60"
	 *   type="linear"
	 *   format="$,.2f"
	 * />
	 * ```
	 *
	 * Visually you can control the axis `label`, its size via the `width`
	 * prop, its `format`, and `type` of scale (linear). You can quicky turn
	 * it on and off with the `visible` prop.
	 *
	 * Each axis also defines a scale through a `min` and `max` prop. Chart
	 * then refer to the axis by by citing the axis `id` in their `axis`
	 * prop. Those charts will then use the axis scale for their y-scale.
	 * This is what ties them together. Many charts can use the same axis,
	 * or not.
	 *
	 * Here is an example of two line charts that each have their own axis:
	 *
	 * ```js
	 * <ChartContainer timeRange={audSeries.timerange()}>
	 *     <ChartRow height="200">
	 *         <YAxis id="aud" label="AUD" min={0.5} max={1.5} width="60" format="$,.2f"/>
	 *         <Charts>
	 *             <LineChart axis="aud" series={audSeries} style={audStyle}/>
	 *             <LineChart axis="euro" series={euroSeries} style={euroStyle}/>
	 *         </Charts>
	 *         <YAxis id="euro" label="Euro" min={0.5} max={1.5} width="80" format="$,.2f"/>
	 *     </ChartRow>
	 * </ChartContainer>
	 * ```
	 *
	 *  Note that there are two `<YAxis>` components defined here, one before
	 *  the `<Charts>` block and one after. This defines that the first axis will
	 *  appear to the left of the charts and the second will appear right of the charts.
	 *  Each of the line charts uses its `axis` prop to identify the axis ("aud" or "euro")
	 *  it will use for its vertical scale.
	 */

	var YAxis = (function(_React$Component) {
	    _inherits(YAxis, _React$Component);

	    function YAxis() {
	        _classCallCheck(this, YAxis);

	        return _possibleConstructorReturn(
	            this,
	            (YAxis.__proto__ || Object.getPrototypeOf(YAxis)).apply(this, arguments)
	        );
	    }

	    _createClass(YAxis, [
	        {
	            key: "componentDidMount",
	            value: function componentDidMount() {
	                this.renderAxis(
	                    this.props.align,
	                    this.props.scale,
	                    +this.props.width,
	                    this.props.absolute,
	                    this.props.format
	                );
	            }
	        },
	        {
	            key: "componentWillReceiveProps",
	            value: function componentWillReceiveProps(nextProps) {
	                var scale = nextProps.scale;
	                var align = nextProps.align;
	                var width = nextProps.width;
	                var absolute = nextProps.absolute;
	                var fmt = nextProps.format;
	                var type = nextProps.type;

	                if (
	                    (0, util$2.scaleAsString)(this.props.scale) !==
	                        (0, util$2.scaleAsString)(scale) ||
	                    this.props.type !== nextProps.type
	                ) {
	                    this.updateAxis(align, scale, width, absolute, type, fmt);
	                }
	            }
	        },
	        {
	            key: "shouldComponentUpdate",
	            value: function shouldComponentUpdate() {
	                // eslint-disable-line
	                return false;
	            }
	        },
	        {
	            key: "yformat",
	            value: function yformat(fmt) {
	                if (_underscore2.default.isString(fmt)) {
	                    return (0, _d3Format.format)(fmt);
	                } else if (_underscore2.default.isFunction(fmt)) {
	                    return fmt;
	                } else {
	                    return (0, _d3Format.format)("");
	                }
	            }
	        },
	        {
	            key: "updateAxis",
	            value: function updateAxis(align, scale, width, absolute, type, fmt) {
	                var yformat = this.yformat(fmt);
	                var axis = align === "left" ? _d3Axis.axisLeft : _d3Axis.axisRight;

	                var axisStyle = (0, _merge2.default)(
	                    true,
	                    defaultStyle.axis,
	                    this.props.style.axis ? this.props.style.axis : {}
	                );
	                var axisColor = axisStyle.axisColor;

	                //
	                // Make an axis generator
	                //

	                var axisGenerator = void 0;
	                if (type === "linear" || type === "power") {
	                    if (this.props.height <= 200) {
	                        axisGenerator = axis(scale)
	                            .ticks(5)
	                            .tickFormat(function(d) {
	                                if (absolute) {
	                                    return yformat(Math.abs(d));
	                                }
	                                return yformat(d);
	                            });
	                    } else {
	                        axisGenerator = axis(scale).tickFormat(function(d) {
	                            if (absolute) {
	                                return yformat(Math.abs(d));
	                            }
	                            return yformat(d);
	                        });
	                    }
	                } else if (type === "log") {
	                    if (this.props.min === 0) {
	                        throw Error("In a log scale, minimum value can't be 0");
	                    }
	                    axisGenerator = axis(scale).ticks(10, ".2s");
	                }

	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this))
	                    .select(".yaxis")
	                    .transition()
	                    .duration(this.props.transition)
	                    .ease(d3Ease.easeSinOut)
	                    .call(axisGenerator);

	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this)) // eslint-disable-line
	                    .select("g")
	                    .selectAll(".tick")
	                    .select("text")
	                    .style("fill", axisColor)
	                    .style("stroke", "none");

	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this)) // eslint-disable-line
	                    .select("g")
	                    .selectAll(".tick")
	                    .select("line")
	                    .style("stroke", axisColor);
	            }
	        },
	        {
	            key: "renderAxis",
	            value: function renderAxis(align, scale, width, absolute, fmt) {
	                var yformat = this.yformat(fmt);
	                var axisGenerator = void 0;
	                var axis = align === "left" ? _d3Axis.axisLeft : _d3Axis.axisRight;
	                if (this.props.type === "linear" || this.props.type === "power") {
	                    if (this.props.tickCount > 0) {
	                        var stepSize =
	                            (this.props.max - this.props.min) / (this.props.tickCount - 1);
	                        axisGenerator = axis(scale)
	                            .tickValues(
	                                (0, d3Array.range)(
	                                    this.props.min,
	                                    this.props.max + this.props.max / 10000,
	                                    stepSize
	                                )
	                            )
	                            .tickFormat(function(d) {
	                                if (absolute) {
	                                    return yformat(Math.abs(d));
	                                }
	                                return yformat(d);
	                            })
	                            .tickSizeOuter(0);
	                    } else {
	                        if (this.props.height <= 200) {
	                            axisGenerator = axis(scale)
	                                .ticks(4)
	                                .tickFormat(function(d) {
	                                    if (absolute) {
	                                        return yformat(Math.abs(d));
	                                    }
	                                    return yformat(d);
	                                })
	                                .tickSizeOuter(0);
	                        } else {
	                            axisGenerator = axis(scale)
	                                .tickFormat(function(d) {
	                                    if (absolute) {
	                                        return yformat(Math.abs(d));
	                                    }
	                                    return yformat(d);
	                                })
	                                .tickSizeOuter(0);
	                        }
	                    }
	                } else if (this.props.type === "log") {
	                    if (this.props.min === 0) {
	                        throw Error("In a log scale, minimum value can't be 0");
	                    }
	                    axisGenerator = axis()
	                        .scale(scale)
	                        .ticks(10, ".2s")
	                        .tickSizeOuter(0);
	                }

	                // Remove the old axis from under this DOM node
	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this))
	                    .selectAll("*")
	                    .remove(); // eslint-disable-line
	                // Add the new axis
	                var x = align === "left" ? width - MARGIN : 0;
	                var labelOffset =
	                    align === "left" ? this.props.labelOffset - 50 : 40 + this.props.labelOffset;

	                //
	                // Style
	                //

	                var labelStyle = (0, _merge2.default)(
	                    true,
	                    defaultStyle.labels,
	                    this.props.style.labels ? this.props.style.labels : {}
	                );
	                var axisStyle = (0, _merge2.default)(
	                    true,
	                    defaultStyle.axis,
	                    this.props.style.axis ? this.props.style.axis : {}
	                );
	                var axisColor = axisStyle.axisColor;
	                var labelColor = labelStyle.labelColor,
	                    labelWeight = labelStyle.labelWeight,
	                    labelSize = labelStyle.labelSize;

	                this.axis = (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this)) // eslint-disable-line
	                    .append("g")
	                    .attr("transform", "translate(" + x + ",0)")
	                    .style("stroke", "none")
	                    .attr("class", "yaxis")
	                    .style("fill", labelColor)
	                    .style("font-weight", labelWeight)
	                    .style("font-size", labelSize)
	                    .call(axisGenerator)
	                    .append("text")
	                    .text(this.props.label)
	                    .attr("transform", "rotate(-90)")
	                    .attr("y", labelOffset)
	                    .attr("dy", ".71em")
	                    .attr("text-anchor", "end")
	                    .style("fill", this.props.style.labelColor)
	                    .style(
	                        "font-family",
	                        this.props.style.labelFont || '"Goudy Bookletter 1911", sans-serif"'
	                    )
	                    .style("font-weight", this.props.style.labelWeight || 100)
	                    .style(
	                        "font-size",
	                        this.props.style.labelSize ? this.props.style.width + "px" : "12px"
	                    );

	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this)) // eslint-disable-line
	                    .select("g")
	                    .selectAll(".tick")
	                    .select("text")
	                    .style("fill", axisColor)
	                    .style("stroke", "none");

	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this)) // eslint-disable-line
	                    .select("g")
	                    .selectAll(".tick")
	                    .select("line")
	                    .style("stroke", axisColor);

	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this)) // eslint-disable-line
	                    .select("g")
	                    .select("path")
	                    .style("fill", "none")
	                    .style("stroke", axisColor);
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                // eslint-disable-line
	                return _react2.default.createElement("g", null);
	            }
	        }
	    ]);

	    return YAxis;
	})(_react2.default.Component);

	exports.default = YAxis;

	YAxis.defaultProps = {
	    id: "yaxis", // id referred to by the chart
	    align: "left", // left or right of the chart
	    min: 0, // range
	    max: 1,
	    type: "linear", // linear, log, or power
	    absolute: false, // Display scale always positive
	    format: ".2s", // Format string for d3.format
	    labelOffset: 0, // Offset the label position
	    transition: 100, // Axis transition time
	    width: 80,
	    style: defaultStyle
	};

	YAxis.propTypes = {
	    /**
	     * A name for the axis which can be used by a chart to reference the axis.
	     * This is used by the ChartRow to match charts to this axis.
	     */
	    id: _propTypes2.default.string.isRequired, // eslint-disable-line

	    /**
	     * Show or hide this axis
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * The label to be displayed alongside the axis.
	     */
	    label: _propTypes2.default.string,

	    /**
	     * The scale type: linear, power, or log.
	     */
	    type: _propTypes2.default.oneOf(["linear", "power", "log"]),

	    /**
	     * Minium value, which combined with "max", define the scale of the axis.
	     */
	    min: _propTypes2.default.number.isRequired, // eslint-disable-line

	    /**
	     * Maxium value, which combined with "min,"" define the scale of the axis.
	     */
	    max: _propTypes2.default.number.isRequired, // eslint-disable-line

	    /**
	     * Render all ticks on the axis as positive values.
	     */
	    absolute: _propTypes2.default.bool, // eslint-disable-line

	    /**
	     * Object specifying the available parameters by which the axis can be
	     * styled. The object can contain: "labels" and "axis". Each of these
	     * is an inline CSS style applied to the tick labels and axis lines
	     * respectively.
	     *
	     * In addition the axis label itself can be styled with: "labelColor",
	     * "labelFont", "labelWidth" and "labelSize".
	     */
	    style: _propTypes2.default.shape({
	        labels: _propTypes2.default.object, // eslint-disable-line
	        axis: _propTypes2.default.object, // eslint-disable-line
	        labelColor: _propTypes2.default.string,
	        labelFont: _propTypes2.default.string,
	        labelWeight: _propTypes2.default.string,
	        labelSize: _propTypes2.default.string,
	        width: _propTypes2.default.number
	    }),

	    /**
	     * The transition time for moving from one scale to another
	     */
	    transition: _propTypes2.default.number,

	    /**
	     * The width of the axis
	     */
	    width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

	    /**
	     * Offset the axis label from its default position. This allows you to
	     * fine tune the label location, which may be necessary depending on the
	     * scale and how much room the tick labels take up. Maybe positive or
	     * negative.
	     */
	    labelOffset: _propTypes2.default.number,

	    /**
	     * If a string, the d3.format for the axis labels (e.g. `format=\"$,.2f\"`).
	     * If a function, that function will be called with each tick value and
	     * should generate a formatted string for that value to be used as the label
	     * for that tick (e.g. `function (n) { return Number(n).toFixed(2) }`).
	     */
	    format: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

	    /**
	     * If the chart should be rendered to with the axis on the left or right.
	     * If you are using the axis in a ChartRow, you do not need to provide this.
	     */
	    align: _propTypes2.default.string,

	    /**
	     * [Internal] The scale supplied by the ChartRow
	     */
	    scale: _propTypes2.default.func,

	    /**
	     * [Internal] The height supplied by the surrounding ChartContainer
	     */
	    height: _propTypes2.default.number,

	    /**
	     * The number of ticks
	     */
	    tickCount: _propTypes2.default.number
	};
	});

	unwrapExports(YAxis_1);

	var interpolators = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})(); /**
	 *  Copyright (c) 2015, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */



	var _underscore2 = _interopRequireDefault(underscore);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	var ScaleInterpolator = (function() {
	    function ScaleInterpolator(transition, ease, observer) {
	        _classCallCheck(this, ScaleInterpolator);

	        this.id = _underscore2.default.uniqueId("scaler");
	        this.ease = ease;
	        this.transitionTime = transition;
	        this.observer = observer;

	        this.sourceScale = null;
	        this.targetScale = null;
	        this.cachedScaler = null;
	        this.cacheKey = null;
	    }

	    _createClass(ScaleInterpolator, [
	        {
	            key: "update",
	            value: function update() {
	                var _this = this;

	                var animationTime = 0;

	                if (!this.initialTimestamp) {
	                    this.initialTimestamp = window.performance.now();
	                } else {
	                    animationTime = window.performance.now() - this.initialTimestamp;
	                }

	                var animationPosition = this.transitionTime
	                    ? Math.min(animationTime / this.transitionTime, 1.0)
	                    : 1.0;

	                if (!this.targetScale) {
	                    return;
	                }

	                if (this.observer) {
	                    var func1 = this.sourceScale;
	                    var func2 = this.targetScale;
	                    var te = this.ease(animationPosition);
	                    var scaler = function scaler(x) {
	                        var a = func1(x);
	                        var b = func2(x);
	                        return a + (b - a) * te;
	                    };
	                    this.observer(scaler);
	                }

	                if (animationPosition < 1.0) {
	                    // keep animating
	                    setTimeout(function() {
	                        return _this.update();
	                    }, 20);
	                } else {
	                    // reset
	                    this.sourceScale = this.targetScale;
	                    this.targetScale = null;
	                    this.initialTimestamp = null;
	                }
	            }

	            /**
	             * A new (or initial) scale is set on the interpolator
	             */
	        },
	        {
	            key: "setScale",
	            value: function setScale(key, scale) {
	                var _this2 = this;

	                // Initial scale
	                if (!this.sourceScale) {
	                    this.sourceScale = scale;
	                    return;
	                }

	                //
	                //  If there was already a scale, and a new scale is set
	                // the this begins an animation across between the two
	                // scales, assuming a transition time is provided. To do
	                // this we set the new scale as the target and reset the
	                // t to 0. (if there's no transition, jump to t = 1)
	                //

	                if (key !== this.cacheKey) {
	                    this.targetScale = scale;
	                    this.cachedScaler = null;
	                    this.initialTimestamp = null;
	                    setTimeout(function() {
	                        return _this2.update();
	                    }, 0);
	                }

	                this.cacheKey = key;
	            }

	            /**
	             * Returns a scaler, which is a function that scales the value
	             * supplied to it. This return the scaler corresponding to the
	             * source scale. Note that if a target scale is defined and the
	             * interpolator is animating towards that target, the observer
	             * callback will be called with the transitional scaler that can
	             * be used to scale data to the intermediate state.
	             */
	        },
	        {
	            key: "scaler",
	            value: function scaler() {
	                var _this3 = this;

	                if (_underscore2.default.isNull(this.cachedScaler)) {
	                    this.cachedScaler = function(v) {
	                        return _this3.sourceScale(v);
	                    };
	                }
	                return this.cachedScaler;
	            }

	            /**
	             * Returns the d3 scale. It will return the target scale if present
	             * otherwise the source scale. Note: this is the d3 internal scale. To
	             * scale values, use the scaler.
	             */
	        },
	        {
	            key: "latestScale",
	            value: function latestScale() {
	                return this.targetScale ? this.targetScale : this.sourceScale;
	            }

	            /**
	             * Returns the transition, as set in the constructor
	             */
	        },
	        {
	            key: "transition",
	            value: function transition() {
	                return this.transitionTime;
	            }
	        }
	    ]);

	    return ScaleInterpolator;
	})();

	exports.default = ScaleInterpolator;
	});

	unwrapExports(interpolators);

	var ChartRow_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _underscore2 = _interopRequireDefault(underscore);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _react2 = _interopRequireDefault(react);







	var _Brush2 = _interopRequireDefault(Brush_1);



	var _MultiBrush2 = _interopRequireDefault(MultiBrush_1);



	var _Charts2 = _interopRequireDefault(Charts_1);



	var _TimeMarker2 = _interopRequireDefault(TimeMarker_1);



	var _YAxis2 = _interopRequireDefault(YAxis_1);



	var _interpolators2 = _interopRequireDefault(interpolators);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var AXIS_MARGIN = 5;

	function createScale(yaxis, type, min, max, y0, y1) {
	    var scale = void 0;
	    if (_underscore2.default.isUndefined(min) || _underscore2.default.isUndefined(max)) {
	        scale = null;
	    } else if (type === "linear") {
	        scale = (0, d3Scale.scaleLinear)()
	            .domain([min, max])
	            .range([y0, y1])
	            .nice();
	    } else if (type === "log") {
	        var base = yaxis.props.logBase || 10;
	        scale = (0, d3Scale.scaleLog)()
	            .base(base)
	            .domain([min, max])
	            .range([y0, y1]);
	    } else if (type === "power") {
	        var power = yaxis.props.powerExponent || 2;
	        scale = (0, d3Scale.scalePow)()
	            .exponent(power)
	            .domain([min, max])
	            .range([y0, y1]);
	    }
	    return scale;
	}

	/**
	 * A ChartRow is a container for a set of YAxis and multiple charts
	 * which are overlaid on each other in a central canvas.
	 *
	 * Here is an example where a single `<ChartRow>` is defined within
	 * the `<ChartContainer>`. Of course you can have any number of rows.
	 *
	 * For this row we specify the one prop `height` as 200 pixels high.
	 *
	 * Within the `<ChartRow>` we add:
	 *
	 * * `<YAxis>` elements for axes to the left of the chart
	 * * `<Chart>` block containing our central chart area
	 * * `<YAxis>` elements for our axes to the right of the charts
	 *
	 * ```
	 * <ChartContainer timeRange={audSeries.timerange()}>
	 *     <ChartRow height="200">
	 *         <YAxis />
	 *         <YAxis />
	 *         <Charts>
	 *             charts...
	 *        </Charts>
	 *         <YAxis />
	 *     </ChartRow>
	 * </ChartContainer>
	 * ```
	 */

	var ChartRow = (function(_React$Component) {
	    _inherits(ChartRow, _React$Component);

	    function ChartRow(props) {
	        _classCallCheck(this, ChartRow);

	        // id of clipping rectangle we will generate and use for each child
	        // chart. Lives in state to ensure just one clipping rectangle and
	        // id per chart row instance; we don't want a fresh id generated on
	        // each render.
	        var _this = _possibleConstructorReturn(
	            this,
	            (ChartRow.__proto__ || Object.getPrototypeOf(ChartRow)).call(this, props)
	        );

	        var clipId = _underscore2.default.uniqueId("clip_");
	        var clipPathURL = "url(#" + clipId + ")";
	        _this.state = {
	            clipId: clipId,
	            clipPathURL: clipPathURL
	        };
	        return _this;
	    }

	    _createClass(ChartRow, [
	        {
	            key: "componentWillMount",
	            value: function componentWillMount() {
	                var _this2 = this;

	                // Our chart scales are driven off a mapping between id of the axis
	                // and the scale that axis represents. Depending on the transition time,
	                // this scale will animate over time. The controller of this animation is
	                // the ScaleInterpolator. We create new Scale Interpolators here for each
	                // axis id.
	                this.scaleMap = {};

	                var innerHeight = +this.props.height - AXIS_MARGIN * 2;
	                var rangeTop = AXIS_MARGIN;
	                var rangeBottom = innerHeight - AXIS_MARGIN;
	                _react2.default.Children.forEach(this.props.children, function(child) {
	                    if (
	                        (child.type === _YAxis2.default ||
	                            _underscore2.default.has(child.props, "min")) &&
	                        _underscore2.default.has(child.props, "max")
	                    ) {
	                        var _child$props = child.props,
	                            id = _child$props.id,
	                            max = _child$props.max,
	                            min = _child$props.min,
	                            _child$props$transiti = _child$props.transition,
	                            transition =
	                                _child$props$transiti === undefined ? 0 : _child$props$transiti,
	                            _child$props$type = _child$props.type,
	                            type = _child$props$type === undefined ? "linear" : _child$props$type;

	                        var initialScale = createScale(
	                            child,
	                            type,
	                            min,
	                            max,
	                            rangeBottom,
	                            rangeTop
	                        );
	                        _this2.scaleMap[id] = new _interpolators2.default(
	                            transition,
	                            d3Ease.easeSinOut,
	                            function(s) {
	                                var yAxisScalerMap = _this2.state.yAxisScalerMap;
	                                yAxisScalerMap[id] = s;
	                                _this2.setState(yAxisScalerMap);
	                            }
	                        );
	                        var cacheKey =
	                            type + "-" + min + "-" + max + "-" + rangeBottom + "-" + rangeTop;
	                        _this2.scaleMap[id].setScale(cacheKey, initialScale);
	                    }
	                });

	                var scalerMap = {};
	                _underscore2.default.forEach(this.scaleMap, function(interpolator, id) {
	                    scalerMap[id] = interpolator.scaler();
	                });

	                this.setState({ yAxisScalerMap: scalerMap });
	            }

	            /**
	             * When we get changes to the row's props we update our map of
	             * axis scales.
	             */
	        },
	        {
	            key: "componentWillReceiveProps",
	            value: function componentWillReceiveProps(nextProps) {
	                var _this3 = this;

	                var innerHeight = +nextProps.height - AXIS_MARGIN * 2;
	                var rangeTop = AXIS_MARGIN;
	                var rangeBottom = innerHeight - AXIS_MARGIN;

	                // Loop over all the children who are YAxis. If this is our first
	                // time here, we'll populate the scaleMap with new ScaleInterpolators.
	                // If we already have a ScaleInterpolator then we can set a new scale
	                // target on it.
	                _react2.default.Children.forEach(nextProps.children, function(child) {
	                    if (
	                        (child.type === _YAxis2.default ||
	                            _underscore2.default.has(child.props, "min")) &&
	                        _underscore2.default.has(child.props, "max")
	                    ) {
	                        var _child$props2 = child.props,
	                            id = _child$props2.id,
	                            max = _child$props2.max,
	                            min = _child$props2.min,
	                            _child$props2$transit = _child$props2.transition,
	                            transition =
	                                _child$props2$transit === undefined ? 0 : _child$props2$transit,
	                            _child$props2$type = _child$props2.type,
	                            type = _child$props2$type === undefined ? "linear" : _child$props2$type;

	                        var scale = createScale(child, type, min, max, rangeBottom, rangeTop);
	                        if (!_underscore2.default.has(_this3.scaleMap, id)) {
	                            // No scale map yet, create one on this.state.yAxisScalarMap
	                            _this3.scaleMap[id] = new _interpolators2.default(
	                                transition,
	                                d3Ease.easeSinOut,
	                                function(s) {
	                                    var yAxisScalerMap = _this3.state.yAxisScalerMap;
	                                    yAxisScalerMap[id] = s;
	                                    _this3.setState(yAxisScalerMap);
	                                }
	                            );
	                        }
	                        var cacheKey =
	                            type + "-" + min + "-" + max + "-" + rangeBottom + "-" + rangeTop;
	                        _this3.scaleMap[id].setScale(cacheKey, scale);
	                    }
	                });

	                var scalerMap = {};
	                _underscore2.default.forEach(this.scaleMap, function(interpolator, id) {
	                    scalerMap[id] = interpolator.scaler();
	                });

	                this.setState({ yAxisScalerMap: scalerMap });
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                var _this4 = this;

	                var axes = []; // Contains all the yAxis elements used in the render
	                var chartList = []; // Contains all the Chart elements used in the render
	                // Dimensions
	                var innerHeight = +this.props.height - AXIS_MARGIN * 2;

	                //
	                // Build a map of elements that occupy left or right slots next to the
	                // chart.
	                //
	                // If an element has both and id and a min/max range, then we consider
	                // it to be a y axis. For those we calculate a d3 scale that can be
	                // reference by a chart. That scale will also be available to the axis
	                // when it renders.
	                //
	                // For this row, we will need to know how many axis slots we are using.
	                //

	                var yAxisMap = {}; // Maps axis id -> axis element
	                var leftAxisList = []; // Ordered list of left axes ids
	                var rightAxisList = []; // Ordered list of right axes ids
	                var alignLeft = true;
	                _react2.default.Children.forEach(this.props.children, function(child) {
	                    if (child.type === _Charts2.default) {
	                        alignLeft = false;
	                    } else {
	                        var _id = child.props.id;
	                        // Check to see if we think this 'axis' is actually an axis
	                        if (
	                            (child.type === _YAxis2.default ||
	                                _underscore2.default.has(child.props, "min")) &&
	                            _underscore2.default.has(child.props, "max")
	                        ) {
	                            var yaxis = child;

	                            if (yaxis.props.id) {
	                                // Relate id to the axis
	                                yAxisMap[yaxis.props.id] = yaxis;
	                            }

	                            // Columns counts
	                            if (alignLeft) {
	                                leftAxisList.push(_id);
	                            } else {
	                                rightAxisList.push(_id);
	                            }
	                        }
	                    }
	                });

	                // Since we'll be building the left axis items from the inside to the outside
	                leftAxisList.reverse();

	                //
	                // Push each axis onto the axes, transforming each into its
	                // column location
	                //

	                var transform = void 0;
	                var id = void 0;
	                var props = void 0;
	                var axis = void 0;
	                var posx = 0;

	                // Space used by columns on left and right of charts
	                var leftWidth = _underscore2.default.reduce(
	                    this.props.leftAxisWidths,
	                    function(a, b) {
	                        return a + b;
	                    },
	                    0
	                );
	                var rightWidth = _underscore2.default.reduce(
	                    this.props.rightAxisWidths,
	                    function(a, b) {
	                        return a + b;
	                    },
	                    0
	                );

	                posx = leftWidth;
	                for (
	                    var leftColumnIndex = 0;
	                    leftColumnIndex < this.props.leftAxisWidths.length;
	                    leftColumnIndex += 1
	                ) {
	                    var colWidth = this.props.leftAxisWidths[leftColumnIndex];
	                    posx -= colWidth;
	                    if (colWidth > 0 && leftColumnIndex < leftAxisList.length) {
	                        id = leftAxisList[leftColumnIndex];
	                        transform = "translate(" + posx + ",0)";

	                        // Additional props for left aligned axes
	                        props = {
	                            width: colWidth,
	                            height: innerHeight,
	                            align: "left",
	                            scale: this.scaleMap[id].latestScale()
	                        };

	                        // Cloned left axis
	                        axis = _react2.default.cloneElement(yAxisMap[id], props);

	                        axes.push(
	                            _react2.default.createElement(
	                                "g",
	                                { key: "y-axis-left-" + leftColumnIndex, transform: transform },
	                                axis
	                            )
	                        );
	                    }
	                }

	                posx = this.props.width - rightWidth;
	                for (
	                    var rightColumnIndex = 0;
	                    rightColumnIndex < this.props.rightAxisWidths.length;
	                    rightColumnIndex += 1
	                ) {
	                    var _colWidth = this.props.rightAxisWidths[rightColumnIndex];
	                    if (_colWidth > 0 && rightColumnIndex < rightAxisList.length) {
	                        id = rightAxisList[rightColumnIndex];
	                        transform = "translate(" + posx + ",0)";

	                        // Additional props for right aligned axes
	                        props = {
	                            width: _colWidth,
	                            height: innerHeight,
	                            align: "right",
	                            scale: this.scaleMap[id].latestScale()
	                        };

	                        // Cloned right axis
	                        axis = _react2.default.cloneElement(yAxisMap[id], props);

	                        axes.push(
	                            _react2.default.createElement(
	                                "g",
	                                { key: "y-axis-right-" + rightColumnIndex, transform: transform },
	                                axis
	                            )
	                        );
	                    }

	                    posx += _colWidth;
	                }

	                //
	                // Push each chart onto the chartList, transforming each to the right
	                // of the left axis slots and specifying its width. Each chart is passed
	                // its time and y-scale. The y-scale is looked up in scaleMap, whose
	                // current value is stored in the component state.
	                //

	                var chartWidth = this.props.width - leftWidth - rightWidth;
	                var chartTransform = "translate(" + leftWidth + ",0)";

	                var keyCount = 0;
	                _react2.default.Children.forEach(this.props.children, function(child) {
	                    if (child.type === _Charts2.default) {
	                        var _charts = child;
	                        _react2.default.Children.forEach(_charts.props.children, function(chart) {
	                            if (
	                                !_underscore2.default.has(chart.props, "visible") ||
	                                chart.props.visible
	                            ) {
	                                var scale = null;
	                                if (
	                                    _underscore2.default.has(
	                                        _this4.state.yAxisScalerMap,
	                                        chart.props.axis
	                                    )
	                                ) {
	                                    scale = _this4.state.yAxisScalerMap[chart.props.axis];
	                                }

	                                var ytransition = null;
	                                if (_underscore2.default.has(_this4.scaleMap, chart.props.axis)) {
	                                    ytransition = _this4.scaleMap[chart.props.axis];
	                                }

	                                var chartProps = {
	                                    key: keyCount,
	                                    width: chartWidth,
	                                    height: innerHeight,
	                                    timeScale: _this4.props.timeScale,
	                                    timeFormat: _this4.props.timeFormat
	                                };

	                                if (scale) {
	                                    chartProps.yScale = scale;
	                                }

	                                if (ytransition) {
	                                    chartProps.transition = ytransition;
	                                }

	                                chartList.push(_react2.default.cloneElement(chart, chartProps));
	                                keyCount += 1;
	                            }
	                        });
	                    }
	                });

	                //
	                // Push each child Brush on to the brush list.  We need brushed to be
	                // rendered last (on top) of everything else in the Z order, both for
	                // visual correctness and to ensure that the brush gets mouse events
	                // before anything underneath
	                //

	                var brushList = [];
	                var multiBrushList = [];
	                keyCount = 0;
	                _react2.default.Children.forEach(this.props.children, function(child) {
	                    if (child.type === _Brush2.default || child.type === _MultiBrush2.default) {
	                        var brushProps = {
	                            key: "brush-" + keyCount,
	                            width: chartWidth,
	                            height: innerHeight,
	                            timeScale: _this4.props.timeScale
	                        };
	                        if (child.type === _Brush2.default) {
	                            brushList.push(_react2.default.cloneElement(child, brushProps));
	                        } else {
	                            multiBrushList.push(_react2.default.cloneElement(child, brushProps));
	                        }
	                    }
	                    keyCount += 1;
	                });

	                var charts = _react2.default.createElement(
	                    "g",
	                    { transform: chartTransform, key: "event-rect-group" },
	                    _react2.default.createElement(
	                        "g",
	                        { key: "charts", clipPath: this.state.clipPathURL },
	                        chartList
	                    )
	                );

	                //
	                // Clipping
	                //
	                var clipper = _react2.default.createElement(
	                    "defs",
	                    null,
	                    _react2.default.createElement(
	                        "clipPath",
	                        { id: this.state.clipId },
	                        _react2.default.createElement("rect", {
	                            x: "0",
	                            y: "0",
	                            width: chartWidth,
	                            height: innerHeight
	                        })
	                    )
	                );

	                //
	                // Brush
	                //
	                var brushes = _react2.default.createElement(
	                    "g",
	                    { transform: chartTransform, key: "brush-group" },
	                    brushList
	                );

	                //
	                // Multi Brush
	                //
	                var multiBrushes = _react2.default.createElement(
	                    "g",
	                    { transform: chartTransform, key: "multi-brush-group" },
	                    multiBrushList
	                );

	                //
	                // TimeMarker used as a tracker
	                //
	                var tracker = void 0;
	                if (this.props.trackerTime) {
	                    var timeFormat = this.props.trackerTimeFormat || this.props.timeFormat;
	                    var timeMarkerProps = {
	                        timeFormat: timeFormat,
	                        showLine: false,
	                        showTime: this.props.trackerShowTime,
	                        time: this.props.trackerTime,
	                        timeScale: this.props.timeScale,
	                        width: chartWidth
	                    };
	                    if (this.props.trackerInfoValues) {
	                        timeMarkerProps.infoWidth = this.props.trackerInfoWidth;
	                        timeMarkerProps.infoHeight = this.props.trackerInfoHeight;
	                        timeMarkerProps.infoValues = this.props.trackerInfoValues;
	                        timeMarkerProps.timeFormat = this.props.trackerTimeFormat;
	                    }
	                    var trackerStyle = {
	                        pointerEvents: "none"
	                    };
	                    var trackerTransform = "translate(" + leftWidth + ",0)";

	                    tracker = _react2.default.createElement(
	                        "g",
	                        { key: "tracker-group", style: trackerStyle, transform: trackerTransform },
	                        _react2.default.createElement(_TimeMarker2.default, timeMarkerProps)
	                    );
	                }

	                return _react2.default.createElement(
	                    "g",
	                    null,
	                    clipper,
	                    axes,
	                    charts,
	                    brushes,
	                    multiBrushes,
	                    tracker
	                );
	            }
	        }
	    ]);

	    return ChartRow;
	})(_react2.default.Component);

	exports.default = ChartRow;

	ChartRow.defaultProps = {
	    trackerTimeFormat: "%b %d %Y %X",
	    enablePanZoom: false,
	    height: 100,
	    visible: true
	};

	ChartRow.propTypes = {
	    /**
	     * The height of the row.
	     */
	    height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

	    /**
	     * Show or hide this row
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * Should the time be shown on top of the tracker info box
	     */
	    trackerShowTime: _propTypes2.default.bool,
	    /**
	     * The width of the tracker info box
	     */
	    trackerInfoWidth: _propTypes2.default.number,
	    /**
	     * The height of the tracker info box
	     */
	    trackerInfoHeight: _propTypes2.default.number,
	    /**
	     * Info box value or values to place next to the tracker line
	     * This is either an array of objects, with each object
	     * specifying the label (a string) and value (also a string)
	     * to be shown in the info box, or a simple string label.
	     */
	    trackerInfoValues: _propTypes2.default.oneOfType([
	        _propTypes2.default.string,
	        _propTypes2.default.arrayOf(
	            _propTypes2.default.shape({
	                label: _propTypes2.default.string, // eslint-disable-line
	                value: _propTypes2.default.string // eslint-disable-line
	            })
	        )
	    ]),

	    children: _propTypes2.default.oneOfType([
	        _propTypes2.default.arrayOf(_propTypes2.default.node),
	        _propTypes2.default.node
	    ]),
	    leftAxisWidths: _propTypes2.default.arrayOf(_propTypes2.default.number),
	    rightAxisWidths: _propTypes2.default.arrayOf(_propTypes2.default.number),
	    width: _propTypes2.default.number,
	    timeScale: _propTypes2.default.func,
	    trackerTimeFormat: _propTypes2.default.string,
	    timeFormat: _propTypes2.default.string,
	    trackerTime: _propTypes2.default.instanceOf(Date)
	};
	});

	unwrapExports(ChartRow_1);

	var EventHandler_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _react2 = _interopRequireDefault(react);



	var _reactDom2 = _interopRequireDefault(reactDom);



	var _propTypes2 = _interopRequireDefault(propTypes);





	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	// eslint-disable-line

	/**
	 * Internal component which provides the top level event catcher for the charts.
	 * This is a higher order component. It wraps a tree of SVG elements below it,
	 * passed in as this.props.children, and catches events that they do not handle.
	 *
	 * The EventHandler is responsible for pan and zoom events as well as other click
	 * and hover actions.
	 */
	var EventHandler = (function(_React$Component) {
	    _inherits(EventHandler, _React$Component);

	    function EventHandler(props) {
	        _classCallCheck(this, EventHandler);

	        var _this = _possibleConstructorReturn(
	            this,
	            (EventHandler.__proto__ || Object.getPrototypeOf(EventHandler)).call(this, props)
	        );

	        _this.state = {
	            isPanning: false,
	            initialPanBegin: null,
	            initialPanEnd: null,
	            initialPanPosition: null
	        };

	        _this.handleScrollWheel = _this.handleScrollWheel.bind(_this);
	        _this.handleMouseDown = _this.handleMouseDown.bind(_this);
	        _this.handleMouseUp = _this.handleMouseUp.bind(_this);
	        _this.handleMouseOut = _this.handleMouseOut.bind(_this);
	        _this.handleMouseMove = _this.handleMouseMove.bind(_this);
	        return _this;
	    }

	    // get the event mouse position relative to the event rect

	    _createClass(EventHandler, [
	        {
	            key: "getOffsetMousePosition",
	            value: function getOffsetMousePosition(e) {
	                var offset = (0, util$2.getElementOffset)(this.eventRect);
	                var x = e.pageX - offset.left;
	                var y = e.pageY - offset.top;
	                return [Math.round(x), Math.round(y)];
	            }

	            //
	            // Event handlers
	            //
	        },
	        {
	            key: "handleScrollWheel",
	            value: function handleScrollWheel(e) {
	                if (!this.props.enablePanZoom) {
	                    return;
	                }

	                e.preventDefault();

	                var SCALE_FACTOR = 0.001;
	                var scale = 1 + e.deltaY * SCALE_FACTOR;
	                if (scale > 3) {
	                    scale = 3;
	                }
	                if (scale < 0.1) {
	                    scale = 0.1;
	                }

	                var xy = this.getOffsetMousePosition(e);

	                var begin = this.props.scale.domain()[0].getTime();
	                var end = this.props.scale.domain()[1].getTime();
	                var center = this.props.scale.invert(xy[0]).getTime();

	                var beginScaled = center - parseInt((center - begin) * scale, 10);
	                var endScaled = center + parseInt((end - center) * scale, 10);

	                // Duration constraint
	                var duration = (end - begin) * scale;

	                if (this.props.minDuration) {
	                    var minDuration = parseInt(this.props.minDuration, 10);
	                    if (duration < this.props.minDuration) {
	                        beginScaled = center - (center - begin) / (end - begin) * minDuration;
	                        endScaled = center + (end - center) / (end - begin) * minDuration;
	                    }
	                }

	                if (this.props.minTime && this.props.maxTime) {
	                    var maxDuration = this.props.maxTime.getTime() - this.props.minTime.getTime();
	                    if (duration > maxDuration) {
	                        duration = maxDuration;
	                    }
	                }

	                // Range constraint
	                if (this.props.minTime && beginScaled < this.props.minTime.getTime()) {
	                    beginScaled = this.props.minTime.getTime();
	                    endScaled = beginScaled + duration;
	                }

	                if (this.props.maxTime && endScaled > this.props.maxTime.getTime()) {
	                    endScaled = this.props.maxTime.getTime();
	                    beginScaled = endScaled - duration;
	                }

	                var newBegin = new Date(beginScaled);
	                var newEnd = new Date(endScaled);

	                var newTimeRange = new entry.TimeRange(newBegin, newEnd);

	                if (this.props.onZoom) {
	                    this.props.onZoom(newTimeRange);
	                }
	            }
	        },
	        {
	            key: "handleMouseDown",
	            value: function handleMouseDown(e) {
	                if (!this.props.enablePanZoom) {
	                    return;
	                }

	                e.preventDefault();

	                var x = e.pageX;
	                var y = e.pageY;
	                var xy0 = [Math.round(x), Math.round(y)];

	                var begin = this.props.scale.domain()[0].getTime();
	                var end = this.props.scale.domain()[1].getTime();

	                document.addEventListener("mouseover", this.handleMouseMove);
	                document.addEventListener("mouseup", this.handleMouseUp);

	                this.setState({
	                    isPanning: true,
	                    initialPanBegin: begin,
	                    initialPanEnd: end,
	                    initialPanPosition: xy0
	                });

	                return false;
	            }
	        },
	        {
	            key: "handleMouseUp",
	            value: function handleMouseUp(e) {
	                if (!this.props.enablePanZoom) {
	                    return;
	                }

	                e.stopPropagation();

	                document.removeEventListener("mouseover", this.handleMouseMove);
	                document.removeEventListener("mouseup", this.handleMouseUp);

	                var x = e.pageX;
	                if (
	                    this.props.onMouseClick &&
	                    this.state.initialPanPosition &&
	                    Math.abs(x - this.state.initialPanPosition[0]) < 2
	                ) {
	                    this.props.onMouseClick();
	                }

	                this.setState({
	                    isPanning: false,
	                    initialPanBegin: null,
	                    initialPanEnd: null,
	                    initialPanPosition: null
	                });
	            }
	        },
	        {
	            key: "handleMouseOut",
	            value: function handleMouseOut(e) {
	                e.preventDefault();

	                if (this.props.onMouseOut) {
	                    this.props.onMouseOut();
	                }
	            }
	        },
	        {
	            key: "handleMouseMove",
	            value: function handleMouseMove(e) {
	                e.preventDefault();
	                var x = e.pageX;
	                var y = e.pageY;
	                var xy = [Math.round(x), Math.round(y)];
	                if (this.state.isPanning) {
	                    var xy0 = this.state.initialPanPosition;
	                    var timeOffset =
	                        this.props.scale.invert(xy[0]).getTime() -
	                        this.props.scale.invert(xy0[0]).getTime();

	                    var newBegin = parseInt(this.state.initialPanBegin - timeOffset, 10);
	                    var newEnd = parseInt(this.state.initialPanEnd - timeOffset, 10);
	                    var duration = parseInt(
	                        this.state.initialPanEnd - this.state.initialPanBegin,
	                        10
	                    );

	                    if (this.props.minTime && newBegin < this.props.minTime.getTime()) {
	                        newBegin = this.props.minTime.getTime();
	                        newEnd = newBegin + duration;
	                    }

	                    if (this.props.maxTime && newEnd > this.props.maxTime.getTime()) {
	                        newEnd = this.props.maxTime.getTime();
	                        newBegin = newEnd - duration;
	                    }

	                    var newTimeRange = new entry.TimeRange(newBegin, newEnd);
	                    if (this.props.onZoom) {
	                        this.props.onZoom(newTimeRange);
	                    }
	                } else if (this.props.onMouseMove) {
	                    var mousePosition = this.getOffsetMousePosition(e);
	                    if (this.props.onMouseMove) {
	                        this.props.onMouseMove(mousePosition[0], mousePosition[1]);
	                    }
	                }
	            }

	            //
	            // Render
	            //
	        },
	        {
	            key: "render",
	            value: function render() {
	                var _this2 = this;

	                var cursor = this.state.isPanning ? "-webkit-grabbing" : "default";
	                var handlers = {
	                    onWheel: this.handleScrollWheel,
	                    onMouseDown: this.handleMouseDown,
	                    onMouseMove: this.handleMouseMove,
	                    onMouseOut: this.handleMouseOut,
	                    onMouseUp: this.handleMouseUp
	                };
	                return _react2.default.createElement(
	                    "g",
	                    _extends({ pointerEvents: "all" }, handlers),
	                    _react2.default.createElement("rect", {
	                        key: "handler-hit-rect",
	                        ref: function ref(c) {
	                            _this2.eventRect = c;
	                        },
	                        style: { opacity: 0.0, cursor: cursor },
	                        x: 0,
	                        y: 0,
	                        width: this.props.width,
	                        height: this.props.height
	                    }),
	                    this.props.children
	                );
	            }
	        }
	    ]);

	    return EventHandler;
	})(_react2.default.Component);

	exports.default = EventHandler;

	EventHandler.propTypes = {
	    children: _propTypes2.default.oneOfType([
	        _propTypes2.default.arrayOf(_propTypes2.default.node),
	        _propTypes2.default.node
	    ]),
	    enablePanZoom: _propTypes2.default.bool,
	    scale: _propTypes2.default.func.isRequired,
	    width: _propTypes2.default.number.isRequired,
	    height: _propTypes2.default.number.isRequired,
	    maxTime: _propTypes2.default.instanceOf(Date),
	    minTime: _propTypes2.default.instanceOf(Date),
	    minDuration: _propTypes2.default.number,
	    onZoom: _propTypes2.default.func,
	    onMouseMove: _propTypes2.default.func,
	    onMouseOut: _propTypes2.default.func,
	    onMouseClick: _propTypes2.default.func
	};

	EventHandler.defaultProps = {
	    enablePanZoom: false
	};
	});

	unwrapExports(EventHandler_1);

	var TimeAxis_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _underscore2 = _interopRequireDefault(underscore);



	var _merge2 = _interopRequireDefault(merge);



	var _moment2 = _interopRequireDefault(_moment);



	var _react2 = _interopRequireDefault(react);



	var _reactDom2 = _interopRequireDefault(reactDom);



	var _propTypes2 = _interopRequireDefault(propTypes);











	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	// eslint-disable-line

	function scaleAsString(scale) {
	    return scale.domain().toString() + "-" + scale.range().toString();
	}

	var defaultStyle = {
	    labels: {
	        labelColor: "#8B7E7E", // Default label color
	        labelWeight: 100,
	        labelSize: 11
	    },
	    axis: {
	        axisColor: "#C0C0C0"
	    }
	};

	/**
	 * Renders a horizontal time axis. This is used internally by the ChartContainer
	 * as a result of you specifying the timerange for the chart. Please see the API
	 * docs for ChartContainer for more information.
	 */

	var TimeAxis = (function(_React$Component) {
	    _inherits(TimeAxis, _React$Component);

	    function TimeAxis() {
	        _classCallCheck(this, TimeAxis);

	        return _possibleConstructorReturn(
	            this,
	            (TimeAxis.__proto__ || Object.getPrototypeOf(TimeAxis)).apply(this, arguments)
	        );
	    }

	    _createClass(TimeAxis, [
	        {
	            key: "componentDidMount",
	            value: function componentDidMount() {
	                this.renderTimeAxis(this.props.scale, this.props.format);
	            }
	        },
	        {
	            key: "componentWillReceiveProps",
	            value: function componentWillReceiveProps(nextProps) {
	                var scale = nextProps.scale,
	                    utc = nextProps.utc,
	                    format = nextProps.format;

	                if (
	                    scaleAsString(this.props.scale) !== scaleAsString(scale) ||
	                    this.props.utc !== utc
	                ) {
	                    this.renderTimeAxis(scale, format);
	                }
	            }

	            // Force the component not to update because d3 will control the
	            // DOM from this point down.
	        },
	        {
	            key: "shouldComponentUpdate",
	            value: function shouldComponentUpdate() {
	                // eslint-disable-line
	                return false;
	            }
	        },
	        {
	            key: "renderTimeAxis",
	            value: function renderTimeAxis(scale, format) {
	                var axis = void 0;

	                var tickSize = this.props.showGrid ? -this.props.gridHeight : 10;
	                var utc = this.props.utc;
	                var tickCount = this.props.tickCount;

	                if (tickCount > 0) {
	                    if (format === "day") {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .tickArguments([utc ? d3Time.utcDay : d3Time.timeDay, 1, tickCount])
	                            .tickFormat((0, _d3TimeFormat.timeFormat)("%d"))
	                            .tickSizeOuter(0);
	                    } else if (format === "month") {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .tickArguments([
	                                utc ? d3Time.utcMonth : d3Time.timeMonth,
	                                1,
	                                tickCount
	                            ])
	                            .tickFormat((0, _d3TimeFormat.timeFormat)("%B"))
	                            .tickSizeOuter(0);
	                    } else if (format === "year") {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .tickArguments([utc ? d3Time.utcYear : d3Time.timeYear, 1, tickCount])
	                            .tickFormat((0, _d3TimeFormat.timeFormat)("%Y"))
	                            .tickSizeOuter(0);
	                    } else if (format === "relative") {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .ticks(tickCount)
	                            .tickFormat(function(d) {
	                                return _moment2.default.duration(+d).format();
	                            })
	                            .tickSizeOuter(0);
	                    } else if (_underscore2.default.isString(format)) {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .ticks(tickCount)
	                            .tickFormat((0, _d3TimeFormat.timeFormat)(format))
	                            .tickSizeOuter(0);
	                    } else if (_underscore2.default.isFunction(format)) {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .ticks(tickCount)
	                            .tickFormat(format)
	                            .tickSizeOuter(0);
	                    } else {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .ticks(tickCount)
	                            .tickSize(0);
	                    }
	                } else {
	                    if (format === "day") {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .tickArguments([utc ? d3Time.utcDay : d3Time.timeDay, 1])
	                            .tickFormat((0, _d3TimeFormat.timeFormat)("%d"))
	                            .tickSizeOuter(0);
	                    } else if (format === "month") {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .tickArguments([utc ? d3Time.utcMonth : d3Time.timeMonth, 1])
	                            .tickFormat((0, _d3TimeFormat.timeFormat)("%B"))
	                            .tickSizeOuter(0);
	                    } else if (format === "year") {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .tickArguments([utc ? d3Time.utcYear : d3Time.timeYear, 1])
	                            .tickFormat((0, _d3TimeFormat.timeFormat)("%Y"))
	                            .tickSizeOuter(0);
	                    } else if (format === "relative") {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .tickFormat(function(d) {
	                                return _moment2.default.duration(+d).format();
	                            })
	                            .tickSizeOuter(0);
	                    } else if (_underscore2.default.isString(format)) {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .tickFormat((0, _d3TimeFormat.timeFormat)(format))
	                            .tickSizeOuter(0);
	                    } else if (_underscore2.default.isFunction(format)) {
	                        axis = (0, _d3Axis.axisBottom)(scale)
	                            .tickFormat(format)
	                            .tickSizeOuter(0);
	                    } else {
	                        axis = (0, _d3Axis.axisBottom)(scale).tickSize(0);
	                    }
	                }

	                // Style

	                var labelStyle = (0, _merge2.default)(
	                    true,
	                    defaultStyle.labels,
	                    this.props.style.labels ? this.props.style.labels : {}
	                );
	                var axisStyle = (0, _merge2.default)(
	                    true,
	                    defaultStyle.axis,
	                    this.props.style.axis ? this.props.style.axis : {}
	                );
	                var axisColor = axisStyle.axisColor;
	                var labelColor = labelStyle.labelColor,
	                    labelWeight = labelStyle.labelWeight,
	                    labelSize = labelStyle.labelSize;

	                // Remove the old axis from under this DOM node

	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this))
	                    .selectAll("*")
	                    .remove(); // eslint-disable-line
	                //
	                // Draw the new axis
	                //
	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this)) // eslint-disable-line
	                    .append("g")
	                    .attr("class", "x axis")
	                    .style("stroke", "none")
	                    .style("fill", labelColor)
	                    .style("font-weight", labelWeight)
	                    .style("font-size", labelSize)
	                    .call(axis.tickSize(tickSize));
	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this)) // eslint-disable-line
	                    .select("g")
	                    .selectAll(".tick")
	                    .select("text")
	                    .style("fill", labelColor)
	                    .style("stroke", "none");
	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this)) // eslint-disable-line
	                    .select("g")
	                    .selectAll(".tick")
	                    .select("line")
	                    .style("stroke", axisColor);
	                (0, _d3Selection.select)(_reactDom2.default.findDOMNode(this))
	                    .select("g")
	                    .select("path")
	                    .remove(); // eslint-disable-line
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                // eslint-disable-line
	                return _react2.default.createElement("g", null);
	            }
	        }
	    ]);

	    return TimeAxis;
	})(_react2.default.Component);

	exports.default = TimeAxis;

	TimeAxis.defaultProps = {
	    showGrid: false,
	    style: defaultStyle
	};

	TimeAxis.propTypes = {
	    scale: _propTypes2.default.func.isRequired,
	    showGrid: _propTypes2.default.bool,
	    gridHeight: _propTypes2.default.number,
	    format: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	    utc: _propTypes2.default.bool,
	    style: _propTypes2.default.shape({
	        labels: _propTypes2.default.object, // eslint-disable-line
	        axis: _propTypes2.default.object // eslint-disable-line
	    }),
	    tickCount: _propTypes2.default.number
	};
	});

	unwrapExports(TimeAxis_1);

	var ChartContainer_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _underscore2 = _interopRequireDefault(underscore);



	var _invariant2 = _interopRequireDefault(browser$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);







	var _Brush2 = _interopRequireDefault(Brush_1);



	var _MultiBrush2 = _interopRequireDefault(MultiBrush_1);



	var _ChartRow2 = _interopRequireDefault(ChartRow_1);



	var _Charts2 = _interopRequireDefault(Charts_1);



	var _EventHandler2 = _interopRequireDefault(EventHandler_1);



	var _TimeAxis2 = _interopRequireDefault(TimeAxis_1);



	var _TimeMarker2 = _interopRequireDefault(TimeMarker_1);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var defaultTimeAxisStyle = {
	    labels: {
	        labelColor: "#8B7E7E",
	        labelWeight: 100,
	        labelSize: 11
	    },
	    axis: {
	        axisColor: "#C0C0C0",
	        axisWidth: 1
	    }
	};

	/**
	 * The `<ChartContainer>` is the outer most element of a chart and is
	 * responsible for generating and arranging its sub-elements. Specifically,
	 * it is a container for one or more `<ChartRows>` (each of which contains
	 * charts, axes etc) and in addition it manages the overall time range of
	 * the chart and so also is responsible for the time axis, which is always
	 * shared by all the rows.
	 *
	 * Here is an example:
	 *
	 * ```xml
	 * <ChartContainer timeRange={audSeries.timerange()} width="800">
	 *     <ChartRow>
	 *         ...
	 *     </ChartRow>
	 *     <ChartRow>
	 *         ...
	 *     </ChartRow>
	 * </ChartContainer>
	 * ```
	 */

	var ChartContainer = (function(_React$Component) {
	    _inherits(ChartContainer, _React$Component);

	    function ChartContainer() {
	        _classCallCheck(this, ChartContainer);

	        return _possibleConstructorReturn(
	            this,
	            (ChartContainer.__proto__ || Object.getPrototypeOf(ChartContainer)).apply(
	                this,
	                arguments
	            )
	        );
	    }

	    _createClass(ChartContainer, [
	        {
	            key: "handleTrackerChanged",

	            //
	            // Event handlers
	            //

	            value: function handleTrackerChanged(t) {
	                if (this.props.onTrackerChanged) {
	                    this.props.onTrackerChanged(t);
	                }
	            }

	            /**
	             * Within the charts library the time range of the x axis is kept as a begin
	             * and end time (Javascript Date objects). But the interface is Pond based,
	             * so this callback returns a Pond TimeRange.
	             */
	        },
	        {
	            key: "handleTimeRangeChanged",
	            value: function handleTimeRangeChanged(timerange) {
	                if (this.props.onTimeRangeChanged) {
	                    this.props.onTimeRangeChanged(timerange);
	                }
	            }
	        },
	        {
	            key: "handleMouseMove",
	            value: function handleMouseMove(x, y) {
	                if (this.props.onTrackerChanged) {
	                    var time = this.timeScale.invert(x);
	                    this.props.onTrackerChanged(time);
	                }
	                if (this.props.onMouseMove) {
	                    this.props.onMouseMove(x, y);
	                }
	            }
	        },
	        {
	            key: "handleMouseOut",
	            value: function handleMouseOut() {
	                if (this.props.onTrackerChanged) {
	                    this.props.onTrackerChanged(null);
	                }
	            }
	        },
	        {
	            key: "handleBackgroundClick",
	            value: function handleBackgroundClick() {
	                if (this.props.onBackgroundClick) {
	                    this.props.onBackgroundClick();
	                }
	            }
	        },
	        {
	            key: "handleZoom",
	            value: function handleZoom(timerange) {
	                if (this.props.onTimeRangeChanged) {
	                    this.props.onTimeRangeChanged(timerange);
	                }
	            }

	            //
	            // Render
	            //
	        },
	        {
	            key: "render",
	            value: function render() {
	                var _this2 = this;

	                var chartRows = [];
	                var leftAxisWidths = [];
	                var rightAxisWidths = [];

	                //
	                // How much room does the axes of all the charts take up on the right
	                // and left. The result is an array for left and right axis which
	                // contain the min column width needed to hold the axes widths at the
	                // pos for all rows.
	                //
	                // pos   1      0        <charts>     0        1        2
	                //     | Axis | Axis |   CHARTS    |  Axis  |                      Row 1
	                //            | Axis |   CHARTS    |  Axis  |  Axis  |  Axis |     Row 2
	                //     ...............              ..........................
	                //          left cols              right cols
	                //

	                _react2.default.Children.forEach(this.props.children, function(childRow) {
	                    if (childRow.type === _ChartRow2.default) {
	                        //
	                        // Within this row, count the number of columns that will be
	                        // left and right of the Charts tag, as well as the total number
	                        // of Charts tags for error handling
	                        //

	                        var countLeft = 0;
	                        var countCharts = 0;

	                        var align = "left";

	                        _react2.default.Children.forEach(childRow.props.children, function(child) {
	                            if (child.type === _Charts2.default) {
	                                countCharts += 1;
	                                align = "right";
	                            } else if (
	                                child.type !== _Brush2.default &&
	                                child.type !== _MultiBrush2.default
	                            ) {
	                                if (align === "left") {
	                                    countLeft += 1;
	                                }
	                            }
	                        });

	                        if (countCharts !== 1) {
	                            var msg =
	                                "ChartRow should have one and only one <Charts> tag within it";
	                            (0, _invariant2.default)(false, msg, childRow.constructor.name);
	                        }

	                        align = "left";
	                        var pos = countLeft - 1;

	                        _react2.default.Children.forEach(childRow.props.children, function(child) {
	                            if (
	                                child.type === _Charts2.default ||
	                                child.type === _Brush2.default ||
	                                child.type === _MultiBrush2.default
	                            ) {
	                                if (child.type === _Charts2.default) {
	                                    align = "right";
	                                    pos = 0;
	                                }
	                            } else {
	                                var width = Number(child.props.width) || 40;
	                                var visible =
	                                    !_underscore2.default.has(child.props, "visible") ||
	                                    child.props.visible;
	                                if (!visible) width = 0;

	                                if (align === "left") {
	                                    leftAxisWidths[pos] = leftAxisWidths[pos]
	                                        ? Math.max(width, leftAxisWidths[pos])
	                                        : width;
	                                    pos -= 1;
	                                } else if (align === "right") {
	                                    rightAxisWidths[pos] = rightAxisWidths[pos]
	                                        ? Math.max(width, rightAxisWidths[pos])
	                                        : width;
	                                    pos += 1;
	                                }
	                            }
	                        });
	                    }
	                });

	                // Space used by columns on left and right of charts
	                var leftWidth = _underscore2.default.reduce(
	                    leftAxisWidths,
	                    function(a, b) {
	                        return a + b;
	                    },
	                    0
	                );
	                var rightWidth = _underscore2.default.reduce(
	                    rightAxisWidths,
	                    function(a, b) {
	                        return a + b;
	                    },
	                    0
	                );

	                //
	                // Time scale
	                //

	                var timeAxisHeight = 35;
	                var timeAxisWidth = this.props.width - leftWidth - rightWidth;

	                if (!this.props.timeRange) {
	                    throw Error("Invalid timerange passed to ChartContainer");
	                }

	                var timeScale = (this.timeScale = this.props.utc
	                    ? (0, d3Scale.scaleUtc)()
	                          .domain(this.props.timeRange.toJSON())
	                          .range([0, timeAxisWidth])
	                    : (0, d3Scale.scaleTime)()
	                          .domain(this.props.timeRange.toJSON())
	                          .range([0, timeAxisWidth]));

	                var i = 0;
	                var yPosition = 0;
	                _react2.default.Children.forEach(this.props.children, function(child) {
	                    if (child.type === _ChartRow2.default) {
	                        var chartRow = child;
	                        var rowKey = "chart-row-row-" + i;
	                        var firstRow = i === 0;
	                        var isVisible = child.props.visible;
	                        var props = {
	                            timeScale: timeScale,
	                            leftAxisWidths: leftAxisWidths,
	                            rightAxisWidths: rightAxisWidths,
	                            width: _this2.props.width,
	                            minTime: _this2.props.minTime,
	                            maxTime: _this2.props.maxTime,
	                            transition: _this2.props.transition,
	                            enablePanZoom: _this2.props.enablePanZoom,
	                            minDuration: _this2.props.minDuration,
	                            timeFormat: _this2.props.format,
	                            trackerShowTime: firstRow,
	                            trackerTime: _this2.props.trackerPosition,
	                            trackerTimeFormat: _this2.props.format,
	                            onTimeRangeChanged: function onTimeRangeChanged(tr) {
	                                return _this2.handleTimeRangeChanged(tr);
	                            },
	                            onTrackerChanged: function onTrackerChanged(t) {
	                                return _this2.handleTrackerChanged(t);
	                            }
	                        };
	                        var transform = "translate(" + -leftWidth + "," + yPosition + ")";
	                        if (isVisible) {
	                            chartRows.push(
	                                _react2.default.createElement(
	                                    "g",
	                                    { transform: transform, key: rowKey },
	                                    _react2.default.cloneElement(chartRow, props)
	                                )
	                            );

	                            yPosition += parseInt(child.props.height, 10);
	                        }
	                    }
	                    i += 1;
	                });

	                var chartsHeight = yPosition;
	                var chartsWidth = this.props.width - leftWidth - rightWidth;

	                // Hover tracker line
	                var tracker = void 0;
	                if (
	                    this.props.trackerPosition &&
	                    this.props.timeRange.contains(this.props.trackerPosition)
	                ) {
	                    tracker = _react2.default.createElement(
	                        "g",
	                        {
	                            key: "tracker-group",
	                            style: { pointerEvents: "none" },
	                            transform: "translate(" + leftWidth + ",0)"
	                        },
	                        _react2.default.createElement(_TimeMarker2.default, {
	                            width: chartsWidth,
	                            height: chartsHeight,
	                            showInfoBox: false,
	                            time: this.props.trackerPosition,
	                            timeScale: timeScale,
	                            timeFormat: this.props.format,
	                            infoWidth: this.props.trackerHintWidth,
	                            infoHeight: this.props.trackerHintHeight,
	                            info: this.props.trackerValues
	                        })
	                    );
	                }

	                //
	                // TimeAxis
	                //

	                var xStyle = {
	                    stroke: this.props.timeAxisStyle.axis.axisColor,
	                    strokeWidth: this.props.timeAxisStyle.axis.axisWidth,
	                    fill: "none",
	                    pointerEvents: "none"
	                };

	                var timeAxis = _react2.default.createElement(
	                    "g",
	                    { transform: "translate(" + leftWidth + "," + chartsHeight + ")" },
	                    _react2.default.createElement("line", {
	                        x1: -leftWidth,
	                        y1: 0.5,
	                        x2: this.props.width,
	                        y2: 0.5,
	                        style: xStyle
	                    }),
	                    _react2.default.createElement(_TimeAxis2.default, {
	                        scale: timeScale,
	                        utc: this.props.utc,
	                        style: this.props.timeAxisStyle,
	                        format: this.props.format,
	                        showGrid: this.props.showGrid,
	                        gridHeight: chartsHeight,
	                        tickCount: this.props.timeAxisTickCount
	                    })
	                );

	                //
	                // Event handler
	                //

	                var rows = _react2.default.createElement(
	                    "g",
	                    { transform: "translate(" + leftWidth + "," + 0 + ")" },
	                    _react2.default.createElement(
	                        _EventHandler2.default,
	                        {
	                            key: "event-handler",
	                            width: chartsWidth,
	                            height: chartsHeight + timeAxisHeight,
	                            scale: timeScale,
	                            enablePanZoom: this.props.enablePanZoom,
	                            minDuration: this.props.minDuration,
	                            minTime: this.props.minTime,
	                            maxTime: this.props.maxTime,
	                            onMouseOut: function onMouseOut(e) {
	                                return _this2.handleMouseOut(e);
	                            },
	                            onMouseMove: function onMouseMove(x, y) {
	                                return _this2.handleMouseMove(x, y);
	                            },
	                            onMouseClick: function onMouseClick(e) {
	                                return _this2.handleBackgroundClick(e);
	                            },
	                            onZoom: function onZoom(tr) {
	                                return _this2.handleZoom(tr);
	                            }
	                        },
	                        chartRows
	                    )
	                );

	                //
	                // Final render of the ChartContainer is composed of a number of
	                // chartRows, a timeAxis and the tracker indicator
	                //

	                var svgWidth = this.props.width;
	                var svgHeight = yPosition + timeAxisHeight;

	                return this.props.showGridPosition === "over"
	                    ? _react2.default.createElement(
	                          "svg",
	                          {
	                              width: svgWidth,
	                              height: svgHeight,
	                              style: { display: "block" },
	                              ref: function ref(c) {
	                                  _this2.svg = c;
	                              }
	                          },
	                          rows,
	                          tracker,
	                          timeAxis
	                      )
	                    : _react2.default.createElement(
	                          "svg",
	                          {
	                              width: svgWidth,
	                              height: svgHeight,
	                              style: { display: "block" },
	                              ref: function ref(c) {
	                                  _this2.svg = c;
	                              }
	                          },
	                          timeAxis,
	                          rows,
	                          tracker
	                      );
	            }
	        }
	    ]);

	    return ChartContainer;
	})(_react2.default.Component);

	exports.default = ChartContainer;

	ChartContainer.propTypes = {
	    /**
	     * A [Pond TimeRange](https://esnet-pondjs.appspot.com/#/timerange) representing the
	     * begin and end time of the chart.
	     */
	    timeRange: _propTypes2.default.instanceOf(entry.TimeRange).isRequired,

	    /**
	     * Should the time axis use a UTC scale or local
	     */
	    utc: _propTypes2.default.bool,

	    /**
	     * Children of the ChartContainer should be ChartRows.
	     */
	    children: _propTypes2.default.oneOfType([
	        _propTypes2.default.arrayOf(_propTypes2.default.element),
	        _propTypes2.default.element
	    ]).isRequired,

	    /**
	     * The width of the chart. This library also includes a <Resizable> component
	     * that can be wrapped around a \<ChartContainer\>. The purpose of this is to
	     * inject a width prop into the ChartContainer so that it will fit the
	     * surrounding element. This is very handy when you need the chart to resize
	     * based on a responsive layout.
	     */
	    width: _propTypes2.default.number,

	    /**
	     * Constrain the timerange to not move back in time further than this Date.
	     */
	    minTime: _propTypes2.default.instanceOf(Date),

	    /**
	     * Constrain the timerange to not move forward in time than this Date. A
	     * common example is setting this to the current time or the end time
	     * of a fixed set of data.
	     */
	    maxTime: _propTypes2.default.instanceOf(Date),

	    /**
	     * Boolean to turn on interactive pan and zoom behavior for the chart.
	     */
	    enablePanZoom: _propTypes2.default.bool,

	    /**
	     * If this is set the timerange of the chart cannot be zoomed in further
	     * than this duration, in milliseconds. This might be determined by the
	     * resolution of your data.
	     */
	    minDuration: _propTypes2.default.number,

	    /**
	     * Provides several options as to the format of the time axis labels.
	     *
	     * In general the time axis will generate an appropriate time scale based
	     * on the timeRange prop and there is no need to set this.
	     *
	     * However, some options exist:
	     *
	     *  - setting format to "day", "month" or "year" will show only ticks on those,
	     * and every one of those intervals. For example maybe you are showing a bar
	     * chart for October 2014 then setting the format to "day" will insure that a
	     * label is placed for each and every day
	     *
	     *  - setting format to "relative" interprets the time as a duration. This
	     * is good for data that is specified relative to its start time, rather than
	     * as an actual date/time
	     *
	     *  - setting the format to a d3 format string will use that format
	     *
	     *  - supplying a function for format will cause that function to be called
	     * whenever rendering a time
	     */
	    format: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

	    /**
	     * Time in milliseconds to transition from one Y-scale to the next
	     */
	    transition: _propTypes2.default.number,

	    /**
	     * Show grid lines for each time marker
	     */
	    showGrid: _propTypes2.default.bool,

	    /**
	     * Defines whether grid is overlayed ("over"( or underlayed ("under")
	     * with respect to the charts
	     */
	    showGridPosition: _propTypes2.default.oneOf(["over", "under"]),

	    /**
	     * Specify the number of ticks
	     * The default ticks for quantitative scales are multiples of 2, 5 and 10.
	     * So, while you can use this prop to increase or decrease the tick count, it will always return multiples of 2, 5 and 10.
	     */
	    timeAxisTickCount: _propTypes2.default.number,

	    /**
	     * Adjust the time axis style. This is an object of the
	     * form { labels, axis } where "label" and "axis" are objects
	     * themselves. The options here are best represented by
	     * an example:
	     *
	     * ```
	     *  const axisStyle = {
	     *      labels: {
	     *          labelColor: "grey",
	     *          labelWeight: 100,
	     *          labelSize: 11
	     *      },
	     *      axis: {
	     *          axisColor: "grey",
	     *          axisWidth: 1
	     *      }
	     *  };
	     * ```
	     */
	    timeAxisStyle: _propTypes2.default.shape({
	        labels: _propTypes2.default.object, // eslint-disable-line
	        axis: _propTypes2.default.object
	    }),

	    /**
	     * The width of the tracker info box
	     */
	    trackerHintWidth: _propTypes2.default.number,

	    /**
	     * The height of the tracker info box
	     */
	    trackerHintHeight: _propTypes2.default.number,

	    /**
	     * Info box value or values to place next to the tracker line.
	     * This is either an array of objects, with each object
	     * specifying the label and value to be shown in the info box,
	     * or a simple string label.
	     */
	    trackerValues: _propTypes2.default.oneOfType([
	        _propTypes2.default.string,
	        _propTypes2.default.arrayOf(
	            _propTypes2.default.shape({
	                label: _propTypes2.default.string, // eslint-disable-line
	                value: _propTypes2.default.string // eslint-disable-line
	            })
	        )
	    ]),

	    /**
	     * A Date specifying the position of the tracker line on the chart. It is
	     * common to take this from the onTrackerChanged callback so that the tracker
	     * followers the user's cursor, but it could be modified to snap to a point or
	     * to the nearest minute, for example.
	     */
	    trackerPosition: _propTypes2.default.instanceOf(Date),

	    /**
	     * Will be called when the user hovers over a chart. The callback will
	     * be called with the timestamp (a Date object) of the position hovered
	     * over. This maybe then used as the trackerPosition (see above), or to
	     * information data about the time hovered over within the greater page.
	     * Commonly we might do something like this:
	     * ```
	     *   <ChartContainer
	     *     onTrackerChanged={(tracker) => this.setState({tracker})}
	     *     trackerPosition={this.state.tracker}
	     *     ... />
	     * ```
	     */
	    onTrackerChanged: _propTypes2.default.func,

	    /**
	     * This will be called if the user pans and/or zooms the chart. The callback
	     * will be called with the new TimeRange. This can be fed into the timeRange
	     * prop as well as used elsewhere on the greater page. Typical use might look
	     * like this:
	     * ```
	     *   <ChartContainer
	     *     onTimeRangeChanged={(timerange) => this.setState({timerange})}
	     *     timeRange={this.state.timerange}
	     *     ... />
	     * ```
	     */
	    onTimeRangeChanged: _propTypes2.default.func,

	    /**
	     * Called when the size of the chart changes
	     */
	    onChartResize: _propTypes2.default.func,

	    /**
	     * Called when the user clicks the background plane of the chart. This is
	     * useful when deselecting elements.
	     */
	    onBackgroundClick: _propTypes2.default.func
	};

	ChartContainer.defaultProps = {
	    width: 800,
	    padding: 0,
	    enablePanZoom: false,
	    utc: false,
	    showGrid: false,
	    showGridPosition: "over",
	    timeAxisStyle: defaultTimeAxisStyle
	};
	});

	unwrapExports(ChartContainer_1);

	var EventChart_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _underscore2 = _interopRequireDefault(underscore);



	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Renders an event view that shows the supplied set of events along a time axis.
	 * The events should be supplied as a Pond TimeSeries.
	 * That series may contain regular TimeEvents, TimeRangeEvents
	 * or IndexedEvents.
	 */
	var EventChart = (function(_React$Component) {
	    _inherits(EventChart, _React$Component);

	    function EventChart(props) {
	        _classCallCheck(this, EventChart);

	        var _this = _possibleConstructorReturn(
	            this,
	            (EventChart.__proto__ || Object.getPrototypeOf(EventChart)).call(this, props)
	        );

	        _this.state = {
	            hover: null
	        };
	        return _this;
	    }

	    /**
	     * Continues a hover event on a specific bar of the bar chart.
	     */

	    _createClass(EventChart, [
	        {
	            key: "onMouseOver",
	            value: function onMouseOver(e, event) {
	                if (this.props.onMouseOver) {
	                    this.props.onMouseOver(event);
	                }
	                this.setState({ hover: event });
	            }

	            /**
	             * Handle mouse leave and calls onMouseLeave callback if one is provided
	             */
	        },
	        {
	            key: "onMouseLeave",
	            value: function onMouseLeave() {
	                if (this.props.onMouseLeave) {
	                    this.props.onMouseLeave(this.state.hover);
	                }
	                this.setState({ hover: null });
	            }

	            /**
	             * Handle click will call the onSelectionChange callback if one is provided
	             * as a prop. It will be called with the event selected.
	             */
	        },
	        {
	            key: "handleClick",
	            value: function handleClick(e, event) {
	                e.stopPropagation();
	                if (this.props.onSelectionChange) {
	                    this.props.onSelectionChange(event);
	                }
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                var _this2 = this;

	                var _props = this.props,
	                    series = _props.series,
	                    textOffsetX = _props.textOffsetX,
	                    textOffsetY = _props.textOffsetY,
	                    hoverMarkerWidth = _props.hoverMarkerWidth;

	                var scale = this.props.timeScale;
	                var eventMarkers = [];

	                // Create and array of markers, one for each event
	                var i = 0;
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    var _loop = function _loop() {
	                        var event = _step.value;

	                        var begin = event.begin();
	                        var end = event.end();
	                        var beginPos = scale(begin) >= 0 ? scale(begin) : 0;
	                        var endPos =
	                            scale(end) <= _this2.props.width ? scale(end) : _this2.props.width;

	                        var transform = "translate(" + beginPos + ",0)";
	                        var isHover = _this2.state.hover
	                            ? entry.Event.is(event, _this2.state.hover)
	                            : false;

	                        var state = void 0;
	                        if (isHover) {
	                            state = "hover";
	                        } else {
	                            state = "normal";
	                        }

	                        var barNormalStyle = {};
	                        var barStyle = {};
	                        if (_this2.props.style) {
	                            barNormalStyle = _this2.props.style(event, "normal");
	                            barStyle = _this2.props.style(event, state);
	                        }

	                        var label = "";
	                        if (_this2.props.label) {
	                            if (_underscore2.default.isString(_this2.props.label)) {
	                                label = _this2.props.label;
	                            } else if (_underscore2.default.isFunction(_this2.props.label)) {
	                                label = _this2.props.label(event);
	                            }
	                        }

	                        var x = _this2.props.spacing;
	                        var y = 0;
	                        var width = endPos - beginPos - 2 * _this2.props.spacing;
	                        width = width < 0 ? 0 : width;
	                        var height = _this2.props.size;

	                        var eventLabelStyle = {
	                            fontWeight: 100,
	                            fontSize: 11
	                        };

	                        var text = null;
	                        if (isHover) {
	                            text = _react2.default.createElement(
	                                "g",
	                                null,
	                                _react2.default.createElement("rect", {
	                                    className: "eventchart-marker",
	                                    x: x,
	                                    y: y,
	                                    width: hoverMarkerWidth,
	                                    height: height + 4,
	                                    style: (0, _merge2.default)(true, barNormalStyle, {
	                                        pointerEvents: "none"
	                                    })
	                                }),
	                                _react2.default.createElement(
	                                    "text",
	                                    {
	                                        style: _extends(
	                                            {
	                                                pointerEvents: "none",
	                                                fill: "#444"
	                                            },
	                                            eventLabelStyle
	                                        ),
	                                        x: 8 + textOffsetX,
	                                        y: 15 + textOffsetY
	                                    },
	                                    label
	                                )
	                            );
	                        }

	                        eventMarkers.push(
	                            _react2.default.createElement(
	                                "g",
	                                { transform: transform, key: i },
	                                _react2.default.createElement("rect", {
	                                    className: "eventchart-marker",
	                                    x: x,
	                                    y: y,
	                                    width: width,
	                                    height: height,
	                                    style: barStyle,
	                                    onClick: function onClick(e) {
	                                        return _this2.handleClick(e, event);
	                                    },
	                                    onMouseLeave: function onMouseLeave() {
	                                        return _this2.onMouseLeave();
	                                    },
	                                    onMouseOver: function onMouseOver(e) {
	                                        return _this2.onMouseOver(e, event);
	                                    }
	                                }),
	                                text
	                            )
	                        );

	                        i += 1;
	                    };

	                    for (
	                        var _iterator = series.events()[Symbol.iterator](), _step;
	                        !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
	                        _iteratorNormalCompletion = true
	                    ) {
	                        _loop();
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                return _react2.default.createElement("g", null, eventMarkers);
	            }
	        }
	    ]);

	    return EventChart;
	})(_react2.default.Component);

	exports.default = EventChart;

	EventChart.defaultProps = {
	    visible: true,
	    size: 30,
	    spacing: 0,
	    textOffsetX: 0,
	    textOffsetY: 0,
	    hoverMarkerWidth: 5
	};

	EventChart.propTypes = {
	    /**
	     * Show or hide this chart
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize
	     */
	    series: _propTypes2.default.instanceOf(entry.TimeSeries).isRequired,

	    /**
	     * Set hover label text
	     * When label is function callback it will be called with current event.
	     */
	    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

	    /**
	     * The height in pixels for the event bar
	     */
	    size: _propTypes2.default.number,

	    /**
	     * The distance in pixels to inset the event bar from its actual timerange
	     */
	    spacing: _propTypes2.default.number,

	    /**
	     * Marker width on hover
	     */
	    hoverMarkerWidth: _propTypes2.default.number,

	    /**
	     * Hover text offset position X
	     */
	    textOffsetX: _propTypes2.default.number,

	    /**
	     * Hover text offset position Y
	     */
	    textOffsetY: _propTypes2.default.number,

	    /**
	     * A function that should return the style of the event box
	     */
	    style: _propTypes2.default.func,

	    /**
	     * Event selection on click. Will be called with selected event.
	     */
	    onSelectionChange: _propTypes2.default.func,

	    /**
	     * Mouse leave at end of hover event
	     */
	    onMouseLeave: _propTypes2.default.func,

	    /**
	     * Mouse over event callback
	     */
	    onMouseOver: _propTypes2.default.func,

	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func,

	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number
	};
	});

	unwrapExports(EventChart_1);

	var LabelAxis_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _ValueList2 = _interopRequireDefault(ValueList_1);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Renders a 'axis' that display a label for a data channel and a
	 * max and average value:
	 * ```
	 *      +----------------+-----+------- ...
	 *      | Traffic        | 120 |
	 *      | Max 100 Gbps   |     | Chart  ...
	 *      | Avg 26 Gbps    | 0   |
	 *      +----------------+-----+------- ...
	 * ```
	 *
	 * This can be used for data channel style displays where the user will see many
	 * rows of data stacked on top of each other and will need to interact with the
	 * data to see actual values. You can combine this with the `ValueAxis` to help
	 * do that. See the Cycling example for exactly how to arrange that.
	 *
	 */
	var LabelAxis = (function(_React$Component) {
	    _inherits(LabelAxis, _React$Component);

	    function LabelAxis() {
	        _classCallCheck(this, LabelAxis);

	        return _possibleConstructorReturn(
	            this,
	            (LabelAxis.__proto__ || Object.getPrototypeOf(LabelAxis)).apply(this, arguments)
	        );
	    }

	    _createClass(LabelAxis, [
	        {
	            key: "renderAxis",
	            value: function renderAxis() {
	                var valueWidth = this.props.valWidth;
	                var rectWidth = this.props.width - valueWidth;

	                var style = {
	                    fontSize: 11,
	                    textAnchor: "left",
	                    fill: "#bdbdbd"
	                };

	                if (this.props.hideScale) {
	                    return _react2.default.createElement("g", null);
	                }
	                var valXPos = rectWidth + 3; // padding
	                var fmt = this.props.format;
	                var maxStr = (0, _d3Format.format)(fmt)(this.props.max);
	                var minStr = (0, _d3Format.format)(fmt)(this.props.min);

	                return _react2.default.createElement(
	                    "g",
	                    null,
	                    _react2.default.createElement(
	                        "text",
	                        { x: valXPos, y: 0, dy: "1.2em", style: style },
	                        maxStr
	                    ),
	                    _react2.default.createElement(
	                        "text",
	                        { x: valXPos, y: this.props.height, style: style },
	                        minStr
	                    )
	                );
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                var valueWidth = this.props.valWidth;
	                var rectWidth = this.props.width - valueWidth;

	                var labelStyle = {
	                    fontSize: 12,
	                    textAnchor: "middle",
	                    fill: "#838383"
	                };

	                var valueList = null;
	                var labelYPos = void 0;
	                if (this.props.values) {
	                    labelYPos = Math.max(parseInt(this.props.height / 4, 10), 10);
	                    valueList = _react2.default.createElement(_ValueList2.default, {
	                        style: { fill: "none", stroke: "none" },
	                        values: this.props.values,
	                        width: rectWidth
	                    });
	                } else {
	                    labelYPos = parseInt(this.props.height / 2, 10);
	                }

	                return _react2.default.createElement(
	                    "g",
	                    null,
	                    _react2.default.createElement("rect", {
	                        x: "0",
	                        y: "0",
	                        width: rectWidth,
	                        height: this.props.height,
	                        style: { fill: "none", stroke: "none" }
	                    }),
	                    _react2.default.createElement(
	                        "text",
	                        { x: parseInt(rectWidth / 2, 10), y: labelYPos, style: labelStyle },
	                        this.props.label
	                    ),
	                    _react2.default.createElement(
	                        "g",
	                        { transform: "translate(0," + (labelYPos + 2) + ")" },
	                        valueList
	                    ),
	                    this.renderAxis()
	                );
	            }
	        }
	    ]);

	    return LabelAxis;
	})(_react2.default.Component);

	exports.default = LabelAxis;

	LabelAxis.propTypes = {
	    /**
	     * The label to show as the axis.
	     */
	    label: _propTypes2.default.string.isRequired,

	    /**
	     * Show or hide the max/min values that appear alongside the label
	     */
	    hideScale: _propTypes2.default.bool,

	    /**
	     * Supply a list of label value pairs to render within the LabelAxis.
	     * This expects an array of objects. Each object is of the form:
	     *     {label: "Speed", value: "26.2 mph"}.
	     */
	    values: _propTypes2.default.arrayOf(
	        _propTypes2.default.shape({
	            label: _propTypes2.default.string, // eslint-disable-line
	            value: _propTypes2.default.oneOfType([
	                // eslint-disable-line
	                _propTypes2.default.number,
	                _propTypes2.default.string
	            ])
	        })
	    ).isRequired,

	    /**
	     * Width to provide the values
	     */
	    valWidth: _propTypes2.default.number,

	    /**
	     * Max value of the axis scale
	     */
	    max: _propTypes2.default.number.isRequired,

	    /**
	     * Min value of the axis scale
	     */
	    min: _propTypes2.default.number.isRequired,

	    /**
	     * If values are numbers, use this format string
	     */
	    format: _propTypes2.default.string,

	    /**
	     * The width of the axis
	     */
	    width: _propTypes2.default.number,

	    /**
	     * The height of the axis
	     */
	    height: _propTypes2.default.number
	};

	LabelAxis.defaultProps = {
	    hideScale: false,
	    values: [],
	    valWidth: 40,
	    format: ".2f"
	};
	});

	unwrapExports(LabelAxis_1);

	/*!
	 * isobject <https://github.com/jonschlinkert/isobject>
	 *
	 * Copyright (c) 2014-2017, Jon Schlinkert.
	 * Released under the MIT License.
	 */

	var isobject = function isObject(val) {
	  return val != null && typeof val === 'object' && Array.isArray(val) === false;
	};

	function isObjectObject(o) {
	  return isobject(o) === true
	    && Object.prototype.toString.call(o) === '[object Object]';
	}

	var isPlainObject$1 = function isPlainObject(o) {
	  var ctor,prot;

	  if (isObjectObject(o) === false) return false;

	  // If has modified constructor
	  ctor = o.constructor;
	  if (typeof ctor !== 'function') return false;

	  // If has modified prototype
	  prot = ctor.prototype;
	  if (isObjectObject(prot) === false) return false;

	  // If constructor does not have an Object-specific method
	  if (prot.hasOwnProperty('isPrototypeOf') === false) {
	    return false;
	  }

	  // Most likely a plain Object
	  return true;
	};

	var stylis = createCommonjsModule(function (module, exports) {
	/*
	 *          __        ___
	 *    _____/ /___  __/ (_)____
	 *   / ___/ __/ / / / / / ___/
	 *  (__  ) /_/ /_/ / / (__  )
	 * /____/\__/\__, /_/_/____/
	 *          /____/
	 *
	 * light - weight css preprocessor @licence MIT
	 */
	(function (factory) {/* eslint-disable */
		module['exports'] = factory(null);
	}(/** @param {*=} options */function factory (options) {/* eslint-disable */

		/**
		 * Notes
		 *
		 * The ['<method name>'] pattern is used to support closure compiler
		 * the jsdoc signatures are also used to the same effect
		 *
		 * ----
		 *
		 * int + int + int === n4 [faster]
		 *
		 * vs
		 *
		 * int === n1 && int === n2 && int === n3
		 *
		 * ----
		 *
		 * switch (int) { case ints...} [faster]
		 *
		 * vs
		 *
		 * if (int == 1 && int === 2 ...)
		 *
		 * ----
		 *
		 * The (first*n1 + second*n2 + third*n3) format used in the property parser
		 * is a simple way to hash the sequence of characters
		 * taking into account the index they occur in
		 * since any number of 3 character sequences could produce duplicates.
		 *
		 * On the other hand sequences that are directly tied to the index of the character
		 * resolve a far more accurate measure, it's also faster
		 * to evaluate one condition in a switch statement
		 * than three in an if statement regardless of the added math.
		 *
		 * This allows the vendor prefixer to be both small and fast.
		 */

		var nullptn = /^\0+/g; /* matches leading null characters */
		var formatptn = /[\0\r\f]/g; /* matches new line, null and formfeed characters */
		var colonptn = /: */g; /* splits animation rules */
		var cursorptn = /zoo|gra/; /* assert cursor varient */
		var transformptn = /([,: ])(transform)/g; /* vendor prefix transform, older webkit */
		var animationptn = /,+\s*(?![^(]*[)])/g; /* splits multiple shorthand notation animations */
		var propertiesptn = / +\s*(?![^(]*[)])/g; /* animation properties */
		var elementptn = / *[\0] */g; /* selector elements */
		var selectorptn = /,\r+?/g; /* splits selectors */
		var andptn = /([\t\r\n ])*\f?&/g; /* match & */
		var escapeptn = /:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g; /* matches :global(.*) */
		var invalidptn = /\W+/g; /* removes invalid characters from keyframes */
		var keyframeptn = /@(k\w+)\s*(\S*)\s*/; /* matches @keyframes $1 */
		var plcholdrptn = /::(place)/g; /* match ::placeholder varient */
		var readonlyptn = /:(read-only)/g; /* match :read-only varient */
		var beforeptn = /\s+(?=[{\];=:>])/g; /* matches \s before ] ; = : */
		var afterptn = /([[}=:>])\s+/g; /* matches \s after characters [ } = : */
		var tailptn = /(\{[^{]+?);(?=\})/g; /* matches tail semi-colons ;} */
		var whiteptn = /\s{2,}/g; /* matches repeating whitespace */
		var pseudoptn = /([^\(])(:+) */g; /* pseudo element */
		var writingptn = /[svh]\w+-[tblr]{2}/; /* match writing mode property values */
		var supportsptn = /\(\s*(.*)\s*\)/g; /* match supports (groups) */
		var propertyptn = /([\s\S]*?);/g; /* match properties leading semicolon */
		var selfptn = /-self|flex-/g; /* match flex- and -self in align-self: flex-*; */
		var pseudofmt = /[^]*?(:[rp][el]a[\w-]+)[^]*/; /* extrats :readonly or :placholder from selector */
		var dimensionptn = /stretch|:\s*\w+\-(?:conte|avail)/; /* match max/min/fit-content, fill-available

		/* vendors */
		var webkit = '-webkit-';
		var moz = '-moz-';
		var ms = '-ms-';

		/* character codes */
		var SEMICOLON = 59; /* ; */
		var CLOSEBRACES = 125; /* } */
		var OPENBRACES = 123; /* { */
		var OPENPARENTHESES = 40; /* ( */
		var CLOSEPARENTHESES = 41; /* ) */
		var OPENBRACKET = 91; /* [ */
		var CLOSEBRACKET = 93; /* ] */
		var NEWLINE = 10; /* \n */
		var CARRIAGE = 13; /* \r */
		var TAB = 9; /* \t */
		var AT = 64; /* @ */
		var SPACE = 32; /*   */
		var AND = 38; /* & */
		var DASH = 45; /* - */
		var UNDERSCORE = 95; /* _ */
		var STAR = 42; /* * */
		var COMMA = 44; /* , */
		var COLON = 58; /* : */
		var SINGLEQUOTE = 39; /* ' */
		var DOUBLEQUOTE = 34; /* " */
		var FOWARDSLASH = 47; /* / */
		var GREATERTHAN = 62; /* > */
		var PLUS = 43; /* + */
		var TILDE = 126; /* ~ */
		var NULL = 0; /* \0 */
		var FORMFEED = 12; /* \f */
		var VERTICALTAB = 11; /* \v */

		/* special identifiers */
		var KEYFRAME = 107; /* k */
		var MEDIA = 109; /* m */
		var SUPPORTS = 115; /* s */
		var PLACEHOLDER = 112; /* p */
		var READONLY = 111; /* o */
		var IMPORT = 169; /* <at>i */
		var CHARSET = 163; /* <at>c */
		var DOCUMENT = 100; /* <at>d */
		var PAGE = 112; /* <at>p */

		var column = 1; /* current column */
		var line = 1; /* current line numebr */
		var pattern = 0; /* :pattern */

		var cascade = 1; /* #id h1 h2 vs h1#id h2#id  */
		var prefix = 1; /* vendor prefix */
		var escape = 1; /* escape :global() pattern */
		var compress = 0; /* compress output */
		var semicolon = 0; /* no/semicolon option */
		var preserve = 0; /* preserve empty selectors */

		/* empty reference */
		var array = [];

		/* plugins */
		var plugins = [];
		var plugged = 0;
		var should = null;

		/* plugin context */
		var POSTS = -2;
		var PREPS = -1;
		var UNKWN = 0;
		var PROPS = 1;
		var BLCKS = 2;
		var ATRUL = 3;

		/* plugin newline context */
		var unkwn = 0;

		/* keyframe animation */
		var keyed = 1;
		var key = '';

		/* selector namespace */
		var nscopealt = '';
		var nscope = '';

		/**
		 * Compile
		 *
		 * @param {Array<string>} parent
		 * @param {Array<string>} current
		 * @param {string} body
		 * @param {number} id
		 * @param {number} depth
		 * @return {string}
		 */
		function compile (parent, current, body, id, depth) {
			var bracket = 0; /* brackets [] */
			var comment = 0; /* comments /* // or /* */
			var parentheses = 0; /* functions () */
			var quote = 0; /* quotes '', "" */

			var first = 0; /* first character code */
			var second = 0; /* second character code */
			var code = 0; /* current character code */
			var tail = 0; /* previous character code */
			var trail = 0; /* character before previous code */
			var peak = 0; /* previous non-whitespace code */

			var counter = 0; /* count sequence termination */
			var context = 0; /* track current context */
			var atrule = 0; /* track @at-rule context */
			var pseudo = 0; /* track pseudo token index */
			var caret = 0; /* current character index */
			var format = 0; /* control character formating context */
			var insert = 0; /* auto semicolon insertion */
			var invert = 0; /* inverted selector pattern */
			var length = 0; /* generic length address */
			var eof = body.length; /* end of file(length) */
			var eol = eof - 1; /* end of file(characters) */

			var char = ''; /* current character */
			var chars = ''; /* current buffer of characters */
			var child = ''; /* next buffer of characters */
			var out = ''; /* compiled body */
			var children = ''; /* compiled children */
			var flat = ''; /* compiled leafs */
			var selector; /* generic selector address */
			var result; /* generic address */

			// ...build body
			while (caret < eof) {
				code = body.charCodeAt(caret);

				// eof varient
				if (caret === eol) {
					// last character + noop context, add synthetic padding for noop context to terminate
					if (comment + quote + parentheses + bracket !== 0) {
						if (comment !== 0) {
							code = comment === FOWARDSLASH ? NEWLINE : FOWARDSLASH;
						}

						quote = parentheses = bracket = 0;
						eof++;
						eol++;
					}
				}

				if (comment + quote + parentheses + bracket === 0) {
					// eof varient
					if (caret === eol) {
						if (format > 0) {
							chars = chars.replace(formatptn, '');
						}

						if (chars.trim().length > 0) {
							switch (code) {
								case SPACE:
								case TAB:
								case SEMICOLON:
								case CARRIAGE:
								case NEWLINE: {
									break
								}
								default: {
									chars += body.charAt(caret);
								}
							}

							code = SEMICOLON;
						}
					}

					// auto semicolon insertion
					if (insert === 1) {
						switch (code) {
							// false flags
							case OPENBRACES:
							case CLOSEBRACES:
							case SEMICOLON:
							case DOUBLEQUOTE:
							case SINGLEQUOTE:
							case OPENPARENTHESES:
							case CLOSEPARENTHESES:
							case COMMA: {
								insert = 0;
							}
							// ignore
							case TAB:
							case CARRIAGE:
							case NEWLINE:
							case SPACE: {
								break
							}
							// valid
							default: {
								insert = 0;
								length = caret;
								first = code;
								caret--;
								code = SEMICOLON;

								while (length < eof) {
									switch (body.charCodeAt(length++)) {
										case NEWLINE:
										case CARRIAGE:
										case SEMICOLON: {
											++caret;
											code = first;
											length = eof;
											break
										}
										case COLON: {
											if (format > 0) {
												++caret;
												code = first;
											}
										}
										case OPENBRACES: {
											length = eof;
										}
									}
								}
							}
						}
					}

					// token varient
					switch (code) {
						case OPENBRACES: {
							chars = chars.trim();
							first = chars.charCodeAt(0);
							counter = 1;
							length = ++caret;

							while (caret < eof) {
								code = body.charCodeAt(caret);

								switch (code) {
									case OPENBRACES: {
										counter++;
										break
									}
									case CLOSEBRACES: {
										counter--;
										break
									}
								}

								if (counter === 0) {
									break
								}

								caret++;
							}

							child = body.substring(length, caret);

							if (first === NULL) {
								first = (chars = chars.replace(nullptn, '').trim()).charCodeAt(0);
							}

							switch (first) {
								// @at-rule
								case AT: {
									if (format > 0) {
										chars = chars.replace(formatptn, '');
									}

									second = chars.charCodeAt(1);

									switch (second) {
										case DOCUMENT:
										case MEDIA:
										case SUPPORTS:
										case DASH: {
											selector = current;
											break
										}
										default: {
											selector = array;
										}
									}

									child = compile(current, selector, child, second, depth+1);
									length = child.length;

									// preserve empty @at-rule
									if (preserve > 0 && length === 0) {
										length = chars.length;
									}

									// execute plugins, @at-rule context
									if (plugged > 0) {
										selector = select(array, chars, invert);
										result = proxy(ATRUL, child, selector, current, line, column, length, second, depth, id);
										chars = selector.join('');

										if (result !== void 0) {
											if ((length = (child = result.trim()).length) === 0) {
												second = 0;
												child = '';
											}
										}
									}

									if (length > 0) {
										switch (second) {
											case SUPPORTS: {
												chars = chars.replace(supportsptn, supports);
											}
											case DOCUMENT:
											case MEDIA:
											case DASH: {
												child = chars + '{' + child + '}';
												break
											}
											case KEYFRAME: {
												chars = chars.replace(keyframeptn, '$1 $2' + (keyed > 0 ? key : ''));
												child = chars + '{' + child + '}';

												if (prefix === 1 || (prefix === 2 && vendor('@'+child, 3))) {
													child = '@' + webkit + child + '@' + child;
												} else {
													child = '@' + child;
												}
												break
											}
											default: {
												child = chars + child;

												if (id === PAGE) {
													child = (out += child, '');
												}
											}
										}
									} else {
										child = '';
									}

									break
								}
								// selector
								default: {
									child = compile(current, select(current, chars, invert), child, id, depth+1);
								}
							}

							children += child;

							// reset
							context = 0;
							insert = 0;
							pseudo = 0;
							format = 0;
							invert = 0;
							atrule = 0;
							chars = '';
							child = '';
							code = body.charCodeAt(++caret);
							break
						}
						case CLOSEBRACES:
						case SEMICOLON: {
							chars = (format > 0 ? chars.replace(formatptn, '') : chars).trim();

							if ((length = chars.length) > 1) {
								// monkey-patch missing colon
								if (pseudo === 0) {
									first = chars.charCodeAt(0);

									// first character is a letter or dash, buffer has a space character
									if ((first === DASH || first > 96 && first < 123)) {
										length = (chars = chars.replace(' ', ':')).length;
									}
								}

								// execute plugins, property context
								if (plugged > 0) {
									if ((result = proxy(PROPS, chars, current, parent, line, column, out.length, id, depth, id)) !== void 0) {
										if ((length = (chars = result.trim()).length) === 0) {
											chars = '\0\0';
										}
									}
								}

								first = chars.charCodeAt(0);
								second = chars.charCodeAt(1);

								switch (first + second) {
									case NULL: {
										break
									}
									case IMPORT:
									case CHARSET: {
										flat += chars + body.charAt(caret);
										break
									}
									default: {
										if (chars.charCodeAt(length-1) === COLON)
											break

										out += property(chars, first, second, chars.charCodeAt(2));
									}
								}
							}

							// reset
							context = 0;
							insert = 0;
							pseudo = 0;
							format = 0;
							invert = 0;
							chars = '';
							code = body.charCodeAt(++caret);
							break
						}
					}
				}

				// parse characters
				switch (code) {
					case CARRIAGE:
					case NEWLINE: {
						// auto insert semicolon
						if (comment + quote + parentheses + bracket + semicolon === 0) {
							// valid non-whitespace characters that
							// may precede a newline
							switch (peak) {
								case CLOSEPARENTHESES:
								case SINGLEQUOTE:
								case DOUBLEQUOTE:
								case AT:
								case TILDE:
								case GREATERTHAN:
								case STAR:
								case PLUS:
								case FOWARDSLASH:
								case DASH:
								case COLON:
								case COMMA:
								case SEMICOLON:
								case OPENBRACES:
								case CLOSEBRACES: {
									break
								}
								default: {
									// current buffer has a colon
									if (pseudo > 0) {
										insert = 1;
									}
								}
							}
						}

						// terminate line comment
						if (comment === FOWARDSLASH) {
							comment = 0;
						} else if (cascade + context === 0) {
							format = 1;
							chars += '\0';
						}

						// execute plugins, newline context
						if (plugged * unkwn > 0) {
							proxy(UNKWN, chars, current, parent, line, column, out.length, id, depth, id);
						}

						// next line, reset column position
						column = 1;
						line++;
						break
					}
					case SEMICOLON:
					case CLOSEBRACES: {
						if (comment + quote + parentheses + bracket === 0) {
							column++;
							break
						}
					}
					default: {
						// increment column position
						column++;

						// current character
						char = body.charAt(caret);

						// remove comments, escape functions, strings, attributes and prepare selectors
						switch (code) {
							case TAB:
							case SPACE: {
								if (quote + bracket + comment === 0) {
									switch (tail) {
										case COMMA:
										case COLON:
										case TAB:
										case SPACE: {
											char = '';
											break
										}
										default: {
											if (code !== SPACE) {
												char = ' ';
											}
										}
									}
								}
								break
							}
							// escape breaking control characters
							case NULL: {
								char = '\\0';
								break
							}
							case FORMFEED: {
								char = '\\f';
								break
							}
							case VERTICALTAB: {
								char = '\\v';
								break
							}
							// &
							case AND: {
								// inverted selector pattern i.e html &
								if (quote + comment + bracket === 0 && cascade > 0) {
									invert = 1;
									format = 1;
									char = '\f' + char;
								}
								break
							}
							// ::p<l>aceholder, l
							// :read-on<l>y, l
							case 108: {
								if (quote + comment + bracket + pattern === 0 && pseudo > 0) {
									switch (caret - pseudo) {
										// ::placeholder
										case 2: {
											if (tail === PLACEHOLDER && body.charCodeAt(caret-3) === COLON) {
												pattern = tail;
											}
										}
										// :read-only
										case 8: {
											if (trail === READONLY) {
												pattern = trail;
											}
										}
									}
								}
								break
							}
							// :<pattern>
							case COLON: {
								if (quote + comment + bracket === 0) {
									pseudo = caret;
								}
								break
							}
							// selectors
							case COMMA: {
								if (comment + parentheses + quote + bracket === 0) {
									format = 1;
									char += '\r';
								}
								break
							}
							// quotes
							case DOUBLEQUOTE: {
								if (comment === 0) {
									quote = quote === code ? 0 : (quote === 0 ? code : quote);
								}
								break
							}
							case SINGLEQUOTE: {
								if (comment === 0) {
									quote = quote === code ? 0 : (quote === 0 ? code : quote);
								}
								break
							}
							// attributes
							case OPENBRACKET: {
								if (quote + comment + parentheses === 0) {
									bracket++;
								}
								break
							}
							case CLOSEBRACKET: {
								if (quote + comment + parentheses === 0) {
									bracket--;
								}
								break
							}
							// functions
							case CLOSEPARENTHESES: {
								if (quote + comment + bracket === 0) {
									parentheses--;
								}
								break
							}
							case OPENPARENTHESES: {
								if (quote + comment + bracket === 0) {
									if (context === 0) {
										switch (tail*2 + trail*3) {
											// :matches
											case 533: {
												break
											}
											// :global, :not, :nth-child etc...
											default: {
												counter = 0;
												context = 1;
											}
										}
									}

									parentheses++;
								}
								break
							}
							case AT: {
								if (comment + parentheses + quote + bracket + pseudo + atrule === 0) {
									atrule = 1;
								}
								break
							}
							// block/line comments
							case STAR:
							case FOWARDSLASH: {
								if (quote + bracket + parentheses > 0) {
									break
								}

								switch (comment) {
									// initialize line/block comment context
									case 0: {
										switch (code*2 + body.charCodeAt(caret+1)*3) {
											// //
											case 235: {
												comment = FOWARDSLASH;
												break
											}
											// /*
											case 220: {
												length = caret;
												comment = STAR;
												break
											}
										}
										break
									}
									// end block comment context
									case STAR: {
										if (code === FOWARDSLASH && tail === STAR) {
											// /*<!> ... */, !
											if (body.charCodeAt(length+2) === 33) {
												out += body.substring(length, caret+1);
											}
											char = '';
											comment = 0;
										}
									}
								}
							}
						}

						// ignore comment blocks
						if (comment === 0) {
							// aggressive isolation mode, divide each individual selector
							// including selectors in :not function but excluding selectors in :global function
							if (cascade + quote + bracket + atrule === 0 && id !== KEYFRAME && code !== SEMICOLON) {
								switch (code) {
									case COMMA:
									case TILDE:
									case GREATERTHAN:
									case PLUS:
									case CLOSEPARENTHESES:
									case OPENPARENTHESES: {
										if (context === 0) {
											// outside of an isolated context i.e nth-child(<...>)
											switch (tail) {
												case TAB:
												case SPACE:
												case NEWLINE:
												case CARRIAGE: {
													char = char + '\0';
													break
												}
												default: {
													char = '\0' + char + (code === COMMA ? '' : '\0');
												}
											}
											format = 1;
										} else {
											// within an isolated context, sleep untill it's terminated
											switch (code) {
												case OPENPARENTHESES: {
													context = ++counter;
													break
												}
												case CLOSEPARENTHESES: {
													if ((context = --counter) === 0) {
														format = 1;
														char += '\0';
													}
													break
												}
											}
										}
										break
									}
									case TAB:
									case SPACE: {
										switch (tail) {
											case NULL:
											case OPENBRACES:
											case CLOSEBRACES:
											case SEMICOLON:
											case COMMA:
											case FORMFEED:
											case TAB:
											case SPACE:
											case NEWLINE:
											case CARRIAGE: {
												break
											}
											default: {
												// ignore in isolated contexts
												if (context === 0) {
													format = 1;
													char += '\0';
												}
											}
										}
									}
								}
							}

							// concat buffer of characters
							chars += char;

							// previous non-whitespace character code
							if (code !== SPACE && code !== TAB) {
								peak = code;
							}
						}
					}
				}

				// tail character codes
				trail = tail;
				tail = code;

				// visit every character
				caret++;
			}

			length = out.length;

			// preserve empty selector
	 		if (preserve > 0) {
	 			if (length === 0 && children.length === 0 && (current[0].length === 0) === false) {
	 				if (id !== MEDIA || (current.length === 1 && (cascade > 0 ? nscopealt : nscope) === current[0])) {
						length = current.join(',').length + 2;
	 				}
	 			}
			}

			if (length > 0) {
				// cascade isolation mode?
				selector = cascade === 0 && id !== KEYFRAME ? isolate(current) : current;

				// execute plugins, block context
				if (plugged > 0) {
					result = proxy(BLCKS, out, selector, parent, line, column, length, id, depth, id);

					if (result !== void 0 && (out = result).length === 0) {
						return flat + out + children
					}
				}

				out = selector.join(',') + '{' + out + '}';

				if (prefix*pattern !== 0) {
					if (prefix === 2 && !vendor(out, 2))
						pattern = 0;

					switch (pattern) {
						// ::read-only
						case READONLY: {
							out = out.replace(readonlyptn, ':'+moz+'$1')+out;
							break
						}
						// ::placeholder
						case PLACEHOLDER: {
							out = (
								out.replace(plcholdrptn, '::' + webkit + 'input-$1') +
								out.replace(plcholdrptn, '::' + moz + '$1') +
								out.replace(plcholdrptn, ':' + ms + 'input-$1') + out
							);
							break
						}
					}

					pattern = 0;
				}
			}

			return flat + out + children
		}

		/**
		 * Select
		 *
		 * @param {Array<string>} parent
		 * @param {string} current
		 * @param {number} invert
		 * @return {Array<string>}
		 */
		function select (parent, current, invert) {
			var selectors = current.trim().split(selectorptn);
			var out = selectors;

			var length = selectors.length;
			var l = parent.length;

			switch (l) {
				// 0-1 parent selectors
				case 0:
				case 1: {
					for (var i = 0, selector = l === 0 ? '' : parent[0] + ' '; i < length; ++i) {
						out[i] = scope(selector, out[i], invert, l).trim();
					}
					break
				}
				// >2 parent selectors, nested
				default: {
					for (var i = 0, j = 0, out = []; i < length; ++i) {
						for (var k = 0; k < l; ++k) {
							out[j++] = scope(parent[k] + ' ', selectors[i], invert, l).trim();
						}
					}
				}
			}

			return out
		}

		/**
		 * Scope
		 *
		 * @param {string} parent
		 * @param {string} current
		 * @param {number} invert
		 * @param {number} level
		 * @return {string}
		 */
		function scope (parent, current, invert, level) {
			var selector = current;
			var code = selector.charCodeAt(0);

			// trim leading whitespace
			if (code < 33) {
				code = (selector = selector.trim()).charCodeAt(0);
			}

			switch (code) {
				// &
				case AND: {
					switch (cascade + level) {
						case 0:
						case 1: {
							if (parent.trim().length === 0) {
								break
							}
						}
						default: {
							return selector.replace(andptn, '$1'+parent.trim())
						}
					}
					break
				}
				// :
				case COLON: {
					switch (selector.charCodeAt(1)) {
						// g in :global
						case 103: {
							if (escape > 0 && cascade > 0) {
								return selector.replace(escapeptn, '$1').replace(andptn, '$1'+nscope)
							}
							break
						}
						default: {
							// :hover
							return parent.trim() + selector.replace(andptn, '$1'+parent.trim())
						}
					}
				}
				default: {
					// html &
					if (invert*cascade > 0 && selector.indexOf('\f') > 0) {
						return selector.replace(andptn, (parent.charCodeAt(0) === COLON ? '' : '$1')+parent.trim())
					}
				}
			}

			return parent + selector
		}

		/**
		 * Property
		 *
		 * @param {string} input
		 * @param {number} first
		 * @param {number} second
		 * @param {number} third
		 * @return {string}
		 */
		function property (input, first, second, third) {
			var index = 0;
			var out = input + ';';
			var hash = (first*2) + (second*3) + (third*4);
			var cache;

			// animation: a, n, i characters
			if (hash === 944) {
				return animation(out)
			} else if (prefix === 0 || (prefix === 2 && !vendor(out, 1))) {
				return out
			}

			// vendor prefix
			switch (hash) {
				// text-decoration/text-size-adjust/text-shadow/text-align/text-transform: t, e, x
				case 1015: {
					// text-shadow/text-align/text-transform, a
					return out.charCodeAt(10) === 97 ? webkit + out + out : out
				}
				// filter/fill f, i, l
				case 951: {
					// filter, t
					return out.charCodeAt(3) === 116 ? webkit + out + out : out
				}
				// color/column, c, o, l
				case 963: {
					// column, n
					return out.charCodeAt(5) === 110 ? webkit + out + out : out
				}
				// box-decoration-break, b, o, x
				case 1009: {
					if (out.charCodeAt(4) !== 100) {
						break
					}
				}
				// mask, m, a, s
				// clip-path, c, l, i
				case 969:
				case 942: {
					return webkit + out + out
				}
				// appearance: a, p, p
				case 978: {
					return webkit + out + moz + out + out
				}
				// hyphens: h, y, p
				// user-select: u, s, e
				case 1019:
				case 983: {
					return webkit + out + moz + out + ms + out + out
				}
				// background/backface-visibility, b, a, c
				case 883: {
					// backface-visibility, -
					return out.charCodeAt(8) === DASH ? webkit + out + out : out
				}
				// flex: f, l, e
				case 932: {
					if (out.charCodeAt(4) === DASH) {
						switch (out.charCodeAt(5)) {
							// flex-grow, g
							case 103: {
								return webkit + 'box-' + out.replace('-grow', '') + webkit + out + ms + out.replace('grow', 'positive') + out
							}
							// flex-shrink, s
							case 115: {
								return webkit + out + ms + out.replace('shrink', 'negative') + out
							}
							// flex-basis, b
							case 98: {
								return webkit + out + ms + out.replace('basis', 'preferred-size') + out
							}
						}
					}

					return webkit + out + ms + out + out
				}
				// order: o, r, d
				case 964: {
					return webkit + out + ms + 'flex' + '-' + out + out
				}
				// justify-items/justify-content, j, u, s
				case 1023: {
					// justify-content, c
					if (out.charCodeAt(8) !== 99) {
						break
					}

					cache = out.substring(out.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
					return webkit + 'box-pack' + cache + webkit + out + ms + 'flex-pack' + cache + out
				}
				// cursor, c, u, r
				case 1005: {
					return cursorptn.test(out) ? out.replace(colonptn, ':' + webkit) + out.replace(colonptn, ':' + moz) + out : out
				}
				// writing-mode, w, r, i
				case 1000: {
					cache = out.substring(13).trim();
					index = cache.indexOf('-') + 1;

					switch (cache.charCodeAt(0)+cache.charCodeAt(index)) {
						// vertical-lr
						case 226: {
							cache = out.replace(writingptn, 'tb');
							break
						}
						// vertical-rl
						case 232: {
							cache = out.replace(writingptn, 'tb-rl');
							break
						}
						// horizontal-tb
						case 220: {
							cache = out.replace(writingptn, 'lr');
							break
						}
						default: {
							return out
						}
					}

					return webkit + out + ms + cache + out
				}
				// position: sticky
				case 1017: {
					if (out.indexOf('sticky', 9) === -1) {
						return out
					}
				}
				// display(flex/inline-flex/inline-box): d, i, s
				case 975: {
					index = (out = input).length - 10;
					cache = (out.charCodeAt(index) === 33 ? out.substring(0, index) : out).substring(input.indexOf(':', 7) + 1).trim();

					switch (hash = cache.charCodeAt(0) + (cache.charCodeAt(7)|0)) {
						// inline-
						case 203: {
							// inline-box
							if (cache.charCodeAt(8) < 111) {
								break
							}
						}
						// inline-box/sticky
						case 115: {
							out = out.replace(cache, webkit+cache)+';'+out;
							break
						}
						// inline-flex
						// flex
						case 207:
						case 102: {
							out = (
								out.replace(cache, webkit+(hash > 102 ? 'inline-' : '')+'box')+';'+
								out.replace(cache, webkit+cache)+';'+
								out.replace(cache, ms+cache+'box')+';'+
								out
							);
						}
					}

					return out + ';'
				}
				// align-items, align-center, align-self: a, l, i, -
				case 938: {
					if (out.charCodeAt(5) === DASH) {
						switch (out.charCodeAt(6)) {
							// align-items, i
							case 105: {
								cache = out.replace('-items', '');
								return webkit + out + webkit + 'box-' + cache + ms + 'flex-' + cache + out
							}
							// align-self, s
							case 115: {
								return webkit + out + ms + 'flex-item-' + out.replace(selfptn, '') + out
							}
							// align-content
							default: {
								return webkit + out + ms + 'flex-line-pack' + out.replace('align-content', '').replace(selfptn, '') + out
							}
						}
					}
					break
				}
				// min/max
				case 973:
				case 989: {
					// min-/max- height/width/block-size/inline-size
					if (out.charCodeAt(3) !== DASH || out.charCodeAt(4) === 122) {
						break
					}
				}
				// height/width: min-content / width: max-content
				case 931:
				case 953: {
					if (dimensionptn.test(input) === true) {
						// stretch
						if ((cache = input.substring(input.indexOf(':') + 1)).charCodeAt(0) === 115)
							return property(input.replace('stretch', 'fill-available'), first, second, third).replace(':fill-available', ':stretch')
						else
							return out.replace(cache, webkit + cache) + out.replace(cache, moz + cache.replace('fill-', '')) + out
					}
					break
				}
				// transform, transition: t, r, a
				case 962: {
					out = webkit + out + (out.charCodeAt(5) === 102 ? ms + out : '') + out;

					// transitions
					if (second + third === 211 && out.charCodeAt(13) === 105 && out.indexOf('transform', 10) > 0) {
						return out.substring(0, out.indexOf(';', 27) + 1).replace(transformptn, '$1' + webkit + '$2') + out
					}

					break
				}
			}

			return out
		}

		/**
		 * Vendor
		 *
		 * @param {string} content
		 * @param {number} context
		 * @return {boolean}
		 */
		function vendor (content, context) {
			var index = content.indexOf(context === 1 ? ':' : '{');
			var key = content.substring(0, context !== 3 ? index : 10);
			var value = content.substring(index + 1, content.length - 1);

			return should(context !== 2 ? key : key.replace(pseudofmt, '$1'), value, context)
		}

		/**
		 * Supports
		 *
		 * @param {string} match
		 * @param {string} group
		 * @return {string}
		 */
		function supports (match, group) {
			var out = property(group, group.charCodeAt(0), group.charCodeAt(1), group.charCodeAt(2));

			return out !== group+';' ? out.replace(propertyptn, ' or ($1)').substring(4) : '('+group+')'
		}

		/**
		 * Animation
		 *
		 * @param {string} input
		 * @return {string}
		 */
		function animation (input) {
			var length = input.length;
			var index = input.indexOf(':', 9) + 1;
			var declare = input.substring(0, index).trim();
			var out = input.substring(index, length-1).trim();

			switch (input.charCodeAt(9)*keyed) {
				case 0: {
					break
				}
				// animation-*, -
				case DASH: {
					// animation-name, n
					if (input.charCodeAt(10) !== 110) {
						break
					}
				}
				// animation/animation-name
				default: {
					// split in case of multiple animations
					var list = out.split((out = '', animationptn));

					for (var i = 0, index = 0, length = list.length; i < length; index = 0, ++i) {
						var value = list[i];
						var items = value.split(propertiesptn);

						while (value = items[index]) {
							var peak = value.charCodeAt(0);

							if (keyed === 1 && (
								// letters
								(peak > AT && peak < 90) || (peak > 96 && peak < 123) || peak === UNDERSCORE ||
								// dash but not in sequence i.e --
								(peak === DASH && value.charCodeAt(1) !== DASH)
							)) {
								// not a number/function
								switch (isNaN(parseFloat(value)) + (value.indexOf('(') !== -1)) {
									case 1: {
										switch (value) {
											// not a valid reserved keyword
											case 'infinite': case 'alternate': case 'backwards': case 'running':
											case 'normal': case 'forwards': case 'both': case 'none': case 'linear':
											case 'ease': case 'ease-in': case 'ease-out': case 'ease-in-out':
											case 'paused': case 'reverse': case 'alternate-reverse': case 'inherit':
											case 'initial': case 'unset': case 'step-start': case 'step-end': {
												break
											}
											default: {
												value += key;
											}
										}
									}
								}
							}

							items[index++] = value;
						}

						out += (i === 0 ? '' : ',') + items.join(' ');
					}
				}
			}

			out = declare + out + ';';

			if (prefix === 1 || (prefix === 2 && vendor(out, 1)))
				return webkit + out + out

			return out
		}

		/**
		 * Isolate
		 *
		 * @param {Array<string>} current
		 */
		function isolate (current) {
			for (var i = 0, length = current.length, selector = Array(length), padding, element; i < length; ++i) {
				// split individual elements in a selector i.e h1 h2 === [h1, h2]
				var elements = current[i].split(elementptn);
				var out = '';

				for (var j = 0, size = 0, tail = 0, code = 0, l = elements.length; j < l; ++j) {
					// empty element
					if ((size = (element = elements[j]).length) === 0 && l > 1) {
						continue
					}

					tail = out.charCodeAt(out.length-1);
					code = element.charCodeAt(0);
					padding = '';

					if (j !== 0) {
						// determine if we need padding
						switch (tail) {
							case STAR:
							case TILDE:
							case GREATERTHAN:
							case PLUS:
							case SPACE:
							case OPENPARENTHESES:  {
								break
							}
							default: {
								padding = ' ';
							}
						}
					}

					switch (code) {
						case AND: {
							element = padding + nscopealt;
						}
						case TILDE:
						case GREATERTHAN:
						case PLUS:
						case SPACE:
						case CLOSEPARENTHESES:
						case OPENPARENTHESES: {
							break
						}
						case OPENBRACKET: {
							element = padding + element + nscopealt;
							break
						}
						case COLON: {
							switch (element.charCodeAt(1)*2 + element.charCodeAt(2)*3) {
								// :global
								case 530: {
									if (escape > 0) {
										element = padding + element.substring(8, size - 1);
										break
									}
								}
								// :hover, :nth-child(), ...
								default: {
									if (j < 1 || elements[j-1].length < 1) {
										element = padding + nscopealt + element;
									}
								}
							}
							break
						}
						case COMMA: {
							padding = '';
						}
						default: {
							if (size > 1 && element.indexOf(':') > 0) {
								element = padding + element.replace(pseudoptn, '$1' + nscopealt + '$2');
							} else {
								element = padding + element + nscopealt;
							}
						}
					}

					out += element;
				}

				selector[i] = out.replace(formatptn, '').trim();
			}

			return selector
		}

		/**
		 * Proxy
		 *
		 * @param {number} context
		 * @param {string} content
		 * @param {Array<string>} selectors
		 * @param {Array<string>} parents
		 * @param {number} line
		 * @param {number} column
		 * @param {number} length
		 * @param {number} id
		 * @param {number} depth
		 * @param {number} at
		 * @return {(string|void|*)}
		 */
		function proxy (context, content, selectors, parents, line, column, length, id, depth, at) {
			for (var i = 0, out = content, next; i < plugged; ++i) {
				switch (next = plugins[i].call(stylis, context, out, selectors, parents, line, column, length, id, depth, at)) {
					case void 0:
					case false:
					case true:
					case null: {
						break
					}
					default: {
						out = next;
					}
				}
			}

			switch (out) {
				case void 0:
				case false:
				case true:
				case null:
				case content: {
					break
				}
				default: {
					return out
				}
			}
		}

		/**
		 * Minify
		 *
		 * @param {(string|*)} output
		 * @return {string}
		 */
		function minify (output) {
			return output
				.replace(formatptn, '')
				.replace(beforeptn, '')
				.replace(afterptn, '$1')
				.replace(tailptn, '$1')
				.replace(whiteptn, ' ')
		}

		/**
		 * Use
		 *
		 * @param {(Array<function(...?)>|function(...?)|number|void)?} plugin
		 */
		function use (plugin) {
			switch (plugin) {
				case void 0:
				case null: {
					plugged = plugins.length = 0;
					break
				}
				default: {
					switch (plugin.constructor) {
						case Array: {
							for (var i = 0, length = plugin.length; i < length; ++i) {
								use(plugin[i]);
							}
							break
						}
						case Function: {
							plugins[plugged++] = plugin;
							break
						}
						case Boolean: {
							unkwn = !!plugin|0;
						}
					}
				}
	 		}

	 		return use
		}

		/**
		 * Set
		 *
		 * @param {*} options
		 */
		function set (options) {
			for (var name in options) {
				var value = options[name];
				switch (name) {
					case 'keyframe': keyed = value|0; break
					case 'global': escape = value|0; break
					case 'cascade': cascade = value|0; break
					case 'compress': compress = value|0; break
					case 'semicolon': semicolon = value|0; break
					case 'preserve': preserve = value|0; break
					case 'prefix':
						should = null;

						if (!value) {
							prefix = 0;
						} else if (typeof value !== 'function') {
							prefix = 1;
						} else {
							prefix = 2;
							should = value;
						}
				}
			}

			return set
		}

		/**
		 * Stylis
		 *
		 * @param {string} selector
		 * @param {string} input
		 * @return {*}
		 */
		function stylis (selector, input) {
			if (this !== void 0 && this.constructor === stylis) {
				return factory(selector)
			}

			// setup
			var ns = selector;
			var code = ns.charCodeAt(0);

			// trim leading whitespace
			if (code < 33) {
				code = (ns = ns.trim()).charCodeAt(0);
			}

			// keyframe/animation namespace
			if (keyed > 0) {
				key = ns.replace(invalidptn, code === OPENBRACKET ? '' : '-');
			}

			// reset, used to assert if a plugin is moneky-patching the return value
			code = 1;

			// cascade/isolate
			if (cascade === 1) {
				nscope = ns;
			} else {
				nscopealt = ns;
			}

			var selectors = [nscope];
			var result;

			// execute plugins, pre-process context
			if (plugged > 0) {
				result = proxy(PREPS, input, selectors, selectors, line, column, 0, 0, 0, 0);

				if (result !== void 0 && typeof result === 'string') {
					input = result;
				}
			}

			// build
			var output = compile(array, selectors, input, 0, 0);

			// execute plugins, post-process context
			if (plugged > 0) {
				result = proxy(POSTS, output, selectors, selectors, line, column, output.length, 0, 0, 0);

				// bypass minification
				if (result !== void 0 && typeof(output = result) !== 'string') {
					code = 0;
				}
			}

			// reset
			key = '';
			nscope = '';
			nscopealt = '';
			pattern = 0;
			line = 1;
			column = 1;

			return compress*code === 0 ? output : minify(output)
		}

		stylis['use'] = use;
		stylis['set'] = set;

		if (options !== void 0) {
			set(options);
		}

		return stylis
	}));
	});

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};

	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};

	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

	var hoistNonReactStatics$3 = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);

	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }

	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {

	                }
	            }
	        }
	    }

	    return targetComponent;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern$1 = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate$2(string) {
	  return string.replace(_uppercasePattern$1, '-$1').toLowerCase();
	}

	var hyphenate_1$2 = hyphenate$2;

	var hyphenate$3 = hyphenate_1$2;

	var msPattern$3 = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName$2(string) {
	  return hyphenate$3(string).replace(msPattern$3, '-ms-');
	}

	var hyphenateStyleName_1$2 = hyphenateStyleName$2;

	//      
	var objToCss = function objToCss(obj, prevKey) {
	  var css = Object.keys(obj).filter(function (key) {
	    var chunk = obj[key];
	    return chunk !== undefined && chunk !== null && chunk !== false && chunk !== '';
	  }).map(function (key) {
	    if (isPlainObject$1(obj[key])) return objToCss(obj[key], key);
	    return hyphenateStyleName_1$2(key) + ': ' + obj[key] + ';';
	  }).join(' ');
	  return prevKey ? prevKey + ' {\n  ' + css + '\n}' : css;
	};

	var flatten = function flatten(chunks, executionContext) {
	  return chunks.reduce(function (ruleSet, chunk) {
	    /* Remove falsey values */
	    if (chunk === undefined || chunk === null || chunk === false || chunk === '') {
	      return ruleSet;
	    }
	    /* Flatten ruleSet */
	    if (Array.isArray(chunk)) {
	      return [].concat(ruleSet, flatten(chunk, executionContext));
	    }

	    /* Handle other components */
	    if (chunk.hasOwnProperty('styledComponentId')) {
	      // $FlowFixMe not sure how to make this pass
	      return [].concat(ruleSet, ['.' + chunk.styledComponentId]);
	    }

	    /* Either execute or defer the function */
	    if (typeof chunk === 'function') {
	      return executionContext ? ruleSet.concat.apply(ruleSet, flatten([chunk(executionContext)], executionContext)) : ruleSet.concat(chunk);
	    }

	    /* Handle objects */
	    return ruleSet.concat(
	    // $FlowFixMe have to add %checks somehow to isPlainObject
	    isPlainObject$1(chunk) ? objToCss(chunk) : chunk.toString());
	  }, []);
	};

	//      
	var stylis$1 = new stylis({
	  global: false,
	  cascade: true,
	  keyframe: false,
	  prefix: true,
	  compress: false,
	  semicolon: true
	});

	var stringifyRules = function stringifyRules(rules, selector, prefix) {
	  var flatCSS = rules.join('').replace(/^\s*\/\/.*$/gm, ''); // replace JS comments

	  var cssStr = selector && prefix ? prefix + ' ' + selector + ' { ' + flatCSS + ' }' : flatCSS;

	  return stylis$1(prefix || !selector ? '' : selector, cssStr);
	};

	//      
	var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
	var charsLength = chars.length;

	/* Some high number, usually 9-digit base-10. Map it to base-😎 */
	var generateAlphabeticName = function generateAlphabeticName(code) {
	  var name = '';
	  var x = void 0;

	  for (x = code; x > charsLength; x = Math.floor(x / charsLength)) {
	    name = chars[x % charsLength] + name;
	  }

	  return chars[x % charsLength] + name;
	};

	//      


	var interleave = (function (strings, interpolations) {
	  return interpolations.reduce(function (array, interp, i) {
	    return array.concat(interp, strings[i + 1]);
	  }, [strings[0]]);
	});

	//      
	var css = (function (strings) {
	  for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    interpolations[_key - 1] = arguments[_key];
	  }

	  return flatten(interleave(strings, interpolations));
	});

	//      
	var SC_COMPONENT_ID = /^[^\S\n]*?\/\* sc-component-id:\s+(\S+)\s+\*\//gm;

	var extractCompsFromCSS = (function (maybeCSS) {
	  var css = '' + (maybeCSS || ''); // Definitely a string, and a clone
	  var existingComponents = [];
	  css.replace(SC_COMPONENT_ID, function (match, componentId, matchIndex) {
	    existingComponents.push({ componentId: componentId, matchIndex: matchIndex });
	    return match;
	  });
	  return existingComponents.map(function (_ref, i) {
	    var componentId = _ref.componentId,
	        matchIndex = _ref.matchIndex;

	    var nextComp = existingComponents[i + 1];
	    var cssFromDOM = nextComp ? css.slice(matchIndex, nextComp.matchIndex) : css.slice(matchIndex);
	    return { componentId: componentId, cssFromDOM: cssFromDOM };
	  });
	});

	//      
	/* eslint-disable camelcase, no-undef */

	var getNonce = (function () {
	                                     return typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;
	});

	var classCallCheck$3 = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	var createClass$3 = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();







	var _extends$21 = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};



	var inherits$3 = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};









	var objectWithoutProperties$3 = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};

	var possibleConstructorReturn$3 = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};

	//      
	/* eslint-disable no-underscore-dangle */
	/*
	 * Browser Style Sheet with Rehydration
	 *
	 * <style data-styled-components="x y z"
	 *        data-styled-components-is-local="true">
	 *   /· sc-component-id: a ·/
	 *   .sc-a { ... }
	 *   .x { ... }
	 *   /· sc-component-id: b ·/
	 *   .sc-b { ... }
	 *   .y { ... }
	 *   .z { ... }
	 * </style>
	 *
	 * Note: replace · with * in the above snippet.
	 * */
	var COMPONENTS_PER_TAG = 40;

	var BrowserTag = function () {
	  function BrowserTag(el, isLocal) {
	    var existingSource = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
	    classCallCheck$3(this, BrowserTag);

	    this.el = el;
	    this.isLocal = isLocal;
	    this.ready = false;

	    var extractedComps = extractCompsFromCSS(existingSource);

	    this.size = extractedComps.length;
	    this.components = extractedComps.reduce(function (acc, obj) {
	      acc[obj.componentId] = obj; // eslint-disable-line no-param-reassign
	      return acc;
	    }, {});
	  }

	  BrowserTag.prototype.isFull = function isFull() {
	    return this.size >= COMPONENTS_PER_TAG;
	  };

	  BrowserTag.prototype.addComponent = function addComponent(componentId) {
	    if (!this.ready) this.replaceElement();
	    if ("development" !== 'production' && this.components[componentId]) {
	      throw new Error('Trying to add Component \'' + componentId + '\' twice!');
	    }

	    var comp = { componentId: componentId, textNode: document.createTextNode('') };
	    this.el.appendChild(comp.textNode);

	    this.size += 1;
	    this.components[componentId] = comp;
	  };

	  BrowserTag.prototype.inject = function inject(componentId, css, name) {
	    if (!this.ready) this.replaceElement();
	    var comp = this.components[componentId];

	    if ("development" !== 'production' && !comp) {
	      throw new Error('Must add a new component before you can inject css into it');
	    }
	    if (comp.textNode.data === '') {
	      comp.textNode.appendData('\n/* sc-component-id: ' + componentId + ' */\n');
	    }

	    comp.textNode.appendData(css);
	    if (name) {
	      var existingNames = this.el.getAttribute(SC_ATTR);
	      this.el.setAttribute(SC_ATTR, existingNames ? existingNames + ' ' + name : name);
	    }

	    var nonce = getNonce();

	    if (nonce) {
	      this.el.setAttribute('nonce', nonce);
	    }
	  };

	  BrowserTag.prototype.toHTML = function toHTML() {
	    return this.el.outerHTML;
	  };

	  BrowserTag.prototype.toReactElement = function toReactElement() {
	    throw new Error("BrowserTag doesn't implement toReactElement!");
	  };

	  BrowserTag.prototype.clone = function clone() {
	    throw new Error('BrowserTag cannot be cloned!');
	  };

	  /* Because we care about source order, before we can inject anything we need to
	   * create a text node for each component and replace the existing CSS. */


	  BrowserTag.prototype.replaceElement = function replaceElement() {
	    var _this = this;

	    this.ready = true;
	    // We have nothing to inject. Use the current el.
	    if (this.size === 0) return;

	    // Build up our replacement style tag
	    var newEl = this.el.cloneNode();
	    newEl.appendChild(document.createTextNode('\n'));

	    Object.keys(this.components).forEach(function (key) {
	      var comp = _this.components[key];

	      // eslint-disable-next-line no-param-reassign
	      comp.textNode = document.createTextNode(comp.cssFromDOM);
	      newEl.appendChild(comp.textNode);
	    });

	    if (!this.el.parentNode) {
	      throw new Error("Trying to replace an element that wasn't mounted!");
	    }

	    // The ol' switcheroo
	    this.el.parentNode.replaceChild(newEl, this.el);
	    this.el = newEl;
	  };

	  return BrowserTag;
	}();

	/* Factory function to separate DOM operations from logical ones*/


	var BrowserStyleSheet = {
	  create: function create() {
	    var tags = [];
	    var names = {};

	    /* Construct existing state from DOM */
	    var nodes = document.querySelectorAll('[' + SC_ATTR + ']');
	    var nodesLength = nodes.length;

	    for (var i = 0; i < nodesLength; i += 1) {
	      var el = nodes[i];

	      tags.push(new BrowserTag(el, el.getAttribute(LOCAL_ATTR) === 'true', el.innerHTML));

	      var attr = el.getAttribute(SC_ATTR);
	      if (attr) {
	        attr.trim().split(/\s+/).forEach(function (name) {
	          names[name] = true;
	        });
	      }
	    }

	    /* Factory for making more tags */
	    var tagConstructor = function tagConstructor(isLocal) {
	      var el = document.createElement('style');
	      el.type = 'text/css';
	      el.setAttribute(SC_ATTR, '');
	      el.setAttribute(LOCAL_ATTR, isLocal ? 'true' : 'false');
	      if (!document.head) throw new Error('Missing document <head>');
	      document.head.appendChild(el);
	      return new BrowserTag(el, isLocal);
	    };

	    return new StyleSheet$1(tagConstructor, tags, names);
	  }
	};

	//      
	var SC_ATTR = 'data-styled-components';
	var LOCAL_ATTR = 'data-styled-components-is-local';
	var CONTEXT_KEY = '__styled-components-stylesheet__';

	/* eslint-disable flowtype/object-type-delimiter */

	/* eslint-enable flowtype/object-type-delimiter */

	var instance = null;
	// eslint-disable-next-line no-use-before-define
	var clones = [];

	var StyleSheet$1 = function () {
	  function StyleSheet(tagConstructor) {
	    var tags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	    var names = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	    classCallCheck$3(this, StyleSheet);
	    this.hashes = {};
	    this.deferredInjections = {};
	    this.stylesCacheable = typeof document !== 'undefined';

	    this.tagConstructor = tagConstructor;
	    this.tags = tags;
	    this.names = names;
	    this.constructComponentTagMap();
	  }

	  // helper for `ComponentStyle` to know when it cache static styles.
	  // staticly styled-component can not safely cache styles on the server
	  // without all `ComponentStyle` instances saving a reference to the
	  // the styleSheet instance they last rendered with,
	  // or listening to creation / reset events. otherwise you might create
	  // a component with one stylesheet and render it another api response
	  // with another, losing styles on from your server-side render.


	  StyleSheet.prototype.constructComponentTagMap = function constructComponentTagMap() {
	    var _this = this;

	    this.componentTags = {};

	    this.tags.forEach(function (tag) {
	      Object.keys(tag.components).forEach(function (componentId) {
	        _this.componentTags[componentId] = tag;
	      });
	    });
	  };

	  /* Best level of caching—get the name from the hash straight away. */


	  StyleSheet.prototype.getName = function getName(hash) {
	    return this.hashes[hash.toString()];
	  };

	  /* Second level of caching—if the name is already in the dom, don't
	   * inject anything and record the hash for getName next time. */


	  StyleSheet.prototype.alreadyInjected = function alreadyInjected(hash, name) {
	    if (!this.names[name]) return false;

	    this.hashes[hash.toString()] = name;
	    return true;
	  };

	  /* Third type of caching—don't inject components' componentId twice. */


	  StyleSheet.prototype.hasInjectedComponent = function hasInjectedComponent(componentId) {
	    return !!this.componentTags[componentId];
	  };

	  StyleSheet.prototype.deferredInject = function deferredInject(componentId, isLocal, css) {
	    if (this === instance) {
	      clones.forEach(function (clone) {
	        clone.deferredInject(componentId, isLocal, css);
	      });
	    }

	    this.getOrCreateTag(componentId, isLocal);
	    this.deferredInjections[componentId] = css;
	  };

	  StyleSheet.prototype.inject = function inject(componentId, isLocal, css, hash, name) {
	    if (this === instance) {
	      clones.forEach(function (clone) {
	        clone.inject(componentId, isLocal, css);
	      });
	    }

	    var tag = this.getOrCreateTag(componentId, isLocal);

	    var deferredInjection = this.deferredInjections[componentId];
	    if (deferredInjection) {
	      tag.inject(componentId, deferredInjection);
	      delete this.deferredInjections[componentId];
	    }

	    tag.inject(componentId, css, name);

	    if (hash && name) {
	      this.hashes[hash.toString()] = name;
	    }
	  };

	  StyleSheet.prototype.toHTML = function toHTML() {
	    return this.tags.map(function (tag) {
	      return tag.toHTML();
	    }).join('');
	  };

	  StyleSheet.prototype.toReactElements = function toReactElements() {
	    return this.tags.map(function (tag, i) {
	      return tag.toReactElement('sc-' + i);
	    });
	  };

	  StyleSheet.prototype.getOrCreateTag = function getOrCreateTag(componentId, isLocal) {
	    var existingTag = this.componentTags[componentId];
	    if (existingTag) {
	      return existingTag;
	    }

	    var lastTag = this.tags[this.tags.length - 1];
	    var componentTag = !lastTag || lastTag.isFull() || lastTag.isLocal !== isLocal ? this.createNewTag(isLocal) : lastTag;
	    this.componentTags[componentId] = componentTag;
	    componentTag.addComponent(componentId);
	    return componentTag;
	  };

	  StyleSheet.prototype.createNewTag = function createNewTag(isLocal) {
	    var newTag = this.tagConstructor(isLocal);
	    this.tags.push(newTag);
	    return newTag;
	  };

	  StyleSheet.reset = function reset(isServer) {
	    instance = StyleSheet.create(isServer);
	  };

	  /* We can make isServer totally implicit once Jest 20 drops and we
	   * can change environment on a per-test basis. */


	  StyleSheet.create = function create() {
	    var isServer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : typeof document === 'undefined';

	    return (isServer ? ServerStyleSheet : BrowserStyleSheet).create();
	  };

	  StyleSheet.clone = function clone(oldSheet) {
	    var newSheet = new StyleSheet(oldSheet.tagConstructor, oldSheet.tags.map(function (tag) {
	      return tag.clone();
	    }), _extends$21({}, oldSheet.names));

	    newSheet.hashes = _extends$21({}, oldSheet.hashes);
	    newSheet.deferredInjections = _extends$21({}, oldSheet.deferredInjections);
	    clones.push(newSheet);

	    return newSheet;
	  };

	  createClass$3(StyleSheet, null, [{
	    key: 'instance',
	    get: function get$$1() {
	      return instance || (instance = StyleSheet.create());
	    }
	  }]);
	  return StyleSheet;
	}();

	var _StyleSheetManager$ch;

	//      
	var StyleSheetManager = function (_Component) {
	  inherits$3(StyleSheetManager, _Component);

	  function StyleSheetManager() {
	    classCallCheck$3(this, StyleSheetManager);
	    return possibleConstructorReturn$3(this, _Component.apply(this, arguments));
	  }

	  StyleSheetManager.prototype.getChildContext = function getChildContext() {
	    var _ref;

	    return _ref = {}, _ref[CONTEXT_KEY] = this.props.sheet, _ref;
	  };

	  StyleSheetManager.prototype.render = function render() {
	    /* eslint-disable react/prop-types */
	    // Flow v0.43.1 will report an error accessing the `children` property,
	    // but v0.47.0 will not. It is necessary to use a type cast instead of
	    // a "fixme" comment to satisfy both Flow versions.
	    return react.Children.only(this.props.children);
	  };

	  return StyleSheetManager;
	}(react_1);

	StyleSheetManager.childContextTypes = (_StyleSheetManager$ch = {}, _StyleSheetManager$ch[CONTEXT_KEY] = propTypes.oneOfType([propTypes.instanceOf(StyleSheet$1), propTypes.instanceOf(ServerStyleSheet)]).isRequired, _StyleSheetManager$ch);

	StyleSheetManager.propTypes = {
	  sheet: propTypes.oneOfType([propTypes.instanceOf(StyleSheet$1), propTypes.instanceOf(ServerStyleSheet)]).isRequired
	};

	//      
	/* eslint-disable no-underscore-dangle */
	var ServerTag = function () {
	  function ServerTag(isLocal) {
	    classCallCheck$3(this, ServerTag);

	    this.isLocal = isLocal;
	    this.components = {};
	    this.size = 0;
	    this.names = [];
	  }

	  ServerTag.prototype.isFull = function isFull() {
	    return false;
	  };

	  ServerTag.prototype.addComponent = function addComponent(componentId) {
	    if ("development" !== 'production' && this.components[componentId]) {
	      throw new Error('Trying to add Component \'' + componentId + '\' twice!');
	    }
	    this.components[componentId] = { componentId: componentId, css: '' };
	    this.size += 1;
	  };

	  ServerTag.prototype.concatenateCSS = function concatenateCSS() {
	    var _this = this;

	    return Object.keys(this.components).reduce(function (styles, k) {
	      return styles + _this.components[k].css;
	    }, '');
	  };

	  ServerTag.prototype.inject = function inject(componentId, css, name) {
	    var comp = this.components[componentId];

	    if ("development" !== 'production' && !comp) {
	      throw new Error('Must add a new component before you can inject css into it');
	    }
	    if (comp.css === '') comp.css = '/* sc-component-id: ' + componentId + ' */\n';

	    comp.css += css.replace(/\n*$/, '\n');

	    if (name) this.names.push(name);
	  };

	  ServerTag.prototype.toHTML = function toHTML() {
	    var attrs = ['type="text/css"', SC_ATTR + '="' + this.names.join(' ') + '"', LOCAL_ATTR + '="' + (this.isLocal ? 'true' : 'false') + '"'];

	    var nonce = getNonce();

	    if (nonce) {
	      attrs.push('nonce="' + nonce + '"');
	    }

	    return '<style ' + attrs.join(' ') + '>' + this.concatenateCSS() + '</style>';
	  };

	  ServerTag.prototype.toReactElement = function toReactElement(key) {
	    var _attrs;

	    var attrs = (_attrs = {}, _attrs[SC_ATTR] = this.names.join(' '), _attrs[LOCAL_ATTR] = this.isLocal.toString(), _attrs);

	    var nonce = getNonce();

	    if (nonce) {
	      attrs.nonce = nonce;
	    }

	    return react.createElement('style', _extends$21({
	      key: key,
	      type: 'text/css'
	    }, attrs, {
	      dangerouslySetInnerHTML: { __html: this.concatenateCSS() }
	    }));
	  };

	  ServerTag.prototype.clone = function clone() {
	    var _this2 = this;

	    var copy = new ServerTag(this.isLocal);
	    copy.names = [].concat(this.names);
	    copy.size = this.size;
	    copy.components = Object.keys(this.components).reduce(function (acc, key) {
	      acc[key] = _extends$21({}, _this2.components[key]); // eslint-disable-line no-param-reassign
	      return acc;
	    }, {});

	    return copy;
	  };

	  return ServerTag;
	}();

	var ServerStyleSheet = function () {
	  function ServerStyleSheet() {
	    classCallCheck$3(this, ServerStyleSheet);

	    this.instance = StyleSheet$1.clone(StyleSheet$1.instance);
	  }

	  ServerStyleSheet.prototype.collectStyles = function collectStyles(children) {
	    if (this.closed) {
	      throw new Error("Can't collect styles once you've called getStyleTags!");
	    }
	    return react.createElement(
	      StyleSheetManager,
	      { sheet: this.instance },
	      children
	    );
	  };

	  ServerStyleSheet.prototype.getStyleTags = function getStyleTags() {
	    if (!this.closed) {
	      clones.splice(clones.indexOf(this.instance), 1);
	      this.closed = true;
	    }

	    return this.instance.toHTML();
	  };

	  ServerStyleSheet.prototype.getStyleElement = function getStyleElement() {
	    if (!this.closed) {
	      clones.splice(clones.indexOf(this.instance), 1);
	      this.closed = true;
	    }

	    return this.instance.toReactElements();
	  };

	  ServerStyleSheet.create = function create() {
	    return new StyleSheet$1(function (isLocal) {
	      return new ServerTag(isLocal);
	    });
	  };

	  return ServerStyleSheet;
	}();

	//      

	var LIMIT = 200;

	var createWarnTooManyClasses = (function (displayName) {
	  var generatedClasses = {};
	  var warningSeen = false;

	  return function (className) {
	    if (!warningSeen) {
	      generatedClasses[className] = true;
	      if (Object.keys(generatedClasses).length >= LIMIT) {
	        // Unable to find latestRule in test environment.
	        /* eslint-disable no-console, prefer-template */
	        console.warn('Over ' + LIMIT + ' classes were generated for component ' + displayName + '. \n' + 'Consider using the attrs method, together with a style object for frequently changed styles.\n' + 'Example:\n' + '  const Component = styled.div.attrs({\n' + '    style: ({ background }) => ({\n' + '      background,\n' + '    }),\n' + '  })`width: 100%;`\n\n' + '  <Component />');
	        warningSeen = true;
	        generatedClasses = {};
	      }
	    }
	  };
	});

	//      
	/* eslint-disable max-len */
	/**
	 * Trying to avoid the unknown-prop errors on styled components by filtering by
	 * React's attribute whitelist.
	 *
	 * To regenerate this regex:
	 *
	 * 1. `npm i -g regexgen` (https://github.com/devongovett/regexgen)
	 * 2. Run `regexgen` with the list of space-separated words below as input
	 * 3. Surround the emitted regex with this: `/^(GENERATED_REGEX)$/` -- this will ensure a full string match
	 *    and no false positives from partials
	 **/
	/*
	children dangerouslySetInnerHTML key ref autoFocus defaultValue valueLink defaultChecked checkedLink innerHTML suppressContentEditableWarning onFocusIn onFocusOut className onCopy onCut onPaste onCompositionEnd onCompositionStart onCompositionUpdate onKeyDown onKeyPress onKeyUp onFocus onBlur onChange onInput onSubmit onReset onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp onSelect onTouchCancel onTouchEnd onTouchMove onTouchStart onScroll onWheel onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting onLoad onAnimationStart onAnimationEnd onAnimationIteration onTransitionEnd onCopyCapture onCutCapture onPasteCapture onCompositionEndCapture onCompositionStartCapture onCompositionUpdateCapture onKeyDownCapture onKeyPressCapture onKeyUpCapture onFocusCapture onBlurCapture onChangeCapture onInputCapture onSubmitCapture onResetCapture onClickCapture onContextMenuCapture onDoubleClickCapture onDragCapture onDragEndCapture onDragEnterCapture onDragExitCapture onDragLeaveCapture onDragOverCapture onDragStartCapture onDropCapture onMouseDownCapture onMouseEnterCapture onMouseLeaveCapture onMouseMoveCapture onMouseOutCapture onMouseOverCapture onMouseUpCapture onSelectCapture onTouchCancelCapture onTouchEndCapture onTouchMoveCapture onTouchStartCapture onScrollCapture onWheelCapture onAbortCapture onCanPlayCapture onCanPlayThroughCapture onDurationChangeCapture onEmptiedCapture onEncryptedCapture onEndedCapture onErrorCapture onLoadedDataCapture onLoadedMetadataCapture onLoadStartCapture onPauseCapture onPlayCapture onPlayingCapture onProgressCapture onRateChangeCapture onSeekedCapture onSeekingCapture onStalledCapture onSuspendCapture onTimeUpdateCapture onVolumeChangeCapture onWaitingCapture onLoadCapture onAnimationStartCapture onAnimationEndCapture onAnimationIterationCapture onTransitionEndCapture accept acceptCharset accessKey action allowFullScreen allowTransparency alt as async autoComplete autoPlay capture cellPadding cellSpacing charSet challenge checked cite classID className cols colSpan content contentEditable contextMenu controls coords crossOrigin data dateTime default defer dir disabled download draggable encType form formAction formEncType formMethod formNoValidate formTarget frameBorder headers height hidden high href hrefLang htmlFor httpEquiv icon id inputMode integrity is keyParams keyType kind label lang list loop low manifest marginHeight marginWidth max maxLength media mediaGroup method min minLength multiple muted name nonce noValidate open optimum pattern placeholder playsInline poster preload profile radioGroup readOnly referrerPolicy rel required reversed role rows rowSpan sandbox scope scoped scrolling seamless selected shape size sizes span spellCheck src srcDoc srcLang srcSet start step style summary tabIndex target title type useMap value width wmode wrap about datatype inlist prefix property resource typeof vocab autoCapitalize autoCorrect autoSave color itemProp itemScope itemType itemID itemRef results security unselectable accentHeight accumulate additive alignmentBaseline allowReorder alphabetic amplitude arabicForm ascent attributeName attributeType autoReverse azimuth baseFrequency baseProfile baselineShift bbox begin bias by calcMode capHeight clip clipPath clipRule clipPathUnits colorInterpolation colorInterpolationFilters colorProfile colorRendering contentScriptType contentStyleType cursor cx cy d decelerate descent diffuseConstant direction display divisor dominantBaseline dur dx dy edgeMode elevation enableBackground end exponent externalResourcesRequired fill fillOpacity fillRule filter filterRes filterUnits floodColor floodOpacity focusable fontFamily fontSize fontSizeAdjust fontStretch fontStyle fontVariant fontWeight format from fx fy g1 g2 glyphName glyphOrientationHorizontal glyphOrientationVertical glyphRef gradientTransform gradientUnits hanging horizAdvX horizOriginX ideographic imageRendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes lengthAdjust letterSpacing lightingColor limitingConeAngle local markerEnd markerMid markerStart markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical mode numOctaves offset opacity operator order orient orientation origin overflow overlinePosition overlineThickness paintOrder panose1 pathLength patternContentUnits patternTransform patternUnits pointerEvents points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits r radius refX refY renderingIntent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry scale seed shapeRendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stopColor stopOpacity strikethroughPosition strikethroughThickness string stroke strokeDasharray strokeDashoffset strokeLinecap strokeLinejoin strokeMiterlimit strokeOpacity strokeWidth surfaceScale systemLanguage tableValues targetX targetY textAnchor textDecoration textRendering textLength to transform u1 u2 underlinePosition underlineThickness unicode unicodeBidi unicodeRange unitsPerEm vAlphabetic vHanging vIdeographic vMathematical values vectorEffect version vertAdvY vertOriginX vertOriginY viewBox viewTarget visibility widths wordSpacing writingMode x xHeight x1 x2 xChannelSelector xlinkActuate xlinkArcrole xlinkHref xlinkRole xlinkShow xlinkTitle xlinkType xmlBase xmlns xmlnsXlink xmlLang xmlSpace y y1 y2 yChannelSelector z zoomAndPan
	*/
	/* eslint-enable max-len */

	var ATTRIBUTE_REGEX = /^((?:s(?:uppressContentEditableWarn|croll|pac)|(?:shape|image|text)Render|(?:letter|word)Spac|vHang|hang)ing|(?:on(?:AnimationIteration|C(?:o(?:mposition(?:Update|Start|End)|ntextMenu|py)|anPlayThrough|anPlay|hange|lick|ut)|(?:(?:Duration|Volume|Rate)Chang|(?:MouseLea|(?:Touch|Mouse)Mo|DragLea)v|Paus)e|Loaded(?:Metad|D)ata|(?:Animation|Touch|Load|Drag)Start|(?:(?:T(?:ransition|ouch)|Animation)E|Suspe)nd|DoubleClick|(?:TouchCanc|Whe)el|(?:Mouse(?:Ent|Ov)e|Drag(?:Ent|Ov)e|Erro)r|TimeUpdate|(?:E(?:n(?:crypt|d)|mpti)|S(?:tall|eek))ed|MouseDown|P(?:rogress|laying)|(?:MouseOu|DragExi|S(?:elec|ubmi)|Rese|Inpu)t|KeyPress|DragEnd|Key(?:Down|Up)|(?:Wait|Seek)ing|(?:MouseU|Dro)p|Scroll|Paste|Focus|Abort|Drag|Play|Load|Blur)Captur|alignmentBaselin|(?:limitingConeAng|xlink(?:(?:Arcr|R)o|Tit)|s(?:urfaceSca|ty|ca)|unselectab|baseProfi|fontSty|(?:focus|dragg)ab|multip|profi|tit)l|d(?:ominantBaselin|efaultValu)|a(?:uto(?:Capitaliz|Revers|Sav)|dditiv)|(?:(?:formNoValid|xlinkActu|noValid|accumul|rot)a|autoComple|decelera)t|(?:(?:attribute|item)T|datat)yp|(?:attribute|glyph)Nam|playsInlin|(?:formE|e)ncTyp|(?:writing|input|edge)Mod|(?:xlinkTy|itemSco|keyTy|slo)p|(?:amplitu|mo)d|(?:xmlSpa|non)c|fillRul|(?:dateTi|na)m|r(?:esourc|ol)|xmlBas|wmod)e|(?:glyphOrientationHorizont|loc)al|(?:externalResourcesRequir|select|revers|mut)ed|c(?:o(?:lorInterpolationFilter|ntrol|ord)s|o(?:lor(?:Interpolation)?|ntent)|(?:ontentS(?:cript|tyle)Typ|o(?:ntentEditab|lorProfi)l|l(?:assNam|ipRul)|a(?:lcMod|ptur)|it)e|olorRendering|l(?:ipPathUnits|assID)|o(?:ntextMenu|ls)|h(?:eckedLink|a(?:llenge|rSet)|ildren|ecked)|ell(?:Spac|Padd)ing|(?:rossOrigi|olSpa)n|apHeight|lip(?:Path)?|ursor|[xy])|glyphOrientationVertical|d(?:angerouslySetInnerHTML|efaultChecked|ownload|isabled|isplay|[xy])|(?:s(?:trikethroughThickn|eaml)es|(?:und|ov)erlineThicknes|r(?:equiredExtension|adiu)|(?:requiredFeatur|tableValu|stitchTil|numOctav|filterR)e|key(?:(?:Splin|Tim)e|Param)|autoFocu|header|bia)s|(?:(?:st(?:rikethroughPosi|dDevia)|(?:und|ov)erlinePosi|(?:textDecor|elev)a|orienta)tio|(?:strokeLinejo|orig)i|formActio|zoomAndPa|onFocusI|directio|(?:vers|act)io|rowSpa|begi|ico)n|o(?:n(?:AnimationIteration|C(?:o(?:mposition(?:Update|Start|End)|ntextMenu|py)|anPlayThrough|anPlay|hange|lick|ut)|(?:(?:Duration|Volume|Rate)Chang|(?:MouseLea|(?:Touch|Mouse)Mo|DragLea)v|Paus)e|Loaded(?:Metad|D)ata|(?:Animation|Touch|Load|Drag)Start|(?:(?:T(?:ransition|ouch)|Animation)E|Suspe)nd|DoubleClick|(?:TouchCanc|Whe)el|(?:Mouse(?:Ent|Ov)e|Drag(?:Ent|Ov)e|Erro)r|TimeUpdate|(?:E(?:n(?:crypt|d)|mpti)|S(?:tall|eek))ed|MouseDown|P(?:rogress|laying)|(?:MouseOu|DragExi|S(?:elec|ubmi)|Rese|Inpu)t|KeyPress|DragEnd|Key(?:Down|Up)|(?:Wait|Seek)ing|(?:MouseU|Dro)p|Scroll|Paste|Focus|Abort|Drag|Play|Load|Blur)|rient)|p(?:reserveA(?:spectRatio|lpha)|ointsAt[X-Z]|anose1)|(?:patternContent|ma(?:sk(?:Content)?|rker)|primitive|gradient|pattern|filter)Units|(?:gradientT|patternT|t)ransform|(?:(?:allowTranspar|baseFrequ)enc|re(?:ferrerPolic|adOnl)|(?:(?:st(?:roke|op)O|floodO|fillO|o)pac|integr|secur)it|visibilit|fontFamil|accessKe|propert|summar)y|(?:strokeMiterlimi|(?:specularConsta|repeatCou|fontVaria)n|(?:(?:specularE|e)xpon|renderingInt|asc)en|d(?:iffuseConsta|esce)n|(?:fontSizeAdju|lengthAdju|manife)s|baselineShif|vectorEffec|(?:(?:mar(?:ker|gin)|x)H|accentH|fontW)eigh|a(?:utoCorrec|bou)|markerStar|onFocusOu|in(?:tercep|lis)|restar|forma|heigh|lis)t|(?:(?:st(?:rokeDasho|artO)|o)ffs|acceptChars|formTarg|viewTarg|srcS)et|(?:(?:enableBackgrou|markerE)n|s(?:p(?:readMetho|ee)|ee)|formMetho|m(?:arkerMi|etho)|preloa|kin)d|k(?:ernel(?:UnitLength|Matrix)|[1-4])|(?:[xy]ChannelSelect|lightingCol|textAnch|floodCol|stopCol|operat|htmlF)or|(?:allowFullScre|hidd)en|strokeDasharray|systemLanguage|(?:strokeLineca|itemPro|useMa|wra|loo)p|v(?:Mathematical|ert(?:Origin[XY]|AdvY)|alues|ocab)|(?:pointerEve|keyPoi)nts|unicodeRange|(?:(?:allowReord|placehold|frameBord|paintOrd|post|ord)e|repeatDu|d(?:efe|u))r|mathematical|(?:vI|i)deographic|h(?:oriz(?:Origin|Adv)X|ttpEquiv)|u(?:nicodeBidi|[12])|(?:fontStretc|hig)h|(?:(?:mar(?:ker|gin)W|strokeW)id|azimu)th|vAlphabetic|mediaGroup|spellCheck|(?:unitsPerE|optimu|fro)m|r(?:adioGroup|e(?:sults|f[XY]|l)|ows|[xy])|(?:xmlnsXl|valueL)ink|a(?:rabicForm|l(?:phabetic|t)|sync)|pathLength|(?:text|m(?:in|ax))Length|innerHTML|xlinkShow|(?:xlinkHr|glyphR)ef|r(?:e(?:quired|sult|f))?|o(?:verflow|pen)|(?:tabInde|(?:sand|b)bo|viewBo)x|(?:(?:href|xml|src)La|kerni)ng|f(?:o(?:ntSize|rm)|il(?:ter|l))|autoPlay|unicode|p(?:attern|oints)|t(?:arget[XY]|o)|i(?:temRef|n2|s)|divisor|d(?:efault|ata|ir)?|srcDoc|s(?:coped|te(?:m[hv]|p)|pan)|(?:width|size)s|(?:stri|la)ng|prefix|itemID|s(?:t(?:roke|art)|hape|cope|rc)|a(?:ccept|s)|t(?:arget|ype)|typeof|width|value|x(?:mlns)?|label|m(?:edia|a(?:sk|x)|in)|size|href|k(?:ey)?|end|low|x[12]|i[dn]|y[12]|g[12]|by|f[xy]|[yz])$/;

	/* From DOMProperty */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
	var isCustomAttribute = RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$'));

	var validAttr = (function (name) {
	  return ATTRIBUTE_REGEX.test(name) || isCustomAttribute(name.toLowerCase());
	});

	//      


	function isTag(target) /* : %checks */{
	  return typeof target === 'string';
	}

	//      


	function isStyledComponent(target) /* : %checks */{
	  return typeof target === 'function' && typeof target.styledComponentId === 'string';
	}

	//      

	/* eslint-disable no-undef */
	function getComponentName(target) {
	  return target.displayName || target.name || 'Component';
	}

	//      


	var determineTheme = (function (props, fallbackTheme, defaultProps) {
	  // Props should take precedence over ThemeProvider, which should take precedence over
	  // defaultProps, but React automatically puts defaultProps on props.

	  /* eslint-disable react/prop-types */
	  var isDefaultTheme = defaultProps && props.theme === defaultProps.theme;
	  var theme = props.theme && !isDefaultTheme ? props.theme : fallbackTheme;
	  /* eslint-enable */

	  return theme;
	});

	//      
	var escapeRegex = /[[\].#*$><+~=|^:(),"'`-]+/g;
	var dashesAtEnds = /(^-|-$)/g;

	/**
	 * TODO: Explore using CSS.escape when it becomes more available
	 * in evergreen browsers.
	 */
	function escape(str) {
	  return str
	  // Replace all possible CSS selectors
	  .replace(escapeRegex, '-')

	  // Remove extraneous hyphens at the start and end
	  .replace(dashesAtEnds, '');
	}

	//      
	/**
	 * Creates a broadcast that can be listened to, i.e. simple event emitter
	 *
	 * @see https://github.com/ReactTraining/react-broadcast
	 */

	var createBroadcast$1 = function createBroadcast(initialState) {
	  var listeners = {};
	  var id = 0;
	  var state = initialState;

	  function publish(nextState) {
	    state = nextState;

	    // eslint-disable-next-line guard-for-in, no-restricted-syntax
	    for (var key in listeners) {
	      var listener = listeners[key];
	      if (listener === undefined) {
	        // eslint-disable-next-line no-continue
	        continue;
	      }

	      listener(state);
	    }
	  }

	  function subscribe(listener) {
	    var currentId = id;
	    listeners[currentId] = listener;
	    id += 1;
	    listener(state);
	    return currentId;
	  }

	  function unsubscribe(unsubID) {
	    listeners[unsubID] = undefined;
	  }

	  return { publish: publish, subscribe: subscribe, unsubscribe: unsubscribe };
	};

	//      
	// Helper to call a given function, only once
	var once = (function (cb) {
	  var called = false;

	  return function () {
	    if (!called) {
	      called = true;
	      cb();
	    }
	  };
	});

	var _ThemeProvider$childC;
	var _ThemeProvider$contex;

	//      
	/* globals React$Element */
	// NOTE: DO NOT CHANGE, changing this is a semver major change!
	var CHANNEL = '__styled-components__';
	var CHANNEL_NEXT = CHANNEL + 'next__';

	var CONTEXT_CHANNEL_SHAPE = propTypes.shape({
	  getTheme: propTypes.func,
	  subscribe: propTypes.func,
	  unsubscribe: propTypes.func
	});

	var warnChannelDeprecated = void 0;
	{
	  warnChannelDeprecated = once(function () {
	    // eslint-disable-next-line no-console
	    console.error('Warning: Usage of `context.' + CHANNEL + '` as a function is deprecated. It will be replaced with the object on `.context.' + CHANNEL_NEXT + '` in a future version.');
	  });
	}

	var isFunction$2 = function isFunction(test) {
	  return typeof test === 'function';
	};

	/**
	 * Provide a theme to an entire react component tree via context and event listeners (have to do
	 * both context and event emitter as pure components block context updates)
	 */

	var ThemeProvider = function (_Component) {
	  inherits$3(ThemeProvider, _Component);

	  function ThemeProvider() {
	    classCallCheck$3(this, ThemeProvider);

	    var _this = possibleConstructorReturn$3(this, _Component.call(this));

	    _this.unsubscribeToOuterId = -1;

	    _this.getTheme = _this.getTheme.bind(_this);
	    return _this;
	  }

	  ThemeProvider.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;

	    // If there is a ThemeProvider wrapper anywhere around this theme provider, merge this theme
	    // with the outer theme
	    var outerContext = this.context[CHANNEL_NEXT];
	    if (outerContext !== undefined) {
	      this.unsubscribeToOuterId = outerContext.subscribe(function (theme) {
	        _this2.outerTheme = theme;
	      });
	    }
	    this.broadcast = createBroadcast$1(this.getTheme());
	  };

	  ThemeProvider.prototype.getChildContext = function getChildContext() {
	    var _this3 = this,
	        _babelHelpers$extends;

	    return _extends$21({}, this.context, (_babelHelpers$extends = {}, _babelHelpers$extends[CHANNEL_NEXT] = {
	      getTheme: this.getTheme,
	      subscribe: this.broadcast.subscribe,
	      unsubscribe: this.broadcast.unsubscribe
	    }, _babelHelpers$extends[CHANNEL] = function (subscriber) {
	      {
	        warnChannelDeprecated();
	      }

	      // Patch the old `subscribe` provide via `CHANNEL` for older clients.
	      var unsubscribeId = _this3.broadcast.subscribe(subscriber);
	      return function () {
	        return _this3.broadcast.unsubscribe(unsubscribeId);
	      };
	    }, _babelHelpers$extends));
	  };

	  ThemeProvider.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (this.props.theme !== nextProps.theme) {
	      this.broadcast.publish(this.getTheme(nextProps.theme));
	    }
	  };

	  ThemeProvider.prototype.componentWillUnmount = function componentWillUnmount() {
	    if (this.unsubscribeToOuterId !== -1) {
	      this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeToOuterId);
	    }
	  };

	  // Get the theme from the props, supporting both (outerTheme) => {} as well as object notation


	  ThemeProvider.prototype.getTheme = function getTheme(passedTheme) {
	    var theme = passedTheme || this.props.theme;
	    if (isFunction$2(theme)) {
	      var mergedTheme = theme(this.outerTheme);
	      if ("development" !== 'production' && !isPlainObject$1(mergedTheme)) {
	        throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');
	      }
	      return mergedTheme;
	    }
	    if (!isPlainObject$1(theme)) {
	      throw new Error('[ThemeProvider] Please make your theme prop a plain object');
	    }
	    return _extends$21({}, this.outerTheme, theme);
	  };

	  ThemeProvider.prototype.render = function render() {
	    if (!this.props.children) {
	      return null;
	    }
	    return react.Children.only(this.props.children);
	  };

	  return ThemeProvider;
	}(react_1);

	ThemeProvider.childContextTypes = (_ThemeProvider$childC = {}, _ThemeProvider$childC[CHANNEL] = propTypes.func, _ThemeProvider$childC[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _ThemeProvider$childC);
	ThemeProvider.contextTypes = (_ThemeProvider$contex = {}, _ThemeProvider$contex[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _ThemeProvider$contex);

	//      

	// HACK for generating all static styles without needing to allocate
	// an empty execution context every single time...
	var STATIC_EXECUTION_CONTEXT = {};

	var _StyledComponent = (function (ComponentStyle, constructWithOptions) {
	  var identifiers = {};

	  /* We depend on components having unique IDs */
	  var generateId = function generateId(_displayName, parentComponentId) {
	    var displayName = typeof _displayName !== 'string' ? 'sc' : escape(_displayName);

	    var componentId = void 0;

	    /**
	     * only fall back to hashing the component injection order if
	     * a proper displayName isn't provided by the babel plugin
	     */
	    if (!_displayName) {
	      var nr = (identifiers[displayName] || 0) + 1;
	      identifiers[displayName] = nr;

	      componentId = displayName + '-' + ComponentStyle.generateName(displayName + nr);
	    } else {
	      componentId = displayName + '-' + ComponentStyle.generateName(displayName);
	    }

	    return parentComponentId !== undefined ? parentComponentId + '-' + componentId : componentId;
	  };

	  var BaseStyledComponent = function (_Component) {
	    inherits$3(BaseStyledComponent, _Component);

	    function BaseStyledComponent() {
	      var _temp, _this, _ret;

	      classCallCheck$3(this, BaseStyledComponent);

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return _ret = (_temp = (_this = possibleConstructorReturn$3(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.attrs = {}, _this.state = {
	        theme: null,
	        generatedClassName: ''
	      }, _this.unsubscribeId = -1, _temp), possibleConstructorReturn$3(_this, _ret);
	    }

	    BaseStyledComponent.prototype.unsubscribeFromContext = function unsubscribeFromContext() {
	      if (this.unsubscribeId !== -1) {
	        this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeId);
	      }
	    };

	    BaseStyledComponent.prototype.buildExecutionContext = function buildExecutionContext(theme, props) {
	      var attrs = this.constructor.attrs;

	      var context = _extends$21({}, props, { theme: theme });
	      if (attrs === undefined) {
	        return context;
	      }

	      this.attrs = Object.keys(attrs).reduce(function (acc, key) {
	        var attr = attrs[key];
	        // eslint-disable-next-line no-param-reassign
	        acc[key] = typeof attr === 'function' ? attr(context) : attr;
	        return acc;
	      }, {});

	      return _extends$21({}, context, this.attrs);
	    };

	    BaseStyledComponent.prototype.generateAndInjectStyles = function generateAndInjectStyles(theme, props) {
	      var _constructor = this.constructor,
	          attrs = _constructor.attrs,
	          componentStyle = _constructor.componentStyle,
	          warnTooManyClasses = _constructor.warnTooManyClasses;

	      var styleSheet = this.context[CONTEXT_KEY] || StyleSheet$1.instance;

	      // staticaly styled-components don't need to build an execution context object,
	      // and shouldn't be increasing the number of class names
	      if (componentStyle.isStatic && attrs === undefined) {
	        return componentStyle.generateAndInjectStyles(STATIC_EXECUTION_CONTEXT, styleSheet);
	      } else {
	        var executionContext = this.buildExecutionContext(theme, props);
	        var className = componentStyle.generateAndInjectStyles(executionContext, styleSheet);

	        if ("development" !== 'production' && warnTooManyClasses !== undefined) {
	          warnTooManyClasses(className);
	        }

	        return className;
	      }
	    };

	    BaseStyledComponent.prototype.componentWillMount = function componentWillMount() {
	      var _this2 = this;

	      var componentStyle = this.constructor.componentStyle;

	      var styledContext = this.context[CHANNEL_NEXT];

	      // If this is a staticaly-styled component, we don't need to the theme
	      // to generate or build styles.
	      if (componentStyle.isStatic) {
	        var generatedClassName = this.generateAndInjectStyles(STATIC_EXECUTION_CONTEXT, this.props);
	        this.setState({ generatedClassName: generatedClassName });
	        // If there is a theme in the context, subscribe to the event emitter. This
	        // is necessary due to pure components blocking context updates, this circumvents
	        // that by updating when an event is emitted
	      } else if (styledContext !== undefined) {
	        var subscribe = styledContext.subscribe;

	        this.unsubscribeId = subscribe(function (nextTheme) {
	          // This will be called once immediately
	          var theme = determineTheme(_this2.props, nextTheme, _this2.constructor.defaultProps);
	          var generatedClassName = _this2.generateAndInjectStyles(theme, _this2.props);

	          _this2.setState({ theme: theme, generatedClassName: generatedClassName });
	        });
	      } else {
	        // eslint-disable-next-line react/prop-types
	        var theme = this.props.theme || {};
	        var _generatedClassName = this.generateAndInjectStyles(theme, this.props);
	        this.setState({ theme: theme, generatedClassName: _generatedClassName });
	      }
	    };

	    BaseStyledComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	      var _this3 = this;

	      // If this is a staticaly-styled component, we don't need to listen to
	      // props changes to update styles
	      var componentStyle = this.constructor.componentStyle;

	      if (componentStyle.isStatic) {
	        return;
	      }

	      this.setState(function (oldState) {
	        var theme = determineTheme(nextProps, oldState.theme, _this3.constructor.defaultProps);
	        var generatedClassName = _this3.generateAndInjectStyles(theme, nextProps);

	        return { theme: theme, generatedClassName: generatedClassName };
	      });
	    };

	    BaseStyledComponent.prototype.componentWillUnmount = function componentWillUnmount() {
	      this.unsubscribeFromContext();
	    };

	    BaseStyledComponent.prototype.render = function render() {
	      var _this4 = this;

	      // eslint-disable-next-line react/prop-types
	      var innerRef = this.props.innerRef;
	      var generatedClassName = this.state.generatedClassName;
	      var _constructor2 = this.constructor,
	          styledComponentId = _constructor2.styledComponentId,
	          target = _constructor2.target;


	      var isTargetTag = isTag(target);

	      var className = [
	      // eslint-disable-next-line react/prop-types
	      this.props.className, styledComponentId, this.attrs.className, generatedClassName].filter(Boolean).join(' ');

	      var baseProps = _extends$21({}, this.attrs, {
	        className: className
	      });

	      if (isStyledComponent(target)) {
	        baseProps.innerRef = innerRef;
	      } else {
	        baseProps.ref = innerRef;
	      }

	      var propsForElement = Object.keys(this.props).reduce(function (acc, propName) {
	        // Don't pass through non HTML tags through to HTML elements
	        // always omit innerRef
	        if (propName !== 'innerRef' && propName !== 'className' && (!isTargetTag || validAttr(propName))) {
	          // eslint-disable-next-line no-param-reassign
	          acc[propName] = _this4.props[propName];
	        }

	        return acc;
	      }, baseProps);

	      return react_4(target, propsForElement);
	    };

	    return BaseStyledComponent;
	  }(react_1);

	  var createStyledComponent = function createStyledComponent(target, options, rules) {
	    var _StyledComponent$cont;

	    var _options$displayName = options.displayName,
	        displayName = _options$displayName === undefined ? isTag(target) ? 'styled.' + target : 'Styled(' + getComponentName(target) + ')' : _options$displayName,
	        _options$componentId = options.componentId,
	        componentId = _options$componentId === undefined ? generateId(options.displayName, options.parentComponentId) : _options$componentId,
	        _options$ParentCompon = options.ParentComponent,
	        ParentComponent = _options$ParentCompon === undefined ? BaseStyledComponent : _options$ParentCompon,
	        extendingRules = options.rules,
	        attrs = options.attrs;


	    var styledComponentId = options.displayName && options.componentId ? escape(options.displayName) + '-' + options.componentId : componentId;

	    var componentStyle = new ComponentStyle(extendingRules === undefined ? rules : extendingRules.concat(rules), attrs, styledComponentId);

	    var StyledComponent = function (_ParentComponent) {
	      inherits$3(StyledComponent, _ParentComponent);

	      function StyledComponent() {
	        classCallCheck$3(this, StyledComponent);
	        return possibleConstructorReturn$3(this, _ParentComponent.apply(this, arguments));
	      }

	      StyledComponent.withComponent = function withComponent(tag) {
	        var previousComponentId = options.componentId,
	            optionsToCopy = objectWithoutProperties$3(options, ['componentId']);


	        var newComponentId = previousComponentId && previousComponentId + '-' + (isTag(tag) ? tag : escape(getComponentName(tag)));

	        var newOptions = _extends$21({}, optionsToCopy, {
	          componentId: newComponentId,
	          ParentComponent: StyledComponent
	        });

	        return createStyledComponent(tag, newOptions, rules);
	      };

	      createClass$3(StyledComponent, null, [{
	        key: 'extend',
	        get: function get$$1() {
	          var rulesFromOptions = options.rules,
	              parentComponentId = options.componentId,
	              optionsToCopy = objectWithoutProperties$3(options, ['rules', 'componentId']);


	          var newRules = rulesFromOptions === undefined ? rules : rulesFromOptions.concat(rules);

	          var newOptions = _extends$21({}, optionsToCopy, {
	            rules: newRules,
	            parentComponentId: parentComponentId,
	            ParentComponent: StyledComponent
	          });

	          return constructWithOptions(createStyledComponent, target, newOptions);
	        }
	      }]);
	      return StyledComponent;
	    }(ParentComponent);

	    StyledComponent.contextTypes = (_StyledComponent$cont = {}, _StyledComponent$cont[CHANNEL] = propTypes.func, _StyledComponent$cont[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _StyledComponent$cont[CONTEXT_KEY] = propTypes.oneOfType([propTypes.instanceOf(StyleSheet$1), propTypes.instanceOf(ServerStyleSheet)]), _StyledComponent$cont);
	    StyledComponent.displayName = displayName;
	    StyledComponent.styledComponentId = styledComponentId;
	    StyledComponent.attrs = attrs;
	    StyledComponent.componentStyle = componentStyle;
	    StyledComponent.target = target;


	    {
	      StyledComponent.warnTooManyClasses = createWarnTooManyClasses(displayName);
	    }

	    return StyledComponent;
	  };

	  return createStyledComponent;
	});

	// murmurhash2 via https://gist.github.com/raycmorgan/588423

	function doHash(str, seed) {
	  var m = 0x5bd1e995;
	  var r = 24;
	  var h = seed ^ str.length;
	  var length = str.length;
	  var currentIndex = 0;

	  while (length >= 4) {
	    var k = UInt32(str, currentIndex);

	    k = Umul32(k, m);
	    k ^= k >>> r;
	    k = Umul32(k, m);

	    h = Umul32(h, m);
	    h ^= k;

	    currentIndex += 4;
	    length -= 4;
	  }

	  switch (length) {
	    case 3:
	      h ^= UInt16(str, currentIndex);
	      h ^= str.charCodeAt(currentIndex + 2) << 16;
	      h = Umul32(h, m);
	      break;

	    case 2:
	      h ^= UInt16(str, currentIndex);
	      h = Umul32(h, m);
	      break;

	    case 1:
	      h ^= str.charCodeAt(currentIndex);
	      h = Umul32(h, m);
	      break;
	  }

	  h ^= h >>> 13;
	  h = Umul32(h, m);
	  h ^= h >>> 15;

	  return h >>> 0;
	}

	function UInt32(str, pos) {
	  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);
	}

	function UInt16(str, pos) {
	  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);
	}

	function Umul32(n, m) {
	  n = n | 0;
	  m = m | 0;
	  var nlo = n & 0xffff;
	  var nhi = n >>> 16;
	  var res = nlo * m + ((nhi * m & 0xffff) << 16) | 0;
	  return res;
	}

	//      
	var isStaticRules = function isStaticRules(rules, attrs) {
	  for (var i = 0; i < rules.length; i += 1) {
	    var rule = rules[i];

	    // recursive case
	    if (Array.isArray(rule) && !isStaticRules(rule)) {
	      return false;
	    } else if (typeof rule === 'function' && !isStyledComponent(rule)) {
	      // functions are allowed to be static if they're just being
	      // used to get the classname of a nested styled copmonent
	      return false;
	    }
	  }

	  if (attrs !== undefined) {
	    // eslint-disable-next-line guard-for-in, no-restricted-syntax
	    for (var key in attrs) {
	      var value = attrs[key];
	      if (typeof value === 'function') {
	        return false;
	      }
	    }
	  }

	  return true;
	};

	var isHRMEnabled = typeof module !== 'undefined' && module.hot && "development" !== 'production';

	/*
	 ComponentStyle is all the CSS-specific stuff, not
	 the React-specific stuff.
	 */
	var _ComponentStyle = (function (nameGenerator, flatten, stringifyRules) {
	  var ComponentStyle = function () {
	    function ComponentStyle(rules, attrs, componentId) {
	      classCallCheck$3(this, ComponentStyle);

	      this.rules = rules;
	      this.isStatic = !isHRMEnabled && isStaticRules(rules, attrs);
	      this.componentId = componentId;
	      if (!StyleSheet$1.instance.hasInjectedComponent(this.componentId)) {
	        var placeholder = '.' + componentId + ' {}';
	        StyleSheet$1.instance.deferredInject(componentId, true, placeholder);
	      }
	    }

	    /*
	     * Flattens a rule set into valid CSS
	     * Hashes it, wraps the whole chunk in a .hash1234 {}
	     * Returns the hash to be injected on render()
	     * */


	    ComponentStyle.prototype.generateAndInjectStyles = function generateAndInjectStyles(executionContext, styleSheet) {
	      var isStatic = this.isStatic,
	          lastClassName = this.lastClassName;

	      if (isStatic && lastClassName !== undefined) {
	        return lastClassName;
	      }

	      var flatCSS = flatten(this.rules, executionContext);
	      var hash = doHash(this.componentId + flatCSS.join(''));

	      var existingName = styleSheet.getName(hash);
	      if (existingName !== undefined) {
	        if (styleSheet.stylesCacheable) {
	          this.lastClassName = existingName;
	        }
	        return existingName;
	      }

	      var name = nameGenerator(hash);
	      if (styleSheet.stylesCacheable) {
	        this.lastClassName = existingName;
	      }
	      if (styleSheet.alreadyInjected(hash, name)) {
	        return name;
	      }

	      var css = '\n' + stringifyRules(flatCSS, '.' + name);
	      // NOTE: this can only be set when we inject the class-name.
	      // For some reason, presumably due to how css is stringifyRules behaves in
	      // differently between client and server, styles break.
	      styleSheet.inject(this.componentId, true, css, hash, name);
	      return name;
	    };

	    ComponentStyle.generateName = function generateName(str) {
	      return nameGenerator(doHash(str));
	    };

	    return ComponentStyle;
	  }();

	  return ComponentStyle;
	});

	//      
	// Thanks to ReactDOMFactories for this handy list!

	var domElements = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr',

	// SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

	//      

	var _styled = (function (styledComponent, constructWithOptions) {
	  var styled = function styled(tag) {
	    return constructWithOptions(styledComponent, tag);
	  };

	  // Shorthands for all valid HTML Elements
	  domElements.forEach(function (domElement) {
	    styled[domElement] = styled(domElement);
	  });

	  return styled;
	});

	//      
	var replaceWhitespace = function replaceWhitespace(str) {
	  return str.replace(/\s|\\n/g, '');
	};

	var _keyframes = (function (nameGenerator, stringifyRules, css) {
	  return function (strings) {
	    for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      interpolations[_key - 1] = arguments[_key];
	    }

	    var rules = css.apply(undefined, [strings].concat(interpolations));
	    var hash = doHash(replaceWhitespace(JSON.stringify(rules)));

	    var existingName = StyleSheet$1.instance.getName(hash);
	    if (existingName) return existingName;

	    var name = nameGenerator(hash);
	    if (StyleSheet$1.instance.alreadyInjected(hash, name)) return name;

	    var generatedCSS = stringifyRules(rules, name, '@keyframes');
	    StyleSheet$1.instance.inject('sc-keyframes-' + name, true, generatedCSS, hash, name);
	    return name;
	  };
	});

	//      
	var _injectGlobal = (function (stringifyRules, css) {
	  var injectGlobal = function injectGlobal(strings) {
	    for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      interpolations[_key - 1] = arguments[_key];
	    }

	    var rules = css.apply(undefined, [strings].concat(interpolations));
	    var hash = doHash(JSON.stringify(rules));

	    var componentId = 'sc-global-' + hash;
	    if (StyleSheet$1.instance.hasInjectedComponent(componentId)) return;

	    StyleSheet$1.instance.inject(componentId, false, stringifyRules(rules));
	  };

	  return injectGlobal;
	});

	//      


	var _constructWithOptions = (function (css) {
	  var constructWithOptions = function constructWithOptions(componentConstructor, tag) {
	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    if ("development" !== 'production' && typeof tag !== 'string' && typeof tag !== 'function') {
	      // $FlowInvalidInputTest
	      throw new Error('Cannot create styled-component for component: ' + tag);
	    }

	    /* This is callable directly as a template function */
	    var templateFunction = function templateFunction(strings) {
	      for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        interpolations[_key - 1] = arguments[_key];
	      }

	      return componentConstructor(tag, options, css.apply(undefined, [strings].concat(interpolations)));
	    };

	    /* If config methods are called, wrap up a new template function and merge options */
	    templateFunction.withConfig = function (config) {
	      return constructWithOptions(componentConstructor, tag, _extends$21({}, options, config));
	    };
	    templateFunction.attrs = function (attrs) {
	      return constructWithOptions(componentConstructor, tag, _extends$21({}, options, {
	        attrs: _extends$21({}, options.attrs || {}, attrs)
	      }));
	    };

	    return templateFunction;
	  };

	  return constructWithOptions;
	});

	//      
	/* globals ReactClass */

	var wrapWithTheme = function wrapWithTheme(Component$$1) {
	  var _WithTheme$contextTyp;

	  var componentName = Component$$1.displayName || Component$$1.name || 'Component';

	  var shouldSetInnerRef = isStyledComponent(Component$$1) ||
	  // NOTE: We can't pass a ref to a stateless functional component
	  typeof Component$$1 === 'function' && !(Component$$1.prototype && 'isReactComponent' in Component$$1.prototype);

	  var WithTheme = function (_React$Component) {
	    inherits$3(WithTheme, _React$Component);

	    function WithTheme() {
	      var _temp, _this, _ret;

	      classCallCheck$3(this, WithTheme);

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      return _ret = (_temp = (_this = possibleConstructorReturn$3(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {}, _this.unsubscribeId = -1, _temp), possibleConstructorReturn$3(_this, _ret);
	    }

	    // NOTE: This is so that isStyledComponent passes for the innerRef unwrapping


	    WithTheme.prototype.componentWillMount = function componentWillMount() {
	      var _this2 = this;

	      var defaultProps = this.constructor.defaultProps;

	      var styledContext = this.context[CHANNEL_NEXT];
	      var themeProp = determineTheme(this.props, undefined, defaultProps);
	      if (styledContext === undefined && themeProp === undefined && "development" !== 'production') {
	        // eslint-disable-next-line no-console
	        console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps');
	      } else if (styledContext === undefined && themeProp !== undefined) {
	        this.setState({ theme: themeProp });
	      } else {
	        var subscribe = styledContext.subscribe;

	        this.unsubscribeId = subscribe(function (nextTheme) {
	          var theme = determineTheme(_this2.props, nextTheme, defaultProps);
	          _this2.setState({ theme: theme });
	        });
	      }
	    };

	    WithTheme.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	      var defaultProps = this.constructor.defaultProps;

	      this.setState(function (oldState) {
	        var theme = determineTheme(nextProps, oldState.theme, defaultProps);

	        return { theme: theme };
	      });
	    };

	    WithTheme.prototype.componentWillUnmount = function componentWillUnmount() {
	      if (this.unsubscribeId !== -1) {
	        this.context[CHANNEL_NEXT].unsubscribe(this.unsubscribeId);
	      }
	    };

	    WithTheme.prototype.render = function render() {
	      // eslint-disable-next-line react/prop-types
	      var innerRef = this.props.innerRef;
	      var theme = this.state.theme;


	      return react.createElement(Component$$1, _extends$21({
	        theme: theme
	      }, this.props, {
	        innerRef: shouldSetInnerRef ? innerRef : undefined,
	        ref: shouldSetInnerRef ? undefined : innerRef
	      }));
	    };

	    return WithTheme;
	  }(react.Component);

	  WithTheme.displayName = 'WithTheme(' + componentName + ')';
	  WithTheme.styledComponentId = 'withTheme';
	  WithTheme.contextTypes = (_WithTheme$contextTyp = {}, _WithTheme$contextTyp[CHANNEL] = propTypes.func, _WithTheme$contextTyp[CHANNEL_NEXT] = CONTEXT_CHANNEL_SHAPE, _WithTheme$contextTyp);


	  return hoistNonReactStatics$3(WithTheme, Component$$1);
	};

	//      

	/* Import singletons */
	/* Import singleton constructors */
	/* Import components */
	/* Import Higher Order Components */
	/* Instantiate singletons */
	var ComponentStyle = _ComponentStyle(generateAlphabeticName, flatten, stringifyRules);
	var constructWithOptions = _constructWithOptions(css);
	var StyledComponent = _StyledComponent(ComponentStyle, constructWithOptions);

	/* Instantiate exported singletons */
	var keyframes = _keyframes(generateAlphabeticName, stringifyRules, css);
	var injectGlobal = _injectGlobal(stringifyRules, css);
	var styled = _styled(StyledComponent, constructWithOptions);

	var styledComponents_es = /*#__PURE__*/Object.freeze({
		css: css,
		keyframes: keyframes,
		injectGlobal: injectGlobal,
		ThemeProvider: ThemeProvider,
		withTheme: wrapWithTheme,
		ServerStyleSheet: ServerStyleSheet,
		StyleSheetManager: StyleSheetManager,
		default: styled
	});

	var _styledComponents = ( styledComponents_es && styled ) || styledComponents_es;

	var Flexbox_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _templateObject = _taggedTemplateLiteral(['\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n'], ['\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n']);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _react2 = _interopRequireDefault(react);



	var _styledComponents2 = _interopRequireDefault(_styledComponents);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	var Flexbox = (0, _styledComponents2.default)(function (_ref) {
	  var alignContent = _ref.alignContent,
	      alignItems = _ref.alignItems,
	      alignSelf = _ref.alignSelf,
	      children = _ref.children,
	      display = _ref.display,
	      element = _ref.element,
	      flex = _ref.flex,
	      flexBasis = _ref.flexBasis,
	      flexDirection = _ref.flexDirection,
	      flexGrow = _ref.flexGrow,
	      flexShrink = _ref.flexShrink,
	      flexWrap = _ref.flexWrap,
	      height = _ref.height,
	      justifyContent = _ref.justifyContent,
	      margin = _ref.margin,
	      marginBottom = _ref.marginBottom,
	      marginLeft = _ref.marginLeft,
	      marginRight = _ref.marginRight,
	      marginTop = _ref.marginTop,
	      maxHeight = _ref.maxHeight,
	      maxWidth = _ref.maxWidth,
	      minHeight = _ref.minHeight,
	      minWidth = _ref.minWidth,
	      order = _ref.order,
	      padding = _ref.padding,
	      paddingBottom = _ref.paddingBottom,
	      paddingLeft = _ref.paddingLeft,
	      paddingRight = _ref.paddingRight,
	      paddingTop = _ref.paddingTop,
	      width = _ref.width,
	      props = _objectWithoutProperties(_ref, ['alignContent', 'alignItems', 'alignSelf', 'children', 'display', 'element', 'flex', 'flexBasis', 'flexDirection', 'flexGrow', 'flexShrink', 'flexWrap', 'height', 'justifyContent', 'margin', 'marginBottom', 'marginLeft', 'marginRight', 'marginTop', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'order', 'padding', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', 'width']);

	  return _react2.default.createElement(element, props, children);
	})(_templateObject, function (props) {
	  return props.alignContent ? 'align-content: ' + props.alignContent + ';' : '';
	}, function (props) {
	  return props.alignSelf ? 'align-self: ' + props.alignSelf + ';' : '';
	}, function (props) {
	  return props.alignItems ? 'align-items: ' + props.alignItems + ';' : '';
	}, function (props) {
	  return props.display ? 'display: ' + props.display + ';' : '';
	}, function (props) {
	  return props.flex ? 'flex: ' + props.flex + ';' : '';
	}, function (props) {
	  return props.flexBasis ? 'flex-basis: ' + props.flexBasis + ';' : '';
	}, function (props) {
	  return props.flexDirection ? 'flex-direction: ' + props.flexDirection + ';' : '';
	}, function (props) {
	  return props.flexGrow ? 'flex-grow: ' + props.flexGrow + ';' : '';
	}, function (props) {
	  return props.flexShrink ? 'flex-shrink: ' + props.flexShrink + ';' : '';
	}, function (props) {
	  return props.flexWrap ? 'flex-wrap: ' + props.flexWrap + ';' : '';
	}, function (props) {
	  return props.height ? 'height: ' + props.height + ';' : '';
	}, function (props) {
	  return props.justifyContent ? 'justify-content: ' + props.justifyContent + ';' : '';
	}, function (props) {
	  return props.margin ? 'margin: ' + props.margin + ';' : '';
	}, function (props) {
	  return props.marginBottom ? 'margin-bottom: ' + props.marginBottom + ';' : '';
	}, function (props) {
	  return props.marginLeft ? 'margin-left: ' + props.marginLeft + ';' : '';
	}, function (props) {
	  return props.marginRight ? 'margin-right: ' + props.marginRight + ';' : '';
	}, function (props) {
	  return props.marginTop ? 'margin-top: ' + props.marginTop + ';' : '';
	}, function (props) {
	  return props.maxHeight ? 'max-height: ' + props.maxHeight + ';' : '';
	}, function (props) {
	  return props.maxWidth ? 'max-width: ' + props.maxWidth + ';' : '';
	}, function (props) {
	  return props.minHeight ? 'min-height: ' + props.minHeight + ';' : '';
	}, function (props) {
	  return props.minWidth ? 'min-width: ' + props.minWidth + ';' : '';
	}, function (props) {
	  return props.order ? 'order: ' + props.order + ';' : '';
	}, function (props) {
	  return props.padding ? 'padding: ' + props.padding + ';' : '';
	}, function (props) {
	  return props.paddingBottom ? 'padding-bottom: ' + props.paddingBottom + ';' : '';
	}, function (props) {
	  return props.paddingLeft ? 'padding-left: ' + props.paddingLeft + ';' : '';
	}, function (props) {
	  return props.paddingRight ? 'padding-right: ' + props.paddingRight + ';' : '';
	}, function (props) {
	  return props.paddingTop ? 'padding-top: ' + props.paddingTop + ';' : '';
	}, function (props) {
	  return props.width ? 'width: ' + props.width + ';' : '';
	});

	Flexbox.propTypes = {
	  alignContent: _propTypes2.default.oneOf(['center', 'flex-end', 'flex-start', 'space-around', 'space-between', 'stretch']),
	  alignItems: _propTypes2.default.oneOf(['baseline', 'center', 'flex-end', 'flex-start', 'stretch']),
	  alignSelf: _propTypes2.default.oneOf(['baseline', 'center', 'flex-end', 'flex-start', 'stretch']),
	  children: _propTypes2.default.node,
	  display: _propTypes2.default.oneOf(['flex', 'inline-flex']),
	  element: _propTypes2.default.oneOf(['article', 'aside', 'div', 'figure', 'footer', 'header', 'main', 'nav', 'section']),
	  flex: _propTypes2.default.string,
	  flexBasis: _propTypes2.default.string,
	  flexDirection: _propTypes2.default.oneOf(['column-reverse', 'column', 'row-reverse', 'row']),
	  flexGrow: _propTypes2.default.number,
	  flexShrink: _propTypes2.default.number,
	  flexWrap: _propTypes2.default.oneOf(['nowrap', 'wrap-reverse', 'wrap']),
	  height: _propTypes2.default.string,
	  inline: _propTypes2.default.bool,
	  justifyContent: _propTypes2.default.oneOf(['center', 'flex-end', 'flex-start', 'space-around', 'space-between']),
	  margin: _propTypes2.default.string,
	  marginBottom: _propTypes2.default.string,
	  marginLeft: _propTypes2.default.string,
	  marginRight: _propTypes2.default.string,
	  marginTop: _propTypes2.default.string,
	  maxHeight: _propTypes2.default.string,
	  maxWidth: _propTypes2.default.string,
	  minHeight: _propTypes2.default.string,
	  minWidth: _propTypes2.default.string,
	  order: _propTypes2.default.number,
	  padding: _propTypes2.default.string,
	  paddingBottom: _propTypes2.default.string,
	  paddingLeft: _propTypes2.default.string,
	  paddingRight: _propTypes2.default.string,
	  paddingTop: _propTypes2.default.string,
	  style: _propTypes2.default.object,
	  width: _propTypes2.default.string
	};

	Flexbox.defaultProps = {
	  display: 'flex',
	  element: 'div'
	};

	exports.default = Flexbox;
	});

	unwrapExports(Flexbox_1);

	var dist$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;



	var _Flexbox2 = _interopRequireDefault(Flexbox_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _Flexbox2.default;
	});

	unwrapExports(dist$1);

	var Legend_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _underscore2 = _interopRequireDefault(underscore);



	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _flexboxReact2 = _interopRequireDefault(dist$1);



	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var defaultStyle = {
	    symbol: {
	        normal: { stroke: "steelblue", fill: "none", strokeWidth: 1 },
	        highlighted: { stroke: "#5a98cb", fill: "none", strokeWidth: 1 },
	        selected: { stroke: "steelblue", fill: "none", strokeWidth: 2 },
	        muted: { stroke: "steelblue", fill: "none", opacity: 0.4, strokeWidth: 1 }
	    },
	    label: {
	        normal: { fontSize: "normal", color: "#333" },
	        highlighted: { fontSize: "normal", color: "#222" },
	        selected: { fontSize: "normal", color: "#333" },
	        muted: { fontSize: "normal", color: "#333", opacity: 0.4 }
	    },
	    value: {
	        normal: { fontSize: "normal", color: "#333" },
	        highlighted: { fontSize: "normal", color: "#222" },
	        selected: { fontSize: "normal", color: "#333" },
	        muted: { fontSize: "normal", color: "#333", opacity: 0.4 }
	    }
	};

	/**
	 * Legends are simple to define.
	 *
	 * First specify the styles you want each item to have. This is either
	 * the CSS that should be appied to rendered symbol. Or you can provide
	 * a Styler object. See below for full styling details.
	 *
	 * ```
	 * const style = Styler([
	 *     {key: "aud", color: "steelblue", width: 1, dashed: true},
	 *     {key: "euro", color: "#F68B24", width: 2}
	 * ]);
	 * ```
	 *
	 * Next build a list of categories you want in the legend.
	 *
	 * ```
	 * const categories = [
	 *     {key: "aust", label: "AUD", value: "1.52", disabled: true},
	 *     {key: "usa", label: "USD", value: "1.43", disabled: false}
	 * ];
	 * ```
	 * For each category to display you must provide a key, a label and
	 * if it should be displayed disabled or not.
	 *
	 * Then render the legend, with type either "line", "swatch" or "dot":
	 *
	 * ```
	 * <Legend type="line" style={style} categories={categories} />
	 * ```
	 *
	 * Optionally you can also display a value below the label. This is
	 * useful when hovering over another chart on the page, or to display
	 * the current value of live data. You can see this defined in the
	 * above categories.
	 *
	 * The legend can also be supplied with callback functions which will
	 * tell you if the user has clicked or hovered over on one of the legend
	 * items. You can use this to sync highlighting and selection to a
	 * chart.
	 *
	 * ## Styling
	 *
	 * There are three methods of styling a legend:
	 *  - using a Styler object
	 *  - using an object containing inline styles
	 *  - using a function which returns an inline style
	 *
	 * A Styler object can be supplied directly to the `style` prop
	 * of the legend. This is the simplest approach, since you can
	 * usually just use the same Styler as you use for your chart.
	 *
	 * Supplying an object to the `style` prop gives you more control
	 * than the Styler, since you can provide the actual CSS properties
	 * for each element of the legend. The format for the object is:
	 *
	 * ```
	 * {
	 *     columnName1: {
	      symbol: {
	        normal: {...styleSymbol},
	        highlighted: {...styleSymbol},
	        selected: {...styleSymbol},
	        muted: {...styleSymbol}
	      },
	      label: {
	        normal: {...labelStyle},
	        highlighted: {...labelStyle},
	        selected: {...labelStyle},
	        muted: {...labelStyle}
	      },
	      value: {
	        normal: {...valueStyle},
	        highlighted: {...valueStyle},
	        selected: {...valueStyle},
	        muted: {...valueStyle}
	      }
	 *     },
	 *     columnName2 : {
	 *         ...
	 *     },
	 *     ...
	 *  }
	 *
	 *  - symbolStyle is the CSS properties for the symbol, which
	 * is either a swatch, dot or line. For a line, you'd want to
	 * provide the SVG <line> properties, for a swatch you'd provide
	 * the SVG <rect> properties and for a dot the <ellipse> properties.
	 *  - labelStyle is the main label for the legend item. It is a
	 *  SVG <text> element, so you can control the font properties.
	 *  - valueStyle is the optional value. As with the labelStyle you
	 *  this is an SVG <text> element.
	 *
	 * Finally, you can provide a function to the `style` prop. This
	 * is similar to providing an object, except your function will
	 * be called with the columnName and you should return the map
	 * containing symbol, label and value styles.
	 */

	var LegendItem = (function(_React$Component) {
	    _inherits(LegendItem, _React$Component);

	    function LegendItem() {
	        _classCallCheck(this, LegendItem);

	        return _possibleConstructorReturn(
	            this,
	            (LegendItem.__proto__ || Object.getPrototypeOf(LegendItem)).apply(this, arguments)
	        );
	    }

	    _createClass(LegendItem, [
	        {
	            key: "handleClick",
	            value: function handleClick(e, key) {
	                e.stopPropagation();
	                if (this.props.onSelectionChange) {
	                    this.props.onSelectionChange(key);
	                }
	            }
	        },
	        {
	            key: "handleHover",
	            value: function handleHover(e, key) {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(key);
	                }
	            }
	        },
	        {
	            key: "handleHoverLeave",
	            value: function handleHoverLeave() {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(null);
	                }
	            }
	        },
	        {
	            key: "renderLine",
	            value: function renderLine(style) {
	                var _props = this.props,
	                    symbolWidth = _props.symbolWidth,
	                    symbolHeight = _props.symbolHeight;

	                return _react2.default.createElement(
	                    "svg",
	                    { style: { float: "left" }, width: symbolWidth, height: symbolHeight },
	                    _react2.default.createElement("line", {
	                        style: style,
	                        x1: 0,
	                        y1: parseInt(symbolWidth / 2, 10),
	                        x2: symbolWidth,
	                        y2: parseInt(symbolWidth / 2, 10),
	                        stroke: "black",
	                        strokeWidth: "2"
	                    })
	                );
	            }
	        },
	        {
	            key: "renderSwatch",
	            value: function renderSwatch(style) {
	                var _props2 = this.props,
	                    symbolWidth = _props2.symbolWidth,
	                    symbolHeight = _props2.symbolHeight;

	                return _react2.default.createElement(
	                    "svg",
	                    { style: { float: "left" }, width: symbolWidth, height: symbolHeight },
	                    _react2.default.createElement("rect", {
	                        style: style,
	                        x: 2,
	                        y: 2,
	                        width: symbolWidth - 4,
	                        height: symbolHeight - 4,
	                        rx: 2,
	                        ry: 2
	                    })
	                );
	            }
	        },
	        {
	            key: "renderDot",
	            value: function renderDot(style) {
	                var _props3 = this.props,
	                    symbolWidth = _props3.symbolWidth,
	                    symbolHeight = _props3.symbolHeight;

	                var w = parseInt(symbolWidth / 2, 10);
	                var h = parseInt(symbolHeight / 2, 10);
	                var radius = w * 0.75;

	                return _react2.default.createElement(
	                    "svg",
	                    { style: { float: "left" }, width: symbolWidth, height: symbolHeight },
	                    _react2.default.createElement("circle", {
	                        style: style,
	                        cx: w,
	                        cy: h,
	                        r: radius
	                    })
	                );
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                var _this2 = this;

	                var _props4 = this.props,
	                    symbolStyle = _props4.symbolStyle,
	                    labelStyle = _props4.labelStyle,
	                    valueStyle = _props4.valueStyle,
	                    itemKey = _props4.itemKey,
	                    symbolType = _props4.symbolType;

	                var symbol = void 0;
	                switch (symbolType) {
	                    case "swatch":
	                        symbol = this.renderSwatch(symbolStyle);
	                        break;
	                    case "line":
	                        symbol = this.renderLine(symbolStyle);
	                        break;
	                    case "dot":
	                        symbol = this.renderDot(symbolStyle);
	                        break;
	                    default:
	                    //pass
	                }

	                // TODO: We shouldn't be adding interactions to a element like this.
	                //       The alternative it to put it on a <a> or something?

	                return _react2.default.createElement(
	                    _flexboxReact2.default,
	                    { flexDirection: "column", key: itemKey },
	                    _react2.default.createElement(
	                        "div",
	                        {
	                            onClick: function onClick(e) {
	                                return _this2.handleClick(e, itemKey);
	                            },
	                            onMouseMove: function onMouseMove(e) {
	                                return _this2.handleHover(e, itemKey);
	                            },
	                            onMouseLeave: function onMouseLeave() {
	                                return _this2.handleHoverLeave();
	                            }
	                        },
	                        _react2.default.createElement(
	                            _flexboxReact2.default,
	                            { flexDirection: "row" },
	                            _react2.default.createElement(
	                                _flexboxReact2.default,
	                                { width: "20px" },
	                                symbol
	                            ),
	                            _react2.default.createElement(
	                                _flexboxReact2.default,
	                                { flexDirection: "column" },
	                                _react2.default.createElement(
	                                    _flexboxReact2.default,
	                                    null,
	                                    _react2.default.createElement(
	                                        "div",
	                                        { style: labelStyle },
	                                        this.props.label
	                                    )
	                                ),
	                                _react2.default.createElement(
	                                    _flexboxReact2.default,
	                                    null,
	                                    _react2.default.createElement(
	                                        "div",
	                                        { style: valueStyle },
	                                        this.props.value
	                                    )
	                                )
	                            )
	                        )
	                    )
	                );
	            }
	        }
	    ]);

	    return LegendItem;
	})(_react2.default.Component);

	var Legend = (function(_React$Component2) {
	    _inherits(Legend, _React$Component2);

	    function Legend() {
	        _classCallCheck(this, Legend);

	        return _possibleConstructorReturn(
	            this,
	            (Legend.__proto__ || Object.getPrototypeOf(Legend)).apply(this, arguments)
	        );
	    }

	    _createClass(Legend, [
	        {
	            key: "handleClick",
	            value: function handleClick(e, key) {
	                e.stopPropagation();
	                if (this.props.onSelectionChange) {
	                    this.props.onSelectionChange(key);
	                }
	            }
	        },
	        {
	            key: "handleHover",
	            value: function handleHover(e, key) {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(key);
	                }
	            }
	        },
	        {
	            key: "handleHoverLeave",
	            value: function handleHoverLeave() {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(null);
	                }
	            }

	            /**
	             * For each category item we get the users stle preference. This
	             * can be supplied in a number of ways:
	             *  * Typically you would get the legend stle from a Style instance
	             *  * Alternatively, you can pass in a style object which has your
	             *    category in it and the associated style
	             *  * Finally, the provided style can also be a function
	             */
	        },
	        {
	            key: "providedStyle",
	            value: function providedStyle(category, type) {
	                var style = {};
	                if (this.props.style) {
	                    if (this.props.style instanceof styler_1.Styler) {
	                        style = this.props.style.legendStyle(category.key, type);
	                    } else if (_underscore2.default.isObject(this.props.style)) {
	                        style = this.props.style[category.key];
	                    } else if (_underscore2.default.isFunction(this.props.style)) {
	                        style = this.props.style(category.key);
	                    }
	                }
	                return style;
	            }

	            /**
	             * For each category this function takes the current
	             * selected and highlighted item, along with the disabled
	             * state of the item, and returns the mode it should be
	             * rendered in: normal, selected, highlighted, or muted
	             */
	        },
	        {
	            key: "styleMode",
	            value: function styleMode(category) {
	                var isHighlighted = this.props.highlight && category.key === this.props.highlight;
	                var isSelected = this.props.selection && category.key === this.props.selection;
	                var isDisabled = category.disabled;

	                var mode = "normal";
	                if (this.props.selection) {
	                    if (isSelected) {
	                        mode = "selected";
	                    } else if (isHighlighted) {
	                        mode = "highlighted";
	                    } else {
	                        mode = "muted";
	                    }
	                } else if (isHighlighted) {
	                    mode = "highlighted";
	                } else if (isDisabled) {
	                    mode = "muted";
	                }
	                return mode;
	            }
	        },
	        {
	            key: "symbolStyle",
	            value: function symbolStyle(category, type) {
	                var styleMap = this.providedStyle(category, type);
	                var styleMode = this.styleMode(category);
	                return (0, _merge2.default)(
	                    true,
	                    defaultStyle[styleMode],
	                    styleMap.symbol[styleMode] ? styleMap.symbol[styleMode] : {}
	                );
	            }
	        },
	        {
	            key: "labelStyle",
	            value: function labelStyle(category) {
	                var styleMap = this.providedStyle(category);
	                var styleMode = this.styleMode(category);
	                return (0, _merge2.default)(
	                    true,
	                    defaultStyle[styleMode],
	                    styleMap.label[styleMode] ? styleMap.label[styleMode] : {}
	                );
	            }
	        },
	        {
	            key: "valueStyle",
	            value: function valueStyle(category) {
	                var styleMap = this.providedStyle(category);
	                var styleMode = this.styleMode(category);
	                return (0, _merge2.default)(
	                    true,
	                    defaultStyle[styleMode],
	                    styleMap.value[styleMode] ? styleMap.value[styleMode] : {}
	                );
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                var _this4 = this;

	                var _props5 = this.props,
	                    _props5$type = _props5.type,
	                    type = _props5$type === undefined ? "swatch" : _props5$type,
	                    symbolWidth = _props5.symbolWidth,
	                    symbolHeight = _props5.symbolHeight;

	                var items = this.props.categories.map(function(category) {
	                    var key = category.key,
	                        label = category.label,
	                        value = category.value,
	                        _category$symbolType = category.symbolType,
	                        symbolType =
	                            _category$symbolType === undefined ? type : _category$symbolType;

	                    var symbolStyle = _this4.symbolStyle(category, symbolType);
	                    var labelStyle = _this4.labelStyle(category);
	                    var valueStyle = _this4.valueStyle(category);
	                    return _react2.default.createElement(LegendItem, {
	                        key: key,
	                        type: type,
	                        itemKey: key,
	                        label: label,
	                        value: value,
	                        symbolType: symbolType,
	                        symbolWidth: symbolWidth,
	                        symbolHeight: symbolHeight,
	                        symbolStyle: symbolStyle,
	                        labelStyle: labelStyle,
	                        valueStyle: valueStyle,
	                        onSelectionChange: _this4.props.onSelectionChange,
	                        onHighlightChange: _this4.props.onHighlightChange
	                    });
	                });

	                var align = this.props.align === "left" ? "flex-start" : "flex-end";

	                if (this.props.stack) {
	                    return _react2.default.createElement(
	                        _flexboxReact2.default,
	                        { justifyContent: align, flexDirection: "column", marginBottom: "20px" },
	                        items
	                    );
	                } else {
	                    return _react2.default.createElement(
	                        _flexboxReact2.default,
	                        { justifyContent: align, flexWrap: "wrap", marginBottom: "20px" },
	                        items
	                    );
	                }
	            }
	        }
	    ]);

	    return Legend;
	})(_react2.default.Component);

	exports.default = Legend;

	Legend.propTypes = {
	    /**
	     * The overall style of the legend items, either a color "swatch", a
	     * colored "line", or a "dot".
	     */
	    type: _propTypes2.default.oneOf(["swatch", "line", "dot"]),

	    /**
	     * Alignment of the legend within the available space. Either left or right.
	     */
	    align: _propTypes2.default.oneOf(["left", "right"]),
	    style: _propTypes2.default.oneOfType([
	        _propTypes2.default.object,
	        _propTypes2.default.func,
	        _propTypes2.default.instanceOf(styler_1.Styler)
	    ]).isRequired,

	    /**
	     * The categories array specifies details and style for each item in the legend. For each item:
	     *  * "key" - (required) the name by which the legend will be known
	     *  * "label" - (required) the displayed label
	     *  * "style" - the swatch, dot, or line style. Typically you'd just
	     *              specify {backgroundColor: "#1f77b4"}
	     *  * "labelStyle" - the label style
	     *  * "disabled" - a disabled state
	     *
	     * ```
	     * const categories = [
	     *    {key: "aust", label: "AUD", disabled: this.state.disabled["aust"],
	     *      style: {backgroundColor: "#1f77b4"}},
	     *    {key: "usa", label: "USD", disabled: this.state.disabled["usa"],
	     *      style: {backgroundColor: "#aec7e8"}}
	     * ];
	     * ```
	     */
	    categories: _propTypes2.default.arrayOf(
	        _propTypes2.default.shape({
	            key: _propTypes2.default.string.isRequired, // eslint-disable-line
	            label: _propTypes2.default.string.isRequired, // eslint-disable-line
	            disabled: _propTypes2.default.bool, // eslint-disable-line
	            style: _propTypes2.default.object, // eslint-disable-line
	            labelStyle: _propTypes2.default.object // eslint-disable-line
	        })
	    ).isRequired,

	    /**
	     * The width of the legend symbol
	     */
	    symbolWidth: _propTypes2.default.number,

	    /**
	     * The height of the legend symbol
	     */
	    symbolHeight: _propTypes2.default.number,

	    /**
	     * Which item, specified by its key, should be rendered as highlighted
	     */
	    highlight: _propTypes2.default.string,

	    /**
	     * Which item, specified by its key, should be rendered as selected
	     */
	    selection: _propTypes2.default.string,

	    /**
	     * Callback will be called with a legend item is selected (i.e. it is clicked
	     * on by the user)
	     */
	    onSelectionChange: _propTypes2.default.func,

	    /**
	     * Callback will be called with a legend item is highlighted (i.e. it is hovered
	     * over by the user)
	     */
	    onHighlightChange: _propTypes2.default.func,

	    /**
	     * Defines whether to stack legend items vertically or not
	     */
	    stack: _propTypes2.default.bool
	};

	Legend.defaultProps = {
	    style: {},
	    labelStyle: {},
	    type: "swatch", // or "line" or "dot"
	    align: "left",
	    symbolWidth: 16,
	    symbolHeight: 16,
	    stack: false
	};
	});

	unwrapExports(Legend_1);

	var LineChart_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _underscore2 = _interopRequireDefault(underscore);





	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);









	var _curve2 = _interopRequireDefault(curve);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var defaultStyle = {
	    normal: { stroke: "steelblue", fill: "none", strokeWidth: 1 },
	    highlighted: { stroke: "#5a98cb", fill: "none", strokeWidth: 1 },
	    selected: { stroke: "steelblue", fill: "none", strokeWidth: 2 },
	    muted: { stroke: "steelblue", fill: "none", opacity: 0.4, strokeWidth: 1 }
	};

	/**
	 * The `<LineChart>` component is able to display multiple columns of a TimeSeries
	 * as separate line charts.
	 *
	 * The `<LineChart>` should be used within `<ChartContainer>` etc., as this will
	 * construct the horizontal and vertical axis, and manage other elements.
	 *
	 * Here is an example of two columns of a TimeSeries being plotted with the `<LineChart>`:
	 *
	 * ```
	  <ChartContainer timeRange={this.state.timerange} >
	    <ChartRow height="200">
	      <YAxis id="y" label="Price ($)" min={0.5} max={1.5} format="$,.2f" />
	      <Charts>
	        <LineChart
	          axis="y"
	          breakLine={false}
	          series={currencySeries}
	          columns={["aud", "euro"]}
	          style={style}
	          interpolation="curveBasis" />
	      </Charts>
	    </ChartRow>
	  </ChartContainer>
	 * ```
	 */

	var LineChart = (function(_React$Component) {
	    _inherits(LineChart, _React$Component);

	    function LineChart() {
	        _classCallCheck(this, LineChart);

	        return _possibleConstructorReturn(
	            this,
	            (LineChart.__proto__ || Object.getPrototypeOf(LineChart)).apply(this, arguments)
	        );
	    }

	    _createClass(LineChart, [
	        {
	            key: "shouldComponentUpdate",
	            value: function shouldComponentUpdate(nextProps) {
	                var newSeries = nextProps.series;
	                var oldSeries = this.props.series;

	                var width = nextProps.width;
	                var timeScale = nextProps.timeScale;
	                var yScale = nextProps.yScale;
	                var interpolation = nextProps.interpolation;
	                var highlight = nextProps.highlight;
	                var selection = nextProps.selection;
	                var columns = nextProps.columns;

	                // What changed?
	                var widthChanged = this.props.width !== width;
	                var timeScaleChanged =
	                    (0, util$2.scaleAsString)(this.props.timeScale) !==
	                    (0, util$2.scaleAsString)(timeScale);
	                var yAxisScaleChanged = this.props.yScale !== yScale;
	                var interpolationChanged = this.props.interpolation !== interpolation;
	                var highlightChanged = this.props.highlight !== highlight;
	                var selectionChanged = this.props.selection !== selection;
	                var columnsChanged = this.props.columns !== columns;

	                var seriesChanged = false;
	                if (oldSeries.length !== newSeries.length) {
	                    seriesChanged = true;
	                } else {
	                    seriesChanged = !entry.TimeSeries.is(oldSeries, newSeries);
	                }

	                return (
	                    widthChanged ||
	                    seriesChanged ||
	                    timeScaleChanged ||
	                    yAxisScaleChanged ||
	                    interpolationChanged ||
	                    highlightChanged ||
	                    selectionChanged ||
	                    columnsChanged
	                );
	            }
	        },
	        {
	            key: "handleHover",
	            value: function handleHover(e, column) {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(column);
	                }
	            }
	        },
	        {
	            key: "handleHoverLeave",
	            value: function handleHoverLeave() {
	                if (this.props.onHighlightChange) {
	                    this.props.onHighlightChange(null);
	                }
	            }
	        },
	        {
	            key: "handleClick",
	            value: function handleClick(e, column) {
	                e.stopPropagation();
	                if (this.props.onSelectionChange) {
	                    this.props.onSelectionChange(column);
	                }
	            }
	        },
	        {
	            key: "providedPathStyleMap",
	            value: function providedPathStyleMap(column) {
	                var style = {};
	                if (this.props.style) {
	                    if (this.props.style instanceof styler_1.Styler) {
	                        style = this.props.style.lineChartStyle()[column];
	                    } else if (_underscore2.default.isObject(this.props.style)) {
	                        style = this.props.style[column];
	                    } else if (_underscore2.default.isFunction(this.props.style)) {
	                        style = this.props.style(column);
	                    }
	                }
	                return style;
	            }

	            /**
	             * Returns the style used for drawing the path
	             */
	        },
	        {
	            key: "pathStyle",
	            value: function pathStyle(column) {
	                var style = void 0;

	                var styleMap = this.providedPathStyleMap(column);
	                var isHighlighted = this.props.highlight && column === this.props.highlight;
	                var isSelected = this.props.selection && column === this.props.selection;

	                if (this.props.selection) {
	                    if (isSelected) {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle.selected,
	                            styleMap.selected ? styleMap.selected : {}
	                        );
	                    } else if (isHighlighted) {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle.highlighted,
	                            styleMap.highlighted ? styleMap.highlighted : {}
	                        );
	                    } else {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle.muted,
	                            styleMap.muted ? styleMap.muted : {}
	                        );
	                    }
	                } else if (isHighlighted) {
	                    style = (0, _merge2.default)(
	                        true,
	                        defaultStyle.highlighted,
	                        styleMap.highlighted ? styleMap.highlighted : {}
	                    );
	                } else {
	                    style = (0, _merge2.default)(true, defaultStyle.normal, styleMap.normal);
	                }

	                style.pointerEvents = "none";

	                return style;
	            }
	        },
	        {
	            key: "renderPath",
	            value: function renderPath(data, column, key) {
	                var _this2 = this;

	                var hitStyle = {
	                    stroke: "white",
	                    fill: "none",
	                    opacity: 0.0,
	                    strokeWidth: 7,
	                    cursor: "crosshair",
	                    pointerEvents: "stroke"
	                };

	                // D3 generates each path
	                var path = (0, _d3Shape.line)()
	                    .curve(_curve2.default[this.props.interpolation])
	                    .x(function(d) {
	                        return _this2.props.timeScale(d.x);
	                    })
	                    .y(function(d) {
	                        return _this2.props.yScale(d.y);
	                    })(data);

	                return _react2.default.createElement(
	                    "g",
	                    { key: key },
	                    _react2.default.createElement("path", {
	                        d: path,
	                        style: this.pathStyle(column)
	                    }),
	                    _react2.default.createElement("path", {
	                        d: path,
	                        style: hitStyle,
	                        onClick: function onClick(e) {
	                            return _this2.handleClick(e, column);
	                        },
	                        onMouseLeave: function onMouseLeave() {
	                            return _this2.handleHoverLeave();
	                        },
	                        onMouseMove: function onMouseMove(e) {
	                            return _this2.handleHover(e, column);
	                        }
	                    })
	                );
	            }
	        },
	        {
	            key: "renderLines",
	            value: function renderLines() {
	                var _this3 = this;

	                return _underscore2.default.map(this.props.columns, function(column) {
	                    return _this3.renderLine(column);
	                });
	            }
	        },
	        {
	            key: "renderLine",
	            value: function renderLine(column) {
	                var pathLines = [];
	                var count = 1;
	                if (this.props.breakLine) {
	                    // Remove nulls and NaNs from the line by generating a break in the line
	                    var currentPoints = null;
	                    var _iteratorNormalCompletion = true;
	                    var _didIteratorError = false;
	                    var _iteratorError = undefined;

	                    try {
	                        for (
	                            var _iterator = this.props.series.events()[Symbol.iterator](), _step;
	                            !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
	                            _iteratorNormalCompletion = true
	                        ) {
	                            var d = _step.value;

	                            var timestamp = new Date(
	                                d.begin().getTime() + (d.end().getTime() - d.begin().getTime()) / 2
	                            );
	                            var value = d.get(column);
	                            var badPoint =
	                                _underscore2.default.isNull(value) ||
	                                _underscore2.default.isNaN(value) ||
	                                !_underscore2.default.isFinite(value);
	                            if (!badPoint) {
	                                if (!currentPoints) currentPoints = [];
	                                currentPoints.push({ x: timestamp, y: value });
	                            } else if (currentPoints) {
	                                if (currentPoints.length > 1) {
	                                    pathLines.push(this.renderPath(currentPoints, column, count));
	                                    count += 1;
	                                }
	                                currentPoints = null;
	                            }
	                        }
	                    } catch (err) {
	                        _didIteratorError = true;
	                        _iteratorError = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }
	                        } finally {
	                            if (_didIteratorError) {
	                                throw _iteratorError;
	                            }
	                        }
	                    }

	                    if (currentPoints && currentPoints.length > 1) {
	                        pathLines.push(this.renderPath(currentPoints, column, count));
	                        count += 1;
	                    }
	                } else {
	                    // Ignore nulls and NaNs in the line
	                    var cleanedPoints = [];
	                    var _iteratorNormalCompletion2 = true;
	                    var _didIteratorError2 = false;
	                    var _iteratorError2 = undefined;

	                    try {
	                        for (
	                            var _iterator2 = this.props.series.events()[Symbol.iterator](), _step2;
	                            !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);
	                            _iteratorNormalCompletion2 = true
	                        ) {
	                            var _d = _step2.value;

	                            var _timestamp = new Date(
	                                _d.begin().getTime() +
	                                    (_d.end().getTime() - _d.begin().getTime()) / 2
	                            );
	                            var _value = _d.get(column);
	                            var _badPoint =
	                                _underscore2.default.isNull(_value) ||
	                                _underscore2.default.isNaN(_value) ||
	                                !_underscore2.default.isFinite(_value);
	                            if (!_badPoint) {
	                                cleanedPoints.push({ x: _timestamp, y: _value });
	                            }
	                        }
	                    } catch (err) {
	                        _didIteratorError2 = true;
	                        _iteratorError2 = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                _iterator2.return();
	                            }
	                        } finally {
	                            if (_didIteratorError2) {
	                                throw _iteratorError2;
	                            }
	                        }
	                    }

	                    pathLines.push(this.renderPath(cleanedPoints, column, count));
	                    count += 1;
	                }

	                return _react2.default.createElement("g", { key: column }, pathLines);
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                return _react2.default.createElement("g", null, this.renderLines());
	            }
	        }
	    ]);

	    return LineChart;
	})(_react2.default.Component);

	exports.default = LineChart;

	LineChart.propTypes = {
	    /**
	     * Show or hide this chart
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize
	     */
	    series: _propTypes2.default.instanceOf(entry.TimeSeries).isRequired,

	    /**
	     * Reference to the axis which provides the vertical scale for drawing.
	     * e.g. specifying `axis="trafficRate"` would refer the y-scale of the YAxis
	     * with id="trafficRate".
	     */
	    axis: _propTypes2.default.string.isRequired, // eslint-disable-line

	    /**
	     * Which columns from the series to draw.
	     */
	    columns: _propTypes2.default.arrayOf(_propTypes2.default.string),

	    /**
	     * The styles to apply to the underlying SVG lines. This is a mapping
	     * of column names to objects with style attributes, in the following
	     * format:
	     *
	     * ```
	     * const style = {
	     *     in: {
	     *         normal: {stroke: "steelblue", fill: "none", strokeWidth: 1},
	     *         highlighted: {stroke: "#5a98cb", fill: "none", strokeWidth: 1},
	     *         selected: {stroke: "steelblue", fill: "none", strokeWidth: 1},
	     *         muted: {stroke: "steelblue", fill: "none", opacity: 0.4, strokeWidth: 1}
	     *     },
	     *     out: {
	     *         ...
	     *     }
	     * };
	     *
	     *  <LineChart style={style} ... />
	     * ```
	     *
	     * Alternatively, you can pass in a `Styler`. For example:
	     *
	     * ```
	     * const currencyStyle = Styler([
	     *     {key: "aud", color: "steelblue", width: 1, dashed: true},
	     *     {key: "euro", color: "#F68B24", width: 2}
	     * ]);
	     *
	     * <LineChart columns={["aud", "euro"]} style={currencyStyle} ... />
	     *
	     * ```
	     */
	    style: _propTypes2.default.oneOfType([
	        _propTypes2.default.object,
	        _propTypes2.default.func,
	        _propTypes2.default.instanceOf(styler_1.Styler)
	    ]),

	    /**
	     * Any of D3's interpolation modes.
	     */
	    interpolation: _propTypes2.default.oneOf([
	        "curveBasis",
	        "curveBasisOpen",
	        "curveBundle",
	        "curveCardinal",
	        "curveCardinalOpen",
	        "curveCatmullRom",
	        "curveCatmullRomOpen",
	        "curveLinear",
	        "curveMonotoneX",
	        "curveMonotoneY",
	        "curveNatural",
	        "curveRadial",
	        "curveStep",
	        "curveStepAfter",
	        "curveStepBefore"
	    ]),

	    /**
	     * The determines how to handle bad/missing values in the supplied
	     * TimeSeries. A missing value can be null or NaN. If breakLine
	     * is set to true then the line will be broken on either side of
	     * the bad value(s). If breakLine is false (the default) bad values
	     * are simply removed and the adjoining points are connected.
	     */
	    breakLine: _propTypes2.default.bool,

	    /**
	     * The selected item, which will be rendered in the "selected" style.
	     * If a line is selected, all other lines will be rendered in the "muted" style.
	     *
	     * See also `onSelectionChange`
	     */
	    selection: _propTypes2.default.string,

	    /**
	     * A callback that will be called when the selection changes. It will be called
	     * with the column corresponding to the line being clicked.
	     */
	    onSelectionChange: _propTypes2.default.func,

	    /**
	     * The highlighted column, which will be rendered in the "highlighted" style.
	     *
	     * See also `onHighlightChange`
	     */
	    highlight: _propTypes2.default.string,

	    /**
	     * A callback that will be called when the hovered over line changes.
	     * It will be called with the corresponding column.
	     */
	    onHighlightChange: _propTypes2.default.func,

	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func,

	    /**
	     * [Internal] The yScale supplied by the associated YAxis
	     */
	    yScale: _propTypes2.default.func,

	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number
	};

	LineChart.defaultProps = {
	    visible: true,
	    columns: ["value"],
	    smooth: true,
	    interpolation: "curveLinear",
	    breakLine: true
	};
	});

	unwrapExports(LineChart_1);

	var Resizable_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	/**
	 * This takes a single child and inserts a prop 'width' on it that is the
	 * current width of the this container. This is handy if you want to surround
	 * a chart or other svg diagram and have this drive the chart width.
	 */
	var Resizable = (function(_React$Component) {
	    _inherits(Resizable, _React$Component);

	    function Resizable(props) {
	        _classCallCheck(this, Resizable);

	        var _this = _possibleConstructorReturn(
	            this,
	            (Resizable.__proto__ || Object.getPrototypeOf(Resizable)).call(this, props)
	        );

	        _this.state = { width: 0 };
	        return _this;
	    }

	    _createClass(Resizable, [
	        {
	            key: "componentDidMount",
	            value: function componentDidMount() {
	                var _this2 = this;

	                window.addEventListener("resize", function() {
	                    return _this2.handleResize();
	                });
	                this.handleResize();
	            }
	        },
	        {
	            key: "componentWillUnmount",
	            value: function componentWillUnmount() {
	                var _this3 = this;

	                window.removeEventListener("resize", function() {
	                    return _this3.handleResize();
	                });
	            }
	        },
	        {
	            key: "handleResize",
	            value: function handleResize() {
	                if (this.container) {
	                    this.setState({
	                        width: this.container.offsetWidth
	                    });
	                }
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                var _this4 = this;

	                var child = _react2.default.Children.only(this.props.children);
	                var childElement = this.state.width
	                    ? _react2.default.cloneElement(child, { width: this.state.width })
	                    : null;
	                return _react2.default.createElement(
	                    "div",
	                    _extends(
	                        {
	                            ref: function ref(c) {
	                                _this4.container = c;
	                            }
	                        },
	                        this.props
	                    ),
	                    childElement
	                );
	            }
	        }
	    ]);

	    return Resizable;
	})(_react2.default.Component);

	exports.default = Resizable;

	Resizable.propTypes = {
	    children: _propTypes2.default.node
	};
	});

	unwrapExports(Resizable_1);

	var ScatterChart_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _extends =
	    Object.assign ||
	    function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };

	var _slicedToArray = (function() {
	    function sliceIterator(arr, i) {
	        var _arr = [];
	        var _n = true;
	        var _d = false;
	        var _e = undefined;
	        try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	                _arr.push(_s.value);
	                if (i && _arr.length === i) break;
	            }
	        } catch (err) {
	            _d = true;
	            _e = err;
	        } finally {
	            try {
	                if (!_n && _i["return"]) _i["return"]();
	            } finally {
	                if (_d) throw _e;
	            }
	        }
	        return _arr;
	    }
	    return function(arr, i) {
	        if (Array.isArray(arr)) {
	            return arr;
	        } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	        } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	        }
	    };
	})();

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _underscore2 = _interopRequireDefault(underscore);



	var _merge2 = _interopRequireDefault(merge);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	var _reactDom2 = _interopRequireDefault(reactDom);





	var _EventMarker2 = _interopRequireDefault(EventMarker_1);





	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	// eslint-disable-line

	var defaultStyle = {
	    normal: { fill: "steelblue", opacity: 0.8 },
	    highlighted: { fill: "steelblue", opacity: 1.0 },
	    selected: { fill: "steelblue", opacity: 1.0 },
	    muted: { fill: "steelblue", opacity: 0.4 }
	};

	/**
	 * The `<ScatterChart >` widget is able to display multiple columns of a series
	 * scattered across a time axis.
	 *
	 * The ScatterChart should be used within `<ChartContainer>` etc.,
	 * as this will construct the horizontal and vertical axis, and
	 * manage other elements. As with other charts, this lets them be stacked or
	 * overlaid on top of each other.
	 *
	 * A custom info overlay lets you hover over the data and examine points. Points
	 * can be selected or highlighted.
	 *
	 * ```
	 * <ChartContainer timeRange={series.timerange()}>
	 *     <ChartRow height="150">
	 *         <YAxis id="wind" label="Wind gust (mph)" labelOffset={-5}
	 *                min={0} max={series.max()} width="100" type="linear" format=",.1f"/>
	 *         <Charts>
	 *             <ScatterChart
	 *               axis="wind"
	 *               series={series}
	 *               style={{color: "steelblue", opacity: 0.5}} />
	 *         </Charts>
	 *     </ChartRow>
	 * </ChartContainer>
	 * ```
	 *
	 * ### Styling
	 *
	 * A scatter chart supports per-column or per-event styling. Styles can be set for
	 * each of the four states that are possible for each event: normal, highlighted,
	 * selected or muted. To style per-column, supply an object. For per-event styling
	 * supply a function: `(event, column) => {}` The functon will return a style object.
	 * See the `style` prop in the API documentation for more information.
	 *
	 * Separately the size of the dots can be controlled with the `radius` prop. This
	 * can either be a fixed value (e.g. 2.0), or a function. If a function is supplied
	 * it will be called as `(event, column) => {}` and should return the size.
	 *
	 * The hover info for each point is also able to be styled using the info style.
	 * This enables you to control the drawing of the box and connecting lines. Using
	 * the `infoWidth` and `infoHeight` props you can control the size of the box, which
	 * is fixed.
	 */

	var ScatterChart = (function(_React$Component) {
	    _inherits(ScatterChart, _React$Component);

	    function ScatterChart(props) {
	        _classCallCheck(this, ScatterChart);

	        var _this = _possibleConstructorReturn(
	            this,
	            (ScatterChart.__proto__ || Object.getPrototypeOf(ScatterChart)).call(this, props)
	        );

	        _this.handleHover = _this.handleHover.bind(_this);
	        _this.handleHoverLeave = _this.handleHoverLeave.bind(_this);
	        return _this;
	    }

	    // get the event mouse position relative to the event rect

	    _createClass(ScatterChart, [
	        {
	            key: "getOffsetMousePosition",
	            value: function getOffsetMousePosition(e) {
	                var offset = (0, util$2.getElementOffset)(this.eventrect);
	                var x = e.pageX - offset.left;
	                var y = e.pageY - offset.top;
	                return [Math.round(x), Math.round(y)];
	            }

	            //
	            // Event handlers
	            //
	        },
	        {
	            key: "handleClick",
	            value: function handleClick(e, event, column) {
	                var point = { event: event, column: column };
	                if (this.props.onSelectionChange) {
	                    this.props.onSelectionChange(point);
	                }
	            }
	        },
	        {
	            key: "handleHover",
	            value: function handleHover(e) {
	                var _getOffsetMousePositi = this.getOffsetMousePosition(e),
	                    _getOffsetMousePositi2 = _slicedToArray(_getOffsetMousePositi, 2),
	                    x = _getOffsetMousePositi2[0],
	                    y = _getOffsetMousePositi2[1];

	                var point = void 0;
	                var minDistance = Infinity;
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;

	                try {
	                    for (
	                        var _iterator = this.props.columns[Symbol.iterator](), _step;
	                        !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
	                        _iteratorNormalCompletion = true
	                    ) {
	                        var column = _step.value;
	                        var _iteratorNormalCompletion2 = true;
	                        var _didIteratorError2 = false;
	                        var _iteratorError2 = undefined;

	                        try {
	                            for (
	                                var _iterator2 = this.props.series.events()[Symbol.iterator](),
	                                    _step2;
	                                !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);
	                                _iteratorNormalCompletion2 = true
	                            ) {
	                                var event = _step2.value;

	                                var t = event.timestamp();
	                                var value = event.get(column);
	                                var px = this.props.timeScale(t);
	                                var py = this.props.yScale(value);
	                                var distance = Math.sqrt((px - x) * (px - x) + (py - y) * (py - y));
	                                if (distance < minDistance) {
	                                    point = { event: event, column: column };
	                                    minDistance = distance;
	                                }
	                            }
	                        } catch (err) {
	                            _didIteratorError2 = true;
	                            _iteratorError2 = err;
	                        } finally {
	                            try {
	                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                                    _iterator2.return();
	                                }
	                            } finally {
	                                if (_didIteratorError2) {
	                                    throw _iteratorError2;
	                                }
	                            }
	                        }
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }

	                if (this.props.onMouseNear) {
	                    this.props.onMouseNear(point);
	                }
	            }
	        },
	        {
	            key: "handleHoverLeave",
	            value: function handleHoverLeave() {
	                if (this.props.onMouseNear) {
	                    this.props.onMouseNear(null);
	                }
	            }

	            //
	            // Internal methods
	            //
	        },
	        {
	            key: "providedStyleMap",
	            value: function providedStyleMap(column, event) {
	                var style = {};
	                if (this.props.style) {
	                    if (this.props.style instanceof styler_1.Styler) {
	                        style = this.props.style.scatterChartStyle()[column];
	                    } else if (_underscore2.default.isFunction(this.props.style)) {
	                        style = this.props.style(column, event);
	                    } else if (_underscore2.default.isObject(this.props.style)) {
	                        style = this.props.style ? this.props.style[column] : defaultStyle;
	                    }
	                }
	                return style;
	            }

	            /**
	             * Returns the style used for drawing the path
	             */
	        },
	        {
	            key: "style",
	            value: function style(column, event) {
	                var style = void 0;

	                var styleMap = this.providedStyleMap(column, event);

	                var isHighlighted =
	                    this.props.highlight &&
	                    column === this.props.highlight.column &&
	                    entry.Event.is(this.props.highlight.event, event);
	                var isSelected =
	                    this.props.selected &&
	                    column === this.props.selected.column &&
	                    entry.Event.is(this.props.selected.event, event);

	                if (this.props.selected) {
	                    if (isSelected) {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle.selected,
	                            styleMap.selected ? styleMap.selected : {}
	                        );
	                    } else if (isHighlighted) {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle.highlighted,
	                            styleMap.highlighted ? styleMap.highlighted : {}
	                        );
	                    } else {
	                        style = (0, _merge2.default)(
	                            true,
	                            defaultStyle.muted,
	                            styleMap.muted ? styleMap.muted : {}
	                        );
	                    }
	                } else if (isHighlighted) {
	                    style = (0, _merge2.default)(
	                        true,
	                        defaultStyle.highlighted,
	                        styleMap.highlighted ? styleMap.highlighted : {}
	                    );
	                } else {
	                    style = (0, _merge2.default)(
	                        true,
	                        defaultStyle.normal,
	                        styleMap.normal ? styleMap.normal : {}
	                    );
	                }

	                return style;
	            }

	            //
	            // Render
	            //
	        },
	        {
	            key: "renderScatter",
	            value: function renderScatter() {
	                var _this2 = this;

	                var _props = this.props,
	                    series = _props.series,
	                    timeScale = _props.timeScale,
	                    yScale = _props.yScale;

	                var points = [];
	                var hoverOverlay = void 0;

	                // if selectionChange is enabled, pointerEvents should be enabled as well
	                var pointerEvents = this.props.onSelectionChange ? "auto" : "none";

	                this.props.columns.forEach(function(column) {
	                    var key = 1;
	                    var _iteratorNormalCompletion3 = true;
	                    var _didIteratorError3 = false;
	                    var _iteratorError3 = undefined;

	                    try {
	                        var _loop = function _loop() {
	                            var event = _step3.value;

	                            var t = new Date(
	                                event.begin().getTime() +
	                                    (event.end().getTime() - event.begin().getTime()) / 2
	                            );
	                            var value = event.get(column);
	                            var badPoint =
	                                _underscore2.default.isNull(value) ||
	                                _underscore2.default.isNaN(value);
	                            var style = _this2.style(column, event);

	                            if (!badPoint) {
	                                var x = timeScale(t);
	                                var y = yScale(value);

	                                var radius = _underscore2.default.isFunction(_this2.props.radius)
	                                    ? _this2.props.radius(event, column)
	                                    : +_this2.props.radius;

	                                var isHighlighted =
	                                    _this2.props.highlight &&
	                                    entry.Event.is(_this2.props.highlight.event, event) &&
	                                    column === _this2.props.highlight.column;

	                                // Hover info. Note that we just pass all of our props down
	                                // into the EventMarker here, but the interesting ones are:
	                                // * the info values themselves
	                                // * the infoStyle
	                                // * infoWidth and infoHeight
	                                if (isHighlighted && _this2.props.info) {
	                                    hoverOverlay = _react2.default.createElement(
	                                        _EventMarker2.default,
	                                        _extends({}, _this2.props, {
	                                            event: event,
	                                            column: column,
	                                            marker: "circle",
	                                            markerRadius: 0
	                                        })
	                                    );
	                                }

	                                points.push(
	                                    _react2.default.createElement("circle", {
	                                        key: column + "-" + key,
	                                        cx: x,
	                                        cy: y,
	                                        r: radius,
	                                        style: style,
	                                        pointerEvents: pointerEvents,
	                                        onMouseMove: _this2.handleHover,
	                                        onClick: function onClick(e) {
	                                            return _this2.handleClick(e, event, column);
	                                        }
	                                    })
	                                );

	                                key += 1;
	                            }
	                        };

	                        for (
	                            var _iterator3 = series.events()[Symbol.iterator](), _step3;
	                            !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);
	                            _iteratorNormalCompletion3 = true
	                        ) {
	                            _loop();
	                        }
	                    } catch (err) {
	                        _didIteratorError3 = true;
	                        _iteratorError3 = err;
	                    } finally {
	                        try {
	                            if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                                _iterator3.return();
	                            }
	                        } finally {
	                            if (_didIteratorError3) {
	                                throw _iteratorError3;
	                            }
	                        }
	                    }
	                });

	                return _react2.default.createElement("g", null, points, hoverOverlay);
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                var _this3 = this;

	                return _react2.default.createElement(
	                    "g",
	                    null,
	                    _react2.default.createElement("rect", {
	                        key: "scatter-hit-rect",
	                        ref: function ref(c) {
	                            _this3.eventrect = c;
	                        },
	                        style: { opacity: 0.0 },
	                        x: 0,
	                        y: 0,
	                        width: this.props.width,
	                        height: this.props.height,
	                        onMouseMove: this.handleHover,
	                        onMouseLeave: this.handleHoverLeave
	                    }),
	                    this.renderScatter()
	                );
	            }
	        }
	    ]);

	    return ScatterChart;
	})(_react2.default.Component);

	exports.default = ScatterChart;

	ScatterChart.propTypes = {
	    /**
	     * Show or hide this chart
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * What [Pond TimeSeries](https://esnet-pondjs.appspot.com/#/timeseries) data to visualize
	     */
	    series: _propTypes2.default.instanceOf(entry.TimeSeries).isRequired,

	    /**
	     * Which columns of the series to render
	     */
	    columns: _propTypes2.default.arrayOf(_propTypes2.default.string),

	    /**
	     * Reference to the axis which provides the vertical scale for drawing. e.g.
	     * specifying axis="trafficRate" would refer the y-scale to the YAxis of id="trafficRate".
	     */
	    axis: _propTypes2.default.string.isRequired, // eslint-disable-line

	    /**
	     * The radius of the points in the scatter chart.
	     *
	     * If this is a number it will be used as the radius for every point.
	     * If this is a function it will be called for each event.
	     *
	     * The function is called with the event and the column name and must return a number.
	     *
	     * For example this function will use the radius column of the event:
	     *
	     * ```
	     * const radius = (event, column) => {
	     *    return event.get("radius");
	     * }
	     * ```
	     */
	    radius: _propTypes2.default.oneOfType([
	        _propTypes2.default.number,
	        _propTypes2.default.func,
	        _propTypes2.default.instanceOf(styler_1.Styler)
	    ]),

	    /**
	     * The style of the scatter chart drawing (using SVG CSS properties).
	     * This is an object with a key for each column which is being plotted,
	     * per the `columns` prop. Each of those keys has an object as its
	     * value which has keys which are style properties for an SVG <Circle> and
	     * the value to use.
	     *
	     * For example:
	     * ```
	     * style = {
	     *     columnName: {
	     *         normal: {
	     *             fill: "steelblue",
	     *             opacity: 0.8,
	     *         },
	     *         highlighted: {
	     *             fill: "#a7c4dd",
	     *             opacity: 1.0,
	     *         },
	     *         selected: {
	     *             fill: "orange",
	     *             opacity: 1.0,
	     *         },
	     *         muted: {
	     *             fill: "grey",
	     *             opacity: 0.5
	     *         }
	     *     }
	     * }
	     * ```
	     *
	     * You can also supply a function, which will be called with an event
	     * and column. The function should return an object containing the
	     * 4 states (normal, highlighted, selected and muted) and the corresponding
	     * CSS properties.
	     */
	    style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),

	    /**
	     * The style of the info box and connecting lines. The style should
	     * be an object of the form { line, box }. Line and box are both objects
	     * containing the inline CSS for those elements of the info tracker.
	     */
	    infoStyle: _propTypes2.default.shape({
	        line: _propTypes2.default.object, // eslint-disable-line
	        box: _propTypes2.default.object // eslint-disable-line
	    }),

	    /**
	     * The width of the hover info box
	     */
	    infoWidth: _propTypes2.default.number, // eslint-disable-line

	    /**
	     * The height of the hover info box
	     */
	    infoHeight: _propTypes2.default.number, // eslint-disable-line

	    /**
	     * The values to show in the info box. This is an array of
	     * objects, with each object specifying the label and value
	     * to be shown in the info box.
	     */
	    info: _propTypes2.default.arrayOf(
	        _propTypes2.default.shape({
	            label: _propTypes2.default.string, // eslint-disable-line
	            value: _propTypes2.default.string // eslint-disable-line
	        })
	    ),

	    /**
	     * The selected dot, which will be rendered in the "selected" style.
	     * If a dot is selected, all other dots will be rendered in the "muted" style.
	     *
	     * See also `onSelectionChange`
	     */
	    selected: _propTypes2.default.arrayOf(
	        _propTypes2.default.shape({
	            event: _propTypes2.default.instanceOf(entry.Event),
	            column: _propTypes2.default.string
	        })
	    ),

	    /**
	     * A callback that will be called when the selection changes. It will be called
	     * with an object containing the event and column.
	     */
	    onSelectionChange: _propTypes2.default.func,

	    /**
	     * The highlighted dot, as an object containing the { event, column },
	     * which will be rendered in the "highlighted" style.
	     *
	     * See also the prop `onMouseNear`.
	     */
	    highlight: _propTypes2.default.shape({
	        event: _propTypes2.default.instanceOf(entry.Event),
	        column: _propTypes2.default.string
	    }),

	    /**
	     * Will be called with the nearest point to the cursor. The callback
	     * will contain the point, which is a map of { event, column }.
	     */
	    onMouseNear: _propTypes2.default.func,

	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func,

	    /**
	     * [Internal] The yScale supplied by the associated YAxis
	     */
	    yScale: _propTypes2.default.func,

	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number,

	    /**
	     * [Internal] The height supplied by the surrounding ChartContainer
	     */
	    height: _propTypes2.default.number
	};

	ScatterChart.defaultProps = {
	    visible: true,
	    columns: ["value"],
	    radius: 2.0,
	    infoStyle: {
	        stroke: "#999",
	        fill: "white",
	        opacity: 0.9,
	        pointerEvents: "none"
	    },
	    stemStyle: {
	        stroke: "#999",
	        cursor: "crosshair",
	        pointerEvents: "none"
	    },
	    markerStyle: {
	        fill: "#999"
	    },
	    infoWidth: 90,
	    infoHeight: 30
	};
	});

	unwrapExports(ScatterChart_1);

	var TimeRangeMarker_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = (function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) {
	        if (protoProps) defineProperties(Constructor.prototype, protoProps);
	        if (staticProps) defineProperties(Constructor, staticProps);
	        return Constructor;
	    };
	})();



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);



	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	        throw new TypeError("Cannot call a class as a function");
	    }
	}

	function _possibleConstructorReturn(self, call) {
	    if (!self) {
	        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	    }
	    return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}

	function _inherits(subClass, superClass) {
	    if (typeof superClass !== "function" && superClass !== null) {
	        throw new TypeError(
	            "Super expression must either be null or a function, not " + typeof superClass
	        );
	    }
	    subClass.prototype = Object.create(superClass && superClass.prototype, {
	        constructor: { value: subClass, enumerable: false, writable: true, configurable: true }
	    });
	    if (superClass)
	        Object.setPrototypeOf
	            ? Object.setPrototypeOf(subClass, superClass)
	            : (subClass.__proto__ = superClass);
	} /**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	/**
	 * Renders a band with extents defined by the supplied TimeRange. This
	 * is a super simple component right now which just renders a simple
	 * rectangle, in the style of the prop `style` across the timerange
	 * specified. However, this is useful for highlighting a timerange to
	 * correspond with another part of the your UI.
	 *
	 * See also the Brush component for a TimeRange marker that you can
	 * resize interactively.
	 */
	var TimeRangeMarker = (function(_React$Component) {
	    _inherits(TimeRangeMarker, _React$Component);

	    function TimeRangeMarker() {
	        _classCallCheck(this, TimeRangeMarker);

	        return _possibleConstructorReturn(
	            this,
	            (TimeRangeMarker.__proto__ || Object.getPrototypeOf(TimeRangeMarker)).apply(
	                this,
	                arguments
	            )
	        );
	    }

	    _createClass(TimeRangeMarker, [
	        {
	            key: "renderBand",
	            value: function renderBand() {
	                var timerange = this.props.timerange;
	                var timeScale = this.props.timeScale;

	                // Viewport bounds
	                var viewBeginTime = timeScale.invert(0);
	                var viewEndTime = timeScale.invert(this.props.width);
	                var viewport = new entry.TimeRange(viewBeginTime, viewEndTime);

	                var bandStyle = void 0;
	                if (this.props.style) {
	                    bandStyle = this.props.style;
	                } else {
	                    bandStyle = { fill: "steelblue" };
	                }

	                if (!viewport.disjoint(timerange)) {
	                    var range = timerange.intersection(viewport);
	                    var begin = range.begin();
	                    var end = range.end();
	                    var beginPos = timeScale(begin);
	                    var endPos = timeScale(end);
	                    var width = endPos - beginPos;
	                    if (width < 1) {
	                        width = 1;
	                    }
	                    return _react2.default.createElement("rect", {
	                        x: beginPos,
	                        y: 0,
	                        width: width,
	                        height: this.props.height,
	                        style: bandStyle
	                    });
	                }
	                return _react2.default.createElement("g", null);
	            }
	        },
	        {
	            key: "render",
	            value: function render() {
	                return _react2.default.createElement("g", null, this.renderBand());
	            }
	        }
	    ]);

	    return TimeRangeMarker;
	})(_react2.default.Component);

	exports.default = TimeRangeMarker;

	TimeRangeMarker.propTypes = {
	    /**
	     * Show or hide this marker
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * The timerange to mark. This is in the form of a
	     * [Pond TimeRange](https://esnet-pondjs.appspot.com/#/timerange)
	     */
	    timerange: _propTypes2.default.instanceOf(entry.TimeRange).isRequired,

	    /**
	     * The style of the rect that will be rendered as a SVG <Rect>. This
	     * object is the inline CSS for that rect.
	     */
	    style: _propTypes2.default.object, // eslint-disable-line

	    /**
	     * [Internal] The timeScale supplied by the surrounding ChartContainer
	     */
	    timeScale: _propTypes2.default.func.isRequired,

	    /**
	     * [Internal] The width supplied by the surrounding ChartContainer
	     */
	    width: _propTypes2.default.number.isRequired,

	    /**
	     * [Internal] The height supplied by the surrounding ChartContainer
	     */
	    height: _propTypes2.default.number.isRequired
	};

	TimeRangeMarker.defaultProps = {
	    visible: true,
	    spacing: 1,
	    offset: 0,
	    style: { fill: "rgba(70, 130, 180, 0.25);" }
	};
	});

	unwrapExports(TimeRangeMarker_1);

	var ValueAxis_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	/**
	 * Renders a 'axis' that display a label for a current tracker value:
	 * ```
	 *      ----+----------------+
	 *          |     56.2G      |
	 *          |      bps       |
	 *          |                |
	 *      ----+----------------+
	 * ```
	 * This would be used when you have many rows of data and the user is required
	 * to interact with the data to see actual values. You would use this at the
	 * end of the row and supply it with the current value. See the cycling example
	 * for how that would all work.
	 */
	/**
	 *  Copyright (c) 2015-present, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	var ValueAxis = function ValueAxis(_ref) {
	    var width = _ref.width,
	        height = _ref.height,
	        value = _ref.value,
	        detail = _ref.detail;

	    var labelStyle = {
	        fill: "#666",
	        fontSize: 20,
	        textAnchor: "middle"
	    };
	    var detailStyle = {
	        fontSize: 12,
	        textAnchor: "middle",
	        fill: "#9a9a9a"
	    };
	    return _react2.default.createElement(
	        "g",
	        null,
	        _react2.default.createElement("rect", {
	            key: "background",
	            x: "0",
	            y: "0",
	            width: width,
	            height: height,
	            style: { fill: "none", stroke: "none" }
	        }),
	        _react2.default.createElement(
	            "text",
	            { key: "value", x: parseInt(width / 2, 10), y: height / 2, style: labelStyle },
	            value
	        ),
	        _react2.default.createElement(
	            "text",
	            {
	                key: "detail",
	                x: parseInt(width / 2, 10),
	                y: height / 2,
	                dy: "1.2em",
	                style: detailStyle
	            },
	            detail
	        )
	    );
	};

	ValueAxis.propTypes = {
	    /**
	     * Show or hide this
	     */
	    visible: _propTypes2.default.bool,

	    /**
	     * If values are numbers, use this format string
	     */
	    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),

	    /**
	     * Use this to show what units are being used. It will appear below
	     * the value.
	     */
	    detail: _propTypes2.default.string,

	    /**
	     * The width of the axis
	     */
	    width: _propTypes2.default.number,

	    /**
	     * [Internal] The height of the axis
	     */
	    height: _propTypes2.default.number
	};

	ValueAxis.defaultProps = {
	    visible: true
	};

	exports.default = ValueAxis;
	});

	unwrapExports(ValueAxis_1);

	var entry$2 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.YAxis = exports.ValueList = exports.ValueAxis = exports.TimeRangeMarker = exports.TimeMarker = exports.TimeAxis = exports.styler = exports.ScatterChart = exports.Resizable = exports.LineChart = exports.Legend = exports.LabelAxis = exports.EventMarker = exports.EventChart = exports.Charts = exports.ChartRow = exports.ChartContainer = exports.MultiBrush = exports.Brush = exports.Baseline = exports.BoxChart = exports.BarChart = exports.AreaChart = undefined;



	var _AreaChart3 = _interopRequireDefault(AreaChart_1);



	var _BarChart3 = _interopRequireDefault(BarChart_1);



	var _BoxChart3 = _interopRequireDefault(BoxChart_1);



	var _Baseline3 = _interopRequireDefault(Baseline_1);



	var _Brush3 = _interopRequireDefault(Brush_1);



	var _MultiBrush3 = _interopRequireDefault(MultiBrush_1);



	var _ChartContainer3 = _interopRequireDefault(ChartContainer_1);



	var _ChartRow3 = _interopRequireDefault(ChartRow_1);



	var _Charts3 = _interopRequireDefault(Charts_1);



	var _EventChart3 = _interopRequireDefault(EventChart_1);



	var _EventMarker3 = _interopRequireDefault(EventMarker_1);



	var _LabelAxis3 = _interopRequireDefault(LabelAxis_1);



	var _Legend3 = _interopRequireDefault(Legend_1);



	var _LineChart3 = _interopRequireDefault(LineChart_1);



	var _Resizable3 = _interopRequireDefault(Resizable_1);



	var _ScatterChart3 = _interopRequireDefault(ScatterChart_1);



	var _styler3 = _interopRequireDefault(styler_1);



	var _TimeAxis3 = _interopRequireDefault(TimeAxis_1);



	var _TimeMarker3 = _interopRequireDefault(TimeMarker_1);



	var _TimeRangeMarker3 = _interopRequireDefault(TimeRangeMarker_1);



	var _ValueAxis3 = _interopRequireDefault(ValueAxis_1);



	var _ValueList3 = _interopRequireDefault(ValueList_1);



	var _YAxis3 = _interopRequireDefault(YAxis_1);

	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : { default: obj };
	}

	exports.AreaChart = _AreaChart3.default; /**
	 *  Copyright (c) 2016, The Regents of the University of California,
	 *  through Lawrence Berkeley National Laboratory (subject to receipt
	 *  of any required approvals from the U.S. Dept. of Energy).
	 *  All rights reserved.
	 *
	 *  This source code is licensed under the BSD-style license found in the
	 *  LICENSE file in the root directory of this source tree.
	 */

	exports.BarChart = _BarChart3.default;
	exports.BoxChart = _BoxChart3.default;
	exports.Baseline = _Baseline3.default;
	exports.Brush = _Brush3.default;
	exports.MultiBrush = _MultiBrush3.default;
	exports.ChartContainer = _ChartContainer3.default;
	exports.ChartRow = _ChartRow3.default;
	exports.Charts = _Charts3.default;
	exports.EventChart = _EventChart3.default;
	exports.EventMarker = _EventMarker3.default;
	exports.LabelAxis = _LabelAxis3.default;
	exports.Legend = _Legend3.default;
	exports.LineChart = _LineChart3.default;
	exports.Resizable = _Resizable3.default;
	exports.ScatterChart = _ScatterChart3.default;
	exports.styler = _styler3.default;
	exports.TimeAxis = _TimeAxis3.default;
	exports.TimeMarker = _TimeMarker3.default;
	exports.TimeRangeMarker = _TimeRangeMarker3.default;
	exports.ValueAxis = _ValueAxis3.default;
	exports.ValueList = _ValueList3.default;
	exports.YAxis = _YAxis3.default;
	});

	unwrapExports(entry$2);
	var entry_1$1 = entry$2.YAxis;
	var entry_2$1 = entry$2.ValueList;
	var entry_3$1 = entry$2.ValueAxis;
	var entry_4$1 = entry$2.TimeRangeMarker;
	var entry_5$1 = entry$2.TimeMarker;
	var entry_6$1 = entry$2.TimeAxis;
	var entry_7$1 = entry$2.styler;
	var entry_8$1 = entry$2.ScatterChart;
	var entry_9$1 = entry$2.Resizable;
	var entry_10$1 = entry$2.LineChart;
	var entry_11$1 = entry$2.Legend;
	var entry_12$1 = entry$2.LabelAxis;
	var entry_13$1 = entry$2.EventMarker;
	var entry_14$1 = entry$2.EventChart;
	var entry_15$1 = entry$2.Charts;
	var entry_16$1 = entry$2.ChartRow;
	var entry_17$1 = entry$2.ChartContainer;
	var entry_18$1 = entry$2.MultiBrush;
	var entry_19$1 = entry$2.Brush;
	var entry_20$1 = entry$2.Baseline;
	var entry_21$1 = entry$2.BoxChart;
	var entry_22$1 = entry$2.BarChart;
	var entry_23$1 = entry$2.AreaChart;

	const styles$3 = {
	  chart: {
	    height: 'calc(100% - 310px)'
	  }
	};

	class Metrics extends react_1 {
	  constructor(...args) {
	    var _temp;

	    return _temp = super(...args), this.state = {
	      height: document.body.clientHeight,
	      timeRange: new entry_22([Date.now() - 600000, Date.now()])
	    }, this.updateDimensions = () => {
	      this.setState({ height: document.body.clientHeight });
	    }, this.refreshMetrics = () => {
	      const { fetchMetrics: fetchMetrics$$1, minerIdentifier } = this.props;
	      const { timeRange } = this.state;
	      const from = timeRange.begin().getTime();
	      const to = timeRange.end().getTime();
	      fetchMetrics$$1(minerIdentifier, { from, to });
	    }, this.handleTimeRangeChanged = timeRange => {
	      this.setState({ timeRange }, this.refreshMetrics);
	    }, _temp;
	  }

	  componentWillMount() {
	    this.refreshMetrics();
	    this.updateDimensions();
	  }

	  componentDidMount() {
	    window.addEventListener('resize', this.updateDimensions);
	  }

	  componentWillUnmount() {
	    window.removeEventListener('resize', this.updateDimensions);
	  }

	  render() {
	    const { classes, metrics, isFetchingMetrics } = this.props;
	    const { height, timeRange } = this.state;

	    console.log(isFetchingMetrics, metrics);
	    const data = {
	      name: 'metrics',
	      columns: ['time', 'speed'],
	      points: metrics
	    };
	    const series = new entry_20(data);

	    return react.createElement(
	      'div',
	      { className: classes.chart },
	      react.createElement(
	        entry_9$1,
	        null,
	        react.createElement(
	          entry_17$1,
	          {
	            timeRange: timeRange,
	            enablePanZoom: true,
	            onTimeRangeChanged: this.handleTimeRangeChanged
	          },
	          react.createElement(
	            entry_16$1,
	            { height: height - 400 },
	            react.createElement(entry_1$1, {
	              id: 'speed',
	              label: 'Speed (Mh/s)',
	              min: 0,
	              max: (series.max('speed') || 0) + 1,
	              width: '60',
	              format: '.2f'
	            }),
	            react.createElement(
	              entry_15$1,
	              null,
	              react.createElement(entry_8$1, { axis: 'speed', series: series, columns: ['speed'] })
	            )
	          )
	        )
	      )
	    );
	  }
	}

	Metrics.propTypes = {
	  classes: propTypes.object.isRequired,
	  metrics: propTypes.array.isRequired,
	  minerIdentifier: propTypes.string.isRequired,
	  fetchMetrics: propTypes.func.isRequired,
	  isFetchingMetrics: propTypes.bool.isRequired
	};

	const mapStateToProps$1 = ({ mining: { selectedMinerIdentifier, miners } }) => {
	  return {
	    metrics: miners[selectedMinerIdentifier].metrics,
	    minerIdentifier: selectedMinerIdentifier,
	    isFetchingMetrics: miners[selectedMinerIdentifier].isFetchingMetrics
	  };
	};

	const mapDispatchToProps$1 = dispatch => {
	  return {
	    fetchMetrics: bindActionCreators(fetchMetrics, dispatch)
	  };
	};

	const enhance$1 = compose$1(styles_3(styles$3), connect(mapStateToProps$1, mapDispatchToProps$1))(Metrics);

	const styles$4 = {
	  imageButton: {
	    margin: '0 5'
	  },
	  image: {
	    height: 70
	  },
	  inactive: {
	    opacity: 0.25
	  }
	};

	class Miner extends react_1 {
	  constructor(...args) {
	    var _temp;

	    return _temp = super(...args), this.handleClick = event => {
	      const { selectMiner: selectMiner$$1 } = this.props;
	      const miningIdentifier = event.currentTarget.getAttribute('data-mining-identifier');
	      selectMiner$$1(miningIdentifier);
	    }, _temp;
	  }

	  render() {
	    const { classes, selectedMinerIdentifier } = this.props;

	    return react.createElement(
	      'div',
	      null,
	      [ethereum, monero].map(miner => react.createElement(ImageButton, {
	        key: miner.name,
	        src: miner.logo,
	        onClick: this.handleClick,
	        'data-mining-identifier': miner.identifier,
	        className: classnames(classes.imageButton, {
	          [classes.inactive]: selectedMinerIdentifier !== miner.identifier
	        }),
	        imgProps: {
	          className: classes.image
	        }
	      }))
	    );
	  }
	}

	Miner.propTypes = {
	  classes: propTypes.object.isRequired,
	  selectedMinerIdentifier: propTypes.string.isRequired,
	  selectMiner: propTypes.func.isRequired
	};

	const mapStateToProps$2 = ({ mining: { selectedMinerIdentifier } }) => {
	  return {
	    selectedMinerIdentifier
	  };
	};

	const mapDispatchToProps$2 = dispatch => {
	  return {
	    selectMiner: bindActionCreators(selectMiner, dispatch)
	  };
	};

	const enhance$2 = compose$1(styles_3(styles$4), connect(mapStateToProps$2, mapDispatchToProps$2))(Miner);

	class Mining extends react_1 {
	  constructor(...args) {
	    var _temp;

	    return _temp = super(...args), this.handleMiningClick = () => {
	      const { isMining, startMining: startMining$$1, stopMining: stopMining$$1, minerIdentifier } = this.props;
	      if (isMining) stopMining$$1(minerIdentifier);else startMining$$1(minerIdentifier);
	    }, _temp;
	  }

	  render() {
	    const { miner, isMining, currentSpeed } = this.props;

	    return react.createElement(
	      react_5,
	      null,
	      react.createElement(
	        Button$2,
	        { disabled: miner.disabled, onClick: this.handleMiningClick },
	        isMining ? 'Stop mining' : 'Start mining'
	      ),
	      react.createElement(
	        Typography$2,
	        null,
	        'Speed: ',
	        currentSpeed,
	        ' Mh/s'
	      ),
	      react.createElement(enhance$1, null)
	    );
	  }
	}

	Mining.propTypes = {
	  miner: propTypes.object.isRequired,
	  isMining: propTypes.bool.isRequired,
	  currentSpeed: propTypes.number.isRequired,
	  startMining: propTypes.func.isRequired,
	  stopMining: propTypes.func.isRequired,
	  selectMiner: propTypes.func.isRequired,
	  minerIdentifier: propTypes.string.isRequired
	};

	const mapStateToProps$3 = ({ mining: { selectedMinerIdentifier, miners } }) => {
	  return {
	    isMining: miners[selectedMinerIdentifier].isMining,
	    currentSpeed: miners[selectedMinerIdentifier].currentSpeed,
	    miner: getMiner(selectedMinerIdentifier),
	    minerIdentifier: selectedMinerIdentifier
	  };
	};

	const mapDispatchToProps$3 = dispatch => {
	  return {
	    startMining: bindActionCreators(startMining, dispatch),
	    stopMining: bindActionCreators(stopMining, dispatch),
	    selectMiner: bindActionCreators(selectMiner, dispatch)
	  };
	};

	const enhance$3 = connect(mapStateToProps$3, mapDispatchToProps$3)(Mining);

	const Status = ({ name, isMining, currentSpeed }) => {
	  return react.createElement(
	    Typography$2,
	    null,
	    name,
	    ': ',
	    currentSpeed,
	    ' Mh/s ',
	    isMining ? 'running' : 'stopped'
	  );
	};

	Status.propTypes = {
	  minerIdentifier: propTypes.string.isRequired,
	  name: propTypes.string.isRequired,
	  isMining: propTypes.bool.isRequired,
	  currentSpeed: propTypes.number.isRequired
	};

	const mapStateToProps$4 = ({ mining: { miners } }, { minerIdentifier }) => {
	  return {
	    isMining: miners[minerIdentifier].isMining,
	    currentSpeed: miners[minerIdentifier].currentSpeed,
	    name: getMiner(minerIdentifier).name
	  };
	};

	const enhance$4 = connect(mapStateToProps$4)(Status);

	const styles$5 = {
	  children: {
	    overflow: 'auto',
	    height: 'calc(100% - 64px)'
	  },
	  flex: {
	    flex: 1
	  }
	};

	const AppLayout = ({ classes, children, links, title }) => react.createElement(
	  react_5,
	  null,
	  react.createElement(
	    AppBar$2,
	    { position: 'sticky', color: 'inherit' },
	    react.createElement(
	      Toolbar$2,
	      null,
	      react.createElement(
	        Typography$2,
	        { variant: 'title', color: 'inherit' },
	        title
	      ),
	      react.createElement(
	        'div',
	        { className: classes.flex },
	        links.map(link => react.createElement(
	          enhanced,
	          { key: link.title, to: link.to },
	          react.createElement(
	            Button$2,
	            null,
	            link.title
	          )
	        ))
	      ),
	      react.createElement(
	        'div',
	        null,
	        react.createElement(enhance$4, { minerIdentifier: ETHEREUM_MINER }),
	        react.createElement('br', null),
	        react.createElement(enhance$4, { minerIdentifier: MONERO_MINER })
	      )
	    )
	  ),
	  react.createElement(
	    'div',
	    { className: classes.children },
	    children
	  )
	);

	AppLayout.propTypes = {
	  classes: propTypes.object.isRequired,
	  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]).isRequired,
	  links: propTypes.array.isRequired,
	  title: propTypes.string.isRequired
	};

	const enhance$5 = styles_3(styles$5)(AppLayout);

	const styles$6 = {
	  card: {
	    minWidth: 275,
	    margin: '20 0'
	  }
	};

	const CardLayout = ({ classes, children, title }) => react.createElement(
	  Card$2,
	  { className: classes.card },
	  react.createElement(
	    Card_2,
	    null,
	    react.createElement(
	      Typography$2,
	      { variant: 'subheading' },
	      title
	    ),
	    children
	  )
	);

	CardLayout.propTypes = {
	  classes: propTypes.object.isRequired,
	  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]).isRequired,
	  title: propTypes.string.isRequired
	};

	const enhance$6 = styles_3(styles$6)(CardLayout);

	const styles$7 = {
	  wrapper: {
	    margin: 20
	  },
	  children: {
	    marginTop: 10,
	    textAlign: 'center'
	  }
	};

	const PageLayout = ({ classes, children, title }) => react.createElement(
	  'div',
	  { className: classes.wrapper },
	  react.createElement(
	    Typography$2,
	    { variant: 'headline' },
	    title
	  ),
	  react.createElement(
	    'div',
	    { className: classes.children },
	    children
	  )
	);

	PageLayout.propTypes = {
	  classes: propTypes.object.isRequired,
	  children: propTypes.oneOfType([propTypes.arrayOf(propTypes.node), propTypes.node]).isRequired,
	  title: propTypes.string.isRequired
	};

	const enhance$7 = styles_3(styles$7)(PageLayout);

	var CssBaseline_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	var _getPrototypeOf2 = _interopRequireDefault(getPrototypeOf$1);



	var _classCallCheck3 = _interopRequireDefault(classCallCheck$1);



	var _createClass3 = _interopRequireDefault(createClass$1);



	var _possibleConstructorReturn3 = _interopRequireDefault(possibleConstructorReturn$1);



	var _inherits3 = _interopRequireDefault(inherits$1);



	var _react2 = _interopRequireDefault(react);



	var _propTypes2 = _interopRequireDefault(propTypes);





	var _exactProp2 = _interopRequireDefault(exactProp_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var styles$$1 = function styles$$1(theme) {
	  return {
	    '@global': {
	      html: {
	        WebkitFontSmoothing: 'antialiased', // Antialiasing.
	        MozOsxFontSmoothing: 'grayscale', // Antialiasing.
	        // Change from `box-sizing: content-box` so that `width`
	        // is not affected by `padding` or `border`.
	        boxSizing: 'border-box'
	      },
	      '*, *::before, *::after': {
	        boxSizing: 'inherit'
	      },
	      body: {
	        margin: 0, // Remove the margin in all browsers.
	        backgroundColor: theme.palette.background.default,
	        '@media print': {
	          // Save printer ink.
	          backgroundColor: theme.palette.common.white
	        }
	      }
	    }
	  };
	};

	/**
	 * Kickstart an elegant, consistent, and simple baseline to build upon.
	 */

	var CssBaseline = function (_React$Component) {
	  (0, _inherits3.default)(CssBaseline, _React$Component);

	  function CssBaseline() {
	    (0, _classCallCheck3.default)(this, CssBaseline);
	    return (0, _possibleConstructorReturn3.default)(this, (CssBaseline.__proto__ || (0, _getPrototypeOf2.default)(CssBaseline)).apply(this, arguments));
	  }

	  (0, _createClass3.default)(CssBaseline, [{
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);
	  return CssBaseline;
	}(_react2.default.Component);

	CssBaseline.propTypes = {
	  /**
	   * You can only provide a single element with react@15, a node with react@16.
	   */
	  children: _propTypes2.default.node,
	  /**
	   * @ignore
	   */
	  classes: _propTypes2.default.object.isRequired
	};

	CssBaseline.propTypes = (0, _exactProp2.default)(CssBaseline.propTypes, 'CssBaseline');

	CssBaseline.defaultProps = {
	  children: null
	};

	exports.default = (0, styles.withStyles)(styles$$1, { name: 'MuiCssBaseline' })(CssBaseline);
	});

	unwrapExports(CssBaseline_1);

	var CssBaseline$1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});



	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(CssBaseline_1).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	});

	var CssBaseline$2 = unwrapExports(CssBaseline$1);

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck$13(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn$12(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits$12(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	// eslint-disable-line import/no-unresolved


	var PersistGate = function (_PureComponent) {
	  _inherits$12(PersistGate, _PureComponent);

	  function PersistGate() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck$13(this, PersistGate);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$12(this, (_ref = PersistGate.__proto__ || Object.getPrototypeOf(PersistGate)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      bootstrapped: false
	    }, _this.handlePersistorState = function () {
	      var persistor = _this.props.persistor;

	      var _persistor$getState = persistor.getState(),
	          bootstrapped = _persistor$getState.bootstrapped;

	      if (bootstrapped) {
	        if (_this.props.onBeforeLift) {
	          Promise.resolve(_this.props.onBeforeLift()).then(function () {
	            return _this.setState({ bootstrapped: true });
	          }).catch(function () {
	            return _this.setState({ bootstrapped: true });
	          });
	        } else {
	          _this.setState({ bootstrapped: true });
	        }
	        _this._unsubscribe && _this._unsubscribe();
	      }
	    }, _temp), _possibleConstructorReturn$12(_this, _ret);
	  }

	  _createClass(PersistGate, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._unsubscribe = this.props.persistor.subscribe(this.handlePersistorState);
	      this.handlePersistorState();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this._unsubscribe && this._unsubscribe();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      {
	        if (typeof this.props.children === 'function' && this.props.loading) console.error('redux-persist: PersistGate expects either a function child or loading prop, but not both. The loading prop will be ignored.');
	      }
	      if (typeof this.props.children === 'function') {
	        return this.props.children(this.state.bootstrapped);
	      }

	      return this.state.bootstrapped ? this.props.children : this.props.loading;
	    }
	  }]);

	  return PersistGate;
	}(react_2);
	PersistGate.defaultProps = {
	  loading: null
	};

	var reactGa = createCommonjsModule(function (module, exports) {
	(function webpackUniversalModuleDefinition(root, factory) {
		module.exports = factory(react, propTypes);
	})(typeof self !== 'undefined' ? self : commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_12__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 2);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = warn;
	function warn(s) {
	  console.warn('[react-ga]', s);
	}

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = trim;
	// GA strings need to have leading/trailing whitespace trimmed, and not all
	// browsers have String.prototoype.trim().

	function trim(s) {
	  return s.replace(/^\s+|\s+$/g, '');
	}

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.testModeAPI = exports.OutboundLink = exports.plugin = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	exports.initialize = initialize;
	exports.ga = ga;
	exports.set = set;
	exports.send = send;
	exports.pageview = pageview;
	exports.modalview = modalview;
	exports.timing = timing;
	exports.event = event;
	exports.exception = exception;
	exports.outboundLink = outboundLink;

	var _format2 = __webpack_require__(3);

	var _format3 = _interopRequireDefault(_format2);

	var _removeLeadingSlash = __webpack_require__(6);

	var _removeLeadingSlash2 = _interopRequireDefault(_removeLeadingSlash);

	var _trim = __webpack_require__(1);

	var _trim2 = _interopRequireDefault(_trim);

	var _loadGA = __webpack_require__(7);

	var _loadGA2 = _interopRequireDefault(_loadGA);

	var _warn = __webpack_require__(0);

	var _warn2 = _interopRequireDefault(_warn);

	var _log = __webpack_require__(8);

	var _log2 = _interopRequireDefault(_log);

	var _testModeAPI = __webpack_require__(9);

	var _testModeAPI2 = _interopRequireDefault(_testModeAPI);

	var _OutboundLink = __webpack_require__(10);

	var _OutboundLink2 = _interopRequireDefault(_OutboundLink);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
	                                                                                                                                                                                                     * React Google Analytics Module
	                                                                                                                                                                                                     *
	                                                                                                                                                                                                     * @package react-ga
	                                                                                                                                                                                                     * @author  Adam Lofting <adam@mozillafoundation.org>
	                                                                                                                                                                                                     *          Atul Varma <atul@mozillafoundation.org>
	                                                                                                                                                                                                     */

	/**
	 * Utilities
	 */


	var _debug = false;
	var _titleCase = true;
	var _testMode = false;

	var internalGa = function internalGa() {
	  var _window;

	  if (_testMode) return _testModeAPI2.default.ga.apply(_testModeAPI2.default, arguments);
	  if (!window.ga) return (0, _warn2.default)('ReactGA.initialize must be called first or GoogleAnalytics should be loaded manually');
	  return (_window = window).ga.apply(_window, arguments);
	};

	function _format(s) {
	  return (0, _format3.default)(s, _titleCase);
	}

	function _gaCommand(trackerNames) {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  var command = args[0];
	  if (typeof internalGa === 'function') {
	    if (typeof command !== 'string') {
	      (0, _warn2.default)('ga command must be a string');
	      return;
	    }

	    internalGa.apply(undefined, args);
	    if (Array.isArray(trackerNames)) {
	      trackerNames.forEach(function (name) {
	        internalGa.apply(undefined, _toConsumableArray([name + '.' + command].concat(args.slice(1))));
	      });
	    }
	  }
	}

	function _initialize(gaTrackingID, options) {
	  if (!gaTrackingID) {
	    (0, _warn2.default)('gaTrackingID is required in initialize()');
	    return;
	  }

	  if (options) {
	    if (options.debug && options.debug === true) {
	      _debug = true;
	    }

	    if (options.titleCase === false) {
	      _titleCase = false;
	    }
	  }

	  if (options && options.gaOptions) {
	    internalGa('create', gaTrackingID, options.gaOptions);
	  } else {
	    internalGa('create', gaTrackingID, 'auto');
	  }
	}

	function initialize(configsOrTrackingId, options) {
	  if (options && options.testMode === true) {
	    _testMode = true;
	  } else {
	    if (typeof window === 'undefined') {
	      return false;
	    }

	    (0, _loadGA2.default)(options);
	  }

	  if (Array.isArray(configsOrTrackingId)) {
	    configsOrTrackingId.forEach(function (config) {
	      if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) !== 'object') {
	        (0, _warn2.default)('All configs must be an object');
	        return;
	      }
	      _initialize(config.trackingId, config);
	    });
	  } else {
	    _initialize(configsOrTrackingId, options);
	  }
	  return true;
	}

	/**
	 * ga:
	 * Returns the original GA object.
	 */
	function ga() {
	  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }

	  if (args.length > 0) {
	    internalGa.apply(undefined, args);
	    if (_debug) {
	      (0, _log2.default)('called ga(\'arguments\');');
	      (0, _log2.default)('with arguments: ' + JSON.stringify(args));
	    }
	  }

	  return window.ga;
	}

	/**
	 * set:
	 * GA tracker set method
	 * @param {Object} fieldsObject - a field/value pair or a group of field/value pairs on the tracker
	 * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
	 */
	function set(fieldsObject, trackerNames) {
	  if (!fieldsObject) {
	    (0, _warn2.default)('`fieldsObject` is required in .set()');
	    return;
	  }

	  if ((typeof fieldsObject === 'undefined' ? 'undefined' : _typeof(fieldsObject)) !== 'object') {
	    (0, _warn2.default)('Expected `fieldsObject` arg to be an Object');
	    return;
	  }

	  if (Object.keys(fieldsObject).length === 0) {
	    (0, _warn2.default)('empty `fieldsObject` given to .set()');
	  }

	  _gaCommand(trackerNames, 'set', fieldsObject);

	  if (_debug) {
	    (0, _log2.default)('called ga(\'set\', fieldsObject);');
	    (0, _log2.default)('with fieldsObject: ' + JSON.stringify(fieldsObject));
	  }
	}

	/**
	 * send:
	 * Clone of the low level `ga.send` method
	 * WARNING: No validations will be applied to this
	 * @param  {Object} fieldObject - field object for tracking different analytics
	 * @param  {Array} trackerNames - trackers to send the command to
	 * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
	 */
	function send(fieldObject, trackerNames) {
	  _gaCommand(trackerNames, 'send', fieldObject);
	  if (_debug) {
	    (0, _log2.default)('called ga(\'send\', fieldObject);');
	    (0, _log2.default)('with fieldObject: ' + JSON.stringify(fieldObject));
	    (0, _log2.default)('with trackers: ' + JSON.stringify(trackerNames));
	  }
	}

	/**
	 * pageview:
	 * Basic GA pageview tracking
	 * @param  {String} path - the current page page e.g. '/about'
	 * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
	 * @param {String} title - (optional) the page title e. g. 'My Website'
	 */
	function pageview(rawPath, trackerNames, title) {
	  if (!rawPath) {
	    (0, _warn2.default)('path is required in .pageview()');
	    return;
	  }

	  var path = (0, _trim2.default)(rawPath);
	  if (path === '') {
	    (0, _warn2.default)('path cannot be an empty string in .pageview()');
	    return;
	  }

	  var extraFields = {};
	  if (title) {
	    extraFields.title = title;
	  }

	  if (typeof ga === 'function') {
	    _gaCommand(trackerNames, 'send', _extends({
	      hitType: 'pageview',
	      page: path
	    }, extraFields));

	    if (_debug) {
	      (0, _log2.default)('called ga(\'send\', \'pageview\', path);');
	      var extraLog = '';
	      if (title) {
	        extraLog = ' and title: ' + title;
	      }
	      (0, _log2.default)('with path: ' + path + extraLog);
	    }
	  }
	}

	/**
	 * modalview:
	 * a proxy to basic GA pageview tracking to consistently track
	 * modal views that are an equivalent UX to a traditional pageview
	 * @param  {String} modalName e.g. 'add-or-edit-club'
	 * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
	 */
	function modalview(rawModalName, trackerNames) {
	  if (!rawModalName) {
	    (0, _warn2.default)('modalName is required in .modalview(modalName)');
	    return;
	  }

	  var modalName = (0, _removeLeadingSlash2.default)((0, _trim2.default)(rawModalName));

	  if (modalName === '') {
	    (0, _warn2.default)('modalName cannot be an empty string or a single / in .modalview()');
	    return;
	  }

	  if (typeof ga === 'function') {
	    var path = '/modal/' + modalName;
	    _gaCommand(trackerNames, 'send', 'pageview', path);

	    if (_debug) {
	      (0, _log2.default)('called ga(\'send\', \'pageview\', path);');
	      (0, _log2.default)('with path: ' + path);
	    }
	  }
	}

	/**
	 * timing:
	 * GA timing
	 * @param args.category {String} required
	 * @param args.variable {String} required
	 * @param args.value  {Int}  required
	 * @param args.label  {String} required
	 * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
	 */
	function timing() {
	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      category = _ref.category,
	      variable = _ref.variable,
	      value = _ref.value,
	      label = _ref.label;

	  var trackerNames = arguments[1];

	  if (typeof ga === 'function') {
	    if (!category || !variable || !value || typeof value !== 'number') {
	      (0, _warn2.default)('args.category, args.variable ' + 'AND args.value are required in timing() ' + 'AND args.value has to be a number');
	      return;
	    }

	    // Required Fields
	    var fieldObject = {
	      hitType: 'timing',
	      timingCategory: _format(category),
	      timingVar: _format(variable),
	      timingValue: value
	    };

	    if (label) {
	      fieldObject.timingLabel = _format(label);
	    }

	    send(fieldObject, trackerNames);
	  }
	}

	/**
	 * event:
	 * GA event tracking
	 * @param args.category {String} required
	 * @param args.action {String} required
	 * @param args.label {String} optional
	 * @param args.value {Int} optional
	 * @param args.nonInteraction {boolean} optional
	 * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
	 */
	function event() {
	  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  var trackerNames = arguments[1];

	  var category = _ref2.category,
	      action = _ref2.action,
	      label = _ref2.label,
	      value = _ref2.value,
	      nonInteraction = _ref2.nonInteraction,
	      transport = _ref2.transport,
	      args = _objectWithoutProperties(_ref2, ['category', 'action', 'label', 'value', 'nonInteraction', 'transport']);

	  if (typeof ga === 'function') {
	    // Simple Validation
	    if (!category || !action) {
	      (0, _warn2.default)('args.category AND args.action are required in event()');
	      return;
	    }

	    // Required Fields
	    var fieldObject = {
	      hitType: 'event',
	      eventCategory: _format(category),
	      eventAction: _format(action)
	    };

	    // Optional Fields
	    if (label) {
	      fieldObject.eventLabel = _format(label);
	    }

	    if (typeof value !== 'undefined') {
	      if (typeof value !== 'number') {
	        (0, _warn2.default)('Expected `args.value` arg to be a Number.');
	      } else {
	        fieldObject.eventValue = value;
	      }
	    }

	    if (typeof nonInteraction !== 'undefined') {
	      if (typeof nonInteraction !== 'boolean') {
	        (0, _warn2.default)('`args.nonInteraction` must be a boolean.');
	      } else {
	        fieldObject.nonInteraction = nonInteraction;
	      }
	    }

	    if (typeof transport !== 'undefined') {
	      if (typeof transport !== 'string') {
	        (0, _warn2.default)('`args.transport` must be a string.');
	      } else {
	        if (['beacon', 'xhr', 'image'].indexOf(transport) === -1) {
	          (0, _warn2.default)('`args.transport` must be either one of these values: `beacon`, `xhr` or `image`');
	        }

	        fieldObject.transport = transport;
	      }
	    }

	    Object.keys(args).filter(function (key) {
	      return key.substr(0, 'dimension'.length) === 'dimension';
	    }).forEach(function (key) {
	      fieldObject[key] = args[key];
	    });

	    Object.keys(args).filter(function (key) {
	      return key.substr(0, 'metric'.length) === 'metric';
	    }).forEach(function (key) {
	      fieldObject[key] = args[key];
	    });

	    // Send to GA
	    send(fieldObject, trackerNames);
	  }
	}

	/**
	 * exception:
	 * GA exception tracking
	 * @param args.description {String} optional
	 * @param args.fatal {boolean} optional
	 * @param {Array} trackerNames - (optional) a list of extra trackers to run the command on
	 */
	function exception(_ref3, trackerNames) {
	  var description = _ref3.description,
	      fatal = _ref3.fatal;

	  if (typeof ga === 'function') {
	    // Required Fields
	    var fieldObject = {
	      hitType: 'exception'
	    };

	    // Optional Fields
	    if (description) {
	      fieldObject.exDescription = _format(description);
	    }

	    if (typeof fatal !== 'undefined') {
	      if (typeof fatal !== 'boolean') {
	        (0, _warn2.default)('`args.fatal` must be a boolean.');
	      } else {
	        fieldObject.exFatal = fatal;
	      }
	    }

	    // Send to GA
	    send(fieldObject, trackerNames);
	  }
	}

	var plugin = exports.plugin = {
	  /**
	   * require:
	   * GA requires a plugin
	   * @param name {String} e.g. 'ecommerce' or 'myplugin'
	   * @param options {Object} optional e.g {path: '/log', debug: true}
	   */
	  require: function require(rawName, options) {
	    if (typeof ga === 'function') {
	      // Required Fields
	      if (!rawName) {
	        (0, _warn2.default)('`name` is required in .require()');
	        return;
	      }

	      var name = (0, _trim2.default)(rawName);
	      if (name === '') {
	        (0, _warn2.default)('`name` cannot be an empty string in .require()');
	        return;
	      }

	      // Optional Fields
	      if (options) {
	        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {
	          (0, _warn2.default)('Expected `options` arg to be an Object');
	          return;
	        }

	        if (Object.keys(options).length === 0) {
	          (0, _warn2.default)('Empty `options` given to .require()');
	        }

	        ga('require', name, options);

	        if (_debug) {
	          (0, _log2.default)('called ga(\'require\', \'' + name + '\', ' + JSON.stringify(options));
	        }
	      } else {
	        ga('require', name);

	        if (_debug) {
	          (0, _log2.default)('called ga(\'require\', \'' + name + '\');');
	        }
	      }
	    }
	  },

	  /**
	   * execute:
	   * GA execute action for plugin
	   * Takes variable number of arguments
	   * @param pluginName {String} e.g. 'ecommerce' or 'myplugin'
	   * @param action {String} e.g. 'addItem' or 'myCustomAction'
	   * @param actionType {String} optional e.g. 'detail'
	   * @param payload {Object} optional e.g { id: '1x5e', name : 'My product to track' }
	   */
	  execute: function execute(pluginName, action) {
	    var payload = void 0;
	    var actionType = void 0;

	    if ((arguments.length <= 2 ? 0 : arguments.length - 2) === 1) {
	      payload = arguments.length <= 2 ? undefined : arguments[2];
	    } else {
	      actionType = arguments.length <= 2 ? undefined : arguments[2];
	      payload = arguments.length <= 3 ? undefined : arguments[3];
	    }

	    if (typeof ga === 'function') {
	      if (typeof pluginName !== 'string') {
	        (0, _warn2.default)('Expected `pluginName` arg to be a String.');
	      } else if (typeof action !== 'string') {
	        (0, _warn2.default)('Expected `action` arg to be a String.');
	      } else {
	        var command = pluginName + ':' + action;
	        payload = payload || null;
	        if (actionType && payload) {
	          ga(command, actionType, payload);
	          if (_debug) {
	            (0, _log2.default)('called ga(\'' + command + '\');');
	            (0, _log2.default)('actionType: "' + actionType + '" with payload: ' + JSON.stringify(payload));
	          }
	        } else if (payload) {
	          ga(command, payload);
	          if (_debug) {
	            (0, _log2.default)('called ga(\'' + command + '\');');
	            (0, _log2.default)('with payload: ' + JSON.stringify(payload));
	          }
	        } else {
	          ga(command);
	          if (_debug) {
	            (0, _log2.default)('called ga(\'' + command + '\');');
	          }
	        }
	      }
	    }
	  }
	};

	/**
	 * outboundLink:
	 * GA outboundLink tracking
	 * @param args.label {String} e.g. url, or 'Create an Account'
	 * @param {function} hitCallback - Called after processing a hit.
	 */
	function outboundLink(args, hitCallback, trackerNames) {
	  if (typeof hitCallback !== 'function') {
	    (0, _warn2.default)('hitCallback function is required');
	    return;
	  }

	  if (typeof ga === 'function') {
	    // Simple Validation
	    if (!args || !args.label) {
	      (0, _warn2.default)('args.label is required in outboundLink()');
	      return;
	    }

	    // Required Fields
	    var fieldObject = {
	      hitType: 'event',
	      eventCategory: 'Outbound',
	      eventAction: 'Click',
	      eventLabel: _format(args.label)
	    };

	    var safetyCallbackCalled = false;
	    var safetyCallback = function safetyCallback() {
	      // This prevents a delayed response from GA
	      // causing hitCallback from being fired twice
	      safetyCallbackCalled = true;

	      hitCallback();
	    };

	    // Using a timeout to ensure the execution of critical application code
	    // in the case when the GA server might be down
	    // or an ad blocker prevents sending the data

	    // register safety net timeout:
	    var t = setTimeout(safetyCallback, 250);

	    var clearableCallbackForGA = function clearableCallbackForGA() {
	      clearTimeout(t);
	      if (!safetyCallbackCalled) {
	        hitCallback();
	      }
	    };

	    fieldObject.hitCallback = clearableCallbackForGA;

	    // Send to GA
	    send(fieldObject, trackerNames);
	  } else {
	    // if ga is not defined, return the callback so the application
	    // continues to work as expected
	    setTimeout(hitCallback, 0);
	  }
	}

	_OutboundLink2.default.origTrackLink = _OutboundLink2.default.trackLink;
	_OutboundLink2.default.trackLink = outboundLink;
	var OutboundLink = exports.OutboundLink = _OutboundLink2.default;
	var testModeAPI = exports.testModeAPI = _testModeAPI2.default;

	exports.default = {
	  initialize: initialize,
	  ga: ga,
	  set: set,
	  send: send,
	  pageview: pageview,
	  modalview: modalview,
	  timing: timing,
	  event: event,
	  exception: exception,
	  plugin: plugin,
	  outboundLink: outboundLink,
	  OutboundLink: OutboundLink,
	  testModeAPI: _testModeAPI2.default
	};

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = format;

	var _mightBeEmail = __webpack_require__(4);

	var _mightBeEmail2 = _interopRequireDefault(_mightBeEmail);

	var _toTitleCase = __webpack_require__(5);

	var _toTitleCase2 = _interopRequireDefault(_toTitleCase);

	var _warn = __webpack_require__(0);

	var _warn2 = _interopRequireDefault(_warn);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var redacted = 'REDACTED (Potential Email Address)';

	function format(s, titleCase) {
	  if ((0, _mightBeEmail2.default)(s)) {
	    (0, _warn2.default)('This arg looks like an email address, redacting.');
	    return redacted;
	  }

	  if (titleCase) {
	    return (0, _toTitleCase2.default)(s);
	  }

	  return s;
	}

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = mightBeEmail;
	// See if s could be an email address. We don't want to send personal data like email.
	// https://support.google.com/analytics/answer/2795983?hl=en
	function mightBeEmail(s) {
	  // There's no point trying to validate rfc822 fully, just look for ...@...
	  return (/[^@]+@[^@]+/.test(s)
	  );
	}

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = toTitleCase;

	var _trim = __webpack_require__(1);

	var _trim2 = _interopRequireDefault(_trim);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var smallWords = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i; /**
	                                                                                                * To Title Case 2.1 - http://individed.com/code/to-title-case/
	                                                                                                * Copyright 2008-2013 David Gouch. Licensed under the MIT License.
	                                                                                                * https://github.com/gouch/to-title-case
	                                                                                                */

	function toTitleCase(string) {
	  return (0, _trim2.default)(string).replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g, function (match, index, title) {
	    if (index > 0 && index + match.length !== title.length && match.search(smallWords) > -1 && title.charAt(index - 2) !== ':' && (title.charAt(index + match.length) !== '-' || title.charAt(index - 1) === '-') && title.charAt(index - 1).search(/[^\s-]/) < 0) {
	      return match.toLowerCase();
	    }

	    if (match.substr(1).search(/[A-Z]|\../) > -1) {
	      return match;
	    }

	    return match.charAt(0).toUpperCase() + match.substr(1);
	  });
	}

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = removeLeadingSlash;
	function removeLeadingSlash(string) {
	  if (string.substring(0, 1) === '/') {
	    return string.substring(1);
	  }

	  return string;
	}

	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (options) {
	  // https://developers.google.com/analytics/devguides/collection/analyticsjs/
	  /* eslint-disable */
	  (function (i, s, o, g, r, a, m) {
	    i['GoogleAnalyticsObject'] = r;
	    i[r] = i[r] || function () {
	      (i[r].q = i[r].q || []).push(arguments);
	    }, i[r].l = 1 * new Date();
	    a = s.createElement(o), m = s.getElementsByTagName(o)[0];
	    a.async = 1;
	    a.src = g;
	    m.parentNode.insertBefore(a, m);
	  })(window, document, 'script', options && options.gaAddress ? options.gaAddress : 'https://www.google-analytics.com/analytics.js', 'ga');
	  /* eslint-enable */
	};

	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = log;
	function log(s) {
	  console.info('[react-ga]', s);
	}

	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var gaCalls = exports.gaCalls = [];

	exports.default = {
	  calls: gaCalls,
	  ga: function ga() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    gaCalls.push([].concat(args));
	  }
	};

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {


	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(11);

	var _react2 = _interopRequireDefault(_react);

	var _propTypes = __webpack_require__(12);

	var _propTypes2 = _interopRequireDefault(_propTypes);

	var _warn = __webpack_require__(0);

	var _warn2 = _interopRequireDefault(_warn);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var NEWTAB = '_blank';
	var MIDDLECLICK = 1;

	var OutboundLink = function (_Component) {
	  _inherits(OutboundLink, _Component);

	  function OutboundLink() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck(this, OutboundLink);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OutboundLink.__proto__ || Object.getPrototypeOf(OutboundLink)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function (event) {
	      var _this$props = _this.props,
	          target = _this$props.target,
	          eventLabel = _this$props.eventLabel,
	          to = _this$props.to,
	          onClick = _this$props.onClick;

	      var eventMeta = { label: eventLabel };
	      var sameTarget = target !== NEWTAB;
	      var normalClick = !(event.ctrlKey || event.shiftKey || event.metaKey || event.button === MIDDLECLICK);

	      if (sameTarget && normalClick) {
	        event.preventDefault();
	        OutboundLink.trackLink(eventMeta, function () {
	          window.location.href = to;
	        });
	      } else {
	        OutboundLink.trackLink(eventMeta, function () {});
	      }

	      if (onClick) {
	        onClick(event);
	      }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }

	  _createClass(OutboundLink, [{
	    key: 'render',
	    value: function render() {
	      var props = _extends({}, this.props, {
	        href: this.props.to,
	        onClick: this.handleClick
	      });
	      delete props.eventLabel;
	      return _react2.default.createElement('a', props);
	    }
	  }]);

	  return OutboundLink;
	}(_react.Component);

	OutboundLink.propTypes = {
	  eventLabel: _propTypes2.default.string.isRequired,
	  target: _propTypes2.default.string,
	  to: _propTypes2.default.string,
	  onClick: _propTypes2.default.func
	};
	OutboundLink.defaultProps = {
	  target: null,
	  to: null,
	  onClick: null
	};

	OutboundLink.trackLink = function () {
	  (0, _warn2.default)('ga tracking not enabled');
	};

	exports.default = OutboundLink;

	/***/ }),
	/* 11 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_11__;

	/***/ }),
	/* 12 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_12__;

	/***/ })
	/******/ ]);
	});
	});

	var ReactGA = unwrapExports(reactGa);

	// These envs will be replaced by rollup
	const APP_PATH = "C:/RaccoonMiner/raccoon-miner/dist";
	const LISTEN_TO_FILES = ["main.js"];
	const TRACKING_ID = "UA-115959266-2";

	const initialize = history => {
	  ReactGA.initialize(TRACKING_ID, {
	    debug: true
	  });

	  // Remove failing protocol check. @see: http://stackoverflow.com/a/22152353/1958200
	  ReactGA.ga('set', 'checkProtocolTask', () => {});

	  history.listen(location => {
	    ReactGA.pageview(location.pathname + location.search);
	  });
	  console.info('%cAnalytics is active', 'color: blue');
	};

	const dark = styles_2({
	  palette: {
	    type: 'dark'
	  }
	});

	const light = styles_2({
	  palette: {
	    type: 'light'
	  }
	});

	const links = [{
	  to: '/mining',
	  title: 'Mining'
	}, {
	  to: '/settings',
	  title: 'Settings'
	}, {
	  to: '/support',
	  title: 'Support'
	}];

	const MiningPage = () => react.createElement(
	  enhance$7,
	  { title: 'Mining' },
	  react.createElement(enhance$2, null),
	  react.createElement(enhance, null),
	  react.createElement(enhance$3, null)
	);

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = _castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[_toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	var _baseGet = baseGet;

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get$8(object, path, defaultValue) {
	  var result = object == null ? undefined : _baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	var get_1 = get$8;

	class Hardware extends react_1 {
	  componentDidMount() {
	    const { trackHardwareInfo: trackHardwareInfo$$1 } = this.props;
	    trackHardwareInfo$$1();
	  }

	  componentWillUnmount() {
	    const { stopTrackingHardwareInfo: stopTrackingHardwareInfo$$1 } = this.props;
	    stopTrackingHardwareInfo$$1();
	  }

	  render() {
	    const { hardwareInfo: { data, isListening } } = this.props;
	    console.log(data, isListening);
	    const gpus = get_1(data, 'Gpus.Gpus') || [];
	    return react.createElement(
	      enhance$6,
	      { title: 'Hardware' },
	      react.createElement(
	        Table$2,
	        null,
	        react.createElement(
	          Table_1$1,
	          null,
	          react.createElement(
	            Table_2$1,
	            null,
	            react.createElement(
	              Table_3,
	              null,
	              'Videocard'
	            ),
	            react.createElement(
	              Table_3,
	              null,
	              gpus.map(gpu => gpu.Name)
	            )
	          )
	        )
	      )
	    );
	  }
	}

	Hardware.propTypes = {
	  hardwareInfo: propTypes.object.isRequired,
	  trackHardwareInfo: propTypes.func.isRequired,
	  stopTrackingHardwareInfo: propTypes.func.isRequired
	};

	const mapStateToProps$5 = ({ hardwareInfo }) => {
	  return {
	    hardwareInfo
	  };
	};

	const mapDispatchToProps$4 = dispatch => {
	  return {
	    trackHardwareInfo: bindActionCreators(trackHardwareInfo, dispatch),
	    stopTrackingHardwareInfo: bindActionCreators(stopTrackingHardwareInfo, dispatch)
	  };
	};

	const enhance$8 = connect(mapStateToProps$5, mapDispatchToProps$4)(Hardware);

	class System extends react_1 {
	  render() {
	    return react.createElement(
	      enhance$6,
	      { title: 'System' },
	      'Language'
	    );
	  }
	}

	const SettingsPage = () => react.createElement(
	  enhance$7,
	  { title: 'Settings' },
	  react.createElement(System, null),
	  react.createElement(enhance$8, null)
	);

	const Discord = () => react.createElement("embed", {
	  height: "100%",
	  width: "100%",
	  src: "https://widgetbot.io/embed/424865108230144013/424865855180898304/0002/"
	});

	const styles$8 = {
	  discord: {
	    height: 'calc(100% - 82px)'
	  }
	};

	const SupportPage = ({ classes }) => react.createElement(
	  enhance$7,
	  { title: 'Support' },
	  react.createElement(
	    'div',
	    { className: classes.discord },
	    react.createElement(Discord, null)
	  )
	);

	SupportPage.propTypes = {
	  classes: propTypes.object.isRequired
	};

	const enhance$9 = styles_3(styles$8)(SupportPage);

	const routes = react.createElement(
	  react_5,
	  null,
	  react.createElement(Redirect, { path: '/', exact: true, to: '/mining' }),
	  react.createElement(Route, { path: '/mining', exact: true, component: MiningPage }),
	  react.createElement(Route, { path: '/settings', exact: true, component: SettingsPage }),
	  react.createElement(Route, { path: '/support', exact: true, component: enhance$9 })
	);

	const history = createHistory$2();
	initialize(history);

	const App = react.createElement(
	  Provider,
	  { store: store },
	  react.createElement(
	    PersistGate,
	    { loading: null, persistor: persistor },
	    react.createElement(
	      Router,
	      { history: history },
	      react.createElement(
	        styles_1,
	        { theme: light },
	        react.createElement(CssBaseline$2, null),
	        react.createElement(
	          enhance$5,
	          { title: 'Raccoon Miner', links: links },
	          routes
	        )
	      )
	    )
	  )
	);

	reactDom.render(App, document.getElementById('root'));

	(async () => {
	  const simpleIoPlugin = await getSimpleIoPlugin();

	  simpleIoPlugin.onFileListenerChanged.addListener(fileIdentifier => {
	    if (LISTEN_TO_FILES.includes(fileIdentifier)) {
	      setTimeout(() => {
	        location.reload();
	      }, 100);
	    }
	  });

	  const skipToEndOfFile = true;
	  LISTEN_TO_FILES.forEach(fileName => {
	    const path = `${APP_PATH}/${fileName}`;
	    simpleIoPlugin.listenOnFile(fileName, path, skipToEndOfFile, () => {});
	  });

	  console.info('%cHot reload is active', 'color: blue');
	})();

}());
//# sourceMappingURL=main.js.map
